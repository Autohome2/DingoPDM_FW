
DingoPDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000163b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08016544  08016544  00026544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016cf8  08016cf8  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08016cf8  08016cf8  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016cf8  08016cf8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016cf8  08016cf8  00026cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016cfc  08016cfc  00026cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08016d00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005128  200001e4  08016ee4  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000530c  08016ee4  0003530c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032d6c  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070bb  00000000  00000000  00062f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026e8  00000000  00000000  0006a040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002360  00000000  00000000  0006c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fc4  00000000  00000000  0006ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037805  00000000  00000000  00098a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daf8c  00000000  00000000  000d0251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ab1dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7e0  00000000  00000000  001ab230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801652c 	.word	0x0801652c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0801652c 	.word	0x0801652c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <EvaluateCANInput>:
 */

#include "can_input.h"

uint8_t EvaluateCANInput(CAN_RxHeaderTypeDef* stRxHeader, uint8_t nRxData[8], PdmConfig_CanInput_t *in, uint16_t* nResult)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	603b      	str	r3, [r7, #0]
  if(!in->nEnabled)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <EvaluateCANInput+0x1a>
    return 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e0a6      	b.n	8000b14 <EvaluateCANInput+0x168>
  if(stRxHeader->StdId != in->nId)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	8852      	ldrh	r2, [r2, #2]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d001      	beq.n	80009d6 <EvaluateCANInput+0x2a>
    return 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e09e      	b.n	8000b14 <EvaluateCANInput+0x168>

  uint16_t nSelected;

  //8 bit
  if(in->nHighByte == 0)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	88db      	ldrh	r3, [r3, #6]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d107      	bne.n	80009ee <EvaluateCANInput+0x42>
  {
    nSelected = nRxData[in->nLowByte];
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	889b      	ldrh	r3, [r3, #4]
 80009e2:	461a      	mov	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4413      	add	r3, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	82fb      	strh	r3, [r7, #22]
 80009ec:	e011      	b.n	8000a12 <EvaluateCANInput+0x66>
  }
  else
  {
    nSelected = (nRxData[in->nHighByte] << 8) + nRxData[in->nLowByte];
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	88db      	ldrh	r3, [r3, #6]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	021b      	lsls	r3, r3, #8
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	4619      	mov	r1, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	440b      	add	r3, r1
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4413      	add	r3, r2
 8000a10:	82fb      	strh	r3, [r7, #22]
  }

  switch(in->eOperator)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7a1b      	ldrb	r3, [r3, #8]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d87b      	bhi.n	8000b12 <EvaluateCANInput+0x166>
 8000a1a:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <EvaluateCANInput+0x74>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a35 	.word	0x08000a35
 8000a24:	08000a43 	.word	0x08000a43
 8000a28:	08000a5d 	.word	0x08000a5d
 8000a2c:	08000a77 	.word	0x08000a77
 8000a30:	08000abd 	.word	0x08000abd
  {
  case OPER_EQUAL:
    *nResult = nSelected & 0xFF;
 8000a34:	8afb      	ldrh	r3, [r7, #22]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	801a      	strh	r2, [r3, #0]
    return 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e068      	b.n	8000b14 <EvaluateCANInput+0x168>

  case OPER_GREATER_THAN:
    *nResult = nSelected > in->nOnVal;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	895b      	ldrh	r3, [r3, #10]
 8000a46:	8afa      	ldrh	r2, [r7, #22]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	bf8c      	ite	hi
 8000a4c:	2301      	movhi	r3, #1
 8000a4e:	2300      	movls	r3, #0
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	801a      	strh	r2, [r3, #0]
    return 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e05b      	b.n	8000b14 <EvaluateCANInput+0x168>

  case OPER_LESS_THAN:
    *nResult = nSelected < in->nOnVal;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	895b      	ldrh	r3, [r3, #10]
 8000a60:	8afa      	ldrh	r2, [r7, #22]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	bf34      	ite	cc
 8000a66:	2301      	movcc	r3, #1
 8000a68:	2300      	movcs	r3, #0
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	801a      	strh	r2, [r3, #0]
    return 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e04e      	b.n	8000b14 <EvaluateCANInput+0x168>

  case OPER_BITWISE_AND:
    if (in->eMode == MODE_NUM)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	7b1b      	ldrb	r3, [r3, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <EvaluateCANInput+0xe2>
      *nResult = (nSelected & in->nOnVal);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	895a      	ldrh	r2, [r3, #10]
 8000a82:	8afb      	ldrh	r3, [r7, #22]
 8000a84:	4013      	ands	r3, r2
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	801a      	strh	r2, [r3, #0]
 8000a8c:	e014      	b.n	8000ab8 <EvaluateCANInput+0x10c>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, ((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f103 0010 	add.w	r0, r3, #16
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7b19      	ldrb	r1, [r3, #12]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	895a      	ldrh	r2, [r3, #10]
 8000a9c:	8afb      	ldrh	r3, [r7, #22]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bf14      	ite	ne
 8000aa6:	2301      	movne	r3, #1
 8000aa8:	2300      	moveq	r3, #0
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	f007 f802 	bl	8007abc <CheckPushbutton>
    return 1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e02b      	b.n	8000b14 <EvaluateCANInput+0x168>

  case OPER_BITWISE_NAND:
    if (in->eMode == MODE_NUM)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7b1b      	ldrb	r3, [r3, #12]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10f      	bne.n	8000ae4 <EvaluateCANInput+0x138>
      *nResult = (nSelected & !in->nOnVal);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	895b      	ldrh	r3, [r3, #10]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf0c      	ite	eq
 8000acc:	2301      	moveq	r3, #1
 8000ace:	2300      	movne	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	801a      	strh	r2, [r3, #0]
 8000ae2:	e014      	b.n	8000b0e <EvaluateCANInput+0x162>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, !((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f103 0010 	add.w	r0, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7b19      	ldrb	r1, [r3, #12]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	895a      	ldrh	r2, [r3, #10]
 8000af2:	8afb      	ldrh	r3, [r7, #22]
 8000af4:	4013      	ands	r3, r2
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf0c      	ite	eq
 8000afc:	2301      	moveq	r3, #1
 8000afe:	2300      	movne	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	2300      	movs	r3, #0
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	f006 ffd7 	bl	8007abc <CheckPushbutton>
    return 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <EvaluateCANInput+0x168>
  }

  return 0;
 8000b12:	2300      	movs	r3, #0

}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b28:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d013      	beq.n	8000b5c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b38:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b3c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00b      	beq.n	8000b5c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b44:	e000      	b.n	8000b48 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b46:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f9      	beq.n	8000b46 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b52:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <USBD_CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUSBD, USBD_TxBuffer, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	4905      	ldr	r1, [pc, #20]	; (8000b88 <USBD_CDC_Init+0x1c>)
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <USBD_CDC_Init+0x20>)
 8000b76:	f010 fc00 	bl	801137a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUSBD, USBD_RxBuffer);
 8000b7a:	4905      	ldr	r1, [pc, #20]	; (8000b90 <USBD_CDC_Init+0x24>)
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <USBD_CDC_Init+0x20>)
 8000b7e:	f010 fc16 	bl	80113ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200018a0 	.word	0x200018a0
 8000b8c:	200020a0 	.word	0x200020a0
 8000b90:	200010a0 	.word	0x200010a0

08000b94 <USBD_CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_DeInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <USBD_CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Control(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	80bb      	strh	r3, [r7, #4]
  switch(cmd)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b23      	cmp	r3, #35	; 0x23
 8000bb8:	d866      	bhi.n	8000c88 <USBD_CDC_Control+0xe4>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <USBD_CDC_Control+0x1c>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000c89 	.word	0x08000c89
 8000bc4:	08000c89 	.word	0x08000c89
 8000bc8:	08000c89 	.word	0x08000c89
 8000bcc:	08000c89 	.word	0x08000c89
 8000bd0:	08000c89 	.word	0x08000c89
 8000bd4:	08000c89 	.word	0x08000c89
 8000bd8:	08000c89 	.word	0x08000c89
 8000bdc:	08000c89 	.word	0x08000c89
 8000be0:	08000c89 	.word	0x08000c89
 8000be4:	08000c89 	.word	0x08000c89
 8000be8:	08000c89 	.word	0x08000c89
 8000bec:	08000c89 	.word	0x08000c89
 8000bf0:	08000c89 	.word	0x08000c89
 8000bf4:	08000c89 	.word	0x08000c89
 8000bf8:	08000c89 	.word	0x08000c89
 8000bfc:	08000c89 	.word	0x08000c89
 8000c00:	08000c89 	.word	0x08000c89
 8000c04:	08000c89 	.word	0x08000c89
 8000c08:	08000c89 	.word	0x08000c89
 8000c0c:	08000c89 	.word	0x08000c89
 8000c10:	08000c89 	.word	0x08000c89
 8000c14:	08000c89 	.word	0x08000c89
 8000c18:	08000c89 	.word	0x08000c89
 8000c1c:	08000c89 	.word	0x08000c89
 8000c20:	08000c89 	.word	0x08000c89
 8000c24:	08000c89 	.word	0x08000c89
 8000c28:	08000c89 	.word	0x08000c89
 8000c2c:	08000c89 	.word	0x08000c89
 8000c30:	08000c89 	.word	0x08000c89
 8000c34:	08000c89 	.word	0x08000c89
 8000c38:	08000c89 	.word	0x08000c89
 8000c3c:	08000c89 	.word	0x08000c89
 8000c40:	08000c89 	.word	0x08000c89
 8000c44:	08000c51 	.word	0x08000c51
 8000c48:	08000c89 	.word	0x08000c89
 8000c4c:	08000c89 	.word	0x08000c89
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(115200);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(115200 >> 8);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	22c2      	movs	r2, #194	; 0xc2
 8000c5c:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(115200 >> 16);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	3302      	adds	r3, #2
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(115200 >> 24);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	3303      	adds	r3, #3
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0; //Stop bits (1)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0; //Parity (none)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	3305      	adds	r3, #5
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8; //Number of bits (8)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	3306      	adds	r3, #6
 8000c82:	2208      	movs	r2, #8
 8000c84:	701a      	strb	r2, [r3, #0]
    break;
 8000c86:	e000      	b.n	8000c8a <USBD_CDC_Control+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000c88:	bf00      	nop
  }

  return (USBD_OK);
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <USBD_CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Receive(uint8_t* Buf, uint32_t *Len)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b090      	sub	sp, #64	; 0x40
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = USB_RX;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	733b      	strb	r3, [r7, #12]
  stMsg.nCRC = 0xFFFFFFFF;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	63bb      	str	r3, [r7, #56]	; 0x38
  stMsg.nRxLen = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000cb8:	e019      	b.n	8000cee <USBD_CDC_Receive+0x56>
    if(i < 8){
 8000cba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	d810      	bhi.n	8000ce4 <USBD_CDC_Receive+0x4c>
      stMsg.nRxData[i] = Buf[i];
 8000cc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	441a      	add	r2, r3
 8000cca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	3340      	adds	r3, #64	; 0x40
 8000cd2:	443b      	add	r3, r7
 8000cd4:	f803 2c14 	strb.w	r2, [r3, #-20]
      stMsg.nRxLen++;
 8000cd8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000cdc:	3301      	adds	r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 8000ce4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ce8:	3301      	adds	r3, #1
 8000cea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000cee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d3df      	bcc.n	8000cba <USBD_CDC_Receive+0x22>
    }
  }

  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <USBD_CDC_Receive+0x8c>)
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	f107 010c 	add.w	r1, r7, #12
 8000d02:	2300      	movs	r3, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	f011 fe27 	bl	8012958 <osMessageQueuePut>

  USBD_CDC_SetRxBuffer(&hUSBD, &Buf[0]);
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <USBD_CDC_Receive+0x90>)
 8000d0e:	f010 fb4e 	bl	80113ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUSBD);
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <USBD_CDC_Receive+0x90>)
 8000d14:	f010 fb8e 	bl	8011434 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3740      	adds	r7, #64	; 0x40
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000adc 	.word	0x20000adc
 8000d28:	200020a0 	.word	0x200020a0

08000d2c <USBD_CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t USBD_CDC_Transmit(uint8_t* Buf, uint16_t Len)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUSBD.pClassData;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <USBD_CDC_Transmit+0x48>)
 8000d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000d42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <USBD_CDC_Transmit+0x26>
    return USBD_BUSY;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00b      	b.n	8000d6a <USBD_CDC_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUSBD, Buf, Len);
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	461a      	mov	r2, r3
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <USBD_CDC_Transmit+0x48>)
 8000d5a:	f010 fb0e 	bl	801137a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUSBD);
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <USBD_CDC_Transmit+0x48>)
 8000d60:	f010 fb39 	bl	80113d6 <USBD_CDC_TransmitPacket>
 8000d64:	4603      	mov	r3, r0
 8000d66:	73fb      	strb	r3, [r7, #15]
  return result;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200020a0 	.word	0x200020a0

08000d78 <HAL_CAN_RxFifo0MsgPendingCallback>:

//========================================================================
// CAN Receive Callback
//========================================================================
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &stCanRxHeader, nCanRxData) != HAL_OK)
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000d82:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000d84:	2100      	movs	r1, #0
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f008 fa50 	bl	800922c <HAL_CAN_GetRxMessage>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000d92:	f002 fd61 	bl	8003858 <Error_Handler>
  }

  //Store latest receive time
  //Use to determine connection status
  nLastCanUpdate = HAL_GetTick();
 8000d96:	f006 ff31 	bl	8007bfc <HAL_GetTick>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000d9e:	6013      	str	r3, [r2, #0]

  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = CAN_RX;
 8000da0:	2300      	movs	r3, #0
 8000da2:	723b      	strb	r3, [r7, #8]
  stMsg.nRxLen = (uint8_t)stCanRxHeader.DLC;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  memcpy(&stMsg.stCanRxHeader, &stCanRxHeader, sizeof(stCanRxHeader));
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000db0:	f107 040c 	add.w	r4, r7, #12
 8000db4:	461d      	mov	r5, r3
 8000db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  memcpy(&stMsg.nRxData, &nCanRxData, sizeof(nCanRxData));
 8000dc2:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dcc:	e883 0003 	stmia.w	r3, {r0, r1}
  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	f107 0108 	add.w	r1, r7, #8
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f011 fdbc 	bl	8012958 <osMessageQueuePut>

}
 8000de0:	bf00      	nop
 8000de2:	3738      	adds	r7, #56	; 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	20000e28 	.word	0x20000e28
 8000dec:	20000e04 	.word	0x20000e04
 8000df0:	20000e34 	.word	0x20000e34
 8000df4:	20000adc 	.word	0x20000adc

08000df8 <PdmMainTask>:
//========================================================================
//========================================================================
// MAIN
//========================================================================
//========================================================================
void PdmMainTask(osThreadId_t* thisThreadId, ADC_HandleTypeDef* hadc1, ADC_HandleTypeDef* hadc4, RTC_HandleTypeDef* hrtc, CRC_HandleTypeDef* hcrc){
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]

  HAL_ADC_Start_DMA(hadc1, (uint32_t*) nAdc1Data, ADC_1_COUNT);
 8000e06:	2201      	movs	r2, #1
 8000e08:	4997      	ldr	r1, [pc, #604]	; (8001068 <PdmMainTask+0x270>)
 8000e0a:	68b8      	ldr	r0, [r7, #8]
 8000e0c:	f007 f900 	bl	8008010 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(hadc4, (uint32_t*) nAdc4Data, ADC_4_COUNT);
 8000e10:	2201      	movs	r2, #1
 8000e12:	4996      	ldr	r1, [pc, #600]	; (800106c <PdmMainTask+0x274>)
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f007 f8fb 	bl	8008010 <HAL_ADC_Start_DMA>

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUSBD, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4994      	ldr	r1, [pc, #592]	; (8001070 <PdmMainTask+0x278>)
 8000e1e:	4895      	ldr	r0, [pc, #596]	; (8001074 <PdmMainTask+0x27c>)
 8000e20:	f010 fb32 	bl	8011488 <USBD_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <PdmMainTask+0x36>
  {
    Error_Handler();
 8000e2a:	f002 fd15 	bl	8003858 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUSBD, &USBD_CDC) != USBD_OK)
 8000e2e:	4992      	ldr	r1, [pc, #584]	; (8001078 <PdmMainTask+0x280>)
 8000e30:	4890      	ldr	r0, [pc, #576]	; (8001074 <PdmMainTask+0x27c>)
 8000e32:	f010 fb54 	bl	80114de <USBD_RegisterClass>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <PdmMainTask+0x48>
  {
    Error_Handler();
 8000e3c:	f002 fd0c 	bl	8003858 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUSBD, &USBD_Interface_PDM) != USBD_OK)
 8000e40:	498e      	ldr	r1, [pc, #568]	; (800107c <PdmMainTask+0x284>)
 8000e42:	488c      	ldr	r0, [pc, #560]	; (8001074 <PdmMainTask+0x27c>)
 8000e44:	f010 fa82 	bl	801134c <USBD_CDC_RegisterInterface>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <PdmMainTask+0x5a>
  {
    Error_Handler();
 8000e4e:	f002 fd03 	bl	8003858 <Error_Handler>
  }
  if (USBD_Start(&hUSBD) != USBD_OK)
 8000e52:	4888      	ldr	r0, [pc, #544]	; (8001074 <PdmMainTask+0x27c>)
 8000e54:	f010 fb5d 	bl	8011512 <USBD_Start>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <PdmMainTask+0x6a>
  {
    Error_Handler();
 8000e5e:	f002 fcfb 	bl	8003858 <Error_Handler>

    //=====================================================================================================
    // Standby
    //=====================================================================================================
    /* Check if the system was resumed from Standby mode */
    if ((__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) ||
 8000e62:	4b87      	ldr	r3, [pc, #540]	; (8001080 <PdmMainTask+0x288>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d005      	beq.n	8000e7a <PdmMainTask+0x82>
        (__HAL_PWR_GET_FLAG(PWR_FLAG_WU) != RESET))
 8000e6e:	4b84      	ldr	r3, [pc, #528]	; (8001080 <PdmMainTask+0x288>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0301 	and.w	r3, r3, #1
    if ((__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) ||
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d112      	bne.n	8000ea0 <PdmMainTask+0xa8>
    {
      /* Clear Standby flag */
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000e7a:	4b81      	ldr	r3, [pc, #516]	; (8001080 <PdmMainTask+0x288>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a80      	ldr	r2, [pc, #512]	; (8001080 <PdmMainTask+0x288>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6013      	str	r3, [r2, #0]
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000e86:	4b7e      	ldr	r3, [pc, #504]	; (8001080 <PdmMainTask+0x288>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a7d      	ldr	r2, [pc, #500]	; (8001080 <PdmMainTask+0x288>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6013      	str	r3, [r2, #0]

      HAL_GPIO_WritePin(EXTRA3_GPIO_Port, EXTRA3_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9c:	f009 fa28 	bl	800a2f0 <HAL_GPIO_WritePin>
    }


    //Check standby pin
    //If no voltage - enter standby
    if(!(STANDBY_GPIO_Port->IDR & STANDBY_Pin)){
 8000ea0:	4b78      	ldr	r3, [pc, #480]	; (8001084 <PdmMainTask+0x28c>)
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d117      	bne.n	8000edc <PdmMainTask+0xe4>

      HAL_GPIO_WritePin(EXTRA3_GPIO_Port, EXTRA3_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f009 fa1b 	bl	800a2f0 <HAL_GPIO_WritePin>

      HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2); //PC13
 8000eba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ebe:	f00b fc57 	bl	800c770 <HAL_PWR_DisableWakeUpPin>

      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000ec2:	4b6f      	ldr	r3, [pc, #444]	; (8001080 <PdmMainTask+0x288>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a6e      	ldr	r2, [pc, #440]	; (8001080 <PdmMainTask+0x288>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6013      	str	r3, [r2, #0]

      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2); //PC13
 8000ece:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ed2:	f00b fc3b 	bl	800c74c <HAL_PWR_EnableWakeUpPin>

      HAL_PWR_EnterSTANDBYMode();
 8000ed6:	f00b fc5f 	bl	800c798 <HAL_PWR_EnterSTANDBYMode>
 8000eda:	e003      	b.n	8000ee4 <PdmMainTask+0xec>
    }
    else
    {
      HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2); //PC13
 8000edc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ee0:	f00b fc46 	bl	800c770 <HAL_PWR_DisableWakeUpPin>
    //=====================================================================================================
    // ADC channels
    // ADC1 = Vbat and device temperature
    // ADC4 = Battery sense
    //=====================================================================================================
    nBattSense = (uint16_t)(((float)nAdc4Data[0]) * 0.0519 - 11.3);
 8000ee4:	4b61      	ldr	r3, [pc, #388]	; (800106c <PdmMainTask+0x274>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef2:	ee17 0a90 	vmov	r0, s15
 8000ef6:	f7ff facf 	bl	8000498 <__aeabi_f2d>
 8000efa:	a357      	add	r3, pc, #348	; (adr r3, 8001058 <PdmMainTask+0x260>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	f7ff fb22 	bl	8000548 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	a354      	add	r3, pc, #336	; (adr r3, 8001060 <PdmMainTask+0x268>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff f961 	bl	80001d8 <__aeabi_dsub>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f7ff fd25 	bl	800096c <__aeabi_d2uiz>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b58      	ldr	r3, [pc, #352]	; (8001088 <PdmMainTask+0x290>)
 8000f28:	801a      	strh	r2, [r3, #0]
    nStmTemp = (uint16_t)(80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8000f2a:	4b58      	ldr	r3, [pc, #352]	; (800108c <PdmMainTask+0x294>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f36:	4b56      	ldr	r3, [pc, #344]	; (8001090 <PdmMainTask+0x298>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f46:	ee17 0a90 	vmov	r0, s15
 8000f4a:	f7ff faa5 	bl	8000498 <__aeabi_f2d>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	494f      	ldr	r1, [pc, #316]	; (8001094 <PdmMainTask+0x29c>)
 8000f58:	f7ff fc20 	bl	800079c <__aeabi_ddiv>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4614      	mov	r4, r2
 8000f62:	461d      	mov	r5, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0);
 8000f64:	4b40      	ldr	r3, [pc, #256]	; (8001068 <PdmMainTask+0x270>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f72:	4b47      	ldr	r3, [pc, #284]	; (8001090 <PdmMainTask+0x298>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f82:	ee17 0a90 	vmov	r0, s15
 8000f86:	f7ff fa87 	bl	8000498 <__aeabi_f2d>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)(80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8000f8e:	4620      	mov	r0, r4
 8000f90:	4629      	mov	r1, r5
 8000f92:	f7ff fad9 	bl	8000548 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0);
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <PdmMainTask+0x2a0>)
 8000fa4:	f7ff f91a 	bl	80001dc <__adddf3>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)(80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fcdc 	bl	800096c <__aeabi_d2uiz>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <PdmMainTask+0x2a4>)
 8000fba:	801a      	strh	r2, [r3, #0]

    //=====================================================================================================
    // CANBoard check connection
    //=====================================================================================================
    CANBoardCheckConnection(&stCANBoard_RX);
 8000fbc:	4838      	ldr	r0, [pc, #224]	; (80010a0 <PdmMainTask+0x2a8>)
 8000fbe:	f005 fec7 	bl	8006d50 <CANBoardCheckConnection>

    //=====================================================================================================
    // USB Connection
    //=====================================================================================================
    if( (USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && !bUsbConnected){
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <PdmMainTask+0x2ac>)
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00f      	beq.n	8000fee <PdmMainTask+0x1f6>
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <PdmMainTask+0x2b0>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d008      	beq.n	8000fee <PdmMainTask+0x1f6>
      //USB_PULLUP_GPIO_Port->ODR |= USB_PULLUP_Pin;
      HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe2:	4830      	ldr	r0, [pc, #192]	; (80010a4 <PdmMainTask+0x2ac>)
 8000fe4:	f009 f984 	bl	800a2f0 <HAL_GPIO_WritePin>
      bUsbConnected = true;
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <PdmMainTask+0x2b0>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
    }

    if( !(USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && bUsbConnected){
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <PdmMainTask+0x2ac>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10c      	bne.n	8001014 <PdmMainTask+0x21c>
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <PdmMainTask+0x2b0>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d008      	beq.n	8001014 <PdmMainTask+0x21c>
      //USB_PULLUP_GPIO_Port->ODR &= ~USB_PULLUP_Pin;
      HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001008:	4826      	ldr	r0, [pc, #152]	; (80010a4 <PdmMainTask+0x2ac>)
 800100a:	f009 f971 	bl	800a2f0 <HAL_GPIO_WritePin>
      bUsbConnected = false;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <PdmMainTask+0x2b0>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
    }

    nILTotal = 0;
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <PdmMainTask+0x2b4>)
 8001016:	2200      	movs	r2, #0
 8001018:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<PDM_NUM_OUTPUTS;i++)
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	e013      	b.n	8001048 <PdmMainTask+0x250>
      nILTotal += pf[i].nIL;
 8001020:	4923      	ldr	r1, [pc, #140]	; (80010b0 <PdmMainTask+0x2b8>)
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	3320      	adds	r3, #32
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <PdmMainTask+0x2b4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	4413      	add	r3, r2
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <PdmMainTask+0x2b4>)
 8001040:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<PDM_NUM_OUTPUTS;i++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	2b0b      	cmp	r3, #11
 800104c:	dde8      	ble.n	8001020 <PdmMainTask+0x228>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(MAIN_TASK_DELAY);
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f011 fbce 	bl	80127f0 <osDelay>
    if ((__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) ||
 8001054:	e705      	b.n	8000e62 <PdmMainTask+0x6a>
 8001056:	bf00      	nop
 8001058:	05532618 	.word	0x05532618
 800105c:	3faa92a3 	.word	0x3faa92a3
 8001060:	9999999a 	.word	0x9999999a
 8001064:	40269999 	.word	0x40269999
 8001068:	20000dc4 	.word	0x20000dc4
 800106c:	20000dc8 	.word	0x20000dc8
 8001070:	20000130 	.word	0x20000130
 8001074:	200020a0 	.word	0x200020a0
 8001078:	20000028 	.word	0x20000028
 800107c:	20000000 	.word	0x20000000
 8001080:	40007000 	.word	0x40007000
 8001084:	48000800 	.word	0x48000800
 8001088:	20000dca 	.word	0x20000dca
 800108c:	1ffff7c2 	.word	0x1ffff7c2
 8001090:	1ffff7b8 	.word	0x1ffff7b8
 8001094:	40540000 	.word	0x40540000
 8001098:	403e0000 	.word	0x403e0000
 800109c:	20000dcc 	.word	0x20000dcc
 80010a0:	20000e38 	.word	0x20000e38
 80010a4:	48000400 	.word	0x48000400
 80010a8:	20000dc0 	.word	0x20000dc0
 80010ac:	20000d8c 	.word	0x20000d8c
 80010b0:	20000aec 	.word	0x20000aec

080010b4 <InputLogic>:
    //Debug GPIO
    //EXTRA3_GPIO_Port->ODR ^= EXTRA3_Pin;
  }
}

void InputLogic(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e012      	b.n	80010e6 <InputLogic+0x32>
    EvaluateInput(&stPdmConfig.stInput[i], &nPdmInputs[i]);
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	3308      	adds	r3, #8
 80010cc:	4a4a      	ldr	r2, [pc, #296]	; (80011f8 <InputLogic+0x144>)
 80010ce:	441a      	add	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4949      	ldr	r1, [pc, #292]	; (80011fc <InputLogic+0x148>)
 80010d6:	440b      	add	r3, r1
 80010d8:	4619      	mov	r1, r3
 80010da:	4610      	mov	r0, r2
 80010dc:	f005 f8d7 	bl	800628e <EvaluateInput>
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	dde9      	ble.n	80010c0 <InputLogic+0xc>

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	e012      	b.n	8001118 <InputLogic+0x64>
    EvaluateVirtInput(&stPdmConfig.stVirtualInput[i], &nVirtInputs[i]);
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	33e8      	adds	r3, #232	; 0xe8
 80010fe:	4a3e      	ldr	r2, [pc, #248]	; (80011f8 <InputLogic+0x144>)
 8001100:	441a      	add	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	493e      	ldr	r1, [pc, #248]	; (8001200 <InputLogic+0x14c>)
 8001108:	440b      	add	r3, r1
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f005 fc6b 	bl	80069e8 <EvaluateVirtInput>
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	3301      	adds	r3, #1
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2b13      	cmp	r3, #19
 800111c:	dde9      	ble.n	80010f2 <InputLogic+0x3e>

  //Map profet state to integer for use as virtual input pointer
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	e020      	b.n	8001166 <InputLogic+0xb2>
    nOutputs[i] = pf[i].eState == ON;
 8001124:	4937      	ldr	r1, [pc, #220]	; (8001204 <InputLogic+0x150>)
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4613      	mov	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	440b      	add	r3, r1
 8001132:	3301      	adds	r3, #1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	bf0c      	ite	eq
 800113c:	2301      	moveq	r3, #1
 800113e:	2300      	movne	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	b299      	uxth	r1, r3
 8001144:	4a30      	ldr	r2, [pc, #192]	; (8001208 <InputLogic+0x154>)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    EvaluateStarter(&stPdmConfig.stStarter, i, &nStarterDisable[i]);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	b2d9      	uxtb	r1, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4a2d      	ldr	r2, [pc, #180]	; (800120c <InputLogic+0x158>)
 8001156:	4413      	add	r3, r2
 8001158:	461a      	mov	r2, r3
 800115a:	482d      	ldr	r0, [pc, #180]	; (8001210 <InputLogic+0x15c>)
 800115c:	f005 f8bd 	bl	80062da <EvaluateStarter>
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3301      	adds	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b0b      	cmp	r3, #11
 800116a:	dddb      	ble.n	8001124 <InputLogic+0x70>
  }

  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	e023      	b.n	80011ba <InputLogic+0x106>
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <InputLogic+0x144>)
 8001174:	f893 3525 	ldrb.w	r3, [r3, #1317]	; 0x525
 8001178:	461a      	mov	r2, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	4293      	cmp	r3, r2
 800117e:	d019      	beq.n	80011b4 <InputLogic+0x100>
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <InputLogic+0x144>)
 8001182:	f893 353d 	ldrb.w	r3, [r3, #1341]	; 0x53d
 8001186:	461a      	mov	r2, r3
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4293      	cmp	r3, r2
 800118c:	d012      	beq.n	80011b4 <InputLogic+0x100>
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <InputLogic+0x144>)
 8001190:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 8001194:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	4293      	cmp	r3, r2
 800119a:	d00b      	beq.n	80011b4 <InputLogic+0x100>
          (stPdmConfig.stFlasher[3].nOutput != i))
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <InputLogic+0x144>)
 800119e:	f893 356d 	ldrb.w	r3, [r3, #1389]	; 0x56d
 80011a2:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d004      	beq.n	80011b4 <InputLogic+0x100>
        nOutputFlasher[i] = 1;
 80011aa:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <InputLogic+0x160>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2101      	movs	r1, #1
 80011b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b0b      	cmp	r3, #11
 80011be:	ddd8      	ble.n	8001172 <InputLogic+0xbe>
  }
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	e00f      	b.n	80011e6 <InputLogic+0x132>
    EvaluateFlasher(&stPdmConfig.stFlasher[i], nOutputFlasher);
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <InputLogic+0x144>)
 80011d6:	4413      	add	r3, r2
 80011d8:	490e      	ldr	r1, [pc, #56]	; (8001214 <InputLogic+0x160>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fe4e 	bl	8002e7c <EvaluateFlasher>
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3301      	adds	r3, #1
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	ddec      	ble.n	80011c6 <InputLogic+0x112>
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000200 	.word	0x20000200
 80011fc:	20000fe0 	.word	0x20000fe0
 8001200:	2000102c 	.word	0x2000102c
 8001204:	20000aec 	.word	0x20000aec
 8001208:	20001054 	.word	0x20001054
 800120c:	2000106c 	.word	0x2000106c
 8001210:	20000778 	.word	0x20000778
 8001214:	20001084 	.word	0x20001084

08001218 <OutputLogic>:

void OutputLogic(){
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  //Copy output logic to profet requested state
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	e03f      	b.n	80012a4 <OutputLogic+0x8c>
  {
    if(eDevMode == DEVICE_AUTO){
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <OutputLogic+0xa0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d126      	bne.n	800127a <OutputLogic+0x62>
      pf[i].eReqState = (ProfetStateTypeDef)(*stPdmConfig.stOutput[i].pInput && nStarterDisable[i] && nOutputFlasher[i]);
 800122c:	4923      	ldr	r1, [pc, #140]	; (80012bc <OutputLogic+0xa4>)
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00d      	beq.n	8001262 <OutputLogic+0x4a>
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <OutputLogic+0xa8>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <OutputLogic+0x4a>
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <OutputLogic+0xac>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <OutputLogic+0x4a>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <OutputLogic+0x4c>
 8001262:	2300      	movs	r3, #0
 8001264:	b2d8      	uxtb	r0, r3
 8001266:	4918      	ldr	r1, [pc, #96]	; (80012c8 <OutputLogic+0xb0>)
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	3302      	adds	r3, #2
 8001276:	4602      	mov	r2, r0
 8001278:	701a      	strb	r2, [r3, #0]
    }
    if(eDevMode == DEVICE_MANUAL){
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <OutputLogic+0xa0>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10d      	bne.n	800129e <OutputLogic+0x86>
      pf[i].eReqState = (ProfetStateTypeDef)nManualOutputs[i];
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <OutputLogic+0xb4>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	7818      	ldrb	r0, [r3, #0]
 800128a:	490f      	ldr	r1, [pc, #60]	; (80012c8 <OutputLogic+0xb0>)
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	1a9b      	subs	r3, r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	3302      	adds	r3, #2
 800129a:	4602      	mov	r2, r0
 800129c:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3301      	adds	r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b0b      	cmp	r3, #11
 80012a8:	ddbc      	ble.n	8001224 <OutputLogic+0xc>
    }
  }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	20000ae8 	.word	0x20000ae8
 80012bc:	20000200 	.word	0x20000200
 80012c0:	2000106c 	.word	0x2000106c
 80012c4:	20001084 	.word	0x20001084
 80012c8:	20000aec 	.word	0x20000aec
 80012cc:	20002364 	.word	0x20002364

080012d0 <I2CTask>:

void I2CTask(osThreadId_t* thisThreadId, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  //=====================================================================================================
  // MCP9808 Temperature Sensor Configuration
  //=====================================================================================================
  if(MCP9808_Init(hi2c1, MCP9808_ADDRESS) != MCP9808_OK)
 80012dc:	2118      	movs	r1, #24
 80012de:	68b8      	ldr	r0, [r7, #8]
 80012e0:	f005 fd60 	bl	8006da4 <MCP9808_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d002      	beq.n	80012f0 <I2CTask+0x20>
    printf("MCP9808 Init FAIL\n");
 80012ea:	48a5      	ldr	r0, [pc, #660]	; (8001580 <I2CTask+0x2b0>)
 80012ec:	f014 fc8e 	bl	8015c0c <puts>

  MCP9808_SetResolution(hi2c1, MCP9808_ADDRESS, MCP9808_RESOLUTION_0_5DEG);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2118      	movs	r1, #24
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f005 fdbd 	bl	8006e74 <MCP9808_SetResolution>

  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_UPPER_TEMP, BOARD_TEMP_MAX) != MCP9808_OK)
 80012fa:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8001584 <I2CTask+0x2b4>
 80012fe:	2202      	movs	r2, #2
 8001300:	2118      	movs	r1, #24
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f005 fdca 	bl	8006e9c <MCP9808_SetLimit>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d002      	beq.n	8001314 <I2CTask+0x44>
    printf("MCP9808 Set Upper Limit Failed\n");
 800130e:	489e      	ldr	r0, [pc, #632]	; (8001588 <I2CTask+0x2b8>)
 8001310:	f014 fc7c 	bl	8015c0c <puts>
  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_LOWER_TEMP, BOARD_TEMP_MIN) != MCP9808_OK)
 8001314:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800158c <I2CTask+0x2bc>
 8001318:	2203      	movs	r2, #3
 800131a:	2118      	movs	r1, #24
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f005 fdbd 	bl	8006e9c <MCP9808_SetLimit>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d002      	beq.n	800132e <I2CTask+0x5e>
    printf("MCP9808 Set Lower Limit Failed\n");
 8001328:	4899      	ldr	r0, [pc, #612]	; (8001590 <I2CTask+0x2c0>)
 800132a:	f014 fc6f 	bl	8015c0c <puts>
  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_CRIT_TEMP, BOARD_TEMP_CRIT) != MCP9808_OK)
 800132e:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8001594 <I2CTask+0x2c4>
 8001332:	2204      	movs	r2, #4
 8001334:	2118      	movs	r1, #24
 8001336:	68b8      	ldr	r0, [r7, #8]
 8001338:	f005 fdb0 	bl	8006e9c <MCP9808_SetLimit>
 800133c:	4603      	mov	r3, r0
 800133e:	2b01      	cmp	r3, #1
 8001340:	d002      	beq.n	8001348 <I2CTask+0x78>
    printf("MCP9808 Set Critical Limit Failed\n");
 8001342:	4895      	ldr	r0, [pc, #596]	; (8001598 <I2CTask+0x2c8>)
 8001344:	f014 fc62 	bl	8015c0c <puts>
  //Setup configuration
  //Enable alert pin
  //Lock Tupper/Tlower window settings
  //Lock Tcrit settings
  //Set Tupper/Tlower hysteresis to +1.5 deg C
  MCP9808_Write16(hi2c1, MCP9808_ADDRESS, MCP9808_REG_CONFIG, (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_WINLOCKED | MCP9808_REG_CONFIG_CRITLOCKED | MCP9808_REG_CONFIG_HYST_1_5));
 8001348:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 800134c:	2201      	movs	r2, #1
 800134e:	2118      	movs	r1, #24
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	f005 fe5b 	bl	800700c <MCP9808_Write16>

  //=====================================================================================================
  // PCAL9554B User Input Configuration
  //=====================================================================================================
  //Set configuration registers (all to input = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_CFG, 0xFF);
 8001356:	23ff      	movs	r3, #255	; 0xff
 8001358:	2203      	movs	r2, #3
 800135a:	2120      	movs	r1, #32
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f006 f855 	bl	800740c <PCAL9554B_WriteReg8>
  //Set latch register (no latch = 0)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_LATCH, 0x00);
 8001362:	2300      	movs	r3, #0
 8001364:	2242      	movs	r2, #66	; 0x42
 8001366:	2120      	movs	r1, #32
 8001368:	68b8      	ldr	r0, [r7, #8]
 800136a:	f006 f84f 	bl	800740c <PCAL9554B_WriteReg8>
  //Set pullup/pulldown enable register (all enable = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_PU_PD_ENABLE, 0xFF);
 800136e:	23ff      	movs	r3, #255	; 0xff
 8001370:	2243      	movs	r2, #67	; 0x43
 8001372:	2120      	movs	r1, #32
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f006 f849 	bl	800740c <PCAL9554B_WriteReg8>
  //Set pullup/pulldown selection register (all to pullup = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_PU_PD_SELECT, 0xFF);
 800137a:	23ff      	movs	r3, #255	; 0xff
 800137c:	2244      	movs	r2, #68	; 0x44
 800137e:	2120      	movs	r1, #32
 8001380:	68b8      	ldr	r0, [r7, #8]
 8001382:	f006 f843 	bl	800740c <PCAL9554B_WriteReg8>
  //Set interrupt mask (all to disable interrupt = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_INT_MASK, 0xFF);
 8001386:	23ff      	movs	r3, #255	; 0xff
 8001388:	2245      	movs	r2, #69	; 0x45
 800138a:	2120      	movs	r1, #32
 800138c:	68b8      	ldr	r0, [r7, #8]
 800138e:	f006 f83d 	bl	800740c <PCAL9554B_WriteReg8>


  //=====================================================================================================
  // PCA9539 Profet GPIO Configuration
  //=====================================================================================================
  HAL_GPIO_WritePin(PF_RESET_Port, PF_RESET_Pin, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2110      	movs	r1, #16
 8001396:	4881      	ldr	r0, [pc, #516]	; (800159c <I2CTask+0x2cc>)
 8001398:	f008 ffaa 	bl	800a2f0 <HAL_GPIO_WritePin>
  //Set all outputs to push-pull
  PCA9539_WriteReg8(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT_CONFIG, 0x00);
 800139c:	2300      	movs	r3, #0
 800139e:	224f      	movs	r2, #79	; 0x4f
 80013a0:	2174      	movs	r1, #116	; 0x74
 80013a2:	68b8      	ldr	r0, [r7, #8]
 80013a4:	f005 fec2 	bl	800712c <PCA9539_WriteReg8>
  //Set configuration registers (all to output)
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_CONFIG_PORT0, 0x0000);
 80013a8:	2300      	movs	r3, #0
 80013aa:	2206      	movs	r2, #6
 80013ac:	2174      	movs	r1, #116	; 0x74
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f005 fedc 	bl	800716c <PCA9539_WriteReg16>
  //Enable all pullup/pulldown
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_PU_PD_ENABLE_PORT0, 0x0000);
 80013b4:	2300      	movs	r3, #0
 80013b6:	2246      	movs	r2, #70	; 0x46
 80013b8:	2174      	movs	r1, #116	; 0x74
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f005 fed6 	bl	800716c <PCA9539_WriteReg16>
  //Set all outputs to pulldown
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_PU_PD_SELECT_PORT0, 0x0000);
 80013c0:	2300      	movs	r3, #0
 80013c2:	2248      	movs	r2, #72	; 0x48
 80013c4:	2174      	movs	r1, #116	; 0x74
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f005 fed0 	bl	800716c <PCA9539_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank1.deviceType = ADS1015;
 80013cc:	4b74      	ldr	r3, [pc, #464]	; (80015a0 <I2CTask+0x2d0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
  stAdcPfBank1.bitShift = 0;
 80013d2:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <I2CTask+0x2d0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	715a      	strb	r2, [r3, #5]
  stAdcPfBank1.gain = GAIN_ONE;
 80013d8:	4b71      	ldr	r3, [pc, #452]	; (80015a0 <I2CTask+0x2d0>)
 80013da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013de:	805a      	strh	r2, [r3, #2]
  stAdcPfBank1.dataRate = ADS1015_DATARATE_3300SPS;
 80013e0:	4b6f      	ldr	r3, [pc, #444]	; (80015a0 <I2CTask+0x2d0>)
 80013e2:	22c0      	movs	r2, #192	; 0xc0
 80013e4:	711a      	strb	r2, [r3, #4]

  //=====================================================================================================
  // PCA9539 Profet GPIO Configuration
  //=====================================================================================================
  //Set all outputs to push-pull
  PCA9539_WriteReg8(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT_CONFIG, 0x00);
 80013e6:	2300      	movs	r3, #0
 80013e8:	224f      	movs	r2, #79	; 0x4f
 80013ea:	2174      	movs	r1, #116	; 0x74
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f005 fe9d 	bl	800712c <PCA9539_WriteReg8>
  //Set configuration registers (all to output)
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_CONFIG_PORT0, 0x0000);
 80013f2:	2300      	movs	r3, #0
 80013f4:	2206      	movs	r2, #6
 80013f6:	2174      	movs	r1, #116	; 0x74
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f005 feb7 	bl	800716c <PCA9539_WriteReg16>
  //Enable all pullup/pulldown
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_PU_PD_ENABLE_PORT0, 0x0000);
 80013fe:	2300      	movs	r3, #0
 8001400:	2246      	movs	r2, #70	; 0x46
 8001402:	2174      	movs	r1, #116	; 0x74
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f005 feb1 	bl	800716c <PCA9539_WriteReg16>
  //Set all outputs to pulldown
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_PU_PD_SELECT_PORT0, 0x0000);
 800140a:	2300      	movs	r3, #0
 800140c:	2248      	movs	r2, #72	; 0x48
 800140e:	2174      	movs	r1, #116	; 0x74
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f005 feab 	bl	800716c <PCA9539_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank2.deviceType = ADS1015;
 8001416:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <I2CTask+0x2d4>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
  stAdcPfBank2.bitShift = 0;
 800141c:	4b61      	ldr	r3, [pc, #388]	; (80015a4 <I2CTask+0x2d4>)
 800141e:	2200      	movs	r2, #0
 8001420:	715a      	strb	r2, [r3, #5]
  stAdcPfBank2.gain = GAIN_ONE;
 8001422:	4b60      	ldr	r3, [pc, #384]	; (80015a4 <I2CTask+0x2d4>)
 8001424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001428:	805a      	strh	r2, [r3, #2]
  stAdcPfBank2.dataRate = ADS1015_DATARATE_3300SPS;
 800142a:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <I2CTask+0x2d4>)
 800142c:	22c0      	movs	r2, #192	; 0xc0
 800142e:	711a      	strb	r2, [r3, #4]

  //=====================================================================================================
  // PCA9635 LED Configuration
  //=====================================================================================================
  //Send configuration, set to blink/flasher
  PCA9635_Init(hi2c2, PCA9635_ADDRESS, PCA9635_BLINK);
 8001430:	2201      	movs	r2, #1
 8001432:	2130      	movs	r1, #48	; 0x30
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f005 febf 	bl	80071b8 <PCA9635_Init>

  //Set flashing frequency
  PCA9635_SetGroupFreq(hi2c2, PCA9635_ADDRESS, PCA9635_FLASH_FREQ);
 800143a:	2202      	movs	r2, #2
 800143c:	2130      	movs	r1, #48	; 0x30
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f005 ff27 	bl	8007292 <PCA9635_SetGroupFreq>

  //Set PWM duty cycle for each channel (overriden by group PWM)
  for(int i=0; i<PDM_NUM_LEDS; i++){
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
 8001448:	e009      	b.n	800145e <I2CTask+0x18e>
    PCA9635_SetPWM(hi2c2, PCA9635_ADDRESS, i, 255);
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	b2da      	uxtb	r2, r3
 800144e:	23ff      	movs	r3, #255	; 0xff
 8001450:	2130      	movs	r1, #48	; 0x30
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f005 fedd 	bl	8007212 <PCA9635_SetPWM>
  for(int i=0; i<PDM_NUM_LEDS; i++){
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	3301      	adds	r3, #1
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	2b0f      	cmp	r3, #15
 8001462:	ddf2      	ble.n	800144a <I2CTask+0x17a>
  }

  //Set flashing duty cycle
  PCA9635_SetGroupPWM(hi2c2, PCA9635_ADDRESS, PCA9635_FLASH_DUTY_CYCLE); //Have to set individual brightness levels first
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	2130      	movs	r1, #48	; 0x30
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f005 fef7 	bl	800725c <PCA9635_SetGroupPWM>

  //Start LED test sequence
  nLEDTestSeqIndex = 1;
 800146e:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <I2CTask+0x2d8>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
  nLEDTestSeqLastTime = HAL_GetTick();
 8001474:	f006 fbc2 	bl	8007bfc <HAL_GetTick>
 8001478:	4603      	mov	r3, r0
 800147a:	4a4c      	ldr	r2, [pc, #304]	; (80015ac <I2CTask+0x2dc>)
 800147c:	6013      	str	r3, [r2, #0]
  for(;;)
  {
   //=====================================================================================================
   // PCAL9554B User Input
   //=====================================================================================================
   nUserDigInputRaw = PCAL9554B_ReadReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_PORT);
 800147e:	2200      	movs	r2, #0
 8001480:	2120      	movs	r1, #32
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f005 ffe2 	bl	800744c <PCAL9554B_ReadReg8>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <I2CTask+0x2e0>)
 800148e:	701a      	strb	r2, [r3, #0]
   nUserDigInput[0] = !((nUserDigInputRaw & 0x08) >> 3);
 8001490:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <I2CTask+0x2e0>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <I2CTask+0x2e4>)
 80014a6:	701a      	strb	r2, [r3, #0]
   nUserDigInput[1] = !((nUserDigInputRaw & 0x04) >> 2);
 80014a8:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <I2CTask+0x2e0>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <I2CTask+0x2e4>)
 80014be:	705a      	strb	r2, [r3, #1]
   nUserDigInput[2] = !((nUserDigInputRaw & 0x02) >> 1);
 80014c0:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <I2CTask+0x2e0>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <I2CTask+0x2e4>)
 80014d6:	709a      	strb	r2, [r3, #2]
   nUserDigInput[3] = !(nUserDigInputRaw & 0x01);
 80014d8:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <I2CTask+0x2e0>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf0c      	ite	eq
 80014e4:	2301      	moveq	r3, #1
 80014e6:	2300      	movne	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <I2CTask+0x2e4>)
 80014ee:	70da      	strb	r2, [r3, #3]
   nUserDigInput[4] = !((nUserDigInputRaw & 0x10) >> 4);
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <I2CTask+0x2e0>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf0c      	ite	eq
 80014fc:	2301      	moveq	r3, #1
 80014fe:	2300      	movne	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <I2CTask+0x2e4>)
 8001506:	711a      	strb	r2, [r3, #4]
   nUserDigInput[5] = !((nUserDigInputRaw & 0x20) >> 5);
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <I2CTask+0x2e0>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f003 0320 	and.w	r3, r3, #32
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <I2CTask+0x2e4>)
 800151e:	715a      	strb	r2, [r3, #5]
   nUserDigInput[6] = !((nUserDigInputRaw & 0x40) >> 6);
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <I2CTask+0x2e0>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <I2CTask+0x2e4>)
 8001536:	719a      	strb	r2, [r3, #6]
   nUserDigInput[7] = !((nUserDigInputRaw & 0x80) >> 7);
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <I2CTask+0x2e0>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	09db      	lsrs	r3, r3, #7
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <I2CTask+0x2e4>)
 800154a:	71da      	strb	r2, [r3, #7]
   //=====================================================================================================
   // Set Profet
   // DSEL to channel 1
   // Enable all DEN
   //=====================================================================================================
   pfGpioBank1 &= ~PF_BANK1_DSEL;
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <I2CTask+0x2e8>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <I2CTask+0x2e8>)
 8001558:	801a      	strh	r2, [r3, #0]
   pfGpioBank1 |= PF_BANK1_DEN;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <I2CTask+0x2e8>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8001562:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <I2CTask+0x2e8>)
 800156a:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <I2CTask+0x2e8>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	2202      	movs	r2, #2
 8001572:	2174      	movs	r1, #116	; 0x74
 8001574:	68b8      	ldr	r0, [r7, #8]
 8001576:	f005 fdf9 	bl	800716c <PCA9539_WriteReg16>

   //=====================================================================================================
   // ADS1x15 Analog Input
   //=====================================================================================================
   for(int i = 0; i < 4; i++){
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
 800157e:	e042      	b.n	8001606 <I2CTask+0x336>
 8001580:	08016544 	.word	0x08016544
 8001584:	42480000 	.word	0x42480000
 8001588:	08016558 	.word	0x08016558
 800158c:	00000000 	.word	0x00000000
 8001590:	08016578 	.word	0x08016578
 8001594:	42a00000 	.word	0x42a00000
 8001598:	08016598 	.word	0x08016598
 800159c:	48000400 	.word	0x48000400
 80015a0:	20000da4 	.word	0x20000da4
 80015a4:	20000dac 	.word	0x20000dac
 80015a8:	20000de0 	.word	0x20000de0
 80015ac:	20000de8 	.word	0x20000de8
 80015b0:	20000db4 	.word	0x20000db4
 80015b4:	20000db8 	.word	0x20000db8
 80015b8:	20000d8e 	.word	0x20000d8e
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4a88      	ldr	r2, [pc, #544]	; (80017e4 <I2CTask+0x514>)
 80015c2:	2148      	movs	r1, #72	; 0x48
 80015c4:	68b8      	ldr	r0, [r7, #8]
 80015c6:	f005 fb07 	bl	8006bd8 <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2104      	movs	r1, #4
 80015ce:	4886      	ldr	r0, [pc, #536]	; (80017e8 <I2CTask+0x518>)
 80015d0:	f008 fe8e 	bl	800a2f0 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 80015d4:	2002      	movs	r0, #2
 80015d6:	f011 f90b 	bl	80127f0 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2104      	movs	r1, #4
 80015de:	4882      	ldr	r0, [pc, #520]	; (80017e8 <I2CTask+0x518>)
 80015e0:	f008 fe86 	bl	800a2f0 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, &nPfISBank1Raw[i]) != HAL_OK)
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4a80      	ldr	r2, [pc, #512]	; (80017ec <I2CTask+0x51c>)
 80015ea:	4413      	add	r3, r2
 80015ec:	4a7d      	ldr	r2, [pc, #500]	; (80017e4 <I2CTask+0x514>)
 80015ee:	2148      	movs	r1, #72	; 0x48
 80015f0:	68b8      	ldr	r0, [r7, #8]
 80015f2:	f005 fb6d 	bl	8006cd0 <ADS1x15_ReadADC>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <I2CTask+0x330>
     {
       Error_Handler();
 80015fc:	f002 f92c 	bl	8003858 <Error_Handler>
   for(int i = 0; i < 4; i++){
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	3301      	adds	r3, #1
 8001604:	623b      	str	r3, [r7, #32]
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	2b03      	cmp	r3, #3
 800160a:	ddd7      	ble.n	80015bc <I2CTask+0x2ec>
     }
   }

   Profet_UpdateIS(&pf[0], nPfISBank1Raw[3]);
 800160c:	4b77      	ldr	r3, [pc, #476]	; (80017ec <I2CTask+0x51c>)
 800160e:	88db      	ldrh	r3, [r3, #6]
 8001610:	4619      	mov	r1, r3
 8001612:	4877      	ldr	r0, [pc, #476]	; (80017f0 <I2CTask+0x520>)
 8001614:	f006 f994 	bl	8007940 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[1], nPfISBank1Raw[2]);
 8001618:	4b74      	ldr	r3, [pc, #464]	; (80017ec <I2CTask+0x51c>)
 800161a:	889b      	ldrh	r3, [r3, #4]
 800161c:	4619      	mov	r1, r3
 800161e:	4875      	ldr	r0, [pc, #468]	; (80017f4 <I2CTask+0x524>)
 8001620:	f006 f98e 	bl	8007940 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[2], nPfISBank1Raw[1]);
 8001624:	4b71      	ldr	r3, [pc, #452]	; (80017ec <I2CTask+0x51c>)
 8001626:	885b      	ldrh	r3, [r3, #2]
 8001628:	4619      	mov	r1, r3
 800162a:	4873      	ldr	r0, [pc, #460]	; (80017f8 <I2CTask+0x528>)
 800162c:	f006 f988 	bl	8007940 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[4], nPfISBank1Raw[0]);
 8001630:	4b6e      	ldr	r3, [pc, #440]	; (80017ec <I2CTask+0x51c>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	4871      	ldr	r0, [pc, #452]	; (80017fc <I2CTask+0x52c>)
 8001638:	f006 f982 	bl	8007940 <Profet_UpdateIS>

   //=====================================================================================================
   //Flip Profet DSEL to channel 2
   //=====================================================================================================
   pfGpioBank1 |= PF_BANK1_DSEL;
 800163c:	4b70      	ldr	r3, [pc, #448]	; (8001800 <I2CTask+0x530>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b6e      	ldr	r3, [pc, #440]	; (8001800 <I2CTask+0x530>)
 8001648:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 800164a:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <I2CTask+0x530>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	2202      	movs	r2, #2
 8001650:	2174      	movs	r1, #116	; 0x74
 8001652:	68b8      	ldr	r0, [r7, #8]
 8001654:	f005 fd8a 	bl	800716c <PCA9539_WriteReg16>

   for(int i = 0; i < 2; i++){
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	e024      	b.n	80016a8 <I2CTask+0x3d8>
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4a60      	ldr	r2, [pc, #384]	; (80017e4 <I2CTask+0x514>)
 8001664:	2148      	movs	r1, #72	; 0x48
 8001666:	68b8      	ldr	r0, [r7, #8]
 8001668:	f005 fab6 	bl	8006bd8 <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2104      	movs	r1, #4
 8001670:	485d      	ldr	r0, [pc, #372]	; (80017e8 <I2CTask+0x518>)
 8001672:	f008 fe3d 	bl	800a2f0 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8001676:	2002      	movs	r0, #2
 8001678:	f011 f8ba 	bl	80127f0 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2104      	movs	r1, #4
 8001680:	4859      	ldr	r0, [pc, #356]	; (80017e8 <I2CTask+0x518>)
 8001682:	f008 fe35 	bl	800a2f0 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, &nPfISBank1Raw[i]) != HAL_OK)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4a58      	ldr	r2, [pc, #352]	; (80017ec <I2CTask+0x51c>)
 800168c:	4413      	add	r3, r2
 800168e:	4a55      	ldr	r2, [pc, #340]	; (80017e4 <I2CTask+0x514>)
 8001690:	2148      	movs	r1, #72	; 0x48
 8001692:	68b8      	ldr	r0, [r7, #8]
 8001694:	f005 fb1c 	bl	8006cd0 <ADS1x15_ReadADC>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <I2CTask+0x3d2>
     {
        Error_Handler();
 800169e:	f002 f8db 	bl	8003858 <Error_Handler>
   for(int i = 0; i < 2; i++){
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	ddd7      	ble.n	800165e <I2CTask+0x38e>
   }

   //=====================================================================================================
   // Scale to IS Values
   //=====================================================================================================
   Profet_UpdateIS(&pf[3], nPfISBank1Raw[1]);
 80016ae:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <I2CTask+0x51c>)
 80016b0:	885b      	ldrh	r3, [r3, #2]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4853      	ldr	r0, [pc, #332]	; (8001804 <I2CTask+0x534>)
 80016b6:	f006 f943 	bl	8007940 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[5], nPfISBank1Raw[0]);
 80016ba:	4b4c      	ldr	r3, [pc, #304]	; (80017ec <I2CTask+0x51c>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	4851      	ldr	r0, [pc, #324]	; (8001808 <I2CTask+0x538>)
 80016c2:	f006 f93d 	bl	8007940 <Profet_UpdateIS>
   //=====================================================================================================
   // Profet I2C GPIO
   // PCA9555
   // PF1-6 Bank 1
   //=====================================================================================================
   InputLogic();
 80016c6:	f7ff fcf5 	bl	80010b4 <InputLogic>
   OutputLogic();
 80016ca:	f7ff fda5 	bl	8001218 <OutputLogic>
   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 80016ce:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <I2CTask+0x530>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	2202      	movs	r2, #2
 80016d4:	2174      	movs	r1, #116	; 0x74
 80016d6:	68b8      	ldr	r0, [r7, #8]
 80016d8:	f005 fd48 	bl	800716c <PCA9539_WriteReg16>

   //=====================================================================================================
   // MCP9808 temperature sensor
   //=====================================================================================================
   nBoardTempC = MCP9808_ReadTempC_Int(hi2c1, MCP9808_ADDRESS);
 80016dc:	2118      	movs	r1, #24
 80016de:	68b8      	ldr	r0, [r7, #8]
 80016e0:	f005 fb8c 	bl	8006dfc <MCP9808_ReadTempC_Int>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b48      	ldr	r3, [pc, #288]	; (800180c <I2CTask+0x53c>)
 80016ea:	801a      	strh	r2, [r3, #0]

   if(MCP9808_GetOvertemp()) printf("*******MCP9808 Overtemp Detected*******\n");
 80016ec:	f005 fd12 	bl	8007114 <MCP9808_GetOvertemp>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <I2CTask+0x42c>
 80016f6:	4846      	ldr	r0, [pc, #280]	; (8001810 <I2CTask+0x540>)
 80016f8:	f014 fa88 	bl	8015c0c <puts>
   if(MCP9808_GetCriticalTemp()) printf("*******MCP9808 CRITICAL Overtemp Detected*******\n");
 80016fc:	f005 fcfe 	bl	80070fc <MCP9808_GetCriticalTemp>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <I2CTask+0x43c>
 8001706:	4843      	ldr	r0, [pc, #268]	; (8001814 <I2CTask+0x544>)
 8001708:	f014 fa80 	bl	8015c0c <puts>
   //=====================================================================================================
   // Set Profet
   // DSEL to channel 1
   // Enable all DEN
   //=====================================================================================================
   pfGpioBank2 &= ~PF_BANK2_DSEL;
 800170c:	4b42      	ldr	r3, [pc, #264]	; (8001818 <I2CTask+0x548>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	f423 7308 	bic.w	r3, r3, #544	; 0x220
 8001714:	b29a      	uxth	r2, r3
 8001716:	4b40      	ldr	r3, [pc, #256]	; (8001818 <I2CTask+0x548>)
 8001718:	801a      	strh	r2, [r3, #0]
   pfGpioBank2 |= PF_BANK2_DEN;
 800171a:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <I2CTask+0x548>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 8001722:	f043 0305 	orr.w	r3, r3, #5
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <I2CTask+0x548>)
 800172a:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 800172c:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <I2CTask+0x548>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	2202      	movs	r2, #2
 8001732:	2174      	movs	r1, #116	; 0x74
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f005 fd19 	bl	800716c <PCA9539_WriteReg16>

   //=====================================================================================================
   // ADS1115 Analog Input
   //=====================================================================================================
   for(int i = 0; i < 4; i++){
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	e024      	b.n	800178a <I2CTask+0x4ba>
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, i);
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4a35      	ldr	r2, [pc, #212]	; (800181c <I2CTask+0x54c>)
 8001746:	2148      	movs	r1, #72	; 0x48
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f005 fa45 	bl	8006bd8 <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	2104      	movs	r1, #4
 8001752:	4825      	ldr	r0, [pc, #148]	; (80017e8 <I2CTask+0x518>)
 8001754:	f008 fdcc 	bl	800a2f0 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8001758:	2002      	movs	r0, #2
 800175a:	f011 f849 	bl	80127f0 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2104      	movs	r1, #4
 8001762:	4821      	ldr	r0, [pc, #132]	; (80017e8 <I2CTask+0x518>)
 8001764:	f008 fdc4 	bl	800a2f0 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, &nPfISBank2Raw[i]) != HAL_OK)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <I2CTask+0x550>)
 800176e:	4413      	add	r3, r2
 8001770:	4a2a      	ldr	r2, [pc, #168]	; (800181c <I2CTask+0x54c>)
 8001772:	2148      	movs	r1, #72	; 0x48
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f005 faab 	bl	8006cd0 <ADS1x15_ReadADC>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <I2CTask+0x4b4>
     {
       Error_Handler();
 8001780:	f002 f86a 	bl	8003858 <Error_Handler>
   for(int i = 0; i < 4; i++){
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	3301      	adds	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b03      	cmp	r3, #3
 800178e:	ddd7      	ble.n	8001740 <I2CTask+0x470>
     }
   }

   Profet_UpdateIS(&pf[6], nPfISBank2Raw[0]);
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <I2CTask+0x550>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	4823      	ldr	r0, [pc, #140]	; (8001824 <I2CTask+0x554>)
 8001798:	f006 f8d2 	bl	8007940 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[7], nPfISBank2Raw[1]);
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <I2CTask+0x550>)
 800179e:	885b      	ldrh	r3, [r3, #2]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4821      	ldr	r0, [pc, #132]	; (8001828 <I2CTask+0x558>)
 80017a4:	f006 f8cc 	bl	8007940 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[9], nPfISBank2Raw[2]);
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <I2CTask+0x550>)
 80017aa:	889b      	ldrh	r3, [r3, #4]
 80017ac:	4619      	mov	r1, r3
 80017ae:	481f      	ldr	r0, [pc, #124]	; (800182c <I2CTask+0x55c>)
 80017b0:	f006 f8c6 	bl	8007940 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[11], nPfISBank2Raw[3]);
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <I2CTask+0x550>)
 80017b6:	88db      	ldrh	r3, [r3, #6]
 80017b8:	4619      	mov	r1, r3
 80017ba:	481d      	ldr	r0, [pc, #116]	; (8001830 <I2CTask+0x560>)
 80017bc:	f006 f8c0 	bl	8007940 <Profet_UpdateIS>

   //=====================================================================================================
   //Flip Profet DSEL to channel 2
   //=====================================================================================================
   pfGpioBank2 |= PF_BANK2_DSEL;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <I2CTask+0x548>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	f443 7308 	orr.w	r3, r3, #544	; 0x220
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <I2CTask+0x548>)
 80017cc:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <I2CTask+0x548>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	2202      	movs	r2, #2
 80017d4:	2174      	movs	r1, #116	; 0x74
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f005 fcc8 	bl	800716c <PCA9539_WriteReg16>

   for(int i = 0; i < 2; i++){
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e050      	b.n	8001884 <I2CTask+0x5b4>
 80017e2:	bf00      	nop
 80017e4:	20000da4 	.word	0x20000da4
 80017e8:	48000400 	.word	0x48000400
 80017ec:	20000d94 	.word	0x20000d94
 80017f0:	20000aec 	.word	0x20000aec
 80017f4:	20000b24 	.word	0x20000b24
 80017f8:	20000b5c 	.word	0x20000b5c
 80017fc:	20000bcc 	.word	0x20000bcc
 8001800:	20000d8e 	.word	0x20000d8e
 8001804:	20000b94 	.word	0x20000b94
 8001808:	20000c04 	.word	0x20000c04
 800180c:	20000dc2 	.word	0x20000dc2
 8001810:	080165bc 	.word	0x080165bc
 8001814:	080165e4 	.word	0x080165e4
 8001818:	20000d90 	.word	0x20000d90
 800181c:	20000dac 	.word	0x20000dac
 8001820:	20000d9c 	.word	0x20000d9c
 8001824:	20000c3c 	.word	0x20000c3c
 8001828:	20000c74 	.word	0x20000c74
 800182c:	20000ce4 	.word	0x20000ce4
 8001830:	20000d54 	.word	0x20000d54
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, i+2);
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3302      	adds	r3, #2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4a61      	ldr	r2, [pc, #388]	; (80019c4 <I2CTask+0x6f4>)
 800183e:	2148      	movs	r1, #72	; 0x48
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f005 f9c9 	bl	8006bd8 <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2104      	movs	r1, #4
 800184a:	485f      	ldr	r0, [pc, #380]	; (80019c8 <I2CTask+0x6f8>)
 800184c:	f008 fd50 	bl	800a2f0 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8001850:	2002      	movs	r0, #2
 8001852:	f010 ffcd 	bl	80127f0 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	2104      	movs	r1, #4
 800185a:	485b      	ldr	r0, [pc, #364]	; (80019c8 <I2CTask+0x6f8>)
 800185c:	f008 fd48 	bl	800a2f0 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, &nPfISBank2Raw[i+2]) != HAL_OK)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3302      	adds	r3, #2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4a59      	ldr	r2, [pc, #356]	; (80019cc <I2CTask+0x6fc>)
 8001868:	4413      	add	r3, r2
 800186a:	4a56      	ldr	r2, [pc, #344]	; (80019c4 <I2CTask+0x6f4>)
 800186c:	2148      	movs	r1, #72	; 0x48
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f005 fa2e 	bl	8006cd0 <ADS1x15_ReadADC>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <I2CTask+0x5ae>
     {
       Error_Handler();
 800187a:	f001 ffed 	bl	8003858 <Error_Handler>
   for(int i = 0; i < 2; i++){
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b01      	cmp	r3, #1
 8001888:	ddd4      	ble.n	8001834 <I2CTask+0x564>
   }

   //=====================================================================================================
   // Scale to IS Values
   //=====================================================================================================
   Profet_UpdateIS(&pf[8], nPfISBank2Raw[2]);
 800188a:	4b50      	ldr	r3, [pc, #320]	; (80019cc <I2CTask+0x6fc>)
 800188c:	889b      	ldrh	r3, [r3, #4]
 800188e:	4619      	mov	r1, r3
 8001890:	484f      	ldr	r0, [pc, #316]	; (80019d0 <I2CTask+0x700>)
 8001892:	f006 f855 	bl	8007940 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[10], nPfISBank2Raw[3]);
 8001896:	4b4d      	ldr	r3, [pc, #308]	; (80019cc <I2CTask+0x6fc>)
 8001898:	88db      	ldrh	r3, [r3, #6]
 800189a:	4619      	mov	r1, r3
 800189c:	484d      	ldr	r0, [pc, #308]	; (80019d4 <I2CTask+0x704>)
 800189e:	f006 f84f 	bl	8007940 <Profet_UpdateIS>
   // Profet I2C GPIO
   // PCA9555
   // PF1-6 Bank 1
   // PF7-12 Bank 2
   //=====================================================================================================
   InputLogic();
 80018a2:	f7ff fc07 	bl	80010b4 <InputLogic>
   OutputLogic();
 80018a6:	f7ff fcb7 	bl	8001218 <OutputLogic>
   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <I2CTask+0x708>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	2202      	movs	r2, #2
 80018b0:	2174      	movs	r1, #116	; 0x74
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f005 fc5a 	bl	800716c <PCA9539_WriteReg16>

   //=====================================================================================================
   // Status LEDs
   //=====================================================================================================
   if(nLEDTestSeqIndex > 0)
 80018b8:	4b48      	ldr	r3, [pc, #288]	; (80019dc <I2CTask+0x70c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d02b      	beq.n	8001918 <I2CTask+0x648>
   {
     nLEDTestSeqValues = (0x00000001 << ((nLEDTestSeqIndex-1)*2));
 80018c0:	4b46      	ldr	r3, [pc, #280]	; (80019dc <I2CTask+0x70c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2201      	movs	r2, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <I2CTask+0x710>)
 80018d2:	601a      	str	r2, [r3, #0]

     PCA9635_SetAllNum(hi2c2, PCA9635_ADDRESS, nLEDTestSeqValues);
 80018d4:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <I2CTask+0x710>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	2130      	movs	r1, #48	; 0x30
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f005 fcf3 	bl	80072c8 <PCA9635_SetAllNum>

     if((HAL_GetTick() - nLEDTestSeqLastTime) > LED_TEST_SEQ_DELAY)
 80018e2:	f006 f98b 	bl	8007bfc <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <I2CTask+0x714>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b32      	cmp	r3, #50	; 0x32
 80018f0:	d90a      	bls.n	8001908 <I2CTask+0x638>
     {
       nLEDTestSeqLastTime = HAL_GetTick();
 80018f2:	f006 f983 	bl	8007bfc <HAL_GetTick>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a3a      	ldr	r2, [pc, #232]	; (80019e4 <I2CTask+0x714>)
 80018fa:	6013      	str	r3, [r2, #0]
       nLEDTestSeqIndex++;
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <I2CTask+0x70c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <I2CTask+0x70c>)
 8001906:	701a      	strb	r2, [r3, #0]
     }

     //Last step
     if(nLEDTestSeqIndex > 16)
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <I2CTask+0x70c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b10      	cmp	r3, #16
 800190e:	d950      	bls.n	80019b2 <I2CTask+0x6e2>
       nLEDTestSeqIndex = 0;
 8001910:	4b32      	ldr	r3, [pc, #200]	; (80019dc <I2CTask+0x70c>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	e04c      	b.n	80019b2 <I2CTask+0x6e2>
   }
   else
   {
     for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	e00f      	b.n	800193e <I2CTask+0x66e>
       SetPfStatusLed(&eStatusLeds[i], &pf[i]);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <I2CTask+0x718>)
 8001922:	1898      	adds	r0, r3, r2
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <I2CTask+0x71c>)
 8001930:	4413      	add	r3, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f000 ff20 	bl	8002778 <SetPfStatusLed>
     for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3301      	adds	r3, #1
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b0b      	cmp	r3, #11
 8001942:	ddec      	ble.n	800191e <I2CTask+0x64e>
     }
     eStatusLeds[12] = (eDevMode == DEVICE_AUTO) + ((eDevMode == DEVICE_MANUAL) * LED_FLASH);              //State
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <I2CTask+0x720>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <I2CTask+0x720>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <I2CTask+0x690>
 800195c:	2303      	movs	r3, #3
 800195e:	e000      	b.n	8001962 <I2CTask+0x692>
 8001960:	2300      	movs	r3, #0
 8001962:	4413      	add	r3, r2
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <I2CTask+0x718>)
 8001968:	731a      	strb	r2, [r3, #12]
     eStatusLeds[13] = bUsbConnected;   //USB
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <I2CTask+0x724>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <I2CTask+0x718>)
 8001972:	735a      	strb	r2, [r3, #13]
     eStatusLeds[14] = (HAL_GetTick() - nLastCanUpdate) < 1000;              //CAN
 8001974:	f006 f942 	bl	8007bfc <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <I2CTask+0x728>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001984:	4293      	cmp	r3, r2
 8001986:	bf94      	ite	ls
 8001988:	2301      	movls	r3, #1
 800198a:	2300      	movhi	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <I2CTask+0x718>)
 8001992:	739a      	strb	r2, [r3, #14]
     eStatusLeds[15] = (eDevState == DEVICE_ERROR);   //Fault
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <I2CTask+0x72c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b03      	cmp	r3, #3
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <I2CTask+0x718>)
 80019a6:	73da      	strb	r2, [r3, #15]
     PCA9635_SetAll(hi2c2, PCA9635_ADDRESS, eStatusLeds);
 80019a8:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <I2CTask+0x718>)
 80019aa:	2130      	movs	r1, #48	; 0x30
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f005 fcb2 	bl	8007316 <PCA9635_SetAll>
   }

   //Debug GPIO
   HAL_GPIO_TogglePin(EXTRA1_GPIO_Port, EXTRA1_Pin);
 80019b2:	2104      	movs	r1, #4
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f008 fcb2 	bl	800a320 <HAL_GPIO_TogglePin>

#ifdef MEAS_HEAP_USE
   __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

   osDelay(I2C_TASK_DELAY);
 80019bc:	2005      	movs	r0, #5
 80019be:	f010 ff17 	bl	80127f0 <osDelay>
   nUserDigInputRaw = PCAL9554B_ReadReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_PORT);
 80019c2:	e55c      	b.n	800147e <I2CTask+0x1ae>
 80019c4:	20000dac 	.word	0x20000dac
 80019c8:	48000400 	.word	0x48000400
 80019cc:	20000d9c 	.word	0x20000d9c
 80019d0:	20000cac 	.word	0x20000cac
 80019d4:	20000d1c 	.word	0x20000d1c
 80019d8:	20000d90 	.word	0x20000d90
 80019dc:	20000de0 	.word	0x20000de0
 80019e0:	20000de4 	.word	0x20000de4
 80019e4:	20000de8 	.word	0x20000de8
 80019e8:	20000dd0 	.word	0x20000dd0
 80019ec:	20000aec 	.word	0x20000aec
 80019f0:	20000ae8 	.word	0x20000ae8
 80019f4:	20000dc0 	.word	0x20000dc0
 80019f8:	20000e34 	.word	0x20000e34
 80019fc:	20000ae9 	.word	0x20000ae9

08001a00 <ProfetSMTask>:
 }
}


void ProfetSMTask(osThreadId_t* thisThreadId)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b0a9      	sub	sp, #164	; 0xa4
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  Profet_Init();
 8001a08:	f000 fefe 	bl	8002808 <Profet_Init>

  MsgQueueUsbTx_t stMsgUsbTx;
  MsgQueueCanTx_t stMsgCanTx;

  RTC_TimeTypeDef stTime = {0};
 8001a0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef stDate = {0};
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48

  uint8_t nSend;

  for(;;){
    for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a26:	e00f      	b.n	8001a48 <ProfetSMTask+0x48>
      Profet_SM(&pf[i]);
 8001a28:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4aad      	ldr	r2, [pc, #692]	; (8001cec <ProfetSMTask+0x2ec>)
 8001a36:	4413      	add	r3, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f005 ff1d 	bl	8007878 <Profet_SM>
    for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001a3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a42:	3301      	adds	r3, #1
 8001a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a4c:	2b0b      	cmp	r3, #11
 8001a4e:	ddeb      	ble.n	8001a28 <ProfetSMTask+0x28>
    }
    //WiperSM(&stWiper);
    MsgQueueRx_t stMsgRx;
    osStatus_t eStatus;

    nMsgCnt = osMessageQueueGetCount(qMsgQueueRx);
 8001a50:	4ba7      	ldr	r3, [pc, #668]	; (8001cf0 <ProfetSMTask+0x2f0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f011 f865 	bl	8012b24 <osMessageQueueGetCount>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4aa5      	ldr	r2, [pc, #660]	; (8001cf4 <ProfetSMTask+0x2f4>)
 8001a5e:	6013      	str	r3, [r2, #0]
    if(nMsgCnt == 16)
      EXTRA2_GPIO_Port->ODR |= EXTRA2_Pin;
    else
      EXTRA2_GPIO_Port->ODR &= ~EXTRA2_Pin;
*/
    eStatus = osMessageQueueGet(qMsgQueueRx, &stMsgRx, NULL, 0U);
 8001a60:	4ba3      	ldr	r3, [pc, #652]	; (8001cf0 <ProfetSMTask+0x2f0>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	f107 010c 	add.w	r1, r7, #12
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f010 ffe8 	bl	8012a40 <osMessageQueueGet>
 8001a70:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if(eStatus == osOK){
 8001a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 839e 	bne.w	80021ba <ProfetSMTask+0x7ba>
      if(stMsgRx.eMsgSrc == CAN_RX){
 8001a7e:	7b3b      	ldrb	r3, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d126      	bne.n	8001ad2 <ProfetSMTask+0xd2>
        for(int i=0; i<PDM_NUM_CAN_INPUTS; i++){
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a8a:	e01e      	b.n	8001aca <ProfetSMTask+0xca>
          EvaluateCANInput(&stMsgRx.stCanRxHeader, stMsgRx.nRxData, &stPdmConfig.stCanInput[i], &nCanInputs[i]);
 8001a8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8001a9c:	4a96      	ldr	r2, [pc, #600]	; (8001cf8 <ProfetSMTask+0x2f8>)
 8001a9e:	4413      	add	r3, r2
 8001aa0:	1d1a      	adds	r2, r3, #4
 8001aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4994      	ldr	r1, [pc, #592]	; (8001cfc <ProfetSMTask+0x2fc>)
 8001aaa:	185c      	adds	r4, r3, r1
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	f103 0120 	add.w	r1, r3, #32
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	1d18      	adds	r0, r3, #4
 8001aba:	4623      	mov	r3, r4
 8001abc:	f7fe ff76 	bl	80009ac <EvaluateCANInput>
        for(int i=0; i<PDM_NUM_CAN_INPUTS; i++){
 8001ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001aca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ace:	2b1d      	cmp	r3, #29
 8001ad0:	dddc      	ble.n	8001a8c <ProfetSMTask+0x8c>
        }
      }
      if((stMsgRx.eMsgSrc == CAN_RX && stMsgRx.stCanRxHeader.StdId == stPdmConfig.stCanOutput.nBaseId + 21) || (stMsgRx.eMsgSrc == USB_RX)){
 8001ad2:	7b3b      	ldrb	r3, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d106      	bne.n	8001ae6 <ProfetSMTask+0xe6>
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4a87      	ldr	r2, [pc, #540]	; (8001cf8 <ProfetSMTask+0x2f8>)
 8001adc:	f8b2 28d6 	ldrh.w	r2, [r2, #2262]	; 0x8d6
 8001ae0:	3215      	adds	r2, #21
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d003      	beq.n	8001aee <ProfetSMTask+0xee>
 8001ae6:	7b3b      	ldrb	r3, [r7, #12]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	f040 8366 	bne.w	80021ba <ProfetSMTask+0x7ba>
        //EXTRA2_GPIO_Port->ODR ^= EXTRA2_Pin;

        nSend = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

        switch((MsgQueueRxCmd_t)stMsgRx.nRxData[0]){
 8001af4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001af8:	3b42      	subs	r3, #66	; 0x42
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	f200 8355 	bhi.w	80021aa <ProfetSMTask+0x7aa>
 8001b00:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <ProfetSMTask+0x108>)
 8001b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b06:	bf00      	nop
 8001b08:	08001b55 	.word	0x08001b55
 8001b0c:	080021ab 	.word	0x080021ab
 8001b10:	080021ab 	.word	0x080021ab
 8001b14:	080021ab 	.word	0x080021ab
 8001b18:	08002105 	.word	0x08002105
 8001b1c:	080021ab 	.word	0x080021ab
 8001b20:	080021ab 	.word	0x080021ab
 8001b24:	080021ab 	.word	0x080021ab
 8001b28:	080021ab 	.word	0x080021ab
 8001b2c:	080021ab 	.word	0x080021ab
 8001b30:	080021ab 	.word	0x080021ab
 8001b34:	08001bf3 	.word	0x08001bf3
 8001b38:	080021ab 	.word	0x080021ab
 8001b3c:	080021ab 	.word	0x080021ab
 8001b40:	080021ab 	.word	0x080021ab
 8001b44:	08001d11 	.word	0x08001d11
 8001b48:	08001f4d 	.word	0x08001f4d
 8001b4c:	080021ab 	.word	0x080021ab
 8001b50:	08002025 	.word	0x08002025

            //Burn Settings
            // 'B'
            case MSG_RX_BURN_SETTINGS:
              //Check special number sequence
              if(stMsgRx.nRxLen == 4){
 8001b54:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	f040 8330 	bne.w	80021be <ProfetSMTask+0x7be>
                if((stMsgRx.nRxData[1] == 1) && (stMsgRx.nRxData[2] == 23) && (stMsgRx.nRxData[3] == 20)){
 8001b5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	f040 832b 	bne.w	80021be <ProfetSMTask+0x7be>
 8001b68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001b6c:	2b17      	cmp	r3, #23
 8001b6e:	f040 8326 	bne.w	80021be <ProfetSMTask+0x7be>
 8001b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b76:	2b14      	cmp	r3, #20
 8001b78:	f040 8321 	bne.w	80021be <ProfetSMTask+0x7be>
                  //Write settings to FRAM
                  //uint8_t nRet = PdmConfig_Write(hi2c2, MB85RC_ADDRESS, &stPdmConfig);
                  //TODO: Use flag to I2C task

                  stMsgUsbTx.nTxLen = 2;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                  stMsgCanTx.stTxHeader.DLC = 2;
 8001b82:	2302      	movs	r3, #2
 8001b84:	673b      	str	r3, [r7, #112]	; 0x70

                  stMsgUsbTx.nTxData[0] = MSG_TX_BURN_SETTINGS;
 8001b86:	2362      	movs	r3, #98	; 0x62
 8001b88:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
                  stMsgUsbTx.nTxData[1] = 0;// nRet;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                  stMsgUsbTx.nTxData[2] = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                  stMsgUsbTx.nTxData[3] = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                  stMsgUsbTx.nTxData[4] = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                  stMsgUsbTx.nTxData[5] = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                  stMsgUsbTx.nTxData[6] = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                  stMsgUsbTx.nTxData[7] = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                  stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001bb6:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <ProfetSMTask+0x2f8>)
 8001bb8:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8001bbc:	3314      	adds	r3, #20
 8001bbe:	663b      	str	r3, [r7, #96]	; 0x60

                  memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001bc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bc4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bcc:	e883 0003 	stmia.w	r3, {r0, r1}

                  osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001bd0:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <ProfetSMTask+0x300>)
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f010 febc 	bl	8012958 <osMessageQueuePut>
                  osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001be0:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <ProfetSMTask+0x304>)
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001be8:	2300      	movs	r3, #0
 8001bea:	2200      	movs	r2, #0
 8001bec:	f010 feb4 	bl	8012958 <osMessageQueuePut>
                }
              }
            break;
 8001bf0:	e2e5      	b.n	80021be <ProfetSMTask+0x7be>

           //Set Mode
           // 'M'
           case MSG_RX_SET_MODE:
             if(stMsgRx.nRxLen == 2){
 8001bf2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d133      	bne.n	8001c62 <ProfetSMTask+0x262>
               switch(eDevMode){
 8001bfa:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <ProfetSMTask+0x308>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <ProfetSMTask+0x208>
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d01d      	beq.n	8001c42 <ProfetSMTask+0x242>
 8001c06:	e029      	b.n	8001c5c <ProfetSMTask+0x25c>
               case DEVICE_AUTO:
                 if(stMsgRx.nRxData[1] & 0x01){ //Manual sent
 8001c08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <ProfetSMTask+0x256>
                   for(int i=0; i<12; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c1a:	e00a      	b.n	8001c32 <ProfetSMTask+0x232>
                     nManualOutputs[i] = 0;
 8001c1c:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <ProfetSMTask+0x30c>)
 8001c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c22:	4413      	add	r3, r2
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
                   for(int i=0; i<12; i++)
 8001c28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c36:	2b0b      	cmp	r3, #11
 8001c38:	ddf0      	ble.n	8001c1c <ProfetSMTask+0x21c>
                   eDevMode = DEVICE_MANUAL;
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <ProfetSMTask+0x308>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8001c40:	e009      	b.n	8001c56 <ProfetSMTask+0x256>

               case DEVICE_MANUAL:
                 if(!(stMsgRx.nRxData[1] & 0x01)){ //Auto sent
 8001c42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <ProfetSMTask+0x25a>
                   eDevMode = DEVICE_AUTO;
 8001c4e:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <ProfetSMTask+0x308>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8001c54:	e001      	b.n	8001c5a <ProfetSMTask+0x25a>
                 break;
 8001c56:	bf00      	nop
 8001c58:	e000      	b.n	8001c5c <ProfetSMTask+0x25c>
                 break;
 8001c5a:	bf00      	nop
               }
               nSend = 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
             }

             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001c62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d004      	beq.n	8001c74 <ProfetSMTask+0x274>
 8001c6a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 82a7 	beq.w	80021c2 <ProfetSMTask+0x7c2>
               stMsgUsbTx.nTxLen = 2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgCanTx.stTxHeader.DLC = 2;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	673b      	str	r3, [r7, #112]	; 0x70

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_MODE;
 8001c7e:	236d      	movs	r3, #109	; 0x6d
 8001c80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
               stMsgUsbTx.nTxData[1] = (uint8_t)eDevMode;
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <ProfetSMTask+0x308>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
               stMsgUsbTx.nTxData[2] = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
               stMsgUsbTx.nTxData[3] = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
               stMsgUsbTx.nTxData[4] = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[5] = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[6] = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[7] = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <ProfetSMTask+0x2f8>)
 8001cb2:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	663b      	str	r3, [r7, #96]	; 0x60

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001cba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cbe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001cc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc6:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <ProfetSMTask+0x300>)
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f010 fe3f 	bl	8012958 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <ProfetSMTask+0x304>)
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f010 fe37 	bl	8012958 <osMessageQueuePut>
             }
           break;
 8001cea:	e26a      	b.n	80021c2 <ProfetSMTask+0x7c2>
 8001cec:	20000aec 	.word	0x20000aec
 8001cf0:	20000adc 	.word	0x20000adc
 8001cf4:	2000109c 	.word	0x2000109c
 8001cf8:	20000200 	.word	0x20000200
 8001cfc:	20000ff0 	.word	0x20000ff0
 8001d00:	20000ae0 	.word	0x20000ae0
 8001d04:	20000ae4 	.word	0x20000ae4
 8001d08:	20000ae8 	.word	0x20000ae8
 8001d0c:	20002364 	.word	0x20002364


           //Force Outputs
           // 'Q'
           case MSG_RX_FORCE_OUTPUTS:
             if(stMsgRx.nRxLen == 7){
 8001d10:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d14:	2b07      	cmp	r3, #7
 8001d16:	d16b      	bne.n	8001df0 <ProfetSMTask+0x3f0>
               if(eDevMode == DEVICE_MANUAL){
 8001d18:	4b87      	ldr	r3, [pc, #540]	; (8001f38 <ProfetSMTask+0x538>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d167      	bne.n	8001df0 <ProfetSMTask+0x3f0>
                 nManualOutputs[0] = (stMsgRx.nRxData[1] & 0x01);
 8001d20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <ProfetSMTask+0x53c>)
 8001d2c:	701a      	strb	r2, [r3, #0]
                 nManualOutputs[1] = (stMsgRx.nRxData[1] & 0x02) >> 1;
 8001d2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d32:	105b      	asrs	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <ProfetSMTask+0x53c>)
 8001d3e:	705a      	strb	r2, [r3, #1]
                 nManualOutputs[2] = (stMsgRx.nRxData[1] & 0x04) >> 2;
 8001d40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d44:	109b      	asrs	r3, r3, #2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b7b      	ldr	r3, [pc, #492]	; (8001f3c <ProfetSMTask+0x53c>)
 8001d50:	709a      	strb	r2, [r3, #2]
                 nManualOutputs[3] = (stMsgRx.nRxData[1] & 0x08) >> 3;
 8001d52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d56:	10db      	asrs	r3, r3, #3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <ProfetSMTask+0x53c>)
 8001d62:	70da      	strb	r2, [r3, #3]
                 nManualOutputs[4] = (stMsgRx.nRxData[1] & 0x10) >> 4;
 8001d64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d68:	111b      	asrs	r3, r3, #4
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b72      	ldr	r3, [pc, #456]	; (8001f3c <ProfetSMTask+0x53c>)
 8001d74:	711a      	strb	r2, [r3, #4]
                 nManualOutputs[5] = (stMsgRx.nRxData[1] & 0x20) >> 5;
 8001d76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d7a:	115b      	asrs	r3, r3, #5
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b6d      	ldr	r3, [pc, #436]	; (8001f3c <ProfetSMTask+0x53c>)
 8001d86:	715a      	strb	r2, [r3, #5]
                 nManualOutputs[6] = (stMsgRx.nRxData[1] & 0x40) >> 6;
 8001d88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d8c:	119b      	asrs	r3, r3, #6
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <ProfetSMTask+0x53c>)
 8001d98:	719a      	strb	r2, [r3, #6]
                 nManualOutputs[7] = (stMsgRx.nRxData[1] & 0x80) >> 7;
 8001d9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d9e:	09db      	lsrs	r3, r3, #7
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <ProfetSMTask+0x53c>)
 8001da4:	71da      	strb	r2, [r3, #7]
                 nManualOutputs[8] = (stMsgRx.nRxData[2] & 0x01);
 8001da6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <ProfetSMTask+0x53c>)
 8001db2:	721a      	strb	r2, [r3, #8]
                 nManualOutputs[9] = (stMsgRx.nRxData[2] & 0x02) >> 1;
 8001db4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001db8:	105b      	asrs	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b5e      	ldr	r3, [pc, #376]	; (8001f3c <ProfetSMTask+0x53c>)
 8001dc4:	725a      	strb	r2, [r3, #9]
                 nManualOutputs[10] = (stMsgRx.nRxData[2] & 0x04) >> 2;
 8001dc6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001dca:	109b      	asrs	r3, r3, #2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <ProfetSMTask+0x53c>)
 8001dd6:	729a      	strb	r2, [r3, #10]
                 nManualOutputs[11] = (stMsgRx.nRxData[2] & 0x08) >> 3;
 8001dd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ddc:	10db      	asrs	r3, r3, #3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <ProfetSMTask+0x53c>)
 8001de8:	72da      	strb	r2, [r3, #11]
                 nSend = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
               }
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001df0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d004      	beq.n	8001e02 <ProfetSMTask+0x402>
 8001df8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 81e2 	beq.w	80021c6 <ProfetSMTask+0x7c6>
               stMsgUsbTx.nTxLen = 7;
 8001e02:	2307      	movs	r3, #7
 8001e04:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgCanTx.stTxHeader.DLC = 7;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	673b      	str	r3, [r7, #112]	; 0x70

               stMsgUsbTx.nTxData[0] = MSG_TX_FORCE_OUTPUTS;
 8001e0c:	2371      	movs	r3, #113	; 0x71
 8001e0e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001e12:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <ProfetSMTask+0x53c>)
 8001e14:	79db      	ldrb	r3, [r3, #7]
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <ProfetSMTask+0x53c>)
 8001e1c:	799b      	ldrb	r3, [r3, #6]
 8001e1e:	019b      	lsls	r3, r3, #6
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4413      	add	r3, r2
 8001e2a:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <ProfetSMTask+0x53c>)
 8001e2e:	795b      	ldrb	r3, [r3, #5]
 8001e30:	015b      	lsls	r3, r3, #5
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <ProfetSMTask+0x53c>)
 8001e40:	791b      	ldrb	r3, [r3, #4]
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001e50:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <ProfetSMTask+0x53c>)
 8001e52:	78db      	ldrb	r3, [r3, #3]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001e5e:	4413      	add	r3, r2
 8001e60:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <ProfetSMTask+0x53c>)
 8001e64:	789b      	ldrb	r3, [r3, #2]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 8001e74:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <ProfetSMTask+0x53c>)
 8001e76:	785b      	ldrb	r3, [r3, #1]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001e82:	4413      	add	r3, r2
 8001e84:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <ProfetSMTask+0x53c>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001e94:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001e98:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <ProfetSMTask+0x53c>)
 8001e9a:	7adb      	ldrb	r3, [r3, #11]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	b25a      	sxtb	r2, r3
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <ProfetSMTask+0x53c>)
 8001ea8:	7a9b      	ldrb	r3, [r3, #10]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <ProfetSMTask+0x53c>)
 8001ebc:	7a5b      	ldrb	r3, [r3, #9]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001ec8:	4413      	add	r3, r2
 8001eca:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <ProfetSMTask+0x53c>)
 8001ece:	7a1b      	ldrb	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001eda:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

               //TODO:Add manual output modes
               stMsgUsbTx.nTxData[3] = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
               stMsgUsbTx.nTxData[4] = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[5] = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[6] = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[7] = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <ProfetSMTask+0x540>)
 8001efe:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8001f02:	3314      	adds	r3, #20
 8001f04:	663b      	str	r3, [r7, #96]	; 0x60

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001f06:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f0a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f12:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <ProfetSMTask+0x544>)
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2200      	movs	r2, #0
 8001f22:	f010 fd19 	bl	8012958 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <ProfetSMTask+0x548>)
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2200      	movs	r2, #0
 8001f32:	f010 fd11 	bl	8012958 <osMessageQueuePut>
             }
           break;
 8001f36:	e146      	b.n	80021c6 <ProfetSMTask+0x7c6>
 8001f38:	20000ae8 	.word	0x20000ae8
 8001f3c:	20002364 	.word	0x20002364
 8001f40:	20000200 	.word	0x20000200
 8001f44:	20000ae0 	.word	0x20000ae0
 8001f48:	20000ae4 	.word	0x20000ae4

           //Set Reporting
           // 'R'
           case MSG_RX_SET_REPORTING:
             if(stMsgRx.nRxLen == 3){
 8001f4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d118      	bne.n	8001f86 <ProfetSMTask+0x586>
               nReportingOn = stMsgRx.nRxData[1] & 0x01;
 8001f54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4bab      	ldr	r3, [pc, #684]	; (800220c <ProfetSMTask+0x80c>)
 8001f60:	701a      	strb	r2, [r3, #0]
               nReportingDelay = stMsgRx.nRxData[2] * 100;
 8001f62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	0091      	lsls	r1, r2, #2
 8001f72:	461a      	mov	r2, r3
 8001f74:	460b      	mov	r3, r1
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4ba4      	ldr	r3, [pc, #656]	; (8002210 <ProfetSMTask+0x810>)
 8001f7e:	801a      	strh	r2, [r3, #0]
               nSend = 1;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001f86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d004      	beq.n	8001f98 <ProfetSMTask+0x598>
 8001f8e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8119 	beq.w	80021ca <ProfetSMTask+0x7ca>
               stMsgUsbTx.nTxLen = 3;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgCanTx.stTxHeader.DLC = 3;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	673b      	str	r3, [r7, #112]	; 0x70

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_REPORTING;
 8001fa2:	2372      	movs	r3, #114	; 0x72
 8001fa4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
               stMsgUsbTx.nTxData[1] = (nReportingOn & 0x01);
 8001fa8:	4b98      	ldr	r3, [pc, #608]	; (800220c <ProfetSMTask+0x80c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
               stMsgUsbTx.nTxData[2] = (uint8_t)(nReportingDelay / 100);
 8001fb6:	4b96      	ldr	r3, [pc, #600]	; (8002210 <ProfetSMTask+0x810>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	4a96      	ldr	r2, [pc, #600]	; (8002214 <ProfetSMTask+0x814>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
               stMsgUsbTx.nTxData[3] = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
               stMsgUsbTx.nTxData[4] = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[5] = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[6] = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[7] = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001fe8:	4b8b      	ldr	r3, [pc, #556]	; (8002218 <ProfetSMTask+0x818>)
 8001fea:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8001fee:	3314      	adds	r3, #20
 8001ff0:	663b      	str	r3, [r7, #96]	; 0x60

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001ff2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ff6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ffe:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8002002:	4b86      	ldr	r3, [pc, #536]	; (800221c <ProfetSMTask+0x81c>)
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800200a:	2300      	movs	r3, #0
 800200c:	2200      	movs	r2, #0
 800200e:	f010 fca3 	bl	8012958 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8002012:	4b83      	ldr	r3, [pc, #524]	; (8002220 <ProfetSMTask+0x820>)
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800201a:	2300      	movs	r3, #0
 800201c:	2200      	movs	r2, #0
 800201e:	f010 fc9b 	bl	8012958 <osMessageQueuePut>
             }
           break;
 8002022:	e0d2      	b.n	80021ca <ProfetSMTask+0x7ca>

           //Set Time
           // 'T'
           case MSG_RX_SET_TIME:
             if(stMsgRx.nRxLen == 7){
 8002024:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002028:	2b07      	cmp	r3, #7
 800202a:	d121      	bne.n	8002070 <ProfetSMTask+0x670>
               stTime.Hours = stMsgRx.nRxData[1];
 800202c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002030:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
               stTime.Minutes = stMsgRx.nRxData[2];
 8002034:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002038:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
               stTime.Seconds = stMsgRx.nRxData[3];
 800203c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002040:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
               stTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002044:	2300      	movs	r3, #0
 8002046:	65bb      	str	r3, [r7, #88]	; 0x58
               stTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	65fb      	str	r3, [r7, #92]	; 0x5c

               stDate.Year = stMsgRx.nRxData[4];
 800204c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002050:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
               stDate.Month = stMsgRx.nRxData[5];
 8002054:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002058:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
               stDate.Date = stMsgRx.nRxData[6];
 800205c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002060:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
               stDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002064:	2301      	movs	r3, #1
 8002066:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

               //HAL_RTC_SetTime(hrtc, &stTime, RTC_FORMAT_BCD);
               //HAL_RTC_SetDate(hrtc, &stDate, RTC_FORMAT_BCD);
               //TODO: Use flag to Main task
               nSend = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
             }

             if((stMsgRx.nRxLen == 1) || nSend){
 8002070:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002074:	2b01      	cmp	r3, #1
 8002076:	d004      	beq.n	8002082 <ProfetSMTask+0x682>
 8002078:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80a6 	beq.w	80021ce <ProfetSMTask+0x7ce>
                 //HAL_RTC_GetTime(hrtc, &stTime, RTC_FORMAT_BCD);
                 //HAL_RTC_GetDate(hrtc, &stDate, RTC_FORMAT_BCD);
                 //TODO: Use flag to Main task

                 stMsgUsbTx.nTxLen = 7;
 8002082:	2307      	movs	r3, #7
 8002084:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                 stMsgCanTx.stTxHeader.DLC = 7;
 8002088:	2307      	movs	r3, #7
 800208a:	673b      	str	r3, [r7, #112]	; 0x70

                 stMsgUsbTx.nTxData[0] = MSG_TX_SET_TIME;
 800208c:	2374      	movs	r3, #116	; 0x74
 800208e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
                 stMsgUsbTx.nTxData[1] = stTime.Hours;
 8002092:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002096:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                 stMsgUsbTx.nTxData[2] = stTime.Minutes;
 800209a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800209e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                 stMsgUsbTx.nTxData[3] = stTime.Seconds;
 80020a2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80020a6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                 stMsgUsbTx.nTxData[4] = stDate.Year;
 80020aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80020ae:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                 stMsgUsbTx.nTxData[5] = stDate.Month;
 80020b2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80020b6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                 stMsgUsbTx.nTxData[6] = stDate.Date;
 80020ba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80020be:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                 stMsgUsbTx.nTxData[7] = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                 stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <ProfetSMTask+0x818>)
 80020ca:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80020ce:	3314      	adds	r3, #20
 80020d0:	663b      	str	r3, [r7, #96]	; 0x60

                 memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 80020d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020d6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80020da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020de:	e883 0003 	stmia.w	r3, {r0, r1}

                 osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 80020e2:	4b4e      	ldr	r3, [pc, #312]	; (800221c <ProfetSMTask+0x81c>)
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80020ea:	2300      	movs	r3, #0
 80020ec:	2200      	movs	r2, #0
 80020ee:	f010 fc33 	bl	8012958 <osMessageQueuePut>
                 osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 80020f2:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <ProfetSMTask+0x820>)
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80020fa:	2300      	movs	r3, #0
 80020fc:	2200      	movs	r2, #0
 80020fe:	f010 fc2b 	bl	8012958 <osMessageQueuePut>
             }


             break;
 8002102:	e064      	b.n	80021ce <ProfetSMTask+0x7ce>

           //Get Temperature
           // 'F'
           case MSG_RX_GET_TEMP:
             if((stMsgRx.nRxLen == 1) || nSend){
 8002104:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002108:	2b01      	cmp	r3, #1
 800210a:	d003      	beq.n	8002114 <ProfetSMTask+0x714>
 800210c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05e      	beq.n	80021d2 <ProfetSMTask+0x7d2>
                  stMsgUsbTx.nTxLen = 7;
 8002114:	2307      	movs	r3, #7
 8002116:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                  stMsgCanTx.stTxHeader.DLC = 7;
 800211a:	2307      	movs	r3, #7
 800211c:	673b      	str	r3, [r7, #112]	; 0x70

                  stMsgUsbTx.nTxData[0] = MSG_TX_GET_TEMP;
 800211e:	2366      	movs	r3, #102	; 0x66
 8002120:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
                  stMsgUsbTx.nTxData[1] = nBoardTempC >> 8;
 8002124:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <ProfetSMTask+0x824>)
 8002126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212a:	121b      	asrs	r3, r3, #8
 800212c:	b21b      	sxth	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                  stMsgUsbTx.nTxData[2] = nBoardTempC;
 8002134:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <ProfetSMTask+0x824>)
 8002136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                  stMsgUsbTx.nTxData[3] = nStmTemp >> 8;
 8002140:	4b39      	ldr	r3, [pc, #228]	; (8002228 <ProfetSMTask+0x828>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	b29b      	uxth	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                  stMsgUsbTx.nTxData[4] = nStmTemp;
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <ProfetSMTask+0x828>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                  stMsgUsbTx.nTxData[5] = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                  stMsgUsbTx.nTxData[6] = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                  stMsgUsbTx.nTxData[7] = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                  stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <ProfetSMTask+0x818>)
 8002170:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8002174:	3314      	adds	r3, #20
 8002176:	663b      	str	r3, [r7, #96]	; 0x60

                  memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8002178:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800217c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002180:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002184:	e883 0003 	stmia.w	r3, {r0, r1}

                  osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <ProfetSMTask+0x81c>)
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002190:	2300      	movs	r3, #0
 8002192:	2200      	movs	r2, #0
 8002194:	f010 fbe0 	bl	8012958 <osMessageQueuePut>
                  osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <ProfetSMTask+0x820>)
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80021a0:	2300      	movs	r3, #0
 80021a2:	2200      	movs	r2, #0
 80021a4:	f010 fbd8 	bl	8012958 <osMessageQueuePut>
             }
             break;
 80021a8:	e013      	b.n	80021d2 <ProfetSMTask+0x7d2>

           default:
             PdmConfig_Set(&stPdmConfig, &stMsgRx, &qMsgQueueUsbTx, &qMsgQueueCanTx);
 80021aa:	f107 010c 	add.w	r1, r7, #12
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <ProfetSMTask+0x820>)
 80021b0:	4a1a      	ldr	r2, [pc, #104]	; (800221c <ProfetSMTask+0x81c>)
 80021b2:	4819      	ldr	r0, [pc, #100]	; (8002218 <ProfetSMTask+0x818>)
 80021b4:	f001 fb58 	bl	8003868 <PdmConfig_Set>
             break;
 80021b8:	e00c      	b.n	80021d4 <ProfetSMTask+0x7d4>
        }
      }
 80021ba:	bf00      	nop
 80021bc:	e00a      	b.n	80021d4 <ProfetSMTask+0x7d4>
            break;
 80021be:	bf00      	nop
 80021c0:	e008      	b.n	80021d4 <ProfetSMTask+0x7d4>
           break;
 80021c2:	bf00      	nop
 80021c4:	e006      	b.n	80021d4 <ProfetSMTask+0x7d4>
           break;
 80021c6:	bf00      	nop
 80021c8:	e004      	b.n	80021d4 <ProfetSMTask+0x7d4>
           break;
 80021ca:	bf00      	nop
 80021cc:	e002      	b.n	80021d4 <ProfetSMTask+0x7d4>
             break;
 80021ce:	bf00      	nop
 80021d0:	e000      	b.n	80021d4 <ProfetSMTask+0x7d4>
             break;
 80021d2:	bf00      	nop
    }

    MsgQueueUsbTx_t stMsgTx;
    if(osMessageQueueGet(qMsgQueueUsbTx, &stMsgTx, NULL, 0U) == osOK){
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <ProfetSMTask+0x81c>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80021dc:	2300      	movs	r3, #0
 80021de:	2200      	movs	r2, #0
 80021e0:	f010 fc2e 	bl	8012a40 <osMessageQueueGet>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <ProfetSMTask+0x804>
      if(bUsbConnected){
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <ProfetSMTask+0x82c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <ProfetSMTask+0x804>
        //memcpy(&nUsbMsgTx, &stMsgTx.nTxData, stMsgTx.nTxLen);
        //nUsbMsgTx[stMsgTx.nTxLen] = '\r';
        if(USBD_CDC_Transmit((uint8_t*)stMsgTx.nTxData, stMsgTx.nTxLen) != USBD_OK){
 80021f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fd94 	bl	8000d2c <USBD_CDC_Transmit>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(5);
 8002204:	2005      	movs	r0, #5
 8002206:	f010 faf3 	bl	80127f0 <osDelay>
  for(;;){
 800220a:	e409      	b.n	8001a20 <ProfetSMTask+0x20>
 800220c:	20002370 	.word	0x20002370
 8002210:	20002372 	.word	0x20002372
 8002214:	51eb851f 	.word	0x51eb851f
 8002218:	20000200 	.word	0x20000200
 800221c:	20000ae0 	.word	0x20000ae0
 8002220:	20000ae4 	.word	0x20000ae4
 8002224:	20000dc2 	.word	0x20000dc2
 8002228:	20000dcc 	.word	0x20000dcc
 800222c:	20000dc0 	.word	0x20000dc0

08002230 <CanTxTask>:
  }

}

void CanTxTask(osThreadId_t* thisThreadId, CAN_HandleTypeDef* hcan)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b096      	sub	sp, #88	; 0x58
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  //Configure the CAN Filter
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	643b      	str	r3, [r7, #64]	; 0x40
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800223e:	2300      	movs	r3, #0
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002242:	2301      	movs	r3, #1
 8002244:	64bb      	str	r3, [r7, #72]	; 0x48
  sFilterConfig.FilterIdHigh = 0x0000;
 8002246:	2300      	movs	r3, #0
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
  sFilterConfig.FilterIdLow = 0x0000;
 800224a:	2300      	movs	r3, #0
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800224e:	2300      	movs	r3, #0
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8002252:	2300      	movs	r3, #0
 8002254:	63bb      	str	r3, [r7, #56]	; 0x38
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002256:	2300      	movs	r3, #0
 8002258:	63fb      	str	r3, [r7, #60]	; 0x3c
  sFilterConfig.FilterActivation = ENABLE;
 800225a:	2301      	movs	r3, #1
 800225c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sFilterConfig.SlaveStartFilterBank = 14;
 800225e:	230e      	movs	r3, #14
 8002260:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8002262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002266:	4619      	mov	r1, r3
 8002268:	6838      	ldr	r0, [r7, #0]
 800226a:	f006 fdf6 	bl	8008e5a <HAL_CAN_ConfigFilter>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <CanTxTask+0x48>
  {
    /* Filter configuration Error */
    Error_Handler();
 8002274:	f001 faf0 	bl	8003858 <Error_Handler>
  }

  //Start the CAN periphera
  if (HAL_CAN_Start(hcan) != HAL_OK)
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f006 feb8 	bl	8008fee <HAL_CAN_Start>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <CanTxTask+0x58>
  {
    /* Start Error */
    Error_Handler();
 8002284:	f001 fae8 	bl	8003858 <Error_Handler>
  }

  //Activate CAN RX notification
  if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002288:	2102      	movs	r1, #2
 800228a:	6838      	ldr	r0, [r7, #0]
 800228c:	f007 f8e0 	bl	8009450 <HAL_CAN_ActivateNotification>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <CanTxTask+0x6a>
  {
    /* Notification Error */
    Error_Handler();
 8002296:	f001 fadf 	bl	8003858 <Error_Handler>
  }

  //Configure Transmission
  stCanTxHeader.StdId = 1620;
 800229a:	4ba7      	ldr	r3, [pc, #668]	; (8002538 <CanTxTask+0x308>)
 800229c:	f240 6254 	movw	r2, #1620	; 0x654
 80022a0:	601a      	str	r2, [r3, #0]
  stCanTxHeader.ExtId = 0;
 80022a2:	4ba5      	ldr	r3, [pc, #660]	; (8002538 <CanTxTask+0x308>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
  stCanTxHeader.RTR = CAN_RTR_DATA;
 80022a8:	4ba3      	ldr	r3, [pc, #652]	; (8002538 <CanTxTask+0x308>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  stCanTxHeader.IDE = CAN_ID_STD;
 80022ae:	4ba2      	ldr	r3, [pc, #648]	; (8002538 <CanTxTask+0x308>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  stCanTxHeader.DLC = 8;
 80022b4:	4ba0      	ldr	r3, [pc, #640]	; (8002538 <CanTxTask+0x308>)
 80022b6:	2208      	movs	r2, #8
 80022b8:	611a      	str	r2, [r3, #16]
  stCanTxHeader.TransmitGlobalTime = DISABLE;
 80022ba:	4b9f      	ldr	r3, [pc, #636]	; (8002538 <CanTxTask+0x308>)
 80022bc:	2200      	movs	r2, #0
 80022be:	751a      	strb	r2, [r3, #20]

  for(;;){
    if(stPdmConfig.stCanOutput.nEnabled &&
 80022c0:	4b9e      	ldr	r3, [pc, #632]	; (800253c <CanTxTask+0x30c>)
 80022c2:	f893 38d4 	ldrb.w	r3, [r3, #2260]	; 0x8d4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8248 	beq.w	800275c <CanTxTask+0x52c>
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 80022cc:	4b9b      	ldr	r3, [pc, #620]	; (800253c <CanTxTask+0x30c>)
 80022ce:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
    if(stPdmConfig.stCanOutput.nEnabled &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8242 	beq.w	800275c <CanTxTask+0x52c>
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 80022d8:	4b98      	ldr	r3, [pc, #608]	; (800253c <CanTxTask+0x30c>)
 80022da:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 823c 	beq.w	800275c <CanTxTask+0x52c>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 80022e4:	4b95      	ldr	r3, [pc, #596]	; (800253c <CanTxTask+0x30c>)
 80022e6:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 80022ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ee:	f080 8235 	bcs.w	800275c <CanTxTask+0x52c>

      MsgQueueCanTx_t stMsgTx;
      osStatus_t stStatus;
      //Keep sending queued messages until empty
      do{
        stStatus = osMessageQueueGet(qMsgQueueCanTx, &stMsgTx, NULL, 0U);
 80022f2:	4b93      	ldr	r3, [pc, #588]	; (8002540 <CanTxTask+0x310>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	f107 010c 	add.w	r1, r7, #12
 80022fa:	2300      	movs	r3, #0
 80022fc:	2200      	movs	r2, #0
 80022fe:	f010 fb9f 	bl	8012a40 <osMessageQueueGet>
 8002302:	6578      	str	r0, [r7, #84]	; 0x54
        if(stStatus == osOK){
 8002304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11d      	bne.n	8002346 <CanTxTask+0x116>
          stMsgTx.stTxHeader.ExtId = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
          stMsgTx.stTxHeader.IDE = CAN_ID_STD;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
          stMsgTx.stTxHeader.RTR = CAN_RTR_DATA;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
          stMsgTx.stTxHeader.TransmitGlobalTime = DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3020 	strb.w	r3, [r7, #32]

          if(HAL_CAN_AddTxMessage(hcan, &stMsgTx.stTxHeader, stMsgTx.nTxData, &nCanTxMailbox) != HAL_OK){
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	f103 0218 	add.w	r2, r3, #24
 8002324:	f107 010c 	add.w	r1, r7, #12
 8002328:	4b86      	ldr	r3, [pc, #536]	; (8002544 <CanTxTask+0x314>)
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	f006 fea3 	bl	8009076 <HAL_CAN_AddTxMessage>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <CanTxTask+0x116>
            //Send failed - add back to queue
            osMessageQueuePut(qMsgQueueCanTx, &stMsgTx, 0U, 0U);
 8002336:	4b82      	ldr	r3, [pc, #520]	; (8002540 <CanTxTask+0x310>)
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	f107 010c 	add.w	r1, r7, #12
 800233e:	2300      	movs	r3, #0
 8002340:	2200      	movs	r2, #0
 8002342:	f010 fb09 	bl	8012958 <osMessageQueuePut>
          }
        }
      }while(stStatus == osOK);
 8002346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0d2      	beq.n	80022f2 <CanTxTask+0xc2>


      //=======================================================
      //Build Msg 0 (Analog inputs 1-4)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 0;
 800234c:	4b7b      	ldr	r3, [pc, #492]	; (800253c <CanTxTask+0x30c>)
 800234e:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8002352:	461a      	mov	r2, r3
 8002354:	4b78      	ldr	r3, [pc, #480]	; (8002538 <CanTxTask+0x308>)
 8002356:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002358:	4b77      	ldr	r3, [pc, #476]	; (8002538 <CanTxTask+0x308>)
 800235a:	2208      	movs	r2, #8
 800235c:	611a      	str	r2, [r3, #16]
      //nCanTxData[7] = nAiBank1Raw[3];

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 800235e:	4b79      	ldr	r3, [pc, #484]	; (8002544 <CanTxTask+0x314>)
 8002360:	4a79      	ldr	r2, [pc, #484]	; (8002548 <CanTxTask+0x318>)
 8002362:	4975      	ldr	r1, [pc, #468]	; (8002538 <CanTxTask+0x308>)
 8002364:	6838      	ldr	r0, [r7, #0]
 8002366:	f006 fe86 	bl	8009076 <HAL_CAN_AddTxMessage>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <CanTxTask+0x144>
        Error_Handler();
 8002370:	f001 fa72 	bl	8003858 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002374:	2005      	movs	r0, #5
 8002376:	f010 fa3b 	bl	80127f0 <osDelay>

      //=======================================================
      //Build Msg 1 (Analog inputs 5-6)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 1;
 800237a:	4b70      	ldr	r3, [pc, #448]	; (800253c <CanTxTask+0x30c>)
 800237c:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8002380:	3301      	adds	r3, #1
 8002382:	461a      	mov	r2, r3
 8002384:	4b6c      	ldr	r3, [pc, #432]	; (8002538 <CanTxTask+0x308>)
 8002386:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002388:	4b6b      	ldr	r3, [pc, #428]	; (8002538 <CanTxTask+0x308>)
 800238a:	2208      	movs	r2, #8
 800238c:	611a      	str	r2, [r3, #16]
      //nCanTxData[7] = 0;

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 800238e:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <CanTxTask+0x314>)
 8002390:	4a6d      	ldr	r2, [pc, #436]	; (8002548 <CanTxTask+0x318>)
 8002392:	4969      	ldr	r1, [pc, #420]	; (8002538 <CanTxTask+0x308>)
 8002394:	6838      	ldr	r0, [r7, #0]
 8002396:	f006 fe6e 	bl	8009076 <HAL_CAN_AddTxMessage>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <CanTxTask+0x174>
        Error_Handler();
 80023a0:	f001 fa5a 	bl	8003858 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 80023a4:	2005      	movs	r0, #5
 80023a6:	f010 fa23 	bl	80127f0 <osDelay>

      //=======================================================
      //Build Msg 2 (Device status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 2;
 80023aa:	4b64      	ldr	r3, [pc, #400]	; (800253c <CanTxTask+0x30c>)
 80023ac:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80023b0:	3302      	adds	r3, #2
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b60      	ldr	r3, [pc, #384]	; (8002538 <CanTxTask+0x308>)
 80023b6:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80023b8:	4b5f      	ldr	r3, [pc, #380]	; (8002538 <CanTxTask+0x308>)
 80023ba:	2208      	movs	r2, #8
 80023bc:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = eDevState;
 80023be:	4b63      	ldr	r3, [pc, #396]	; (800254c <CanTxTask+0x31c>)
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	4b61      	ldr	r3, [pc, #388]	; (8002548 <CanTxTask+0x318>)
 80023c4:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = 0;
 80023c6:	4b60      	ldr	r3, [pc, #384]	; (8002548 <CanTxTask+0x318>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = nILTotal >> 8;
 80023cc:	4b60      	ldr	r3, [pc, #384]	; (8002550 <CanTxTask+0x320>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <CanTxTask+0x318>)
 80023da:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = nILTotal;
 80023dc:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <CanTxTask+0x320>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b58      	ldr	r3, [pc, #352]	; (8002548 <CanTxTask+0x318>)
 80023e6:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = nBattSense >> 8;
 80023e8:	4b5a      	ldr	r3, [pc, #360]	; (8002554 <CanTxTask+0x324>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b54      	ldr	r3, [pc, #336]	; (8002548 <CanTxTask+0x318>)
 80023f6:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = nBattSense;
 80023f8:	4b56      	ldr	r3, [pc, #344]	; (8002554 <CanTxTask+0x324>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b51      	ldr	r3, [pc, #324]	; (8002548 <CanTxTask+0x318>)
 8002402:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = nBoardTempC >> 8;
 8002404:	4b54      	ldr	r3, [pc, #336]	; (8002558 <CanTxTask+0x328>)
 8002406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240a:	121b      	asrs	r3, r3, #8
 800240c:	b21b      	sxth	r3, r3
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <CanTxTask+0x318>)
 8002412:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = nBoardTempC;
 8002414:	4b50      	ldr	r3, [pc, #320]	; (8002558 <CanTxTask+0x328>)
 8002416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <CanTxTask+0x318>)
 800241e:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002420:	4b48      	ldr	r3, [pc, #288]	; (8002544 <CanTxTask+0x314>)
 8002422:	4a49      	ldr	r2, [pc, #292]	; (8002548 <CanTxTask+0x318>)
 8002424:	4944      	ldr	r1, [pc, #272]	; (8002538 <CanTxTask+0x308>)
 8002426:	6838      	ldr	r0, [r7, #0]
 8002428:	f006 fe25 	bl	8009076 <HAL_CAN_AddTxMessage>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <CanTxTask+0x206>
        Error_Handler();
 8002432:	f001 fa11 	bl	8003858 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002436:	2005      	movs	r0, #5
 8002438:	f010 f9da 	bl	80127f0 <osDelay>

      //=======================================================
      //Build Msg 3 (Out 1-4 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 3;
 800243c:	4b3f      	ldr	r3, [pc, #252]	; (800253c <CanTxTask+0x30c>)
 800243e:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8002442:	3303      	adds	r3, #3
 8002444:	461a      	mov	r2, r3
 8002446:	4b3c      	ldr	r3, [pc, #240]	; (8002538 <CanTxTask+0x308>)
 8002448:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <CanTxTask+0x308>)
 800244c:	2208      	movs	r2, #8
 800244e:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[0].nIL >> 8;
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <CanTxTask+0x32c>)
 8002452:	8c1b      	ldrh	r3, [r3, #32]
 8002454:	b29b      	uxth	r3, r3
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	b29b      	uxth	r3, r3
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <CanTxTask+0x318>)
 800245e:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[0].nIL;
 8002460:	4b3e      	ldr	r3, [pc, #248]	; (800255c <CanTxTask+0x32c>)
 8002462:	8c1b      	ldrh	r3, [r3, #32]
 8002464:	b29b      	uxth	r3, r3
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b37      	ldr	r3, [pc, #220]	; (8002548 <CanTxTask+0x318>)
 800246a:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[1].nIL >> 8;
 800246c:	4b3b      	ldr	r3, [pc, #236]	; (800255c <CanTxTask+0x32c>)
 800246e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002472:	b29b      	uxth	r3, r3
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	b29b      	uxth	r3, r3
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b33      	ldr	r3, [pc, #204]	; (8002548 <CanTxTask+0x318>)
 800247c:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[1].nIL;
 800247e:	4b37      	ldr	r3, [pc, #220]	; (800255c <CanTxTask+0x32c>)
 8002480:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002484:	b29b      	uxth	r3, r3
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <CanTxTask+0x318>)
 800248a:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[2].nIL >> 8;
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <CanTxTask+0x32c>)
 800248e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8002492:	b29b      	uxth	r3, r3
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	b29b      	uxth	r3, r3
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <CanTxTask+0x318>)
 800249c:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[2].nIL;
 800249e:	4b2f      	ldr	r3, [pc, #188]	; (800255c <CanTxTask+0x32c>)
 80024a0:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <CanTxTask+0x318>)
 80024aa:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[3].nIL >> 8;
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <CanTxTask+0x32c>)
 80024ae:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b23      	ldr	r3, [pc, #140]	; (8002548 <CanTxTask+0x318>)
 80024bc:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[3].nIL;
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <CanTxTask+0x32c>)
 80024c0:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <CanTxTask+0x318>)
 80024ca:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <CanTxTask+0x314>)
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <CanTxTask+0x318>)
 80024d0:	4919      	ldr	r1, [pc, #100]	; (8002538 <CanTxTask+0x308>)
 80024d2:	6838      	ldr	r0, [r7, #0]
 80024d4:	f006 fdcf 	bl	8009076 <HAL_CAN_AddTxMessage>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <CanTxTask+0x2b2>
        Error_Handler();
 80024de:	f001 f9bb 	bl	8003858 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 80024e2:	2005      	movs	r0, #5
 80024e4:	f010 f984 	bl	80127f0 <osDelay>

      //=======================================================
      //Build Msg 4 (Out 5-8 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 4;
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <CanTxTask+0x30c>)
 80024ea:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80024ee:	3304      	adds	r3, #4
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <CanTxTask+0x308>)
 80024f4:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <CanTxTask+0x308>)
 80024f8:	2208      	movs	r2, #8
 80024fa:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[4].nIL >> 8;
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <CanTxTask+0x32c>)
 80024fe:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002502:	b29b      	uxth	r3, r3
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	b29b      	uxth	r3, r3
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <CanTxTask+0x318>)
 800250c:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[4].nIL;
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <CanTxTask+0x32c>)
 8002510:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002514:	b29b      	uxth	r3, r3
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <CanTxTask+0x318>)
 800251a:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[5].nIL >> 8;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <CanTxTask+0x32c>)
 800251e:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8002522:	b29b      	uxth	r3, r3
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b29b      	uxth	r3, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <CanTxTask+0x318>)
 800252c:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[5].nIL;
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <CanTxTask+0x32c>)
 8002530:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8002534:	b29b      	uxth	r3, r3
 8002536:	e013      	b.n	8002560 <CanTxTask+0x330>
 8002538:	20000dec 	.word	0x20000dec
 800253c:	20000200 	.word	0x20000200
 8002540:	20000ae4 	.word	0x20000ae4
 8002544:	20000e30 	.word	0x20000e30
 8002548:	20000e20 	.word	0x20000e20
 800254c:	20000ae9 	.word	0x20000ae9
 8002550:	20000d8c 	.word	0x20000d8c
 8002554:	20000dca 	.word	0x20000dca
 8002558:	20000dc2 	.word	0x20000dc2
 800255c:	20000aec 	.word	0x20000aec
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b80      	ldr	r3, [pc, #512]	; (8002764 <CanTxTask+0x534>)
 8002564:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[6].nIL >> 8;
 8002566:	4b80      	ldr	r3, [pc, #512]	; (8002768 <CanTxTask+0x538>)
 8002568:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 800256c:	b29b      	uxth	r3, r3
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	b29b      	uxth	r3, r3
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b7b      	ldr	r3, [pc, #492]	; (8002764 <CanTxTask+0x534>)
 8002576:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[6].nIL;
 8002578:	4b7b      	ldr	r3, [pc, #492]	; (8002768 <CanTxTask+0x538>)
 800257a:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 800257e:	b29b      	uxth	r3, r3
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b78      	ldr	r3, [pc, #480]	; (8002764 <CanTxTask+0x534>)
 8002584:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[7].nIL >> 8;
 8002586:	4b78      	ldr	r3, [pc, #480]	; (8002768 <CanTxTask+0x538>)
 8002588:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800258c:	b29b      	uxth	r3, r3
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	b29b      	uxth	r3, r3
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b73      	ldr	r3, [pc, #460]	; (8002764 <CanTxTask+0x534>)
 8002596:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[7].nIL;
 8002598:	4b73      	ldr	r3, [pc, #460]	; (8002768 <CanTxTask+0x538>)
 800259a:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800259e:	b29b      	uxth	r3, r3
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4b70      	ldr	r3, [pc, #448]	; (8002764 <CanTxTask+0x534>)
 80025a4:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 80025a6:	4b71      	ldr	r3, [pc, #452]	; (800276c <CanTxTask+0x53c>)
 80025a8:	4a6e      	ldr	r2, [pc, #440]	; (8002764 <CanTxTask+0x534>)
 80025aa:	4971      	ldr	r1, [pc, #452]	; (8002770 <CanTxTask+0x540>)
 80025ac:	6838      	ldr	r0, [r7, #0]
 80025ae:	f006 fd62 	bl	8009076 <HAL_CAN_AddTxMessage>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <CanTxTask+0x38c>
        Error_Handler();
 80025b8:	f001 f94e 	bl	8003858 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 80025bc:	2005      	movs	r0, #5
 80025be:	f010 f917 	bl	80127f0 <osDelay>

      //=======================================================
      //Build Msg 5 (Out 9-12 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 5;
 80025c2:	4b6c      	ldr	r3, [pc, #432]	; (8002774 <CanTxTask+0x544>)
 80025c4:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80025c8:	3305      	adds	r3, #5
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b68      	ldr	r3, [pc, #416]	; (8002770 <CanTxTask+0x540>)
 80025ce:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80025d0:	4b67      	ldr	r3, [pc, #412]	; (8002770 <CanTxTask+0x540>)
 80025d2:	2208      	movs	r2, #8
 80025d4:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[8].nIL >> 8;
 80025d6:	4b64      	ldr	r3, [pc, #400]	; (8002768 <CanTxTask+0x538>)
 80025d8:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80025dc:	b29b      	uxth	r3, r3
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <CanTxTask+0x534>)
 80025e6:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[8].nIL;
 80025e8:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <CanTxTask+0x538>)
 80025ea:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b5c      	ldr	r3, [pc, #368]	; (8002764 <CanTxTask+0x534>)
 80025f4:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[9].nIL >> 8;
 80025f6:	4b5c      	ldr	r3, [pc, #368]	; (8002768 <CanTxTask+0x538>)
 80025f8:	f8b3 3218 	ldrh.w	r3, [r3, #536]	; 0x218
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	b29b      	uxth	r3, r3
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b57      	ldr	r3, [pc, #348]	; (8002764 <CanTxTask+0x534>)
 8002606:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[9].nIL;
 8002608:	4b57      	ldr	r3, [pc, #348]	; (8002768 <CanTxTask+0x538>)
 800260a:	f8b3 3218 	ldrh.w	r3, [r3, #536]	; 0x218
 800260e:	b29b      	uxth	r3, r3
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4b54      	ldr	r3, [pc, #336]	; (8002764 <CanTxTask+0x534>)
 8002614:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[10].nIL >> 8;
 8002616:	4b54      	ldr	r3, [pc, #336]	; (8002768 <CanTxTask+0x538>)
 8002618:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 800261c:	b29b      	uxth	r3, r3
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	b29b      	uxth	r3, r3
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b4f      	ldr	r3, [pc, #316]	; (8002764 <CanTxTask+0x534>)
 8002626:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[10].nIL;
 8002628:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <CanTxTask+0x538>)
 800262a:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 800262e:	b29b      	uxth	r3, r3
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <CanTxTask+0x534>)
 8002634:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[11].nIL >> 8;
 8002636:	4b4c      	ldr	r3, [pc, #304]	; (8002768 <CanTxTask+0x538>)
 8002638:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 800263c:	b29b      	uxth	r3, r3
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	b29b      	uxth	r3, r3
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b47      	ldr	r3, [pc, #284]	; (8002764 <CanTxTask+0x534>)
 8002646:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[11].nIL;
 8002648:	4b47      	ldr	r3, [pc, #284]	; (8002768 <CanTxTask+0x538>)
 800264a:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 800264e:	b29b      	uxth	r3, r3
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b44      	ldr	r3, [pc, #272]	; (8002764 <CanTxTask+0x534>)
 8002654:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002656:	4b45      	ldr	r3, [pc, #276]	; (800276c <CanTxTask+0x53c>)
 8002658:	4a42      	ldr	r2, [pc, #264]	; (8002764 <CanTxTask+0x534>)
 800265a:	4945      	ldr	r1, [pc, #276]	; (8002770 <CanTxTask+0x540>)
 800265c:	6838      	ldr	r0, [r7, #0]
 800265e:	f006 fd0a 	bl	8009076 <HAL_CAN_AddTxMessage>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <CanTxTask+0x43c>
        Error_Handler();
 8002668:	f001 f8f6 	bl	8003858 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 800266c:	2005      	movs	r0, #5
 800266e:	f010 f8bf 	bl	80127f0 <osDelay>

      //=======================================================
      //Build Msg 6 (Out 1-12 Status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 6;
 8002672:	4b40      	ldr	r3, [pc, #256]	; (8002774 <CanTxTask+0x544>)
 8002674:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8002678:	3306      	adds	r3, #6
 800267a:	461a      	mov	r2, r3
 800267c:	4b3c      	ldr	r3, [pc, #240]	; (8002770 <CanTxTask+0x540>)
 800267e:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002680:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <CanTxTask+0x540>)
 8002682:	2208      	movs	r2, #8
 8002684:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = (pf[1].eState << 4) + pf[0].eState;
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <CanTxTask+0x538>)
 8002688:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800268c:	b2db      	uxtb	r3, r3
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b35      	ldr	r3, [pc, #212]	; (8002768 <CanTxTask+0x538>)
 8002694:	785b      	ldrb	r3, [r3, #1]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4413      	add	r3, r2
 800269a:	b2da      	uxtb	r2, r3
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <CanTxTask+0x534>)
 800269e:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = (pf[3].eState << 4) + pf[2].eState;
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <CanTxTask+0x538>)
 80026a2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <CanTxTask+0x538>)
 80026ae:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <CanTxTask+0x534>)
 80026ba:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = (pf[5].eState << 4) + pf[4].eState;
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <CanTxTask+0x538>)
 80026be:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <CanTxTask+0x538>)
 80026ca:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <CanTxTask+0x534>)
 80026d6:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = (pf[7].eState << 4) + pf[6].eState;
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <CanTxTask+0x538>)
 80026da:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <CanTxTask+0x538>)
 80026e6:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <CanTxTask+0x534>)
 80026f2:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = (pf[9].eState << 4) + pf[8].eState;
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <CanTxTask+0x538>)
 80026f6:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <CanTxTask+0x538>)
 8002702:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4413      	add	r3, r2
 800270a:	b2da      	uxtb	r2, r3
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <CanTxTask+0x534>)
 800270e:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = (pf[11].eState << 4) + pf[10].eState;
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <CanTxTask+0x538>)
 8002712:	f893 3269 	ldrb.w	r3, [r3, #617]	; 0x269
 8002716:	b2db      	uxtb	r3, r3
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <CanTxTask+0x538>)
 800271e:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4413      	add	r3, r2
 8002726:	b2da      	uxtb	r2, r3
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <CanTxTask+0x534>)
 800272a:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = 0;
 800272c:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <CanTxTask+0x534>)
 800272e:	2200      	movs	r2, #0
 8002730:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = 0;
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <CanTxTask+0x534>)
 8002734:	2200      	movs	r2, #0
 8002736:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <CanTxTask+0x53c>)
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <CanTxTask+0x534>)
 800273c:	490c      	ldr	r1, [pc, #48]	; (8002770 <CanTxTask+0x540>)
 800273e:	6838      	ldr	r0, [r7, #0]
 8002740:	f006 fc99 	bl	8009076 <HAL_CAN_AddTxMessage>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <CanTxTask+0x51e>
        Error_Handler();
 800274a:	f001 f885 	bl	8003858 <Error_Handler>

#ifdef MEAS_HEAP_USE
      __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

      osDelay(stPdmConfig.stCanOutput.nUpdateTime);
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <CanTxTask+0x544>)
 8002750:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 8002754:	4618      	mov	r0, r3
 8002756:	f010 f84b 	bl	80127f0 <osDelay>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 800275a:	e002      	b.n	8002762 <CanTxTask+0x532>
    }
    else{
      osDelay(50);
 800275c:	2032      	movs	r0, #50	; 0x32
 800275e:	f010 f847 	bl	80127f0 <osDelay>
    if(stPdmConfig.stCanOutput.nEnabled &&
 8002762:	e5ad      	b.n	80022c0 <CanTxTask+0x90>
 8002764:	20000e20 	.word	0x20000e20
 8002768:	20000aec 	.word	0x20000aec
 800276c:	20000e30 	.word	0x20000e30
 8002770:	20000dec 	.word	0x20000dec
 8002774:	20000200 	.word	0x20000200

08002778 <SetPfStatusLed>:

  }
}

void SetPfStatusLed(PCA9635_LEDOnState_t *ledState, volatile ProfetTypeDef *profet)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  //0 = Off
  //1 = On
  //3 = Flash
  *ledState = (profet->eState == ON) +          //On
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	785b      	ldrb	r3, [r3, #1]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
              (profet->eState == IN_RUSH) +     //On
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
  *ledState = (profet->eState == ON) +          //On
 80027a4:	4413      	add	r3, r2
 80027a6:	b2db      	uxtb	r3, r3
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	7852      	ldrb	r2, [r2, #1]
 80027ac:	b2d2      	uxtb	r2, r2
              (profet->eState == IN_RUSH) +     //On
 80027ae:	2a04      	cmp	r2, #4
 80027b0:	d101      	bne.n	80027b6 <SetPfStatusLed+0x3e>
 80027b2:	2203      	movs	r2, #3
 80027b4:	e000      	b.n	80027b8 <SetPfStatusLed+0x40>
 80027b6:	2200      	movs	r2, #0
 80027b8:	4413      	add	r3, r2
 80027ba:	b2db      	uxtb	r3, r3
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	7852      	ldrb	r2, [r2, #1]
 80027c0:	b2d2      	uxtb	r2, r2
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 80027c2:	2a03      	cmp	r2, #3
 80027c4:	d101      	bne.n	80027ca <SetPfStatusLed+0x52>
 80027c6:	2203      	movs	r2, #3
 80027c8:	e000      	b.n	80027cc <SetPfStatusLed+0x54>
 80027ca:	2200      	movs	r2, #0
 80027cc:	4413      	add	r3, r2
 80027ce:	b2db      	uxtb	r3, r3
              (profet->eState == SUSPENDED)     * LED_FLASH +
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	7852      	ldrb	r2, [r2, #1]
 80027d4:	b2d2      	uxtb	r2, r2
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 80027d6:	2a06      	cmp	r2, #6
 80027d8:	d101      	bne.n	80027de <SetPfStatusLed+0x66>
 80027da:	2203      	movs	r2, #3
 80027dc:	e000      	b.n	80027e0 <SetPfStatusLed+0x68>
 80027de:	2200      	movs	r2, #0
 80027e0:	4413      	add	r3, r2
 80027e2:	b2db      	uxtb	r3, r3
              (profet->eState == FAULT)         * LED_FLASH;
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	7852      	ldrb	r2, [r2, #1]
 80027e8:	b2d2      	uxtb	r2, r2
              (profet->eState == SUSPENDED)     * LED_FLASH +
 80027ea:	2a05      	cmp	r2, #5
 80027ec:	d101      	bne.n	80027f2 <SetPfStatusLed+0x7a>
 80027ee:	2203      	movs	r2, #3
 80027f0:	e000      	b.n	80027f4 <SetPfStatusLed+0x7c>
 80027f2:	2200      	movs	r2, #0
 80027f4:	4413      	add	r3, r2
 80027f6:	b2da      	uxtb	r2, r3
  *ledState = (profet->eState == ON) +          //On
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	701a      	strb	r2, [r3, #0]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <Profet_Init>:

void Profet_Init(){
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  pf[0].eModel = BTS7002_1EPP;
 800280c:	4b8a      	ldr	r3, [pc, #552]	; (8002a38 <Profet_Init+0x230>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
  pf[0].nNum = 0;
 8002812:	4b89      	ldr	r3, [pc, #548]	; (8002a38 <Profet_Init+0x230>)
 8002814:	2200      	movs	r2, #0
 8002816:	809a      	strh	r2, [r3, #4]
  pf[0].nIN_Port = &pfGpioBank1;
 8002818:	4b87      	ldr	r3, [pc, #540]	; (8002a38 <Profet_Init+0x230>)
 800281a:	4a88      	ldr	r2, [pc, #544]	; (8002a3c <Profet_Init+0x234>)
 800281c:	609a      	str	r2, [r3, #8]
  pf[0].nIN_Pin = 0x0080;
 800281e:	4b86      	ldr	r3, [pc, #536]	; (8002a38 <Profet_Init+0x230>)
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	819a      	strh	r2, [r3, #12]
  pf[0].fKilis = 2.286;
 8002824:	4b84      	ldr	r3, [pc, #528]	; (8002a38 <Profet_Init+0x230>)
 8002826:	4a86      	ldr	r2, [pc, #536]	; (8002a40 <Profet_Init+0x238>)
 8002828:	635a      	str	r2, [r3, #52]	; 0x34

  pf[1].eModel = BTS7002_1EPP;
 800282a:	4b83      	ldr	r3, [pc, #524]	; (8002a38 <Profet_Init+0x230>)
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pf[1].nNum = 1;
 8002832:	4b81      	ldr	r3, [pc, #516]	; (8002a38 <Profet_Init+0x230>)
 8002834:	2201      	movs	r2, #1
 8002836:	879a      	strh	r2, [r3, #60]	; 0x3c
  pf[1].nIN_Port = &pfGpioBank1;
 8002838:	4b7f      	ldr	r3, [pc, #508]	; (8002a38 <Profet_Init+0x230>)
 800283a:	4a80      	ldr	r2, [pc, #512]	; (8002a3c <Profet_Init+0x234>)
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
  pf[1].nIN_Pin = 0x0002;
 800283e:	4b7e      	ldr	r3, [pc, #504]	; (8002a38 <Profet_Init+0x230>)
 8002840:	2202      	movs	r2, #2
 8002842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  pf[1].fKilis = 2.286;
 8002846:	4b7c      	ldr	r3, [pc, #496]	; (8002a38 <Profet_Init+0x230>)
 8002848:	4a7d      	ldr	r2, [pc, #500]	; (8002a40 <Profet_Init+0x238>)
 800284a:	66da      	str	r2, [r3, #108]	; 0x6c

  pf[2].eModel = BTS7008_2EPA_CH1;
 800284c:	4b7a      	ldr	r3, [pc, #488]	; (8002a38 <Profet_Init+0x230>)
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  pf[2].nNum = 2;
 8002854:	4b78      	ldr	r3, [pc, #480]	; (8002a38 <Profet_Init+0x230>)
 8002856:	2202      	movs	r2, #2
 8002858:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  pf[2].nIN_Port = &pfGpioBank1;
 800285c:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <Profet_Init+0x230>)
 800285e:	4a77      	ldr	r2, [pc, #476]	; (8002a3c <Profet_Init+0x234>)
 8002860:	679a      	str	r2, [r3, #120]	; 0x78
  pf[2].nIN_Pin = 0x8000;
 8002862:	4b75      	ldr	r3, [pc, #468]	; (8002a38 <Profet_Init+0x230>)
 8002864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002868:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
  pf[2].fKilis = 0.554;
 800286c:	4b72      	ldr	r3, [pc, #456]	; (8002a38 <Profet_Init+0x230>)
 800286e:	4a75      	ldr	r2, [pc, #468]	; (8002a44 <Profet_Init+0x23c>)
 8002870:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  pf[3].eModel = BTS7008_2EPA_CH2;
 8002874:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <Profet_Init+0x230>)
 8002876:	2202      	movs	r2, #2
 8002878:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
  pf[3].eState = OFF;
 800287c:	4b6e      	ldr	r3, [pc, #440]	; (8002a38 <Profet_Init+0x230>)
 800287e:	2200      	movs	r2, #0
 8002880:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
  pf[3].nNum = 3;
 8002884:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <Profet_Init+0x230>)
 8002886:	2203      	movs	r2, #3
 8002888:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  pf[3].nIN_Port = &pfGpioBank1;
 800288c:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <Profet_Init+0x230>)
 800288e:	4a6b      	ldr	r2, [pc, #428]	; (8002a3c <Profet_Init+0x234>)
 8002890:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  pf[3].nIN_Pin = 0x1000;
 8002894:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <Profet_Init+0x230>)
 8002896:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800289a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  pf[3].fKilis = 0.554;
 800289e:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <Profet_Init+0x230>)
 80028a0:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <Profet_Init+0x23c>)
 80028a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  pf[4].eModel = BTS7008_2EPA_CH1;
 80028a6:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <Profet_Init+0x230>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  pf[4].eState = OFF;
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <Profet_Init+0x230>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  pf[4].nNum = 4;
 80028b6:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <Profet_Init+0x230>)
 80028b8:	2204      	movs	r2, #4
 80028ba:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
  pf[4].nIN_Port = &pfGpioBank1;
 80028be:	4b5e      	ldr	r3, [pc, #376]	; (8002a38 <Profet_Init+0x230>)
 80028c0:	4a5e      	ldr	r2, [pc, #376]	; (8002a3c <Profet_Init+0x234>)
 80028c2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  pf[4].nIN_Pin = 0x0800;
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <Profet_Init+0x230>)
 80028c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028cc:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  pf[4].fKilis = 0.554;
 80028d0:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <Profet_Init+0x230>)
 80028d2:	4a5c      	ldr	r2, [pc, #368]	; (8002a44 <Profet_Init+0x23c>)
 80028d4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  pf[5].eModel = BTS7008_2EPA_CH2;
 80028d8:	4b57      	ldr	r3, [pc, #348]	; (8002a38 <Profet_Init+0x230>)
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  pf[5].eState = OFF;
 80028e0:	4b55      	ldr	r3, [pc, #340]	; (8002a38 <Profet_Init+0x230>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  pf[5].nNum = 5;
 80028e8:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <Profet_Init+0x230>)
 80028ea:	2205      	movs	r2, #5
 80028ec:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  pf[5].nIN_Port = &pfGpioBank1;
 80028f0:	4b51      	ldr	r3, [pc, #324]	; (8002a38 <Profet_Init+0x230>)
 80028f2:	4a52      	ldr	r2, [pc, #328]	; (8002a3c <Profet_Init+0x234>)
 80028f4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  pf[5].nIN_Pin = 0x0100;
 80028f8:	4b4f      	ldr	r3, [pc, #316]	; (8002a38 <Profet_Init+0x230>)
 80028fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028fe:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
  pf[5].fKilis = 0.554;
 8002902:	4b4d      	ldr	r3, [pc, #308]	; (8002a38 <Profet_Init+0x230>)
 8002904:	4a4f      	ldr	r2, [pc, #316]	; (8002a44 <Profet_Init+0x23c>)
 8002906:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  pf[6].eModel = BTS7002_1EPP;
 800290a:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <Profet_Init+0x230>)
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  pf[6].eState = OFF;
 8002912:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <Profet_Init+0x230>)
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  pf[6].nNum = 6;
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <Profet_Init+0x230>)
 800291c:	2206      	movs	r2, #6
 800291e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  pf[6].nIN_Port = &pfGpioBank2;
 8002922:	4b45      	ldr	r3, [pc, #276]	; (8002a38 <Profet_Init+0x230>)
 8002924:	4a48      	ldr	r2, [pc, #288]	; (8002a48 <Profet_Init+0x240>)
 8002926:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pf[6].nIN_Pin = 0x0002;
 800292a:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <Profet_Init+0x230>)
 800292c:	2202      	movs	r2, #2
 800292e:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
  pf[6].fKilis = 2.286;
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <Profet_Init+0x230>)
 8002934:	4a42      	ldr	r2, [pc, #264]	; (8002a40 <Profet_Init+0x238>)
 8002936:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

  pf[7].eModel = BTS7002_1EPP;
 800293a:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <Profet_Init+0x230>)
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
  pf[7].eState = OFF;
 8002942:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <Profet_Init+0x230>)
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  pf[7].nNum = 7;
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <Profet_Init+0x230>)
 800294c:	2207      	movs	r2, #7
 800294e:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pf[7].nIN_Port = &pfGpioBank2;
 8002952:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <Profet_Init+0x230>)
 8002954:	4a3c      	ldr	r2, [pc, #240]	; (8002a48 <Profet_Init+0x240>)
 8002956:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  pf[7].nIN_Pin = 0x0008;
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <Profet_Init+0x230>)
 800295c:	2208      	movs	r2, #8
 800295e:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
  pf[7].fKilis = 2.286;
 8002962:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <Profet_Init+0x230>)
 8002964:	4a36      	ldr	r2, [pc, #216]	; (8002a40 <Profet_Init+0x238>)
 8002966:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

  pf[8].eModel = BTS7008_2EPA_CH1;
 800296a:	4b33      	ldr	r3, [pc, #204]	; (8002a38 <Profet_Init+0x230>)
 800296c:	2201      	movs	r2, #1
 800296e:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
  pf[8].eState = OFF;
 8002972:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <Profet_Init+0x230>)
 8002974:	2200      	movs	r2, #0
 8002976:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  pf[8].nNum = 8;
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <Profet_Init+0x230>)
 800297c:	2208      	movs	r2, #8
 800297e:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  pf[8].nIN_Port = &pfGpioBank2;
 8002982:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <Profet_Init+0x230>)
 8002984:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <Profet_Init+0x240>)
 8002986:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  pf[8].nIN_Pin = 0x0010;
 800298a:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <Profet_Init+0x230>)
 800298c:	2210      	movs	r2, #16
 800298e:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
  pf[8].fKilis = 0.554;
 8002992:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <Profet_Init+0x230>)
 8002994:	4a2b      	ldr	r2, [pc, #172]	; (8002a44 <Profet_Init+0x23c>)
 8002996:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  pf[9].eModel = BTS7008_2EPA_CH2;
 800299a:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <Profet_Init+0x230>)
 800299c:	2202      	movs	r2, #2
 800299e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  pf[9].eState = OFF;
 80029a2:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <Profet_Init+0x230>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
  pf[9].nNum = 9;
 80029aa:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <Profet_Init+0x230>)
 80029ac:	2209      	movs	r2, #9
 80029ae:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
  pf[9].nIN_Port = &pfGpioBank2;
 80029b2:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <Profet_Init+0x230>)
 80029b4:	4a24      	ldr	r2, [pc, #144]	; (8002a48 <Profet_Init+0x240>)
 80029b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  pf[9].nIN_Pin = 0x0080;
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <Profet_Init+0x230>)
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  pf[9].fKilis = 0.554;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <Profet_Init+0x230>)
 80029c4:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <Profet_Init+0x23c>)
 80029c6:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

  pf[10].eModel = BTS7008_2EPA_CH1;
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <Profet_Init+0x230>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
  pf[10].eState = OFF;
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <Profet_Init+0x230>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
  pf[10].nNum = 10;
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <Profet_Init+0x230>)
 80029dc:	220a      	movs	r2, #10
 80029de:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
  pf[10].nIN_Port = &pfGpioBank2;
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <Profet_Init+0x230>)
 80029e4:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <Profet_Init+0x240>)
 80029e6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  pf[10].nIN_Pin = 0x0100;
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <Profet_Init+0x230>)
 80029ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f0:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
  pf[10].fKilis = 0.554;
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <Profet_Init+0x230>)
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <Profet_Init+0x23c>)
 80029f8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

  pf[11].eModel = BTS7008_2EPA_CH2;
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <Profet_Init+0x230>)
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
  pf[11].eState = OFF;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <Profet_Init+0x230>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
  pf[11].nNum = 11;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <Profet_Init+0x230>)
 8002a0e:	220b      	movs	r2, #11
 8002a10:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
  pf[11].nIN_Port = &pfGpioBank2;
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <Profet_Init+0x230>)
 8002a16:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <Profet_Init+0x240>)
 8002a18:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
  pf[11].nIN_Pin = 0x0800;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <Profet_Init+0x230>)
 8002a1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a22:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
  pf[11].fKilis = 0.554;
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <Profet_Init+0x230>)
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <Profet_Init+0x23c>)
 8002a2a:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	20000aec 	.word	0x20000aec
 8002a3c:	20000d8e 	.word	0x20000d8e
 8002a40:	40124dd3 	.word	0x40124dd3
 8002a44:	3f0dd2f2 	.word	0x3f0dd2f2
 8002a48:	20000d90 	.word	0x20000d90

08002a4c <_write>:


//Overwrite printf _write to send to ITM_SendChar
int _write(int file, char *ptr, int len){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  int i=0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  for(i=0; i<len; i++){
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	e009      	b.n	8002a76 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	60ba      	str	r2, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe f856 	bl	8000b1c <ITM_SendChar>
  for(i=0; i<len; i++){
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	dbf1      	blt.n	8002a62 <_write+0x16>
  }
  return len;
 8002a7e:	687b      	ldr	r3, [r7, #4]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <ReadPdmConfig>:

uint8_t ReadPdmConfig()
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
 8002a8c:	af00      	add	r7, sp, #0
  PdmConfig_SetDefault(&stPdmConfig);
 8002a8e:	4872      	ldr	r0, [pc, #456]	; (8002c58 <ReadPdmConfig+0x1d0>)
 8002a90:	f002 fa3a 	bl	8004f08 <PdmConfig_SetDefault>

  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a98:	e052      	b.n	8002b40 <ReadPdmConfig+0xb8>
  {
    pf[i].nIL_Limit = stPdmConfig.stOutput[i].nCurrentLimit;
 8002a9a:	496f      	ldr	r1, [pc, #444]	; (8002c58 <ReadPdmConfig+0x1d0>)
 8002a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8002aac:	8818      	ldrh	r0, [r3, #0]
 8002aae:	496b      	ldr	r1, [pc, #428]	; (8002c5c <ReadPdmConfig+0x1d4>)
 8002ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	3314      	adds	r3, #20
 8002abe:	4602      	mov	r2, r0
 8002ac0:	801a      	strh	r2, [r3, #0]
    pf[i].nIL_InRush_Limit = stPdmConfig.stOutput[i].nInrushLimit;
 8002ac2:	4965      	ldr	r1, [pc, #404]	; (8002c58 <ReadPdmConfig+0x1d0>)
 8002ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8002ad4:	8818      	ldrh	r0, [r3, #0]
 8002ad6:	4961      	ldr	r1, [pc, #388]	; (8002c5c <ReadPdmConfig+0x1d4>)
 8002ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3316      	adds	r3, #22
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	801a      	strh	r2, [r3, #0]
    pf[i].nIL_InRush_Time = stPdmConfig.stOutput[i].nInrushTime;
 8002aea:	495b      	ldr	r1, [pc, #364]	; (8002c58 <ReadPdmConfig+0x1d0>)
 8002aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8002afc:	8818      	ldrh	r0, [r3, #0]
 8002afe:	4957      	ldr	r1, [pc, #348]	; (8002c5c <ReadPdmConfig+0x1d4>)
 8002b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	4602      	mov	r2, r0
 8002b10:	801a      	strh	r2, [r3, #0]
    //pf[i]. = stPdmConfig.stOutput[i].eResetMode;
    //pf[i] = stPdmConfig.stOutput[i].nResetTime;
    pf[i].nOC_ResetLimit = stPdmConfig.stOutput[i].nResetLimit;
 8002b12:	4951      	ldr	r1, [pc, #324]	; (8002c58 <ReadPdmConfig+0x1d0>)
 8002b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8002b24:	7818      	ldrb	r0, [r3, #0]
 8002b26:	494d      	ldr	r1, [pc, #308]	; (8002c5c <ReadPdmConfig+0x1d4>)
 8002b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	3331      	adds	r3, #49	; 0x31
 8002b36:	4602      	mov	r2, r0
 8002b38:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	2b0b      	cmp	r3, #11
 8002b44:	dda9      	ble.n	8002a9a <ReadPdmConfig+0x12>
  }
  */

  //Map the variable map first before using
  //User inputs
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4a:	e00b      	b.n	8002b64 <ReadPdmConfig+0xdc>
    pVariableMap[i+1] = &nPdmInputs[i];
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	3301      	adds	r3, #1
 8002b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b52:	0052      	lsls	r2, r2, #1
 8002b54:	4942      	ldr	r1, [pc, #264]	; (8002c60 <ReadPdmConfig+0x1d8>)
 8002b56:	440a      	add	r2, r1
 8002b58:	4942      	ldr	r1, [pc, #264]	; (8002c64 <ReadPdmConfig+0x1dc>)
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	3301      	adds	r3, #1
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	2b07      	cmp	r3, #7
 8002b68:	ddf0      	ble.n	8002b4c <ReadPdmConfig+0xc4>

  //CAN inputs
  for(int i=0; i<PDM_NUM_CAN_INPUTS; i++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	e00b      	b.n	8002b88 <ReadPdmConfig+0x100>
    pVariableMap[i + 9] = &nCanInputs[i];
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	3309      	adds	r3, #9
 8002b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b76:	0052      	lsls	r2, r2, #1
 8002b78:	493b      	ldr	r1, [pc, #236]	; (8002c68 <ReadPdmConfig+0x1e0>)
 8002b7a:	440a      	add	r2, r1
 8002b7c:	4939      	ldr	r1, [pc, #228]	; (8002c64 <ReadPdmConfig+0x1dc>)
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_CAN_INPUTS; i++)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	3301      	adds	r3, #1
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	2b1d      	cmp	r3, #29
 8002b8c:	ddf0      	ble.n	8002b70 <ReadPdmConfig+0xe8>

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	e00b      	b.n	8002bac <ReadPdmConfig+0x124>
    pVariableMap[i + 39] = &nVirtInputs[i];
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	3327      	adds	r3, #39	; 0x27
 8002b98:	6a3a      	ldr	r2, [r7, #32]
 8002b9a:	0052      	lsls	r2, r2, #1
 8002b9c:	4933      	ldr	r1, [pc, #204]	; (8002c6c <ReadPdmConfig+0x1e4>)
 8002b9e:	440a      	add	r2, r1
 8002ba0:	4930      	ldr	r1, [pc, #192]	; (8002c64 <ReadPdmConfig+0x1dc>)
 8002ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	2b13      	cmp	r3, #19
 8002bb0:	ddf0      	ble.n	8002b94 <ReadPdmConfig+0x10c>

  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	e00b      	b.n	8002bd0 <ReadPdmConfig+0x148>
  {
    pVariableMap[i + 59] = &nOutputs[i];
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	333b      	adds	r3, #59	; 0x3b
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	0052      	lsls	r2, r2, #1
 8002bc0:	492b      	ldr	r1, [pc, #172]	; (8002c70 <ReadPdmConfig+0x1e8>)
 8002bc2:	440a      	add	r2, r1
 8002bc4:	4927      	ldr	r1, [pc, #156]	; (8002c64 <ReadPdmConfig+0x1dc>)
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b0b      	cmp	r3, #11
 8002bd4:	ddf0      	ble.n	8002bb8 <ReadPdmConfig+0x130>
  }

  pVariableMap[71] = &stWiper.nSlowOut;
 8002bd6:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <ReadPdmConfig+0x1dc>)
 8002bd8:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <ReadPdmConfig+0x1ec>)
 8002bda:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  pVariableMap[72] = &stWiper.nFastOut;
 8002bde:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <ReadPdmConfig+0x1dc>)
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <ReadPdmConfig+0x1f0>)
 8002be2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120


  //Assign variable map values
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	e01a      	b.n	8002c22 <ReadPdmConfig+0x19a>
  {
    stPdmConfig.stOutput[i].pInput = pVariableMap[stPdmConfig.stOutput[i].nInput];
 8002bec:	491a      	ldr	r1, [pc, #104]	; (8002c58 <ReadPdmConfig+0x1d0>)
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <ReadPdmConfig+0x1dc>)
 8002c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c08:	4813      	ldr	r0, [pc, #76]	; (8002c58 <ReadPdmConfig+0x1d0>)
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4403      	add	r3, r0
 8002c16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c1a:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b0b      	cmp	r3, #11
 8002c26:	dde1      	ble.n	8002bec <ReadPdmConfig+0x164>
  }

  //Map input values to config structure
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e00e      	b.n	8002c4c <ReadPdmConfig+0x1c4>
  {
    stPdmConfig.stInput[i].pInput = &nUserDigInput[i];
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <ReadPdmConfig+0x1f4>)
 8002c32:	1899      	adds	r1, r3, r2
 8002c34:	4808      	ldr	r0, [pc, #32]	; (8002c58 <ReadPdmConfig+0x1d0>)
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4403      	add	r3, r0
 8002c42:	330c      	adds	r3, #12
 8002c44:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b07      	cmp	r3, #7
 8002c50:	dded      	ble.n	8002c2e <ReadPdmConfig+0x1a6>
  }

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	e058      	b.n	8002d0a <ReadPdmConfig+0x282>
 8002c58:	20000200 	.word	0x20000200
 8002c5c:	20000aec 	.word	0x20000aec
 8002c60:	20000fe0 	.word	0x20000fe0
 8002c64:	20000ebc 	.word	0x20000ebc
 8002c68:	20000ff0 	.word	0x20000ff0
 8002c6c:	2000102c 	.word	0x2000102c
 8002c70:	20001054 	.word	0x20001054
 8002c74:	20000e6e 	.word	0x20000e6e
 8002c78:	20000e70 	.word	0x20000e70
 8002c7c:	20000db8 	.word	0x20000db8
  {
    stPdmConfig.stVirtualInput[i].pVar0 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar0];
 8002c80:	497b      	ldr	r1, [pc, #492]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	33ea      	adds	r3, #234	; 0xea
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b77      	ldr	r3, [pc, #476]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002c96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c9a:	4875      	ldr	r0, [pc, #468]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4403      	add	r3, r0
 8002ca8:	33ec      	adds	r3, #236	; 0xec
 8002caa:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar1 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar1];
 8002cac:	4970      	ldr	r1, [pc, #448]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	33f2      	adds	r3, #242	; 0xf2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002cc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cc6:	486a      	ldr	r0, [pc, #424]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4403      	add	r3, r0
 8002cd4:	33f4      	adds	r3, #244	; 0xf4
 8002cd6:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar2 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar2];
 8002cd8:	4965      	ldr	r1, [pc, #404]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	33fa      	adds	r3, #250	; 0xfa
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002cee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cf2:	485f      	ldr	r0, [pc, #380]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4403      	add	r3, r0
 8002d00:	33fc      	adds	r3, #252	; 0xfc
 8002d02:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	3301      	adds	r3, #1
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b13      	cmp	r3, #19
 8002d0e:	ddb7      	ble.n	8002c80 <ReadPdmConfig+0x1f8>
  }

  stWiper.eMode = stPdmConfig.stWiper.nMode;
 8002d10:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002d12:	f893 24f9 	ldrb.w	r2, [r3, #1273]	; 0x4f9
 8002d16:	4b58      	ldr	r3, [pc, #352]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002d18:	701a      	strb	r2, [r3, #0]
  stWiper.pSlowInput = pVariableMap[stPdmConfig.stWiper.nSlowInput];
 8002d1a:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002d1c:	f893 34fa 	ldrb.w	r3, [r3, #1274]	; 0x4fa
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b54      	ldr	r3, [pc, #336]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	4a53      	ldr	r2, [pc, #332]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002d2a:	6253      	str	r3, [r2, #36]	; 0x24
  stWiper.pFastInput = pVariableMap[stPdmConfig.stWiper.nFastInput];
 8002d2c:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002d2e:	f893 34fb 	ldrb.w	r3, [r3, #1275]	; 0x4fb
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3a:	4a4f      	ldr	r2, [pc, #316]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002d3c:	6293      	str	r3, [r2, #40]	; 0x28
  stWiper.pInterInput = pVariableMap[stPdmConfig.stWiper.nInterInput];
 8002d3e:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002d40:	f893 34fc 	ldrb.w	r3, [r3, #1276]	; 0x4fc
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4c:	4a4a      	ldr	r2, [pc, #296]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002d4e:	62d3      	str	r3, [r2, #44]	; 0x2c
  stWiper.pSwipeInput = pVariableMap[stPdmConfig.stWiper.nSwipeInput];
 8002d50:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002d52:	f893 3501 	ldrb.w	r3, [r3, #1281]	; 0x501
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	4a46      	ldr	r2, [pc, #280]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002d60:	6193      	str	r3, [r2, #24]
  stWiper.pOnSw = pVariableMap[stPdmConfig.stWiper.nOnInput];
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002d64:	f893 34fd 	ldrb.w	r3, [r3, #1277]	; 0x4fd
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d70:	4a41      	ldr	r2, [pc, #260]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
  stWiper.pParkSw = pVariableMap[stPdmConfig.stWiper.nParkInput];
 8002d74:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002d76:	f893 34ff 	ldrb.w	r3, [r3, #1279]	; 0x4ff
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d82:	4a3d      	ldr	r2, [pc, #244]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002d84:	6093      	str	r3, [r2, #8]
  stWiper.pSpeedInput = pVariableMap[stPdmConfig.stWiper.nSpeedInput];
 8002d86:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002d88:	f893 34fe 	ldrb.w	r3, [r3, #1278]	; 0x4fe
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d94:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002d96:	6313      	str	r3, [r2, #48]	; 0x30
  stWiper.pWashInput = pVariableMap[stPdmConfig.stWiper.nWashInput];
 8002d98:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002d9a:	f893 3502 	ldrb.w	r3, [r3, #1282]	; 0x502
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da6:	4a34      	ldr	r2, [pc, #208]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002da8:	61d3      	str	r3, [r2, #28]
  stWiper.nWashWipeCycles = stPdmConfig.stWiper.nWashWipeCycles;
 8002daa:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002dac:	f893 2503 	ldrb.w	r2, [r3, #1283]	; 0x503
 8002db0:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002db2:	f883 2020 	strb.w	r2, [r3, #32]
  for(int i=0; i<PDM_NUM_WIPER_INTER_DELAYS; i++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e010      	b.n	8002dde <ReadPdmConfig+0x356>
    stWiper.nInterDelays[i] = stPdmConfig.stWiper.nIntermitTime[i];
 8002dbc:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	8899      	ldrh	r1, [r3, #4]
 8002dca:	4a2b      	ldr	r2, [pc, #172]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4413      	add	r3, r2
 8002dd4:	460a      	mov	r2, r1
 8002dd6:	809a      	strh	r2, [r3, #4]
  for(int i=0; i<PDM_NUM_WIPER_INTER_DELAYS; i++)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	ddeb      	ble.n	8002dbc <ReadPdmConfig+0x334>
  for(int i=0; i<PDM_NUM_WIPER_SPEED_MAP; i++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	e00e      	b.n	8002e08 <ReadPdmConfig+0x380>
    stWiper.eSpeedMap[i] = (WiperSpeed_t)stPdmConfig.stWiper.nSpeedMap[i];
 8002dea:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4413      	add	r3, r2
 8002df0:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8002df4:	7819      	ldrb	r1, [r3, #0]
 8002df6:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <ReadPdmConfig+0x3f0>)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3334      	adds	r3, #52	; 0x34
 8002dfe:	460a      	mov	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_WIPER_SPEED_MAP; i++)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3301      	adds	r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b07      	cmp	r3, #7
 8002e0c:	dded      	ble.n	8002dea <ReadPdmConfig+0x362>

  stPdmConfig.stStarter.pInput = pVariableMap[stPdmConfig.stStarter.nInput];
 8002e0e:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002e10:	f893 3579 	ldrb.w	r3, [r3, #1401]	; 0x579
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002e1e:	f8c2 357c 	str.w	r3, [r2, #1404]	; 0x57c

  for(int i=0; i<PDM_NUM_FLASHERS; i++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	e01a      	b.n	8002e5e <ReadPdmConfig+0x3d6>
    stPdmConfig.stFlasher[i].pInput = pVariableMap[stPdmConfig.stFlasher[i].nInput];
 8002e28:	4911      	ldr	r1, [pc, #68]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	f203 5319 	addw	r3, r3, #1305	; 0x519
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <ReadPdmConfig+0x3ec>)
 8002e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e44:	480a      	ldr	r0, [pc, #40]	; (8002e70 <ReadPdmConfig+0x3e8>)
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4403      	add	r3, r0
 8002e52:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8002e56:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_FLASHERS; i++)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	dde1      	ble.n	8002e28 <ReadPdmConfig+0x3a0>


  return PDM_OK;
 8002e64:	2301      	movs	r3, #1

}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3730      	adds	r7, #48	; 0x30
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000200 	.word	0x20000200
 8002e74:	20000ebc 	.word	0x20000ebc
 8002e78:	20000e6c 	.word	0x20000e6c

08002e7c <EvaluateFlasher>:
 */

#include "flasher.h"

void EvaluateFlasher(PdmConfig_Flasher_t* pFlasher, uint16_t pResult[12])
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  if(!pFlasher->nEnabled){
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <EvaluateFlasher+0x22>
    pResult[pFlasher->nOutput] = 1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7b5b      	ldrb	r3, [r3, #13]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	2201      	movs	r2, #1
 8002e9a:	801a      	strh	r2, [r3, #0]
    return;
 8002e9c:	e048      	b.n	8002f30 <EvaluateFlasher+0xb4>
  }
  if(!*pFlasher->pInput){
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <EvaluateFlasher+0x3c>
    pResult[pFlasher->nOutput] = 1;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7b5b      	ldrb	r3, [r3, #13]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	801a      	strh	r2, [r3, #0]
    return;
 8002eb6:	e03b      	b.n	8002f30 <EvaluateFlasher+0xb4>
  }

  if((pResult[pFlasher->nOutput] == 0) && ((HAL_GetTick() - pFlasher->nTimeOff) > pFlasher->nFlashOffTime)){
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7b5b      	ldrb	r3, [r3, #13]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d115      	bne.n	8002ef4 <EvaluateFlasher+0x78>
 8002ec8:	f004 fe98 	bl	8007bfc <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	8952      	ldrh	r2, [r2, #10]
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d90b      	bls.n	8002ef4 <EvaluateFlasher+0x78>
    pResult[pFlasher->nOutput] = 1;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7b5b      	ldrb	r3, [r3, #13]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOn = HAL_GetTick();
 8002eea:	f004 fe87 	bl	8007bfc <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	615a      	str	r2, [r3, #20]
  }
  if((pResult[pFlasher->nOutput] == 1) && ((HAL_GetTick() - pFlasher->nTimeOn) > pFlasher->nFlashOnTime)){
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7b5b      	ldrb	r3, [r3, #13]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d115      	bne.n	8002f30 <EvaluateFlasher+0xb4>
 8002f04:	f004 fe7a 	bl	8007bfc <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	8912      	ldrh	r2, [r2, #8]
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d90b      	bls.n	8002f30 <EvaluateFlasher+0xb4>
    pResult[pFlasher->nOutput] = 0;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7b5b      	ldrb	r3, [r3, #13]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	2200      	movs	r2, #0
 8002f24:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOff = HAL_GetTick();
 8002f26:	f004 fe69 	bl	8007bfc <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	611a      	str	r2, [r3, #16]
  }

}
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f3c:	f004 fe34 	bl	8007ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f40:	f000 f8a0 	bl	8003084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f44:	f000 fb52 	bl	80035ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002f48:	f000 fb1e 	bl	8003588 <MX_DMA_Init>
  MX_ADC4_Init();
 8002f4c:	f000 f982 	bl	8003254 <MX_ADC4_Init>
  MX_CAN_Init();
 8002f50:	f000 f9de 	bl	8003310 <MX_CAN_Init>
  MX_I2C2_Init();
 8002f54:	f000 fa74 	bl	8003440 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002f58:	f000 fad8 	bl	800350c <MX_SPI1_Init>
  MX_RTC_Init();
 8002f5c:	f000 fab0 	bl	80034c0 <MX_RTC_Init>
  MX_I2C1_Init();
 8002f60:	f000 fa2e 	bl	80033c0 <MX_I2C1_Init>
  MX_CRC_Init();
 8002f64:	f000 fa0a 	bl	800337c <MX_CRC_Init>
  MX_ADC1_Init();
 8002f68:	f000 f904 	bl	8003174 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002f6c:	f00f fb2e 	bl	80125cc <osKernelInitialize>
  //if(osTimerStart(KickIWDGHandle, 1300) != osOK)
  //  Error_Handler();
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  qMsgQueueRx = osMessageQueueNew(MSGQUEUE_RX_SIZE, sizeof(MsgQueueRx_t), NULL);
 8002f70:	2200      	movs	r2, #0
 8002f72:	2130      	movs	r1, #48	; 0x30
 8002f74:	2010      	movs	r0, #16
 8002f76:	f00f fc69 	bl	801284c <osMessageQueueNew>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4a32      	ldr	r2, [pc, #200]	; (8003048 <main+0x110>)
 8002f7e:	6013      	str	r3, [r2, #0]
  if(qMsgQueueRx == NULL){
 8002f80:	4b31      	ldr	r3, [pc, #196]	; (8003048 <main+0x110>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <main+0x54>
    //TODO: Message queue not created
    Error_Handler();
 8002f88:	f000 fc66 	bl	8003858 <Error_Handler>
  }

  qMsgQueueUsbTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueUsbTx_t), NULL);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2109      	movs	r1, #9
 8002f90:	2010      	movs	r0, #16
 8002f92:	f00f fc5b 	bl	801284c <osMessageQueueNew>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4a2c      	ldr	r2, [pc, #176]	; (800304c <main+0x114>)
 8002f9a:	6013      	str	r3, [r2, #0]
  if(qMsgQueueUsbTx == NULL){
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <main+0x114>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <main+0x70>
    //TODO: Message queue not created
    Error_Handler();
 8002fa4:	f000 fc58 	bl	8003858 <Error_Handler>
  }

  qMsgQueueCanTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueCanTx_t), NULL);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2120      	movs	r1, #32
 8002fac:	2010      	movs	r0, #16
 8002fae:	f00f fc4d 	bl	801284c <osMessageQueueNew>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4a26      	ldr	r2, [pc, #152]	; (8003050 <main+0x118>)
 8002fb6:	6013      	str	r3, [r2, #0]
  if(qMsgQueueCanTx == NULL){
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <main+0x118>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <main+0x8c>
    //TODO: Message queue not created
    Error_Handler();
 8002fc0:	f000 fc4a 	bl	8003858 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002fc4:	4a23      	ldr	r2, [pc, #140]	; (8003054 <main+0x11c>)
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4823      	ldr	r0, [pc, #140]	; (8003058 <main+0x120>)
 8002fca:	f00f fb67 	bl	801269c <osThreadNew>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4a22      	ldr	r2, [pc, #136]	; (800305c <main+0x124>)
 8002fd2:	6013      	str	r3, [r2, #0]

  /* creation of i2cTask */
  i2cTaskHandle = osThreadNew(StartI2CTask, NULL, &i2cTask_attributes);
 8002fd4:	4a22      	ldr	r2, [pc, #136]	; (8003060 <main+0x128>)
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4822      	ldr	r0, [pc, #136]	; (8003064 <main+0x12c>)
 8002fda:	f00f fb5f 	bl	801269c <osThreadNew>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4a21      	ldr	r2, [pc, #132]	; (8003068 <main+0x130>)
 8002fe2:	6013      	str	r3, [r2, #0]

  /* creation of profetSMTask */
  profetSMTaskHandle = osThreadNew(StartProfetSMTask, NULL, &profetSMTask_attributes);
 8002fe4:	4a21      	ldr	r2, [pc, #132]	; (800306c <main+0x134>)
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4821      	ldr	r0, [pc, #132]	; (8003070 <main+0x138>)
 8002fea:	f00f fb57 	bl	801269c <osThreadNew>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4a20      	ldr	r2, [pc, #128]	; (8003074 <main+0x13c>)
 8002ff2:	6013      	str	r3, [r2, #0]

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &canTxTask_attributes);
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <main+0x140>)
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4820      	ldr	r0, [pc, #128]	; (800307c <main+0x144>)
 8002ffa:	f00f fb4f 	bl	801269c <osThreadNew>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <main+0x148>)
 8003002:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(defaultTaskHandle == 0x0)
 8003004:	4b15      	ldr	r3, [pc, #84]	; (800305c <main+0x124>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <main+0xd8>
    Error_Handler();
 800300c:	f000 fc24 	bl	8003858 <Error_Handler>

  if(i2cTaskHandle == 0x0)
 8003010:	4b15      	ldr	r3, [pc, #84]	; (8003068 <main+0x130>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <main+0xe4>
    Error_Handler();
 8003018:	f000 fc1e 	bl	8003858 <Error_Handler>

  if(profetSMTaskHandle == 0x0)
 800301c:	4b15      	ldr	r3, [pc, #84]	; (8003074 <main+0x13c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <main+0xf0>
    Error_Handler();
 8003024:	f000 fc18 	bl	8003858 <Error_Handler>

  if(canTxTaskHandle == 0x0)
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <main+0x148>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <main+0xfc>
    Error_Handler();
 8003030:	f000 fc12 	bl	8003858 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  if(ReadPdmConfig() != PDM_OK)
 8003034:	f7ff fd28 	bl	8002a88 <ReadPdmConfig>
 8003038:	4603      	mov	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <main+0x10a>
    Error_Handler();
 800303e:	f000 fc0b 	bl	8003858 <Error_Handler>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003042:	f00f faf7 	bl	8012634 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003046:	e7fe      	b.n	8003046 <main+0x10e>
 8003048:	20000adc 	.word	0x20000adc
 800304c:	20000ae0 	.word	0x20000ae0
 8003050:	20000ae4 	.word	0x20000ae4
 8003054:	080166b4 	.word	0x080166b4
 8003058:	08003791 	.word	0x08003791
 800305c:	20002604 	.word	0x20002604
 8003060:	080166d8 	.word	0x080166d8
 8003064:	080037c5 	.word	0x080037c5
 8003068:	20002608 	.word	0x20002608
 800306c:	080166fc 	.word	0x080166fc
 8003070:	080037ed 	.word	0x080037ed
 8003074:	2000260c 	.word	0x2000260c
 8003078:	08016720 	.word	0x08016720
 800307c:	08003809 	.word	0x08003809
 8003080:	20002610 	.word	0x20002610

08003084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b09e      	sub	sp, #120	; 0x78
 8003088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800308a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800308e:	2228      	movs	r2, #40	; 0x28
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f012 fd44 	bl	8015b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003098:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030a8:	463b      	mov	r3, r7
 80030aa:	223c      	movs	r2, #60	; 0x3c
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f012 fd36 	bl	8015b20 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80030b4:	f009 fb3a 	bl	800c72c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80030b8:	4b2c      	ldr	r3, [pc, #176]	; (800316c <SystemClock_Config+0xe8>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4a2b      	ldr	r2, [pc, #172]	; (800316c <SystemClock_Config+0xe8>)
 80030be:	f023 0318 	bic.w	r3, r3, #24
 80030c2:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80030c4:	2307      	movs	r3, #7
 80030c6:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030ce:	2300      	movs	r3, #0
 80030d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80030d2:	2301      	movs	r3, #1
 80030d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030d6:	2301      	movs	r3, #1
 80030d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030da:	2310      	movs	r3, #16
 80030dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030de:	2302      	movs	r3, #2
 80030e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80030ec:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030f2:	4618      	mov	r0, r3
 80030f4:	f009 fb68 	bl	800c7c8 <HAL_RCC_OscConfig>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80030fe:	f000 fbab 	bl	8003858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003102:	230f      	movs	r3, #15
 8003104:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003106:	2302      	movs	r3, #2
 8003108:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800310a:	2300      	movs	r3, #0
 800310c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800310e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003114:	2300      	movs	r3, #0
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003118:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800311c:	2102      	movs	r1, #2
 800311e:	4618      	mov	r0, r3
 8003120:	f00a fb90 	bl	800d844 <HAL_RCC_ClockConfig>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800312a:	f000 fb95 	bl	8003858 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <SystemClock_Config+0xec>)
 8003130:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RTC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8003136:	2300      	movs	r3, #0
 8003138:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800313a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800313e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003140:	2300      	movs	r3, #0
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003144:	463b      	mov	r3, r7
 8003146:	4618      	mov	r0, r3
 8003148:	f00a fdf4 	bl	800dd34 <HAL_RCCEx_PeriphCLKConfig>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003152:	f000 fb81 	bl	8003858 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8003156:	2200      	movs	r2, #0
 8003158:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800315c:	2000      	movs	r0, #0
 800315e:	f00a fced 	bl	800db3c <HAL_RCC_MCOConfig>
}
 8003162:	bf00      	nop
 8003164:	3778      	adds	r7, #120	; 0x78
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	00030060 	.word	0x00030060

08003174 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800317a:	f107 031c 	add.w	r3, r7, #28
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
 8003194:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <MX_ADC1_Init+0xdc>)
 8003198:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800319c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800319e:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80031a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80031b2:	4b27      	ldr	r3, [pc, #156]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031c0:	4b23      	ldr	r3, [pc, #140]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031d2:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031e2:	2204      	movs	r2, #4
 80031e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031f2:	4817      	ldr	r0, [pc, #92]	; (8003250 <MX_ADC1_Init+0xdc>)
 80031f4:	f004 fd2c 	bl	8007c50 <HAL_ADC_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80031fe:	f000 fb2b 	bl	8003858 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	4619      	mov	r1, r3
 800320c:	4810      	ldr	r0, [pc, #64]	; (8003250 <MX_ADC1_Init+0xdc>)
 800320e:	f005 fb07 	bl	8008820 <HAL_ADCEx_MultiModeConfigChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8003218:	f000 fb1e 	bl	8003858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800321c:	2310      	movs	r3, #16
 800321e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003220:	2301      	movs	r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8003228:	2307      	movs	r3, #7
 800322a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4805      	ldr	r0, [pc, #20]	; (8003250 <MX_ADC1_Init+0xdc>)
 800323a:	f005 f805 	bl	8008248 <HAL_ADC_ConfigChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8003244:	f000 fb08 	bl	8003858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003248:	bf00      	nop
 800324a:	3728      	adds	r7, #40	; 0x28
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20002374 	.word	0x20002374

08003254 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800325a:	463b      	mov	r3, r7
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
 8003268:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800326a:	4b27      	ldr	r3, [pc, #156]	; (8003308 <MX_ADC4_Init+0xb4>)
 800326c:	4a27      	ldr	r2, [pc, #156]	; (800330c <MX_ADC4_Init+0xb8>)
 800326e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <MX_ADC4_Init+0xb4>)
 8003272:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003276:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8003278:	4b23      	ldr	r3, [pc, #140]	; (8003308 <MX_ADC4_Init+0xb4>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <MX_ADC4_Init+0xb4>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <MX_ADC4_Init+0xb4>)
 8003286:	2201      	movs	r2, #1
 8003288:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800328a:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <MX_ADC4_Init+0xb4>)
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <MX_ADC4_Init+0xb4>)
 8003294:	2200      	movs	r2, #0
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <MX_ADC4_Init+0xb4>)
 800329a:	2201      	movs	r2, #1
 800329c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <MX_ADC4_Init+0xb4>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <MX_ADC4_Init+0xb4>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <MX_ADC4_Init+0xb4>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <MX_ADC4_Init+0xb4>)
 80032b4:	2204      	movs	r2, #4
 80032b6:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <MX_ADC4_Init+0xb4>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <MX_ADC4_Init+0xb4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80032c4:	4810      	ldr	r0, [pc, #64]	; (8003308 <MX_ADC4_Init+0xb4>)
 80032c6:	f004 fcc3 	bl	8007c50 <HAL_ADC_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 80032d0:	f000 fac2 	bl	8003858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80032d4:	2303      	movs	r3, #3
 80032d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032d8:	2301      	movs	r3, #1
 80032da:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80032e0:	2307      	movs	r3, #7
 80032e2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80032ec:	463b      	mov	r3, r7
 80032ee:	4619      	mov	r1, r3
 80032f0:	4805      	ldr	r0, [pc, #20]	; (8003308 <MX_ADC4_Init+0xb4>)
 80032f2:	f004 ffa9 	bl	8008248 <HAL_ADC_ConfigChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 80032fc:	f000 faac 	bl	8003858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8003300:	bf00      	nop
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	200023c4 	.word	0x200023c4
 800330c:	50000500 	.word	0x50000500

08003310 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <MX_CAN_Init+0x64>)
 8003316:	4a18      	ldr	r2, [pc, #96]	; (8003378 <MX_CAN_Init+0x68>)
 8003318:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <MX_CAN_Init+0x64>)
 800331c:	2204      	movs	r2, #4
 800331e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <MX_CAN_Init+0x64>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <MX_CAN_Init+0x64>)
 8003328:	2200      	movs	r2, #0
 800332a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <MX_CAN_Init+0x64>)
 800332e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003332:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <MX_CAN_Init+0x64>)
 8003336:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800333a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800333c:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <MX_CAN_Init+0x64>)
 800333e:	2200      	movs	r2, #0
 8003340:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <MX_CAN_Init+0x64>)
 8003344:	2200      	movs	r2, #0
 8003346:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <MX_CAN_Init+0x64>)
 800334a:	2200      	movs	r2, #0
 800334c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <MX_CAN_Init+0x64>)
 8003350:	2200      	movs	r2, #0
 8003352:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <MX_CAN_Init+0x64>)
 8003356:	2200      	movs	r2, #0
 8003358:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <MX_CAN_Init+0x64>)
 800335c:	2200      	movs	r2, #0
 800335e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003360:	4804      	ldr	r0, [pc, #16]	; (8003374 <MX_CAN_Init+0x64>)
 8003362:	f005 fc7f 	bl	8008c64 <HAL_CAN_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800336c:	f000 fa74 	bl	8003858 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}
 8003374:	2000249c 	.word	0x2000249c
 8003378:	40006400 	.word	0x40006400

0800337c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <MX_CRC_Init+0x3c>)
 8003382:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <MX_CRC_Init+0x40>)
 8003384:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <MX_CRC_Init+0x3c>)
 8003388:	2200      	movs	r2, #0
 800338a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <MX_CRC_Init+0x3c>)
 800338e:	2200      	movs	r2, #0
 8003390:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <MX_CRC_Init+0x3c>)
 8003394:	2220      	movs	r2, #32
 8003396:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <MX_CRC_Init+0x3c>)
 800339a:	2280      	movs	r2, #128	; 0x80
 800339c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <MX_CRC_Init+0x3c>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80033a4:	4804      	ldr	r0, [pc, #16]	; (80033b8 <MX_CRC_Init+0x3c>)
 80033a6:	f006 fb8b 	bl	8009ac0 <HAL_CRC_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80033b0:	f000 fa52 	bl	8003858 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	200024c4 	.word	0x200024c4
 80033bc:	40023000 	.word	0x40023000

080033c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <MX_I2C1_Init+0x74>)
 80033c6:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <MX_I2C1_Init+0x78>)
 80033c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300208;// 0x00702681;
 80033ca:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <MX_I2C1_Init+0x74>)
 80033cc:	4a1b      	ldr	r2, [pc, #108]	; (800343c <MX_I2C1_Init+0x7c>)
 80033ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033d0:	4b18      	ldr	r3, [pc, #96]	; (8003434 <MX_I2C1_Init+0x74>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <MX_I2C1_Init+0x74>)
 80033d8:	2201      	movs	r2, #1
 80033da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033dc:	4b15      	ldr	r3, [pc, #84]	; (8003434 <MX_I2C1_Init+0x74>)
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <MX_I2C1_Init+0x74>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <MX_I2C1_Init+0x74>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <MX_I2C1_Init+0x74>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <MX_I2C1_Init+0x74>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033fa:	480e      	ldr	r0, [pc, #56]	; (8003434 <MX_I2C1_Init+0x74>)
 80033fc:	f006 ffaa 	bl	800a354 <HAL_I2C_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003406:	f000 fa27 	bl	8003858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800340a:	2100      	movs	r1, #0
 800340c:	4809      	ldr	r0, [pc, #36]	; (8003434 <MX_I2C1_Init+0x74>)
 800340e:	f007 fc0b 	bl	800ac28 <HAL_I2CEx_ConfigAnalogFilter>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003418:	f000 fa1e 	bl	8003858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800341c:	2100      	movs	r1, #0
 800341e:	4805      	ldr	r0, [pc, #20]	; (8003434 <MX_I2C1_Init+0x74>)
 8003420:	f007 fc4d 	bl	800acbe <HAL_I2CEx_ConfigDigitalFilter>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800342a:	f000 fa15 	bl	8003858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200024e8 	.word	0x200024e8
 8003438:	40005400 	.word	0x40005400
 800343c:	00300208 	.word	0x00300208

08003440 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <MX_I2C2_Init+0x74>)
 8003446:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <MX_I2C2_Init+0x78>)
 8003448:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300208;// 0x00702681;
 800344a:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <MX_I2C2_Init+0x74>)
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <MX_I2C2_Init+0x7c>)
 800344e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003450:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <MX_I2C2_Init+0x74>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003456:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <MX_I2C2_Init+0x74>)
 8003458:	2201      	movs	r2, #1
 800345a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800345c:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <MX_I2C2_Init+0x74>)
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <MX_I2C2_Init+0x74>)
 8003464:	2200      	movs	r2, #0
 8003466:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <MX_I2C2_Init+0x74>)
 800346a:	2200      	movs	r2, #0
 800346c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <MX_I2C2_Init+0x74>)
 8003470:	2200      	movs	r2, #0
 8003472:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <MX_I2C2_Init+0x74>)
 8003476:	2200      	movs	r2, #0
 8003478:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800347a:	480e      	ldr	r0, [pc, #56]	; (80034b4 <MX_I2C2_Init+0x74>)
 800347c:	f006 ff6a 	bl	800a354 <HAL_I2C_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003486:	f000 f9e7 	bl	8003858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800348a:	2100      	movs	r1, #0
 800348c:	4809      	ldr	r0, [pc, #36]	; (80034b4 <MX_I2C2_Init+0x74>)
 800348e:	f007 fbcb 	bl	800ac28 <HAL_I2CEx_ConfigAnalogFilter>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003498:	f000 f9de 	bl	8003858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800349c:	2100      	movs	r1, #0
 800349e:	4805      	ldr	r0, [pc, #20]	; (80034b4 <MX_I2C2_Init+0x74>)
 80034a0:	f007 fc0d 	bl	800acbe <HAL_I2CEx_ConfigDigitalFilter>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80034aa:	f000 f9d5 	bl	8003858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20002534 	.word	0x20002534
 80034b8:	40005800 	.word	0x40005800
 80034bc:	00300208 	.word	0x00300208

080034c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <MX_RTC_Init+0x44>)
 80034c6:	4a10      	ldr	r2, [pc, #64]	; (8003508 <MX_RTC_Init+0x48>)
 80034c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <MX_RTC_Init+0x44>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <MX_RTC_Init+0x44>)
 80034d2:	227f      	movs	r2, #127	; 0x7f
 80034d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <MX_RTC_Init+0x44>)
 80034d8:	22ff      	movs	r2, #255	; 0xff
 80034da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <MX_RTC_Init+0x44>)
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <MX_RTC_Init+0x44>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <MX_RTC_Init+0x44>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80034ee:	4805      	ldr	r0, [pc, #20]	; (8003504 <MX_RTC_Init+0x44>)
 80034f0:	f00a fdd0 	bl	800e094 <HAL_RTC_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80034fa:	f000 f9ad 	bl	8003858 <Error_Handler>
  /* USER CODE END Check_RTC_BKUP */
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20002580 	.word	0x20002580
 8003508:	40002800 	.word	0x40002800

0800350c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <MX_SPI1_Init+0x74>)
 8003512:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <MX_SPI1_Init+0x78>)
 8003514:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <MX_SPI1_Init+0x74>)
 8003518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800351c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <MX_SPI1_Init+0x74>)
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003524:	4b16      	ldr	r3, [pc, #88]	; (8003580 <MX_SPI1_Init+0x74>)
 8003526:	f44f 7240 	mov.w	r2, #768	; 0x300
 800352a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <MX_SPI1_Init+0x74>)
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <MX_SPI1_Init+0x74>)
 8003534:	2200      	movs	r2, #0
 8003536:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <MX_SPI1_Init+0x74>)
 800353a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <MX_SPI1_Init+0x74>)
 8003542:	2208      	movs	r2, #8
 8003544:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <MX_SPI1_Init+0x74>)
 8003548:	2200      	movs	r2, #0
 800354a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <MX_SPI1_Init+0x74>)
 800354e:	2200      	movs	r2, #0
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <MX_SPI1_Init+0x74>)
 8003554:	2200      	movs	r2, #0
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <MX_SPI1_Init+0x74>)
 800355a:	2207      	movs	r2, #7
 800355c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800355e:	4b08      	ldr	r3, [pc, #32]	; (8003580 <MX_SPI1_Init+0x74>)
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <MX_SPI1_Init+0x74>)
 8003566:	2208      	movs	r2, #8
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <MX_SPI1_Init+0x74>)
 800356c:	f00a fe77 	bl	800e25e <HAL_SPI_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003576:	f000 f96f 	bl	8003858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200025a0 	.word	0x200025a0
 8003584:	40013000 	.word	0x40013000

08003588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <MX_DMA_Init+0x60>)
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <MX_DMA_Init+0x60>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6153      	str	r3, [r2, #20]
 800359a:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <MX_DMA_Init+0x60>)
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <MX_DMA_Init+0x60>)
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <MX_DMA_Init+0x60>)
 80035ac:	f043 0302 	orr.w	r3, r3, #2
 80035b0:	6153      	str	r3, [r2, #20]
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <MX_DMA_Init+0x60>)
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80035be:	2200      	movs	r2, #0
 80035c0:	2105      	movs	r1, #5
 80035c2:	200b      	movs	r0, #11
 80035c4:	f006 fa52 	bl	8009a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035c8:	200b      	movs	r0, #11
 80035ca:	f006 fa6b 	bl	8009aa4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2105      	movs	r1, #5
 80035d2:	2039      	movs	r0, #57	; 0x39
 80035d4:	f006 fa4a 	bl	8009a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80035d8:	2039      	movs	r0, #57	; 0x39
 80035da:	f006 fa63 	bl	8009aa4 <HAL_NVIC_EnableIRQ>

}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000

080035ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003602:	4b55      	ldr	r3, [pc, #340]	; (8003758 <MX_GPIO_Init+0x16c>)
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	4a54      	ldr	r2, [pc, #336]	; (8003758 <MX_GPIO_Init+0x16c>)
 8003608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800360c:	6153      	str	r3, [r2, #20]
 800360e:	4b52      	ldr	r3, [pc, #328]	; (8003758 <MX_GPIO_Init+0x16c>)
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800361a:	4b4f      	ldr	r3, [pc, #316]	; (8003758 <MX_GPIO_Init+0x16c>)
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	4a4e      	ldr	r2, [pc, #312]	; (8003758 <MX_GPIO_Init+0x16c>)
 8003620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003624:	6153      	str	r3, [r2, #20]
 8003626:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <MX_GPIO_Init+0x16c>)
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003632:	4b49      	ldr	r3, [pc, #292]	; (8003758 <MX_GPIO_Init+0x16c>)
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	4a48      	ldr	r2, [pc, #288]	; (8003758 <MX_GPIO_Init+0x16c>)
 8003638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363c:	6153      	str	r3, [r2, #20]
 800363e:	4b46      	ldr	r3, [pc, #280]	; (8003758 <MX_GPIO_Init+0x16c>)
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	4b43      	ldr	r3, [pc, #268]	; (8003758 <MX_GPIO_Init+0x16c>)
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4a42      	ldr	r2, [pc, #264]	; (8003758 <MX_GPIO_Init+0x16c>)
 8003650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003654:	6153      	str	r3, [r2, #20]
 8003656:	4b40      	ldr	r3, [pc, #256]	; (8003758 <MX_GPIO_Init+0x16c>)
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, EXTRA1_Pin|EXTRA3_Pin, GPIO_PIN_RESET);
 8003662:	2200      	movs	r2, #0
 8003664:	f248 0104 	movw	r1, #32772	; 0x8004
 8003668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800366c:	f006 fe40 	bl	800a2f0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, EXTRA2_Pin|PF_RESET_Pin|USB_PULLUP_Pin, GPIO_PIN_RESET);
 8003670:	2200      	movs	r2, #0
 8003672:	f640 0114 	movw	r1, #2068	; 0x814
 8003676:	4839      	ldr	r0, [pc, #228]	; (800375c <MX_GPIO_Init+0x170>)
 8003678:	f006 fe3a 	bl	800a2f0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = EXTRA1_Pin;
 800367c:	2304      	movs	r3, #4
 800367e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003680:	2301      	movs	r3, #1
 8003682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003684:	2302      	movs	r3, #2
 8003686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003688:	2300      	movs	r3, #0
 800368a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA1_GPIO_Port, &GPIO_InitStruct);
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4619      	mov	r1, r3
 8003692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003696:	f006 fcb1 	bl	8009ffc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = EXTRA3_Pin;
 800369a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a0:	2301      	movs	r3, #1
 80036a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036a4:	2302      	movs	r3, #2
 80036a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a8:	2300      	movs	r3, #0
 80036aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA3_GPIO_Port, &GPIO_InitStruct);
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	4619      	mov	r1, r3
 80036b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b6:	f006 fca1 	bl	8009ffc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = EXTRA2_Pin;
 80036ba:	2304      	movs	r3, #4
 80036bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036be:	2301      	movs	r3, #1
 80036c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036c2:	2302      	movs	r3, #2
 80036c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA2_GPIO_Port, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	4822      	ldr	r0, [pc, #136]	; (800375c <MX_GPIO_Init+0x170>)
 80036d2:	f006 fc93 	bl	8009ffc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PF_RESET_Pin;
 80036d6:	2310      	movs	r3, #16
 80036d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036da:	2301      	movs	r3, #1
 80036dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PF_RESET_Port, &GPIO_InitStruct);
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	4619      	mov	r1, r3
 80036ec:	481b      	ldr	r0, [pc, #108]	; (800375c <MX_GPIO_Init+0x170>)
 80036ee:	f006 fc85 	bl	8009ffc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80036f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036fc:	2302      	movs	r3, #2
 80036fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4619      	mov	r1, r3
 8003706:	4815      	ldr	r0, [pc, #84]	; (800375c <MX_GPIO_Init+0x170>)
 8003708:	f006 fc78 	bl	8009ffc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 800370c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003712:	2311      	movs	r3, #17
 8003714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371a:	2300      	movs	r3, #0
 800371c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	4619      	mov	r1, r3
 8003724:	480d      	ldr	r0, [pc, #52]	; (800375c <MX_GPIO_Init+0x170>)
 8003726:	f006 fc69 	bl	8009ffc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800372a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800372e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003730:	2302      	movs	r3, #2
 8003732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003738:	2300      	movs	r3, #0
 800373a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800373c:	2300      	movs	r3, #0
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	4619      	mov	r1, r3
 8003746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374a:	f006 fc57 	bl	8009ffc <HAL_GPIO_Init>

}
 800374e:	bf00      	nop
 8003750:	3728      	adds	r7, #40	; 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	48000400 	.word	0x48000400

08003760 <ConfigureRunTimeCounter>:

/* USER CODE BEGIN 4 */
#if( configGENERATE_RUN_TIME_STATS == 1)
  void ConfigureRunTimeCounter(void)
  {
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
    nRunTimeCount = 0;
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <ConfigureRunTimeCounter+0x14>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
  }
 800376a:	bf00      	nop
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	20002614 	.word	0x20002614

08003778 <GetRunTimeCounter>:

  uint32_t GetRunTimeCounter(void)
  {
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
    return nRunTimeCount;
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <GetRunTimeCounter+0x14>)
 800377e:	681b      	ldr	r3, [r3, #0]
  }
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20002614 	.word	0x20002614

08003790 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af02      	add	r7, sp, #8
 8003796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  PdmMainTask(&defaultTaskHandle, &hadc1, &hadc4, &hrtc, &hcrc);
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <StartDefaultTask+0x20>)
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <StartDefaultTask+0x24>)
 800379e:	4a06      	ldr	r2, [pc, #24]	; (80037b8 <StartDefaultTask+0x28>)
 80037a0:	4906      	ldr	r1, [pc, #24]	; (80037bc <StartDefaultTask+0x2c>)
 80037a2:	4807      	ldr	r0, [pc, #28]	; (80037c0 <StartDefaultTask+0x30>)
 80037a4:	f7fd fb28 	bl	8000df8 <PdmMainTask>
  /* USER CODE END 5 */
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200024c4 	.word	0x200024c4
 80037b4:	20002580 	.word	0x20002580
 80037b8:	200023c4 	.word	0x200023c4
 80037bc:	20002374 	.word	0x20002374
 80037c0:	20002604 	.word	0x20002604

080037c4 <StartI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  I2CTask(&i2cTaskHandle, &hi2c1, &hi2c2);
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <StartI2CTask+0x1c>)
 80037ce:	4905      	ldr	r1, [pc, #20]	; (80037e4 <StartI2CTask+0x20>)
 80037d0:	4805      	ldr	r0, [pc, #20]	; (80037e8 <StartI2CTask+0x24>)
 80037d2:	f7fd fd7d 	bl	80012d0 <I2CTask>
  /* USER CODE END StartI2CTask */
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20002534 	.word	0x20002534
 80037e4:	200024e8 	.word	0x200024e8
 80037e8:	20002608 	.word	0x20002608

080037ec <StartProfetSMTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProfetSMTask */
void StartProfetSMTask(void *argument)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProfetSMTask */
  ProfetSMTask(&profetSMTaskHandle);
 80037f4:	4803      	ldr	r0, [pc, #12]	; (8003804 <StartProfetSMTask+0x18>)
 80037f6:	f7fe f903 	bl	8001a00 <ProfetSMTask>
  /* USER CODE END StartProfetSMTask */
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	2000260c 	.word	0x2000260c

08003808 <StartCanTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanTxTask */
  /* Infinite loop */
  CanTxTask(&canTxTaskHandle, &hcan);
 8003810:	4903      	ldr	r1, [pc, #12]	; (8003820 <StartCanTxTask+0x18>)
 8003812:	4804      	ldr	r0, [pc, #16]	; (8003824 <StartCanTxTask+0x1c>)
 8003814:	f7fe fd0c 	bl	8002230 <CanTxTask>
  /* USER CODE END StartCanTxTask */
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	2000249c 	.word	0x2000249c
 8003824:	20002610 	.word	0x20002610

08003828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a06      	ldr	r2, [pc, #24]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d106      	bne.n	8003848 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 800383a:	f004 f9cb 	bl	8007bd4 <HAL_IncTick>
    #if( configGENERATE_RUN_TIME_STATS == 1)
      nRunTimeCount = nRunTimeCount + 1;
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	4a03      	ldr	r2, [pc, #12]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003846:	6013      	str	r3, [r2, #0]
    #endif
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40001000 	.word	0x40001000
 8003854:	20002614 	.word	0x20002614

08003858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __NOP();
 800385c:	bf00      	nop
  /* USER CODE END Error_Handler_Debug */
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <PdmConfig_Set>:
  MB85RC_Write(hi2c, nAddr, 0x0, (uint8_t*)pConfig, sizeof(*pConfig));

  return 1;
}

uint8_t PdmConfig_Set(PdmConfig_t* pConfig, MsgQueueRx_t* stMsgRx, osMessageQueueId_t* qMsgQueueUsbTx, osMessageQueueId_t* qMsgQueueCanTx){
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]

  nSend = 0;
 8003876:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <PdmConfig_Set+0x1b8>)
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]

  switch((MsgQueueRxCmd_t)stMsgRx->nRxData[0]){
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003882:	3b43      	subs	r3, #67	; 0x43
 8003884:	2b16      	cmp	r3, #22
 8003886:	f201 82f4 	bhi.w	8004e72 <PdmConfig_Set+0x160a>
 800388a:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <PdmConfig_Set+0x28>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038ed 	.word	0x080038ed
 8003894:	08004925 	.word	0x08004925
 8003898:	08004e73 	.word	0x08004e73
 800389c:	08004e73 	.word	0x08004e73
 80038a0:	08004e73 	.word	0x08004e73
 80038a4:	080046b9 	.word	0x080046b9
 80038a8:	08003a31 	.word	0x08003a31
 80038ac:	08004e73 	.word	0x08004e73
 80038b0:	08004e73 	.word	0x08004e73
 80038b4:	08003a13 	.word	0x08003a13
 80038b8:	08004e73 	.word	0x08004e73
 80038bc:	08004b99 	.word	0x08004b99
 80038c0:	08003bc9 	.word	0x08003bc9
 80038c4:	08004371 	.word	0x08004371
 80038c8:	08004e73 	.word	0x08004e73
 80038cc:	08004e73 	.word	0x08004e73
 80038d0:	08004e73 	.word	0x08004e73
 80038d4:	08004e73 	.word	0x08004e73
 80038d8:	08003ed5 	.word	0x08003ed5
 80038dc:	08004e25 	.word	0x08004e25
 80038e0:	08004203 	.word	0x08004203
 80038e4:	08004e73 	.word	0x08004e73
 80038e8:	08004513 	.word	0x08004513

    //Set CAN Settings
    // 'C'
    case MSG_RX_SET_CAN:
      if(stMsgRx->nRxLen == 5){
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d13c      	bne.n	8003970 <PdmConfig_Set+0x108>

        pConfig->stDevConfig.nCanEnabled = stMsgRx->nRxData[1] & 0x01;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	705a      	strb	r2, [r3, #1]
        pConfig->stCanOutput.nEnabled = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800390c:	105b      	asrs	r3, r3, #1
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
        pConfig->stDevConfig.nCanSpeed = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	b2da      	uxtb	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	709a      	strb	r2, [r3, #2]

        pConfig->stCanOutput.nBaseId = (stMsgRx->nRxData[2] << 8) + stMsgRx->nRxData[3];
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003930:	b29b      	uxth	r3, r3
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	b29a      	uxth	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800393c:	b29b      	uxth	r3, r3
 800393e:	4413      	add	r3, r2
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f8a3 28d6 	strh.w	r2, [r3, #2262]	; 0x8d6
        pConfig->stCanOutput.nUpdateTime = stMsgRx->nRxData[4] * 100;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	0092      	lsls	r2, r2, #2
 8003954:	4413      	add	r3, r2
 8003956:	461a      	mov	r2, r3
 8003958:	0091      	lsls	r1, r2, #2
 800395a:	461a      	mov	r2, r3
 800395c:	460b      	mov	r3, r1
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
        nSend = 1;
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <PdmConfig_Set+0x1b8>)
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || (nSend)){
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003976:	2b01      	cmp	r3, #1
 8003978:	d004      	beq.n	8003984 <PdmConfig_Set+0x11c>
 800397a:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <PdmConfig_Set+0x1b8>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f001 8279 	beq.w	8004e76 <PdmConfig_Set+0x160e>
        stMsgUsbTx.nTxLen = 5;
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <PdmConfig_Set+0x1bc>)
 8003986:	2205      	movs	r2, #5
 8003988:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 800398a:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <PdmConfig_Set+0x1c0>)
 800398c:	2205      	movs	r2, #5
 800398e:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN;
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <PdmConfig_Set+0x1bc>)
 8003992:	2263      	movs	r2, #99	; 0x63
 8003994:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stDevConfig.nCanSpeed & 0x0F) << 4) + ((pConfig->stCanOutput.nEnabled & 0x01) << 1) + (pConfig->stDevConfig.nCanEnabled & 0x01);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	789b      	ldrb	r3, [r3, #2]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	b2da      	uxtb	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 38d4 	ldrb.w	r3, [r3, #2260]	; 0x8d4
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	4413      	add	r3, r2
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <PdmConfig_Set+0x1bc>)
 80039c2:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)((pConfig->stCanOutput.nBaseId & 0xFF00) >> 8);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <PdmConfig_Set+0x1bc>)
 80039d2:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanOutput.nBaseId & 0x00FF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <PdmConfig_Set+0x1bc>)
 80039de:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)((pConfig->stCanOutput.nUpdateTime) / 100);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 80039e6:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <PdmConfig_Set+0x1c4>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <PdmConfig_Set+0x1bc>)
 80039f4:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <PdmConfig_Set+0x1bc>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <PdmConfig_Set+0x1bc>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <PdmConfig_Set+0x1bc>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <PdmConfig_Set+0x1b8>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
      }
    break;
 8003a0e:	f001 ba32 	b.w	8004e76 <PdmConfig_Set+0x160e>
    // 'L'
    case MSG_RX_SET_LOGGING:
      if(stMsgRx->nRxLen == 3){
        //TODO:Send response
      }
      if((stMsgRx->nRxLen == 1) || (nSend)){
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a18:	2b01      	cmp	r3, #1

      }
    break;
 8003a1a:	f001 ba4a 	b.w	8004eb2 <PdmConfig_Set+0x164a>
 8003a1e:	bf00      	nop
 8003a20:	20002644 	.word	0x20002644
 8003a24:	20002618 	.word	0x20002618
 8003a28:	20002624 	.word	0x20002624
 8003a2c:	51eb851f 	.word	0x51eb851f

    //Set Input Settings
    // 'I'
    case MSG_RX_SET_INPUTS:
      if(stMsgRx->nRxLen == 3){
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d14e      	bne.n	8003ad8 <PdmConfig_Set+0x270>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	4b5b      	ldr	r3, [pc, #364]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003a46:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 8003a48:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b07      	cmp	r3, #7
 8003a4e:	d843      	bhi.n	8003ad8 <PdmConfig_Set+0x270>
          pConfig->stInput[nInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a56:	4a57      	ldr	r2, [pc, #348]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003a58:	7812      	ldrb	r2, [r2, #0]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	b2d8      	uxtb	r0, r3
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	460b      	mov	r3, r1
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	1a5b      	subs	r3, r3, r1
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3308      	adds	r3, #8
 8003a70:	4602      	mov	r2, r0
 8003a72:	701a      	strb	r2, [r3, #0]
          pConfig->stInput[nInNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a7a:	105b      	asrs	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	4a4d      	ldr	r2, [pc, #308]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	4611      	mov	r1, r2
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	b2d8      	uxtb	r0, r3
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a5b      	subs	r3, r3, r1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	3310      	adds	r3, #16
 8003a98:	4602      	mov	r2, r0
 8003a9a:	701a      	strb	r2, [r3, #0]
          //TODO:Include binary on level on V3 PCB
          //pConfig->stInput[nInNum].nOnLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
          pConfig->stInput[nInNum].nDebounceTime = stMsgRx->nRxData[2] * 100;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	4b43      	ldr	r3, [pc, #268]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4613      	mov	r3, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	0092      	lsls	r2, r2, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	0090      	lsls	r0, r2, #2
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	b298      	uxth	r0, r3
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	1a5b      	subs	r3, r3, r1
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	3322      	adds	r3, #34	; 0x22
 8003ace:	4602      	mov	r2, r0
 8003ad0:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <PdmConfig_Set+0x350>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d10d      	bne.n	8003afe <PdmConfig_Set+0x296>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003aee:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 8003af0:	4b30      	ldr	r3, [pc, #192]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b07      	cmp	r3, #7
 8003af6:	d802      	bhi.n	8003afe <PdmConfig_Set+0x296>
          nSend = 1;
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <PdmConfig_Set+0x350>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8003afe:	4b2e      	ldr	r3, [pc, #184]	; (8003bb8 <PdmConfig_Set+0x350>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f001 81b9 	beq.w	8004e7a <PdmConfig_Set+0x1612>
        stMsgUsbTx.nTxLen = 3;
 8003b08:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <PdmConfig_Set+0x354>)
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 3;
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <PdmConfig_Set+0x358>)
 8003b10:	2203      	movs	r2, #3
 8003b12:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_INPUTS;
 8003b14:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <PdmConfig_Set+0x354>)
 8003b16:	2269      	movs	r2, #105	; 0x69
 8003b18:	701a      	strb	r2, [r3, #0]
        //TODO:Add binary On Level on V3 PCB
        stMsgUsbTx.nTxData[1] = ((nInNum & 0x0F) << 4) + ((pConfig->stInput[nInNum].eMode & 0x03) << 2) + (pConfig->stInput[nInNum].nEnabled & 0x01);
 8003b1a:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	68f9      	ldr	r1, [r7, #12]
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	1a1b      	subs	r3, r3, r0
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	3310      	adds	r3, #16
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	4413      	add	r3, r2
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	68f9      	ldr	r1, [r7, #12]
 8003b4e:	4603      	mov	r3, r0
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	1a1b      	subs	r3, r3, r0
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	3308      	adds	r3, #8
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <PdmConfig_Set+0x354>)
 8003b68:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stInput[nInNum].nDebounceTime / 100);
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <PdmConfig_Set+0x34c>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	460b      	mov	r3, r1
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	1a5b      	subs	r3, r3, r1
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3322      	adds	r3, #34	; 0x22
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <PdmConfig_Set+0x35c>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <PdmConfig_Set+0x354>)
 8003b8e:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = 0;
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <PdmConfig_Set+0x354>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = 0;
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <PdmConfig_Set+0x354>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8003b9c:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <PdmConfig_Set+0x354>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <PdmConfig_Set+0x354>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <PdmConfig_Set+0x354>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	71da      	strb	r2, [r3, #7]
      }

    break;
 8003bae:	f001 b964 	b.w	8004e7a <PdmConfig_Set+0x1612>
 8003bb2:	bf00      	nop
 8003bb4:	20002645 	.word	0x20002645
 8003bb8:	20002644 	.word	0x20002644
 8003bbc:	20002618 	.word	0x20002618
 8003bc0:	20002624 	.word	0x20002624
 8003bc4:	51eb851f 	.word	0x51eb851f

    //Set Output Settings
    // 'O'
    case MSG_RX_SET_OUTPUTS:
      if(stMsgRx->nRxLen == 8){
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	f040 80bb 	bne.w	8003d4a <PdmConfig_Set+0x4e2>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4bb7      	ldr	r3, [pc, #732]	; (8003ebc <PdmConfig_Set+0x654>)
 8003be0:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8003be2:	4bb6      	ldr	r3, [pc, #728]	; (8003ebc <PdmConfig_Set+0x654>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b0b      	cmp	r3, #11
 8003be8:	f200 80af 	bhi.w	8003d4a <PdmConfig_Set+0x4e2>
          pConfig->stOutput[nOutNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bf2:	4ab2      	ldr	r2, [pc, #712]	; (8003ebc <PdmConfig_Set+0x654>)
 8003bf4:	7812      	ldrb	r2, [r2, #0]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	b2d8      	uxtb	r0, r3
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	460b      	mov	r3, r1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c0e:	4602      	mov	r2, r0
 8003c10:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInput = stMsgRx->nRxData[2];
 8003c12:	4baa      	ldr	r3, [pc, #680]	; (8003ebc <PdmConfig_Set+0x654>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	4619      	mov	r1, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	460b      	mov	r3, r1
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8003c2e:	4602      	mov	r2, r0
 8003c30:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nCurrentLimit = stMsgRx->nRxData[3] / 10;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003c38:	4aa1      	ldr	r2, [pc, #644]	; (8003ec0 <PdmConfig_Set+0x658>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	08db      	lsrs	r3, r3, #3
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4b9e      	ldr	r3, [pc, #632]	; (8003ebc <PdmConfig_Set+0x654>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	4619      	mov	r1, r3
 8003c48:	b290      	uxth	r0, r2
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].eResetMode = (stMsgRx->nRxData[4] & 0x0F);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c64:	4a95      	ldr	r2, [pc, #596]	; (8003ebc <PdmConfig_Set+0x654>)
 8003c66:	7812      	ldrb	r2, [r2, #0]
 8003c68:	4611      	mov	r1, r2
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	b2d8      	uxtb	r0, r3
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	460b      	mov	r3, r1
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f203 4316 	addw	r3, r3, #1046	; 0x416
 8003c80:	4602      	mov	r2, r0
 8003c82:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetLimit = (stMsgRx->nRxData[4] & 0xF0) >> 4;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c8a:	4a8c      	ldr	r2, [pc, #560]	; (8003ebc <PdmConfig_Set+0x654>)
 8003c8c:	7812      	ldrb	r2, [r2, #0]
 8003c8e:	4611      	mov	r1, r2
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	b2d8      	uxtb	r0, r3
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	460b      	mov	r3, r1
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetTime = stMsgRx->nRxData[5] * 100;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	4b82      	ldr	r3, [pc, #520]	; (8003ebc <PdmConfig_Set+0x654>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	461a      	mov	r2, r3
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	0090      	lsls	r0, r2, #2
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	b298      	uxth	r0, r3
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8003cdc:	4602      	mov	r2, r0
 8003cde:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushLimit = stMsgRx->nRxData[6] / 10;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ce6:	4a76      	ldr	r2, [pc, #472]	; (8003ec0 <PdmConfig_Set+0x658>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	08db      	lsrs	r3, r3, #3
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	4b72      	ldr	r3, [pc, #456]	; (8003ebc <PdmConfig_Set+0x654>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	b290      	uxth	r0, r2
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8003d08:	4602      	mov	r2, r0
 8003d0a:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushTime = stMsgRx->nRxData[7] * 100;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	4b69      	ldr	r3, [pc, #420]	; (8003ebc <PdmConfig_Set+0x654>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	0092      	lsls	r2, r2, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	461a      	mov	r2, r3
 8003d24:	0090      	lsls	r0, r2, #2
 8003d26:	461a      	mov	r2, r3
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	b298      	uxth	r0, r3
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	460b      	mov	r3, r1
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8003d40:	4602      	mov	r2, r0
 8003d42:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8003d44:	4b5f      	ldr	r3, [pc, #380]	; (8003ec4 <PdmConfig_Set+0x65c>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d10d      	bne.n	8003d70 <PdmConfig_Set+0x508>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	4b57      	ldr	r3, [pc, #348]	; (8003ebc <PdmConfig_Set+0x654>)
 8003d60:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8003d62:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <PdmConfig_Set+0x654>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b0b      	cmp	r3, #11
 8003d68:	d802      	bhi.n	8003d70 <PdmConfig_Set+0x508>
          nSend = 1;
 8003d6a:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <PdmConfig_Set+0x65c>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8003d70:	4b54      	ldr	r3, [pc, #336]	; (8003ec4 <PdmConfig_Set+0x65c>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f001 8082 	beq.w	8004e7e <PdmConfig_Set+0x1616>
        stMsgUsbTx.nTxLen = 8;
 8003d7a:	4b53      	ldr	r3, [pc, #332]	; (8003ec8 <PdmConfig_Set+0x660>)
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 8003d80:	4b52      	ldr	r3, [pc, #328]	; (8003ecc <PdmConfig_Set+0x664>)
 8003d82:	2208      	movs	r2, #8
 8003d84:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_OUTPUTS;
 8003d86:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <PdmConfig_Set+0x660>)
 8003d88:	226f      	movs	r2, #111	; 0x6f
 8003d8a:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nOutNum & 0x0F) << 4) + (pConfig->stOutput[nOutNum].nEnabled & 0x01);
 8003d8c:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <PdmConfig_Set+0x654>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <PdmConfig_Set+0x654>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	68f9      	ldr	r1, [r7, #12]
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4403      	add	r3, r0
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	4b44      	ldr	r3, [pc, #272]	; (8003ec8 <PdmConfig_Set+0x660>)
 8003db8:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stOutput[nOutNum].nInput;
 8003dba:	4b40      	ldr	r3, [pc, #256]	; (8003ebc <PdmConfig_Set+0x654>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	4b3d      	ldr	r3, [pc, #244]	; (8003ec8 <PdmConfig_Set+0x660>)
 8003dd4:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stOutput[nOutNum].nCurrentLimit * 10);
 8003dd6:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <PdmConfig_Set+0x654>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	460b      	mov	r3, r1
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4b33      	ldr	r3, [pc, #204]	; (8003ec8 <PdmConfig_Set+0x660>)
 8003dfc:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stOutput[nOutNum].nResetLimit & 0x0F) << 4) + (pConfig->stOutput[nOutNum].eResetMode & 0x0F);
 8003dfe:	4b2f      	ldr	r3, [pc, #188]	; (8003ebc <PdmConfig_Set+0x654>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	460b      	mov	r3, r1
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <PdmConfig_Set+0x654>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	68f9      	ldr	r1, [r7, #12]
 8003e22:	4603      	mov	r3, r0
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4403      	add	r3, r0
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f203 4316 	addw	r3, r3, #1046	; 0x416
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <PdmConfig_Set+0x660>)
 8003e3e:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stOutput[nOutNum].nResetTime / 100);
 8003e40:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <PdmConfig_Set+0x654>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	4619      	mov	r1, r3
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <PdmConfig_Set+0x668>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <PdmConfig_Set+0x660>)
 8003e66:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushLimit * 10);
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <PdmConfig_Set+0x654>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	460b      	mov	r3, r1
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	0092      	lsls	r2, r2, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <PdmConfig_Set+0x660>)
 8003e8e:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushTime / 100);
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <PdmConfig_Set+0x654>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	4619      	mov	r1, r3
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <PdmConfig_Set+0x668>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <PdmConfig_Set+0x660>)
 8003eb6:	71da      	strb	r2, [r3, #7]
      }
    break;
 8003eb8:	f000 bfe1 	b.w	8004e7e <PdmConfig_Set+0x1616>
 8003ebc:	20002646 	.word	0x20002646
 8003ec0:	cccccccd 	.word	0xcccccccd
 8003ec4:	20002644 	.word	0x20002644
 8003ec8:	20002618 	.word	0x20002618
 8003ecc:	20002624 	.word	0x20002624
 8003ed0:	51eb851f 	.word	0x51eb851f

    //Set Virtual Input Settings
    // 'U'
    case MSG_RX_SET_VIRTUAL_INPUTS:
      if(stMsgRx->nRxLen == 7){
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eda:	2b07      	cmp	r3, #7
 8003edc:	f040 80c0 	bne.w	8004060 <PdmConfig_Set+0x7f8>
        nVirtInNum = (stMsgRx->nRxData[2]);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003ee6:	4bbb      	ldr	r3, [pc, #748]	; (80041d4 <PdmConfig_Set+0x96c>)
 8003ee8:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8003eea:	4bba      	ldr	r3, [pc, #744]	; (80041d4 <PdmConfig_Set+0x96c>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b13      	cmp	r3, #19
 8003ef0:	f200 80b6 	bhi.w	8004060 <PdmConfig_Set+0x7f8>
          pConfig->stVirtualInput[nVirtInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003efa:	4ab6      	ldr	r2, [pc, #728]	; (80041d4 <PdmConfig_Set+0x96c>)
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	4611      	mov	r1, r2
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	b2d8      	uxtb	r0, r3
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	33e8      	adds	r3, #232	; 0xe8
 8003f14:	4602      	mov	r2, r0
 8003f16:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot0 = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f1e:	105b      	asrs	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4aac      	ldr	r2, [pc, #688]	; (80041d4 <PdmConfig_Set+0x96c>)
 8003f24:	7812      	ldrb	r2, [r2, #0]
 8003f26:	4611      	mov	r1, r2
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	b2d8      	uxtb	r0, r3
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	460b      	mov	r3, r1
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	33e9      	adds	r3, #233	; 0xe9
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot1 = (stMsgRx->nRxData[1] & 0x04) >> 2;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f46:	109b      	asrs	r3, r3, #2
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	4aa2      	ldr	r2, [pc, #648]	; (80041d4 <PdmConfig_Set+0x96c>)
 8003f4c:	7812      	ldrb	r2, [r2, #0]
 8003f4e:	4611      	mov	r1, r2
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	b2d8      	uxtb	r0, r3
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	33f1      	adds	r3, #241	; 0xf1
 8003f64:	4602      	mov	r2, r0
 8003f66:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot2 = (stMsgRx->nRxData[1] & 0x08) >> 3;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f6e:	10db      	asrs	r3, r3, #3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	4a98      	ldr	r2, [pc, #608]	; (80041d4 <PdmConfig_Set+0x96c>)
 8003f74:	7812      	ldrb	r2, [r2, #0]
 8003f76:	4611      	mov	r1, r2
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	b2d8      	uxtb	r0, r3
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	460b      	mov	r3, r1
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	33f9      	adds	r3, #249	; 0xf9
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].nVar0 = stMsgRx->nRxData[3];
 8003f90:	4b90      	ldr	r3, [pc, #576]	; (80041d4 <PdmConfig_Set+0x96c>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	33ea      	adds	r3, #234	; 0xea
 8003faa:	4602      	mov	r2, r0
 8003fac:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar1 = stMsgRx->nRxData[4];
 8003fae:	4b89      	ldr	r3, [pc, #548]	; (80041d4 <PdmConfig_Set+0x96c>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	33f2      	adds	r3, #242	; 0xf2
 8003fc8:	4602      	mov	r2, r0
 8003fca:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar2 = stMsgRx->nRxData[5];
 8003fcc:	4b81      	ldr	r3, [pc, #516]	; (80041d4 <PdmConfig_Set+0x96c>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	33fa      	adds	r3, #250	; 0xfa
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].eCond0 = (stMsgRx->nRxData[6] & 0x03);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ff0:	4a78      	ldr	r2, [pc, #480]	; (80041d4 <PdmConfig_Set+0x96c>)
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	b2d8      	uxtb	r0, r3
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	460b      	mov	r3, r1
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	33f0      	adds	r3, #240	; 0xf0
 800400a:	4602      	mov	r2, r0
 800400c:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eCond1 = (stMsgRx->nRxData[6] & 0x0C) >> 2;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004014:	109b      	asrs	r3, r3, #2
 8004016:	b2db      	uxtb	r3, r3
 8004018:	4a6e      	ldr	r2, [pc, #440]	; (80041d4 <PdmConfig_Set+0x96c>)
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	4611      	mov	r1, r2
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	b2d8      	uxtb	r0, r3
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	460b      	mov	r3, r1
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	33f8      	adds	r3, #248	; 0xf8
 8004032:	4602      	mov	r2, r0
 8004034:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eMode = (stMsgRx->nRxData[6] & 0xC0) >> 6;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800403c:	4a65      	ldr	r2, [pc, #404]	; (80041d4 <PdmConfig_Set+0x96c>)
 800403e:	7812      	ldrb	r2, [r2, #0]
 8004040:	4611      	mov	r1, r2
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	b2d8      	uxtb	r0, r3
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	460b      	mov	r3, r1
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004056:	4602      	mov	r2, r0
 8004058:	701a      	strb	r2, [r3, #0]
          nSend = 1;
 800405a:	4b5f      	ldr	r3, [pc, #380]	; (80041d8 <PdmConfig_Set+0x970>)
 800405c:	2201      	movs	r2, #1
 800405e:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004066:	2b02      	cmp	r3, #2
 8004068:	d10b      	bne.n	8004082 <PdmConfig_Set+0x81a>
        nVirtInNum = (stMsgRx->nRxData[1]);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004070:	4b58      	ldr	r3, [pc, #352]	; (80041d4 <PdmConfig_Set+0x96c>)
 8004072:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8004074:	4b57      	ldr	r3, [pc, #348]	; (80041d4 <PdmConfig_Set+0x96c>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b13      	cmp	r3, #19
 800407a:	d802      	bhi.n	8004082 <PdmConfig_Set+0x81a>
          nSend = 1;
 800407c:	4b56      	ldr	r3, [pc, #344]	; (80041d8 <PdmConfig_Set+0x970>)
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8004082:	4b55      	ldr	r3, [pc, #340]	; (80041d8 <PdmConfig_Set+0x970>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8704 	beq.w	8004e94 <PdmConfig_Set+0x162c>
        stMsgUsbTx.nTxLen = 7;
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <PdmConfig_Set+0x974>)
 800408e:	2207      	movs	r2, #7
 8004090:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 8004092:	4b53      	ldr	r3, [pc, #332]	; (80041e0 <PdmConfig_Set+0x978>)
 8004094:	2207      	movs	r2, #7
 8004096:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_VIRTUAL_INPUTS;
 8004098:	4b50      	ldr	r3, [pc, #320]	; (80041dc <PdmConfig_Set+0x974>)
 800409a:	2275      	movs	r2, #117	; 0x75
 800409c:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 800409e:	4b4d      	ldr	r3, [pc, #308]	; (80041d4 <PdmConfig_Set+0x96c>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	4619      	mov	r1, r3
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	460b      	mov	r3, r1
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	33f9      	adds	r3, #249	; 0xf9
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	b25b      	sxtb	r3, r3
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	b25a      	sxtb	r2, r3
 80040be:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <PdmConfig_Set+0x96c>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	4603      	mov	r3, r0
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4403      	add	r3, r0
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	33f1      	adds	r3, #241	; 0xf1
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	b25b      	sxtb	r3, r3
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	b25b      	sxtb	r3, r3
 80040de:	4313      	orrs	r3, r2
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 80040e4:	4b3b      	ldr	r3, [pc, #236]	; (80041d4 <PdmConfig_Set+0x96c>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	68f9      	ldr	r1, [r7, #12]
 80040ec:	4603      	mov	r3, r0
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4403      	add	r3, r0
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	440b      	add	r3, r1
 80040f6:	33e9      	adds	r3, #233	; 0xe9
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8004104:	4413      	add	r3, r2
 8004106:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 8004108:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <PdmConfig_Set+0x96c>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	4603      	mov	r3, r0
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4403      	add	r3, r0
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	440b      	add	r3, r1
 800411a:	33e8      	adds	r3, #232	; 0xe8
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	b2db      	uxtb	r3, r3
 8004124:	4413      	add	r3, r2
 8004126:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8004128:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <PdmConfig_Set+0x974>)
 800412a:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = nVirtInNum;
 800412c:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <PdmConfig_Set+0x96c>)
 800412e:	781a      	ldrb	r2, [r3, #0]
 8004130:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <PdmConfig_Set+0x974>)
 8004132:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stVirtualInput[nVirtInNum].nVar0;
 8004134:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <PdmConfig_Set+0x96c>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	460b      	mov	r3, r1
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	33ea      	adds	r3, #234	; 0xea
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <PdmConfig_Set+0x974>)
 800414c:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stVirtualInput[nVirtInNum].nVar1;
 800414e:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <PdmConfig_Set+0x96c>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	4619      	mov	r1, r3
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	460b      	mov	r3, r1
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	33f2      	adds	r3, #242	; 0xf2
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <PdmConfig_Set+0x974>)
 8004166:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stVirtualInput[nVirtInNum].nVar2;
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <PdmConfig_Set+0x96c>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	4619      	mov	r1, r3
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	460b      	mov	r3, r1
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	33fa      	adds	r3, #250	; 0xfa
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <PdmConfig_Set+0x974>)
 8004180:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 8004182:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <PdmConfig_Set+0x96c>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	4619      	mov	r1, r3
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	460b      	mov	r3, r1
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <PdmConfig_Set+0x96c>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	68f9      	ldr	r1, [r7, #12]
 80041a6:	4603      	mov	r3, r0
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4403      	add	r3, r0
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	440b      	add	r3, r1
 80041b0:	33f0      	adds	r3, #240	; 0xf0
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	4413      	add	r3, r2
 80041c0:	b2da      	uxtb	r2, r3
                                (pConfig->stVirtualInput[nVirtInNum].eCond1 & 0x03);
 80041c2:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <PdmConfig_Set+0x96c>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	68f9      	ldr	r1, [r7, #12]
 80041ca:	4603      	mov	r3, r0
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4403      	add	r3, r0
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	e007      	b.n	80041e4 <PdmConfig_Set+0x97c>
 80041d4:	20002647 	.word	0x20002647
 80041d8:	20002644 	.word	0x20002644
 80041dc:	20002618 	.word	0x20002618
 80041e0:	20002624 	.word	0x20002624
 80041e4:	440b      	add	r3, r1
 80041e6:	33f8      	adds	r3, #248	; 0xf8
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 80041f0:	4413      	add	r3, r2
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <PdmConfig_Set+0xafc>)
 80041f6:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 80041f8:	4b5a      	ldr	r3, [pc, #360]	; (8004364 <PdmConfig_Set+0xafc>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	71da      	strb	r2, [r3, #7]
      }
    break;
 80041fe:	f000 be49 	b.w	8004e94 <PdmConfig_Set+0x162c>

    //Set Wiper Settings
    // 'W'
    case MSG_RX_SET_WIPER:
      if(stMsgRx->nRxLen == 8){
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004208:	2b08      	cmp	r3, #8
 800420a:	d152      	bne.n	80042b2 <PdmConfig_Set+0xa4a>
        pConfig->stWiper.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
        pConfig->stWiper.nMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004224:	105b      	asrs	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	b2da      	uxtb	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
        pConfig->stWiper.nParkStopLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800423a:	10db      	asrs	r3, r3, #3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
        pConfig->stWiper.nWashWipeCycles = (stMsgRx->nRxData[1] * 0xF0) >> 4;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004250:	461a      	mov	r2, r3
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	111b      	asrs	r3, r3, #4
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503

        pConfig->stWiper.nSlowInput = stMsgRx->nRxData[2];
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa

        pConfig->stWiper.nFastInput = stMsgRx->nRxData[3];
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb

        pConfig->stWiper.nInterInput = stMsgRx->nRxData[4];
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc

        pConfig->stWiper.nOnInput = stMsgRx->nRxData[5];
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd

        pConfig->stWiper.nParkInput = stMsgRx->nRxData[6];
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff

        pConfig->stWiper.nWashInput = stMsgRx->nRxData[7];
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
        nSend = 1;
 80042ac:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <PdmConfig_Set+0xb00>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d004      	beq.n	80042c6 <PdmConfig_Set+0xa5e>
 80042bc:	4b2a      	ldr	r3, [pc, #168]	; (8004368 <PdmConfig_Set+0xb00>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 85e9 	beq.w	8004e98 <PdmConfig_Set+0x1630>
        stMsgUsbTx.nTxLen = 8;
 80042c6:	4b27      	ldr	r3, [pc, #156]	; (8004364 <PdmConfig_Set+0xafc>)
 80042c8:	2208      	movs	r2, #8
 80042ca:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 80042cc:	4b27      	ldr	r3, [pc, #156]	; (800436c <PdmConfig_Set+0xb04>)
 80042ce:	2208      	movs	r2, #8
 80042d0:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER;
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <PdmConfig_Set+0xafc>)
 80042d4:	2277      	movs	r2, #119	; 0x77
 80042d6:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3503 	ldrb.w	r3, [r3, #1283]	; 0x503
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 34f9 	ldrb.w	r3, [r3, #1273]	; 0x4f9
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 8004306:	4413      	add	r3, r2
 8004308:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 34f8 	ldrb.w	r3, [r3, #1272]	; 0x4f8
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	4413      	add	r3, r2
 8004318:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <PdmConfig_Set+0xafc>)
 800431c:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSlowInput;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 24fa 	ldrb.w	r2, [r3, #1274]	; 0x4fa
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <PdmConfig_Set+0xafc>)
 8004326:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stWiper.nFastInput;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 24fb 	ldrb.w	r2, [r3, #1275]	; 0x4fb
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <PdmConfig_Set+0xafc>)
 8004330:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stWiper.nInterInput;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 24fc 	ldrb.w	r2, [r3, #1276]	; 0x4fc
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <PdmConfig_Set+0xafc>)
 800433a:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stWiper.nOnInput;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 24fd 	ldrb.w	r2, [r3, #1277]	; 0x4fd
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <PdmConfig_Set+0xafc>)
 8004344:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = pConfig->stWiper.nParkInput;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 24ff 	ldrb.w	r2, [r3, #1279]	; 0x4ff
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <PdmConfig_Set+0xafc>)
 800434e:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = pConfig->stWiper.nWashInput;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 2502 	ldrb.w	r2, [r3, #1282]	; 0x502
 8004356:	4b03      	ldr	r3, [pc, #12]	; (8004364 <PdmConfig_Set+0xafc>)
 8004358:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 800435a:	4b03      	ldr	r3, [pc, #12]	; (8004368 <PdmConfig_Set+0xb00>)
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004360:	f000 bd9a 	b.w	8004e98 <PdmConfig_Set+0x1630>
 8004364:	20002618 	.word	0x20002618
 8004368:	20002644 	.word	0x20002644
 800436c:	20002624 	.word	0x20002624

    //Set Wiper Speed Settings
    // 'P'
    case MSG_RX_SET_WIPER_SPEED:
      if(stMsgRx->nRxLen == 7){
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004376:	2b07      	cmp	r3, #7
 8004378:	d16a      	bne.n	8004450 <PdmConfig_Set+0xbe8>
        pConfig->stWiper.nSwipeInput = stMsgRx->nRxData[1];
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501

        pConfig->stWiper.nSpeedInput = stMsgRx->nRxData[2];
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe

        pConfig->stWiper.nSpeedMap[0] = (stMsgRx->nRxData[3] * 0x0F);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004398:	461a      	mov	r2, r3
 800439a:	0112      	lsls	r2, r2, #4
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
        pConfig->stWiper.nSpeedMap[1] = (stMsgRx->nRxData[3] * 0xF0) >> 4;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80043ac:	461a      	mov	r2, r3
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	111b      	asrs	r3, r3, #4
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505

        pConfig->stWiper.nSpeedMap[2] = (stMsgRx->nRxData[4] * 0x0F);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043c6:	461a      	mov	r2, r3
 80043c8:	0112      	lsls	r2, r2, #4
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
        pConfig->stWiper.nSpeedMap[3] = (stMsgRx->nRxData[4] * 0xF0) >> 4;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043da:	461a      	mov	r2, r3
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	111b      	asrs	r3, r3, #4
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507

        pConfig->stWiper.nSpeedMap[4] = (stMsgRx->nRxData[5] * 0x0F);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043f4:	461a      	mov	r2, r3
 80043f6:	0112      	lsls	r2, r2, #4
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
        pConfig->stWiper.nSpeedMap[5] = (stMsgRx->nRxData[5] * 0xF0) >> 4;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004408:	461a      	mov	r2, r3
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	111b      	asrs	r3, r3, #4
 8004414:	b2da      	uxtb	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509

        pConfig->stWiper.nSpeedMap[6] = (stMsgRx->nRxData[6] * 0x0F);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004422:	461a      	mov	r2, r3
 8004424:	0112      	lsls	r2, r2, #4
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
        pConfig->stWiper.nSpeedMap[7] = (stMsgRx->nRxData[6] * 0xF0) >> 4;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004436:	461a      	mov	r2, r3
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	111b      	asrs	r3, r3, #4
 8004442:	b2da      	uxtb	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
        nSend = 1;
 800444a:	4b97      	ldr	r3, [pc, #604]	; (80046a8 <PdmConfig_Set+0xe40>)
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004456:	2b01      	cmp	r3, #1
 8004458:	d004      	beq.n	8004464 <PdmConfig_Set+0xbfc>
 800445a:	4b93      	ldr	r3, [pc, #588]	; (80046a8 <PdmConfig_Set+0xe40>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 851c 	beq.w	8004e9c <PdmConfig_Set+0x1634>
        stMsgUsbTx.nTxLen = 7;
 8004464:	4b91      	ldr	r3, [pc, #580]	; (80046ac <PdmConfig_Set+0xe44>)
 8004466:	2207      	movs	r2, #7
 8004468:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 800446a:	4b91      	ldr	r3, [pc, #580]	; (80046b0 <PdmConfig_Set+0xe48>)
 800446c:	2207      	movs	r2, #7
 800446e:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_SPEED;
 8004470:	4b8e      	ldr	r3, [pc, #568]	; (80046ac <PdmConfig_Set+0xe44>)
 8004472:	2270      	movs	r2, #112	; 0x70
 8004474:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = pConfig->stWiper.nSwipeInput;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 2501 	ldrb.w	r2, [r3, #1281]	; 0x501
 800447c:	4b8b      	ldr	r3, [pc, #556]	; (80046ac <PdmConfig_Set+0xe44>)
 800447e:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSpeedInput;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 24fe 	ldrb.w	r2, [r3, #1278]	; 0x4fe
 8004486:	4b89      	ldr	r3, [pc, #548]	; (80046ac <PdmConfig_Set+0xe44>)
 8004488:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stWiper.nSpeedMap[1] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[0] & 0x0F);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	b2da      	uxtb	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	4b81      	ldr	r3, [pc, #516]	; (80046ac <PdmConfig_Set+0xe44>)
 80044a6:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stWiper.nSpeedMap[3] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[2] & 0x0F);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	4413      	add	r3, r2
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	4b7a      	ldr	r3, [pc, #488]	; (80046ac <PdmConfig_Set+0xe44>)
 80044c4:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = ((pConfig->stWiper.nSpeedMap[5] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[4] & 0x0F);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3509 	ldrb.w	r3, [r3, #1289]	; 0x509
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3508 	ldrb.w	r3, [r3, #1288]	; 0x508
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	4413      	add	r3, r2
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	4b72      	ldr	r3, [pc, #456]	; (80046ac <PdmConfig_Set+0xe44>)
 80044e2:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stWiper.nSpeedMap[7] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[6] & 0x0F);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 350b 	ldrb.w	r3, [r3, #1291]	; 0x50b
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 350a 	ldrb.w	r3, [r3, #1290]	; 0x50a
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	4b6b      	ldr	r3, [pc, #428]	; (80046ac <PdmConfig_Set+0xe44>)
 8004500:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004502:	4b6a      	ldr	r3, [pc, #424]	; (80046ac <PdmConfig_Set+0xe44>)
 8004504:	2200      	movs	r2, #0
 8004506:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8004508:	4b67      	ldr	r3, [pc, #412]	; (80046a8 <PdmConfig_Set+0xe40>)
 800450a:	2201      	movs	r2, #1
 800450c:	701a      	strb	r2, [r3, #0]
      }
    break;
 800450e:	f000 bcc5 	b.w	8004e9c <PdmConfig_Set+0x1634>

    //Set Wiper Intermit Delays Settings
    // 'Y'
    case MSG_RX_SET_WIPER_DELAYS:
      if(stMsgRx->nRxLen == 7){
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004518:	2b07      	cmp	r3, #7
 800451a:	d168      	bne.n	80045ee <PdmConfig_Set+0xd86>
        pConfig->stWiper.nIntermitTime[0] = stMsgRx->nRxData[1] * 100;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	0092      	lsls	r2, r2, #2
 8004528:	4413      	add	r3, r2
 800452a:	461a      	mov	r2, r3
 800452c:	0091      	lsls	r1, r2, #2
 800452e:	461a      	mov	r2, r3
 8004530:	460b      	mov	r3, r1
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
        pConfig->stWiper.nIntermitTime[1] = stMsgRx->nRxData[2] * 100;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004544:	b29b      	uxth	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	0092      	lsls	r2, r2, #2
 800454a:	4413      	add	r3, r2
 800454c:	461a      	mov	r2, r3
 800454e:	0091      	lsls	r1, r2, #2
 8004550:	461a      	mov	r2, r3
 8004552:	460b      	mov	r3, r1
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e
        pConfig->stWiper.nIntermitTime[2] = stMsgRx->nRxData[3] * 100;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004566:	b29b      	uxth	r3, r3
 8004568:	461a      	mov	r2, r3
 800456a:	0092      	lsls	r2, r2, #2
 800456c:	4413      	add	r3, r2
 800456e:	461a      	mov	r2, r3
 8004570:	0091      	lsls	r1, r2, #2
 8004572:	461a      	mov	r2, r3
 8004574:	460b      	mov	r3, r1
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f8a3 2510 	strh.w	r2, [r3, #1296]	; 0x510
        pConfig->stWiper.nIntermitTime[3] = stMsgRx->nRxData[4] * 100;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004588:	b29b      	uxth	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	0092      	lsls	r2, r2, #2
 800458e:	4413      	add	r3, r2
 8004590:	461a      	mov	r2, r3
 8004592:	0091      	lsls	r1, r2, #2
 8004594:	461a      	mov	r2, r3
 8004596:	460b      	mov	r3, r1
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8a3 2512 	strh.w	r2, [r3, #1298]	; 0x512
        pConfig->stWiper.nIntermitTime[4] = stMsgRx->nRxData[5] * 100;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	0092      	lsls	r2, r2, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	461a      	mov	r2, r3
 80045b4:	0091      	lsls	r1, r2, #2
 80045b6:	461a      	mov	r2, r3
 80045b8:	460b      	mov	r3, r1
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
        pConfig->stWiper.nIntermitTime[5] = stMsgRx->nRxData[6] * 100;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	0092      	lsls	r2, r2, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	461a      	mov	r2, r3
 80045d6:	0091      	lsls	r1, r2, #2
 80045d8:	461a      	mov	r2, r3
 80045da:	460b      	mov	r3, r1
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8a3 2516 	strh.w	r2, [r3, #1302]	; 0x516
        nSend = 1;
 80045e8:	4b2f      	ldr	r3, [pc, #188]	; (80046a8 <PdmConfig_Set+0xe40>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d004      	beq.n	8004602 <PdmConfig_Set+0xd9a>
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <PdmConfig_Set+0xe40>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 844f 	beq.w	8004ea0 <PdmConfig_Set+0x1638>
        stMsgUsbTx.nTxLen = 7;
 8004602:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <PdmConfig_Set+0xe44>)
 8004604:	2207      	movs	r2, #7
 8004606:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 8004608:	4b29      	ldr	r3, [pc, #164]	; (80046b0 <PdmConfig_Set+0xe48>)
 800460a:	2207      	movs	r2, #7
 800460c:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_DELAYS;
 800460e:	4b27      	ldr	r3, [pc, #156]	; (80046ac <PdmConfig_Set+0xe44>)
 8004610:	2279      	movs	r2, #121	; 0x79
 8004612:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)(pConfig->stWiper.nIntermitTime[0] / 100);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8b3 350c 	ldrh.w	r3, [r3, #1292]	; 0x50c
 800461a:	4a26      	ldr	r2, [pc, #152]	; (80046b4 <PdmConfig_Set+0xe4c>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	b29b      	uxth	r3, r3
 8004624:	b2da      	uxtb	r2, r3
 8004626:	4b21      	ldr	r3, [pc, #132]	; (80046ac <PdmConfig_Set+0xe44>)
 8004628:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stWiper.nIntermitTime[1] / 100);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f8b3 350e 	ldrh.w	r3, [r3, #1294]	; 0x50e
 8004630:	4a20      	ldr	r2, [pc, #128]	; (80046b4 <PdmConfig_Set+0xe4c>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	b29b      	uxth	r3, r3
 800463a:	b2da      	uxtb	r2, r3
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <PdmConfig_Set+0xe44>)
 800463e:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stWiper.nIntermitTime[2] / 100);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 8004646:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <PdmConfig_Set+0xe4c>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	b29b      	uxth	r3, r3
 8004650:	b2da      	uxtb	r2, r3
 8004652:	4b16      	ldr	r3, [pc, #88]	; (80046ac <PdmConfig_Set+0xe44>)
 8004654:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stWiper.nIntermitTime[3] / 100);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f8b3 3512 	ldrh.w	r3, [r3, #1298]	; 0x512
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <PdmConfig_Set+0xe4c>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	b29b      	uxth	r3, r3
 8004666:	b2da      	uxtb	r2, r3
 8004668:	4b10      	ldr	r3, [pc, #64]	; (80046ac <PdmConfig_Set+0xe44>)
 800466a:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stWiper.nIntermitTime[4] / 100);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <PdmConfig_Set+0xe4c>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	b29b      	uxth	r3, r3
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <PdmConfig_Set+0xe44>)
 8004680:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stWiper.nIntermitTime[5] / 100);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f8b3 3516 	ldrh.w	r3, [r3, #1302]	; 0x516
 8004688:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <PdmConfig_Set+0xe4c>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	b29b      	uxth	r3, r3
 8004692:	b2da      	uxtb	r2, r3
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <PdmConfig_Set+0xe44>)
 8004696:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <PdmConfig_Set+0xe44>)
 800469a:	2200      	movs	r2, #0
 800469c:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 800469e:	4b02      	ldr	r3, [pc, #8]	; (80046a8 <PdmConfig_Set+0xe40>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
      }
    break;
 80046a4:	e3fc      	b.n	8004ea0 <PdmConfig_Set+0x1638>
 80046a6:	bf00      	nop
 80046a8:	20002644 	.word	0x20002644
 80046ac:	20002618 	.word	0x20002618
 80046b0:	20002624 	.word	0x20002624
 80046b4:	51eb851f 	.word	0x51eb851f

    //Set Flasher Settings
    // 'H'
    case MSG_RX_SET_FLASHER:
      if(stMsgRx->nRxLen == 6){
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046be:	2b06      	cmp	r3, #6
 80046c0:	f040 808f 	bne.w	80047e2 <PdmConfig_Set+0xf7a>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4b90      	ldr	r3, [pc, #576]	; (8004910 <PdmConfig_Set+0x10a8>)
 80046d0:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 80046d2:	4b8f      	ldr	r3, [pc, #572]	; (8004910 <PdmConfig_Set+0x10a8>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	f200 8083 	bhi.w	80047e2 <PdmConfig_Set+0xf7a>
          pConfig->stFlasher[nFlasherNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046e2:	4a8b      	ldr	r2, [pc, #556]	; (8004910 <PdmConfig_Set+0x10a8>)
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	4611      	mov	r1, r2
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	b2d8      	uxtb	r0, r3
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	460b      	mov	r3, r1
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	440b      	add	r3, r1
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80046fe:	4602      	mov	r2, r0
 8004700:	701a      	strb	r2, [r3, #0]
          pConfig->stFlasher[nFlasherNum].nSingleCycle = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004708:	105b      	asrs	r3, r3, #1
 800470a:	b2db      	uxtb	r3, r3
 800470c:	4a80      	ldr	r2, [pc, #512]	; (8004910 <PdmConfig_Set+0x10a8>)
 800470e:	7812      	ldrb	r2, [r2, #0]
 8004710:	4611      	mov	r1, r2
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	b2d8      	uxtb	r0, r3
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	460b      	mov	r3, r1
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	440b      	add	r3, r1
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8004728:	4602      	mov	r2, r0
 800472a:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nInput = stMsgRx->nRxData[2];
 800472c:	4b78      	ldr	r3, [pc, #480]	; (8004910 <PdmConfig_Set+0x10a8>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	4619      	mov	r1, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	460b      	mov	r3, r1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	440b      	add	r3, r1
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	f203 5319 	addw	r3, r3, #1305	; 0x519
 8004748:	4602      	mov	r2, r0
 800474a:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nOutput = stMsgRx->nRxData[3];
 800474c:	4b70      	ldr	r3, [pc, #448]	; (8004910 <PdmConfig_Set+0x10a8>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	4619      	mov	r1, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	460b      	mov	r3, r1
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	440b      	add	r3, r1
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	4413      	add	r3, r2
 8004764:	f203 5325 	addw	r3, r3, #1317	; 0x525
 8004768:	4602      	mov	r2, r0
 800476a:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOnTime = stMsgRx->nRxData[4] * 100;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004772:	b29a      	uxth	r2, r3
 8004774:	4b66      	ldr	r3, [pc, #408]	; (8004910 <PdmConfig_Set+0x10a8>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	4619      	mov	r1, r3
 800477a:	4613      	mov	r3, r2
 800477c:	461a      	mov	r2, r3
 800477e:	0092      	lsls	r2, r2, #2
 8004780:	4413      	add	r3, r2
 8004782:	461a      	mov	r2, r3
 8004784:	0090      	lsls	r0, r2, #2
 8004786:	461a      	mov	r2, r3
 8004788:	4603      	mov	r3, r0
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	b298      	uxth	r0, r3
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	460b      	mov	r3, r1
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	440b      	add	r3, r1
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80047a0:	4602      	mov	r2, r0
 80047a2:	801a      	strh	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOffTime = stMsgRx->nRxData[5] * 100;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b58      	ldr	r3, [pc, #352]	; (8004910 <PdmConfig_Set+0x10a8>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	4619      	mov	r1, r3
 80047b2:	4613      	mov	r3, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	0092      	lsls	r2, r2, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	461a      	mov	r2, r3
 80047bc:	0090      	lsls	r0, r2, #2
 80047be:	461a      	mov	r2, r3
 80047c0:	4603      	mov	r3, r0
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	b298      	uxth	r0, r3
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	460b      	mov	r3, r1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	440b      	add	r3, r1
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	f203 5322 	addw	r3, r3, #1314	; 0x522
 80047d8:	4602      	mov	r2, r0
 80047da:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 80047dc:	4b4d      	ldr	r3, [pc, #308]	; (8004914 <PdmConfig_Set+0x10ac>)
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d10d      	bne.n	8004808 <PdmConfig_Set+0xfa0>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4b46      	ldr	r3, [pc, #280]	; (8004910 <PdmConfig_Set+0x10a8>)
 80047f8:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 80047fa:	4b45      	ldr	r3, [pc, #276]	; (8004910 <PdmConfig_Set+0x10a8>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d802      	bhi.n	8004808 <PdmConfig_Set+0xfa0>
          nSend = 1;
 8004802:	4b44      	ldr	r3, [pc, #272]	; (8004914 <PdmConfig_Set+0x10ac>)
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8004808:	4b42      	ldr	r3, [pc, #264]	; (8004914 <PdmConfig_Set+0x10ac>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8349 	beq.w	8004ea4 <PdmConfig_Set+0x163c>
        stMsgUsbTx.nTxLen = 6;
 8004812:	4b41      	ldr	r3, [pc, #260]	; (8004918 <PdmConfig_Set+0x10b0>)
 8004814:	2206      	movs	r2, #6
 8004816:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 6;
 8004818:	4b40      	ldr	r3, [pc, #256]	; (800491c <PdmConfig_Set+0x10b4>)
 800481a:	2206      	movs	r2, #6
 800481c:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_FLASHER;
 800481e:	4b3e      	ldr	r3, [pc, #248]	; (8004918 <PdmConfig_Set+0x10b0>)
 8004820:	2268      	movs	r2, #104	; 0x68
 8004822:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 8004824:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <PdmConfig_Set+0x10a8>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	b2da      	uxtb	r2, r3
 800482c:	4b38      	ldr	r3, [pc, #224]	; (8004910 <PdmConfig_Set+0x10a8>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	4603      	mov	r3, r0
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4403      	add	r3, r0
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	440b      	add	r3, r1
 800483e:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	b2db      	uxtb	r3, r3
 800484e:	4413      	add	r3, r2
 8004850:	b2da      	uxtb	r2, r3
                                (pConfig->stFlasher[nFlasherNum].nEnabled & 0x01);
 8004852:	4b2f      	ldr	r3, [pc, #188]	; (8004910 <PdmConfig_Set+0x10a8>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	68f9      	ldr	r1, [r7, #12]
 800485a:	4603      	mov	r3, r0
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4403      	add	r3, r0
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	440b      	add	r3, r1
 8004864:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 8004870:	4413      	add	r3, r2
 8004872:	b2da      	uxtb	r2, r3
 8004874:	4b28      	ldr	r3, [pc, #160]	; (8004918 <PdmConfig_Set+0x10b0>)
 8004876:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stFlasher[nFlasherNum].nInput;
 8004878:	4b25      	ldr	r3, [pc, #148]	; (8004910 <PdmConfig_Set+0x10a8>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	4619      	mov	r1, r3
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	460b      	mov	r3, r1
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	440b      	add	r3, r1
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4413      	add	r3, r2
 800488a:	f203 5319 	addw	r3, r3, #1305	; 0x519
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	4b21      	ldr	r3, [pc, #132]	; (8004918 <PdmConfig_Set+0x10b0>)
 8004892:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stFlasher[nFlasherNum].nOutput;
 8004894:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <PdmConfig_Set+0x10a8>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	4619      	mov	r1, r3
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	460b      	mov	r3, r1
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	440b      	add	r3, r1
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	f203 5325 	addw	r3, r3, #1317	; 0x525
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <PdmConfig_Set+0x10b0>)
 80048ae:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOnTime / 100);
 80048b0:	4b17      	ldr	r3, [pc, #92]	; (8004910 <PdmConfig_Set+0x10a8>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	4619      	mov	r1, r3
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	460b      	mov	r3, r1
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	440b      	add	r3, r1
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	4a15      	ldr	r2, [pc, #84]	; (8004920 <PdmConfig_Set+0x10b8>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	4b10      	ldr	r3, [pc, #64]	; (8004918 <PdmConfig_Set+0x10b0>)
 80048d6:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOffTime / 100);
 80048d8:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <PdmConfig_Set+0x10a8>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	4619      	mov	r1, r3
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	460b      	mov	r3, r1
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	440b      	add	r3, r1
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4413      	add	r3, r2
 80048ea:	f203 5322 	addw	r3, r3, #1314	; 0x522
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	4a0b      	ldr	r2, [pc, #44]	; (8004920 <PdmConfig_Set+0x10b8>)
 80048f2:	fba2 2303 	umull	r2, r3, r2, r3
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <PdmConfig_Set+0x10b0>)
 80048fe:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <PdmConfig_Set+0x10b0>)
 8004902:	2200      	movs	r2, #0
 8004904:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004906:	4b04      	ldr	r3, [pc, #16]	; (8004918 <PdmConfig_Set+0x10b0>)
 8004908:	2200      	movs	r2, #0
 800490a:	71da      	strb	r2, [r3, #7]
      }
    break;
 800490c:	e2ca      	b.n	8004ea4 <PdmConfig_Set+0x163c>
 800490e:	bf00      	nop
 8004910:	20002648 	.word	0x20002648
 8004914:	20002644 	.word	0x20002644
 8004918:	20002618 	.word	0x20002618
 800491c:	20002624 	.word	0x20002624
 8004920:	51eb851f 	.word	0x51eb851f

    //Set Starter Disable Settings
    // 'D'
    case MSG_RX_SET_STARTER:
      if(stMsgRx->nRxLen == 5){
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800492a:	2b05      	cmp	r3, #5
 800492c:	f040 808f 	bne.w	8004a4e <PdmConfig_Set+0x11e6>
        pConfig->stStarter.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578

        pConfig->stStarter.nInput = stMsgRx->nRxData[2];
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579

        pConfig->stStarter.nDisableOut[0] = (stMsgRx->nRxData[3] & 0x01);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
        pConfig->stStarter.nDisableOut[1] = (stMsgRx->nRxData[3] & 0x02) >> 1;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004966:	105b      	asrs	r3, r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	b2da      	uxtb	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
        pConfig->stStarter.nDisableOut[2] = (stMsgRx->nRxData[3] & 0x04) >> 2;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800497c:	109b      	asrs	r3, r3, #2
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
        pConfig->stStarter.nDisableOut[3] = (stMsgRx->nRxData[3] & 0x08) >> 3;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004992:	10db      	asrs	r3, r3, #3
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	b2da      	uxtb	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
        pConfig->stStarter.nDisableOut[4] = (stMsgRx->nRxData[3] & 0x10) >> 4;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80049a8:	111b      	asrs	r3, r3, #4
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
        pConfig->stStarter.nDisableOut[5] = (stMsgRx->nRxData[3] & 0x20) >> 5;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80049be:	115b      	asrs	r3, r3, #5
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
        pConfig->stStarter.nDisableOut[6] = (stMsgRx->nRxData[3] & 0x40) >> 6;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80049d4:	119b      	asrs	r3, r3, #6
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f883 2586 	strb.w	r2, [r3, #1414]	; 0x586
        pConfig->stStarter.nDisableOut[7] = (stMsgRx->nRxData[3] & 0x80) >> 7;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80049ea:	09db      	lsrs	r3, r3, #7
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f883 2587 	strb.w	r2, [r3, #1415]	; 0x587

        pConfig->stStarter.nDisableOut[8] = (stMsgRx->nRxData[4] & 0x01);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f883 2588 	strb.w	r2, [r3, #1416]	; 0x588
        pConfig->stStarter.nDisableOut[9] = (stMsgRx->nRxData[4] & 0x02) >> 1;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a0c:	105b      	asrs	r3, r3, #1
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
        pConfig->stStarter.nDisableOut[10] = (stMsgRx->nRxData[4] & 0x04) >> 2;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a22:	109b      	asrs	r3, r3, #2
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
        pConfig->stStarter.nDisableOut[11] = (stMsgRx->nRxData[4] & 0x08) >> 3;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a38:	10db      	asrs	r3, r3, #3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f883 258b 	strb.w	r2, [r3, #1419]	; 0x58b
        nSend = 1;
 8004a48:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <PdmConfig_Set+0x1324>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || nSend){
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d004      	beq.n	8004a62 <PdmConfig_Set+0x11fa>
 8004a58:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <PdmConfig_Set+0x1324>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8223 	beq.w	8004ea8 <PdmConfig_Set+0x1640>
        stMsgUsbTx.nTxLen = 5;
 8004a62:	4b4b      	ldr	r3, [pc, #300]	; (8004b90 <PdmConfig_Set+0x1328>)
 8004a64:	2205      	movs	r2, #5
 8004a66:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 8004a68:	4b4a      	ldr	r3, [pc, #296]	; (8004b94 <PdmConfig_Set+0x132c>)
 8004a6a:	2205      	movs	r2, #5
 8004a6c:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_STARTER;
 8004a6e:	4b48      	ldr	r3, [pc, #288]	; (8004b90 <PdmConfig_Set+0x1328>)
 8004a70:	2264      	movs	r2, #100	; 0x64
 8004a72:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (pConfig->stStarter.nEnabled & 0x01);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 3578 	ldrb.w	r3, [r3, #1400]	; 0x578
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <PdmConfig_Set+0x1328>)
 8004a82:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stStarter.nInput;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 2579 	ldrb.w	r2, [r3, #1401]	; 0x579
 8004a8a:	4b41      	ldr	r3, [pc, #260]	; (8004b90 <PdmConfig_Set+0x1328>)
 8004a8c:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3587 	ldrb.w	r3, [r3, #1415]	; 0x587
 8004a94:	01db      	lsls	r3, r3, #7
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3586 	ldrb.w	r3, [r3, #1414]	; 0x586
 8004a9e:	019b      	lsls	r3, r3, #6
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3585 	ldrb.w	r3, [r3, #1413]	; 0x585
 8004ab2:	015b      	lsls	r3, r3, #5
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004abc:	4413      	add	r3, r2
 8004abe:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 3584 	ldrb.w	r3, [r3, #1412]	; 0x584
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3583 	ldrb.w	r3, [r3, #1411]	; 0x583
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8004ae4:	4413      	add	r3, r2
 8004ae6:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 3582 	ldrb.w	r3, [r3, #1410]	; 0x582
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 3581 	ldrb.w	r3, [r3, #1409]	; 0x581
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8004b0c:	4413      	add	r3, r2
 8004b0e:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3580 	ldrb.w	r3, [r3, #1408]	; 0x580
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <PdmConfig_Set+0x1328>)
 8004b22:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 358b 	ldrb.w	r3, [r3, #1419]	; 0x58b
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	b25b      	sxtb	r3, r3
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	b25a      	sxtb	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 358a 	ldrb.w	r3, [r3, #1418]	; 0x58a
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	b25b      	sxtb	r3, r3
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 3589 	ldrb.w	r3, [r3, #1417]	; 0x589
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004b5a:	4413      	add	r3, r2
 8004b5c:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3588 	ldrb.w	r3, [r3, #1416]	; 0x588
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <PdmConfig_Set+0x1328>)
 8004b70:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <PdmConfig_Set+0x1328>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <PdmConfig_Set+0x1328>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004b7e:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <PdmConfig_Set+0x1328>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8004b84:	4b01      	ldr	r3, [pc, #4]	; (8004b8c <PdmConfig_Set+0x1324>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004b8a:	e18d      	b.n	8004ea8 <PdmConfig_Set+0x1640>
 8004b8c:	20002644 	.word	0x20002644
 8004b90:	20002618 	.word	0x20002618
 8004b94:	20002624 	.word	0x20002624

    //Set CAN Input Settings
    // 'N'
    case MSG_RX_SET_CAN_INPUTS:
       if(stMsgRx->nRxLen == 7){
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b9e:	2b07      	cmp	r3, #7
 8004ba0:	f040 8097 	bne.w	8004cd2 <PdmConfig_Set+0x146a>
         nCanInputNum = (stMsgRx->nRxData[2]);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004baa:	4bb6      	ldr	r3, [pc, #728]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004bac:	701a      	strb	r2, [r3, #0]
         if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 8004bae:	4bb5      	ldr	r3, [pc, #724]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b1d      	cmp	r3, #29
 8004bb4:	f200 808d 	bhi.w	8004cd2 <PdmConfig_Set+0x146a>
           pConfig->stCanInput[nCanInputNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bbe:	4ab1      	ldr	r2, [pc, #708]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004bc0:	7812      	ldrb	r2, [r2, #0]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	b2d8      	uxtb	r0, r3
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	1a5b      	subs	r3, r3, r1
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8004bda:	4602      	mov	r2, r0
 8004bdc:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004be4:	105b      	asrs	r3, r3, #1
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	4aa6      	ldr	r2, [pc, #664]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	4611      	mov	r1, r2
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	b2d8      	uxtb	r0, r3
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	1a5b      	subs	r3, r3, r1
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8004c04:	4602      	mov	r2, r0
 8004c06:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eOperator = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c0e:	4a9d      	ldr	r2, [pc, #628]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004c10:	7812      	ldrb	r2, [r2, #0]
 8004c12:	4611      	mov	r1, r2
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	b2d8      	uxtb	r0, r3
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	1a5b      	subs	r3, r3, r1
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	f203 5394 	addw	r3, r3, #1428	; 0x594
 8004c28:	4602      	mov	r2, r0
 8004c2a:	701a      	strb	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nId = (stMsgRx->nRxData[3] << 8) + stMsgRx->nRxData[4];
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	4990      	ldr	r1, [pc, #576]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004c42:	7809      	ldrb	r1, [r1, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	b298      	uxth	r0, r3
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	1a5b      	subs	r3, r3, r1
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8004c58:	4602      	mov	r2, r0
 8004c5a:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nLowByte = (stMsgRx->nRxData[5] & 0x0F);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4a87      	ldr	r2, [pc, #540]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004c66:	7812      	ldrb	r2, [r2, #0]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	b298      	uxth	r0, r3
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	460b      	mov	r3, r1
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	1a5b      	subs	r3, r3, r1
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004c80:	4602      	mov	r2, r0
 8004c82:	801a      	strh	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].nHighByte = (stMsgRx->nRxData[5] & 0xF0) >> 4;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4b7d      	ldr	r3, [pc, #500]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	4619      	mov	r1, r3
 8004c94:	b290      	uxth	r0, r2
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	1a5b      	subs	r3, r3, r1
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f203 5392 	addw	r3, r3, #1426	; 0x592
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nOnVal = stMsgRx->nRxData[6];
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004cb0:	4b74      	ldr	r3, [pc, #464]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	b290      	uxth	r0, r2
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	1a5b      	subs	r3, r3, r1
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f203 5396 	addw	r3, r3, #1430	; 0x596
 8004cc8:	4602      	mov	r2, r0
 8004cca:	801a      	strh	r2, [r3, #0]

           nSend = 1;
 8004ccc:	4b6e      	ldr	r3, [pc, #440]	; (8004e88 <PdmConfig_Set+0x1620>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
         }
       }

       if(stMsgRx->nRxLen == 2){
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d10b      	bne.n	8004cf4 <PdmConfig_Set+0x148c>
          nCanInputNum = (stMsgRx->nRxData[1]);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004ce2:	4b68      	ldr	r3, [pc, #416]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004ce4:	701a      	strb	r2, [r3, #0]
          if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 8004ce6:	4b67      	ldr	r3, [pc, #412]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b1d      	cmp	r3, #29
 8004cec:	d802      	bhi.n	8004cf4 <PdmConfig_Set+0x148c>
            nSend = 1;
 8004cee:	4b66      	ldr	r3, [pc, #408]	; (8004e88 <PdmConfig_Set+0x1620>)
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	701a      	strb	r2, [r3, #0]
          }
       }

       if(nSend){
 8004cf4:	4b64      	ldr	r3, [pc, #400]	; (8004e88 <PdmConfig_Set+0x1620>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80d7 	beq.w	8004eac <PdmConfig_Set+0x1644>
         stMsgUsbTx.nTxLen = 7;
 8004cfe:	4b63      	ldr	r3, [pc, #396]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004d00:	2207      	movs	r2, #7
 8004d02:	721a      	strb	r2, [r3, #8]
         stMsgCanTx.stTxHeader.DLC = 7;
 8004d04:	4b62      	ldr	r3, [pc, #392]	; (8004e90 <PdmConfig_Set+0x1628>)
 8004d06:	2207      	movs	r2, #7
 8004d08:	611a      	str	r2, [r3, #16]

         stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN_INPUTS;
 8004d0a:	4b60      	ldr	r3, [pc, #384]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004d0c:	226e      	movs	r2, #110	; 0x6e
 8004d0e:	701a      	strb	r2, [r3, #0]
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8004d10:	4b5c      	ldr	r3, [pc, #368]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	4619      	mov	r1, r3
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	1a5b      	subs	r3, r3, r1
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	f203 5394 	addw	r3, r3, #1428	; 0x594
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	4603      	mov	r3, r0
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	1a1b      	subs	r3, r3, r0
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f003 0306 	and.w	r3, r3, #6
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	4413      	add	r3, r2
 8004d50:	b2da      	uxtb	r2, r3
                                 (pConfig->stCanInput[nCanInputNum].nEnabled & 0x01);
 8004d52:	4b4c      	ldr	r3, [pc, #304]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	68f9      	ldr	r1, [r7, #12]
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	1a1b      	subs	r3, r3, r0
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	b2db      	uxtb	r3, r3
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8004d70:	4413      	add	r3, r2
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004d76:	705a      	strb	r2, [r3, #1]
         stMsgUsbTx.nTxData[2] = nCanInputNum;
 8004d78:	4b42      	ldr	r3, [pc, #264]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	4b43      	ldr	r3, [pc, #268]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004d7e:	709a      	strb	r2, [r3, #2]
         stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId >> 8);
 8004d80:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	4619      	mov	r1, r3
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	1a5b      	subs	r3, r3, r1
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	4b3b      	ldr	r3, [pc, #236]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004da0:	70da      	strb	r2, [r3, #3]
         stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId & 0xFF);
 8004da2:	4b38      	ldr	r3, [pc, #224]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	4619      	mov	r1, r3
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	460b      	mov	r3, r1
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	1a5b      	subs	r3, r3, r1
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004dbe:	711a      	strb	r2, [r3, #4]
         stMsgUsbTx.nTxData[5] = ((pConfig->stCanInput[nCanInputNum].nHighByte & 0xF) << 4) + (pConfig->stCanInput[nCanInputNum].nLowByte & 0xF);
 8004dc0:	4b30      	ldr	r3, [pc, #192]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	1a5b      	subs	r3, r3, r1
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f203 5392 	addw	r3, r3, #1426	; 0x592
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	68f9      	ldr	r1, [r7, #12]
 8004de4:	4603      	mov	r3, r0
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	1a1b      	subs	r3, r3, r0
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e02:	715a      	strb	r2, [r3, #5]
         stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nOnVal);
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <PdmConfig_Set+0x161c>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	1a5b      	subs	r3, r3, r1
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	f203 5396 	addw	r3, r3, #1430	; 0x596
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e20:	719a      	strb	r2, [r3, #6]
       }
    break;
 8004e22:	e043      	b.n	8004eac <PdmConfig_Set+0x1644>

    //Get Version
    // 'V'
    case MSG_RX_GET_VERSION:
      if(stMsgRx->nRxLen == 1){
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d140      	bne.n	8004eb0 <PdmConfig_Set+0x1648>
        nSend = 1;
 8004e2e:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <PdmConfig_Set+0x1620>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxLen = 5;
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e36:	2205      	movs	r2, #5
 8004e38:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 8004e3a:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <PdmConfig_Set+0x1628>)
 8004e3c:	2205      	movs	r2, #5
 8004e3e:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_GET_VERSION;
 8004e40:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e42:	2276      	movs	r2, #118	; 0x76
 8004e44:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)PDM_MAJOR_VERSION;
 8004e46:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)PDM_MINOR_VERSION;
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(PDM_BUILD >> 8);
 8004e52:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(PDM_BUILD & 0xFF);
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004e64:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004e6a:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <PdmConfig_Set+0x1624>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	71da      	strb	r2, [r3, #7]
      }
    break;
 8004e70:	e01e      	b.n	8004eb0 <PdmConfig_Set+0x1648>

    default:
      return 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e03e      	b.n	8004ef4 <PdmConfig_Set+0x168c>
    break;
 8004e76:	bf00      	nop
 8004e78:	e01b      	b.n	8004eb2 <PdmConfig_Set+0x164a>
    break;
 8004e7a:	bf00      	nop
 8004e7c:	e019      	b.n	8004eb2 <PdmConfig_Set+0x164a>
    break;
 8004e7e:	bf00      	nop
 8004e80:	e017      	b.n	8004eb2 <PdmConfig_Set+0x164a>
 8004e82:	bf00      	nop
 8004e84:	20002649 	.word	0x20002649
 8004e88:	20002644 	.word	0x20002644
 8004e8c:	20002618 	.word	0x20002618
 8004e90:	20002624 	.word	0x20002624
    break;
 8004e94:	bf00      	nop
 8004e96:	e00c      	b.n	8004eb2 <PdmConfig_Set+0x164a>
    break;
 8004e98:	bf00      	nop
 8004e9a:	e00a      	b.n	8004eb2 <PdmConfig_Set+0x164a>
    break;
 8004e9c:	bf00      	nop
 8004e9e:	e008      	b.n	8004eb2 <PdmConfig_Set+0x164a>
    break;
 8004ea0:	bf00      	nop
 8004ea2:	e006      	b.n	8004eb2 <PdmConfig_Set+0x164a>
    break;
 8004ea4:	bf00      	nop
 8004ea6:	e004      	b.n	8004eb2 <PdmConfig_Set+0x164a>
    break;
 8004ea8:	bf00      	nop
 8004eaa:	e002      	b.n	8004eb2 <PdmConfig_Set+0x164a>
    break;
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <PdmConfig_Set+0x164a>
    break;
 8004eb0:	bf00      	nop
    }

  if(nSend){
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <PdmConfig_Set+0x1694>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01b      	beq.n	8004ef2 <PdmConfig_Set+0x168a>
    stMsgCanTx.stTxHeader.StdId = pConfig->stCanOutput.nBaseId + 20;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8004ec0:	3314      	adds	r3, #20
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <PdmConfig_Set+0x1698>)
 8004ec6:	601a      	str	r2, [r3, #0]

    memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <PdmConfig_Set+0x1698>)
 8004eca:	4a0e      	ldr	r2, [pc, #56]	; (8004f04 <PdmConfig_Set+0x169c>)
 8004ecc:	3318      	adds	r3, #24
 8004ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ed2:	e883 0003 	stmia.w	r3, {r0, r1}

    osMessageQueuePut(*qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	2300      	movs	r3, #0
 8004edc:	2200      	movs	r2, #0
 8004ede:	4909      	ldr	r1, [pc, #36]	; (8004f04 <PdmConfig_Set+0x169c>)
 8004ee0:	f00d fd3a 	bl	8012958 <osMessageQueuePut>
    osMessageQueuePut(*qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	2200      	movs	r2, #0
 8004eec:	4904      	ldr	r1, [pc, #16]	; (8004f00 <PdmConfig_Set+0x1698>)
 8004eee:	f00d fd33 	bl	8012958 <osMessageQueuePut>
  }

  return 1;
 8004ef2:	2301      	movs	r3, #1

}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20002644 	.word	0x20002644
 8004f00:	20002624 	.word	0x20002624
 8004f04:	20002618 	.word	0x20002618

08004f08 <PdmConfig_SetDefault>:

void PdmConfig_SetDefault(PdmConfig_t* pConfig){
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  //Device Configuration
  pConfig->stDevConfig.nVersion = 3;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2203      	movs	r2, #3
 8004f14:	701a      	strb	r2, [r3, #0]
  pConfig->stDevConfig.nCanEnabled = 1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	705a      	strb	r2, [r3, #1]
  pConfig->stDevConfig.nCanSpeed = 6;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2206      	movs	r2, #6
 8004f20:	709a      	strb	r2, [r3, #2]

  //Logging
  pConfig->stLogging.nUpdateTime = 1000;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f28:	809a      	strh	r2, [r3, #4]

  //Inputs
  pConfig->stInput[0].nEnabled = 1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	721a      	strb	r2, [r3, #8]
  pConfig->stInput[0].eMode = MODE_MOMENTARY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	741a      	strb	r2, [r3, #16]
  pConfig->stInput[0].nOnLevel = 0;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	841a      	strh	r2, [r3, #32]
  pConfig->stInput[0].nDebounceTime = 20;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2214      	movs	r2, #20
 8004f40:	845a      	strh	r2, [r3, #34]	; 0x22

  pConfig->stInput[1].nEnabled = 1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pConfig->stInput[1].eMode = MODE_MOMENTARY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pConfig->stInput[1].nOnLevel = 0;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	879a      	strh	r2, [r3, #60]	; 0x3c
  pConfig->stInput[1].nDebounceTime = 20;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2214      	movs	r2, #20
 8004f5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  pConfig->stInput[2].nEnabled = 1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pConfig->stInput[2].eMode = MODE_MOMENTARY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  pConfig->stInput[2].nOnLevel = 0;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  pConfig->stInput[2].nDebounceTime = 20;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2214      	movs	r2, #20
 8004f7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  pConfig->stInput[3].nEnabled = 1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  pConfig->stInput[3].eMode = MODE_MOMENTARY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  pConfig->stInput[3].nOnLevel = 0;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  pConfig->stInput[3].nDebounceTime = 20;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2214      	movs	r2, #20
 8004f9a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

  pConfig->stInput[4].nEnabled = 1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  pConfig->stInput[4].eMode = MODE_MOMENTARY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  pConfig->stInput[4].nOnLevel = 0;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  pConfig->stInput[4].nDebounceTime = 20;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2214      	movs	r2, #20
 8004fba:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

  pConfig->stInput[5].nEnabled = 1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  pConfig->stInput[5].eMode = MODE_MOMENTARY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  pConfig->stInput[5].nOnLevel = 0;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  pConfig->stInput[5].nDebounceTime = 20;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2214      	movs	r2, #20
 8004fda:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

  pConfig->stInput[6].nEnabled = 1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  pConfig->stInput[6].eMode = MODE_MOMENTARY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
  pConfig->stInput[6].nOnLevel = 0;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
  pConfig->stInput[6].nDebounceTime = 20;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2214      	movs	r2, #20
 8004ffa:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

  pConfig->stInput[7].nEnabled = 1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  pConfig->stInput[7].eMode = MODE_MOMENTARY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
  pConfig->stInput[7].nOnLevel = 0;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
  pConfig->stInput[7].nDebounceTime = 20;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2214      	movs	r2, #20
 800501a:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6

  //Outputs
  pConfig->stOutput[0].nEnabled = 1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
  pConfig->stOutput[0].nInput = 1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
  pConfig->stOutput[0].nCurrentLimit = 250;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	22fa      	movs	r2, #250	; 0xfa
 8005032:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
  pConfig->stOutput[0].nInrushLimit = 300;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800503c:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
  pConfig->stOutput[0].nInrushTime = 2000;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005046:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
  pConfig->stOutput[0].eResetMode = RESET_ENDLESS;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
  pConfig->stOutput[0].nResetTime = 1000;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005058:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418
  pConfig->stOutput[0].nResetLimit = 1;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a

  pConfig->stOutput[1].nEnabled = 1;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  pConfig->stOutput[1].nInput = 2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
  pConfig->stOutput[1].nCurrentLimit = 150;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2296      	movs	r2, #150	; 0x96
 8005078:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
  pConfig->stOutput[1].nInrushLimit = 300;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005082:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
  pConfig->stOutput[1].nInrushTime = 2000;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800508c:	f8a3 2428 	strh.w	r2, [r3, #1064]	; 0x428
  pConfig->stOutput[1].eResetMode = RESET_ENDLESS;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
  pConfig->stOutput[1].nResetTime = 1000;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800509e:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
  pConfig->stOutput[1].nResetLimit = 2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

  pConfig->stOutput[2].nEnabled = 1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
  pConfig->stOutput[2].nInput = 3;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2203      	movs	r2, #3
 80050b6:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
  pConfig->stOutput[2].nCurrentLimit = 80;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2250      	movs	r2, #80	; 0x50
 80050be:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438
  pConfig->stOutput[2].nInrushLimit = 160;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	22a0      	movs	r2, #160	; 0xa0
 80050c6:	f8a3 243a 	strh.w	r2, [r3, #1082]	; 0x43a
  pConfig->stOutput[2].nInrushTime = 2000;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80050d0:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
  pConfig->stOutput[2].eResetMode = RESET_ENDLESS;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
  pConfig->stOutput[2].nResetTime = 1000;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050e2:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
  pConfig->stOutput[2].nResetLimit = 3;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2203      	movs	r2, #3
 80050ea:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442

  pConfig->stOutput[3].nEnabled = 1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
  pConfig->stOutput[3].nInput = 4;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2204      	movs	r2, #4
 80050fa:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
  pConfig->stOutput[3].nCurrentLimit = 80;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2250      	movs	r2, #80	; 0x50
 8005102:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
  pConfig->stOutput[3].nInrushLimit = 160;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	22a0      	movs	r2, #160	; 0xa0
 800510a:	f8a3 244e 	strh.w	r2, [r3, #1102]	; 0x44e
  pConfig->stOutput[3].nInrushTime = 2000;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005114:	f8a3 2450 	strh.w	r2, [r3, #1104]	; 0x450
  pConfig->stOutput[3].eResetMode = RESET_ENDLESS;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
  pConfig->stOutput[3].nResetTime = 1000;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005126:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
  pConfig->stOutput[3].nResetLimit = 2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456

  pConfig->stOutput[4].nEnabled = 1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
  pConfig->stOutput[4].nInput = 5;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2205      	movs	r2, #5
 800513e:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
  pConfig->stOutput[4].nCurrentLimit = 80;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2250      	movs	r2, #80	; 0x50
 8005146:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
  pConfig->stOutput[4].nInrushLimit = 160;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	22a0      	movs	r2, #160	; 0xa0
 800514e:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
  pConfig->stOutput[4].nInrushTime = 2000;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005158:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
  pConfig->stOutput[4].eResetMode = RESET_ENDLESS;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
  pConfig->stOutput[4].nResetTime = 1000;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800516a:	f8a3 2468 	strh.w	r2, [r3, #1128]	; 0x468
  pConfig->stOutput[4].nResetLimit = 2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a

  pConfig->stOutput[5].nEnabled = 1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 246c 	strb.w	r2, [r3, #1132]	; 0x46c
  pConfig->stOutput[5].nInput = 6;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2206      	movs	r2, #6
 8005182:	f883 246d 	strb.w	r2, [r3, #1133]	; 0x46d
  pConfig->stOutput[5].nCurrentLimit = 80;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2250      	movs	r2, #80	; 0x50
 800518a:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
  pConfig->stOutput[5].nInrushLimit = 160;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	22a0      	movs	r2, #160	; 0xa0
 8005192:	f8a3 2476 	strh.w	r2, [r3, #1142]	; 0x476
  pConfig->stOutput[5].nInrushTime = 2000;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800519c:	f8a3 2478 	strh.w	r2, [r3, #1144]	; 0x478
  pConfig->stOutput[5].eResetMode = RESET_ENDLESS;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
  pConfig->stOutput[5].nResetTime = 1000;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051ae:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
  pConfig->stOutput[5].nResetLimit = 2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e

  pConfig->stOutput[6].nEnabled = 1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
  pConfig->stOutput[6].nInput = 7;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2207      	movs	r2, #7
 80051c6:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
  pConfig->stOutput[6].nCurrentLimit = 150;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2296      	movs	r2, #150	; 0x96
 80051ce:	f8a3 2488 	strh.w	r2, [r3, #1160]	; 0x488
  pConfig->stOutput[6].nInrushLimit = 300;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051d8:	f8a3 248a 	strh.w	r2, [r3, #1162]	; 0x48a
  pConfig->stOutput[6].nInrushTime = 2000;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80051e2:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
  pConfig->stOutput[6].eResetMode = RESET_ENDLESS;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
  pConfig->stOutput[6].nResetTime = 1000;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051f4:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
  pConfig->stOutput[6].nResetLimit = 2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492

  pConfig->stOutput[7].nEnabled = 1;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  pConfig->stOutput[7].nInput = 8;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2208      	movs	r2, #8
 800520c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
  pConfig->stOutput[7].nCurrentLimit = 150;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2296      	movs	r2, #150	; 0x96
 8005214:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
  pConfig->stOutput[7].nInrushLimit = 300;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800521e:	f8a3 249e 	strh.w	r2, [r3, #1182]	; 0x49e
  pConfig->stOutput[7].nInrushTime = 2000;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005228:	f8a3 24a0 	strh.w	r2, [r3, #1184]	; 0x4a0
  pConfig->stOutput[7].eResetMode = RESET_ENDLESS;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
  pConfig->stOutput[7].nResetTime = 1000;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800523a:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
  pConfig->stOutput[7].nResetLimit = 2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6

  pConfig->stOutput[8].nEnabled = 1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
  pConfig->stOutput[8].nInput = 1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
  pConfig->stOutput[8].nCurrentLimit = 80;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2250      	movs	r2, #80	; 0x50
 800525a:	f8a3 24b0 	strh.w	r2, [r3, #1200]	; 0x4b0
  pConfig->stOutput[8].nInrushLimit = 160;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	22a0      	movs	r2, #160	; 0xa0
 8005262:	f8a3 24b2 	strh.w	r2, [r3, #1202]	; 0x4b2
  pConfig->stOutput[8].nInrushTime = 2000;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800526c:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
  pConfig->stOutput[8].eResetMode = RESET_ENDLESS;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
  pConfig->stOutput[8].nResetTime = 1000;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800527e:	f8a3 24b8 	strh.w	r2, [r3, #1208]	; 0x4b8
  pConfig->stOutput[8].nResetLimit = 2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba

  pConfig->stOutput[9].nEnabled = 1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  pConfig->stOutput[9].nInput = 2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  pConfig->stOutput[9].nCurrentLimit = 80;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2250      	movs	r2, #80	; 0x50
 800529e:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
  pConfig->stOutput[9].nInrushLimit = 160;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	22a0      	movs	r2, #160	; 0xa0
 80052a6:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
  pConfig->stOutput[9].nInrushTime = 2000;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80052b0:	f8a3 24c8 	strh.w	r2, [r3, #1224]	; 0x4c8
  pConfig->stOutput[9].eResetMode = RESET_ENDLESS;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
  pConfig->stOutput[9].nResetTime = 1000;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052c2:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
  pConfig->stOutput[9].nResetLimit = 2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce

  pConfig->stOutput[10].nEnabled = 1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
  pConfig->stOutput[10].nInput = 7;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2207      	movs	r2, #7
 80052da:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
  pConfig->stOutput[10].nCurrentLimit = 80;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2250      	movs	r2, #80	; 0x50
 80052e2:	f8a3 24d8 	strh.w	r2, [r3, #1240]	; 0x4d8
  pConfig->stOutput[10].nInrushLimit = 160;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	22a0      	movs	r2, #160	; 0xa0
 80052ea:	f8a3 24da 	strh.w	r2, [r3, #1242]	; 0x4da
  pConfig->stOutput[10].nInrushTime = 2000;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80052f4:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
  pConfig->stOutput[10].eResetMode = RESET_ENDLESS;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
  pConfig->stOutput[10].nResetTime = 1000;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005306:	f8a3 24e0 	strh.w	r2, [r3, #1248]	; 0x4e0
  pConfig->stOutput[10].nResetLimit = 2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2

  pConfig->stOutput[11].nEnabled = 1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
  pConfig->stOutput[11].nInput = 8;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2208      	movs	r2, #8
 800531e:	f883 24e5 	strb.w	r2, [r3, #1253]	; 0x4e5
  pConfig->stOutput[11].nCurrentLimit = 80;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2250      	movs	r2, #80	; 0x50
 8005326:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
  pConfig->stOutput[11].nInrushLimit = 160;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	22a0      	movs	r2, #160	; 0xa0
 800532e:	f8a3 24ee 	strh.w	r2, [r3, #1262]	; 0x4ee
  pConfig->stOutput[11].nInrushTime = 2000;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005338:	f8a3 24f0 	strh.w	r2, [r3, #1264]	; 0x4f0
  pConfig->stOutput[11].eResetMode = RESET_ENDLESS;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
  pConfig->stOutput[11].nResetTime = 1000;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800534a:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
  pConfig->stOutput[11].nResetLimit = 2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6

  //Virtual Inputs
  pConfig->stVirtualInput[0].nEnabled = 0;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
  pConfig->stVirtualInput[0].nNot0 = 0;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
  pConfig->stVirtualInput[0].nVar0 = 10;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	220a      	movs	r2, #10
 800536a:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
  pConfig->stVirtualInput[0].eCond0 = COND_AND;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  pConfig->stVirtualInput[0].nNot1 = 1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
  pConfig->stVirtualInput[0].nVar1 = 63;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	223f      	movs	r2, #63	; 0x3f
 8005382:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
  pConfig->stVirtualInput[0].eCond1 = COND_OR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  pConfig->stVirtualInput[0].nNot2 = 0;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  pConfig->stVirtualInput[0].nVar2 = 0;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  pConfig->stVirtualInput[0].eMode = MODE_LATCHING;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

  pConfig->stVirtualInput[1].nEnabled = 0;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
  pConfig->stVirtualInput[1].nNot0 = 0;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  pConfig->stVirtualInput[1].nVar0 = 11;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	220b      	movs	r2, #11
 80053ba:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pConfig->stVirtualInput[1].eCond0 = COND_AND;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  pConfig->stVirtualInput[1].nNot1 = 1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  pConfig->stVirtualInput[1].nVar1 = 62;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	223e      	movs	r2, #62	; 0x3e
 80053d2:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  pConfig->stVirtualInput[1].eCond1 = COND_OR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
  pConfig->stVirtualInput[1].nNot2 = 0;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
  pConfig->stVirtualInput[1].nVar2 = 0;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
  pConfig->stVirtualInput[1].eMode = MODE_LATCHING;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

  pConfig->stVirtualInput[2].nEnabled = 0;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  pConfig->stVirtualInput[2].nNot0 = 0;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
  pConfig->stVirtualInput[2].nVar0 = 0;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
  pConfig->stVirtualInput[2].eCond0 = COND_AND;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  pConfig->stVirtualInput[2].nNot1 = 0;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  pConfig->stVirtualInput[2].nVar1 = 0;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  pConfig->stVirtualInput[2].eCond1 = COND_OR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
  pConfig->stVirtualInput[2].nNot2 = 0;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
  pConfig->stVirtualInput[2].nVar2 = 0;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
  pConfig->stVirtualInput[2].eMode = MODE_MOMENTARY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

  pConfig->stVirtualInput[3].nEnabled = 0;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  pConfig->stVirtualInput[3].nNot0 = 0;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
  pConfig->stVirtualInput[3].nVar0 = 0;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
  pConfig->stVirtualInput[3].eCond0 = COND_AND;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  pConfig->stVirtualInput[3].nNot1 = 0;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  pConfig->stVirtualInput[3].nVar1 = 0;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
  pConfig->stVirtualInput[3].eCond1 = COND_OR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
  pConfig->stVirtualInput[3].nNot2 = 0;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
  pConfig->stVirtualInput[3].nVar2 = 0;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
  pConfig->stVirtualInput[3].eMode = MODE_MOMENTARY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

  pConfig->stVirtualInput[4].nEnabled = 0;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
  pConfig->stVirtualInput[4].nNot0 = 0;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  pConfig->stVirtualInput[4].nVar0 = 0;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  pConfig->stVirtualInput[4].eCond0 = COND_AND;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
  pConfig->stVirtualInput[4].nNot1 = 0;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
  pConfig->stVirtualInput[4].nVar1 = 0;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
  pConfig->stVirtualInput[4].eCond1 = COND_OR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  pConfig->stVirtualInput[4].nNot2 = 0;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
  pConfig->stVirtualInput[4].nVar2 = 0;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
  pConfig->stVirtualInput[4].eMode = MODE_MOMENTARY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0

  pConfig->stVirtualInput[5].nEnabled = 0;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
  pConfig->stVirtualInput[5].nNot0 = 0;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
  pConfig->stVirtualInput[5].nVar0 = 0;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
  pConfig->stVirtualInput[5].eCond0 = COND_AND;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  pConfig->stVirtualInput[5].nNot1 = 0;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  pConfig->stVirtualInput[5].nVar1 = 0;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  pConfig->stVirtualInput[5].eCond1 = COND_OR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
  pConfig->stVirtualInput[5].nNot2 = 0;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  pConfig->stVirtualInput[5].nVar2 = 0;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
  pConfig->stVirtualInput[5].eMode = MODE_MOMENTARY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

  pConfig->stVirtualInput[6].nEnabled = 0;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
  pConfig->stVirtualInput[6].nNot0 = 0;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
  pConfig->stVirtualInput[6].nVar0 = 0;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
  pConfig->stVirtualInput[6].eCond0 = COND_AND;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
  pConfig->stVirtualInput[6].nNot1 = 0;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
  pConfig->stVirtualInput[6].nVar1 = 0;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
  pConfig->stVirtualInput[6].eCond1 = COND_OR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
  pConfig->stVirtualInput[6].nNot2 = 0;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
  pConfig->stVirtualInput[6].nVar2 = 0;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
  pConfig->stVirtualInput[6].eMode = MODE_MOMENTARY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0

  pConfig->stVirtualInput[7].nEnabled = 0;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  pConfig->stVirtualInput[7].nNot0 = 0;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  pConfig->stVirtualInput[7].nVar0 = 0;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
  pConfig->stVirtualInput[7].eCond0 = COND_AND;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
  pConfig->stVirtualInput[7].nNot1 = 0;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
  pConfig->stVirtualInput[7].nVar1 = 0;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
  pConfig->stVirtualInput[7].eCond1 = COND_OR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  pConfig->stVirtualInput[7].nNot2 = 0;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  pConfig->stVirtualInput[7].nVar2 = 0;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  pConfig->stVirtualInput[7].eMode = MODE_MOMENTARY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

  pConfig->stVirtualInput[8].nEnabled = 0;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  pConfig->stVirtualInput[8].nNot0 = 0;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  pConfig->stVirtualInput[8].nVar0 = 0;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
  pConfig->stVirtualInput[8].eCond0 = COND_AND;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
  pConfig->stVirtualInput[8].nNot1 = 0;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
  pConfig->stVirtualInput[8].nVar1 = 0;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
  pConfig->stVirtualInput[8].eCond1 = COND_OR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  pConfig->stVirtualInput[8].nNot2 = 0;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
  pConfig->stVirtualInput[8].nVar2 = 0;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
  pConfig->stVirtualInput[8].eMode = MODE_MOMENTARY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

  pConfig->stVirtualInput[9].nEnabled = 0;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
  pConfig->stVirtualInput[9].nNot0 = 0;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
  pConfig->stVirtualInput[9].nVar0 = 0;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
  pConfig->stVirtualInput[9].eCond0 = COND_AND;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
  pConfig->stVirtualInput[9].nNot1 = 0;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
  pConfig->stVirtualInput[9].nVar1 = 0;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
  pConfig->stVirtualInput[9].eCond1 = COND_OR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  pConfig->stVirtualInput[9].nNot2 = 0;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  pConfig->stVirtualInput[9].nVar2 = 0;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  pConfig->stVirtualInput[9].eMode = MODE_MOMENTARY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268

  pConfig->stVirtualInput[10].nEnabled = 0;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
  pConfig->stVirtualInput[10].nNot0 = 0;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
  pConfig->stVirtualInput[10].nVar0 = 0;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
  pConfig->stVirtualInput[10].eCond0 = COND_AND;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
  pConfig->stVirtualInput[10].nNot1 = 0;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
  pConfig->stVirtualInput[10].nVar1 = 0;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
  pConfig->stVirtualInput[10].eCond1 = COND_OR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
  pConfig->stVirtualInput[10].nNot2 = 0;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
  pConfig->stVirtualInput[10].nVar2 = 0;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
  pConfig->stVirtualInput[10].eMode = MODE_MOMENTARY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  pConfig->stVirtualInput[11].nEnabled = 0;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
  pConfig->stVirtualInput[11].nNot0 = 0;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
  pConfig->stVirtualInput[11].nVar0 = 0;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
  pConfig->stVirtualInput[11].eCond0 = COND_AND;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  pConfig->stVirtualInput[11].nNot1 = 0;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  pConfig->stVirtualInput[11].nVar1 = 0;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
  pConfig->stVirtualInput[11].eCond1 = COND_OR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
  pConfig->stVirtualInput[11].nNot2 = 0;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
  pConfig->stVirtualInput[11].nVar2 = 0;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
  pConfig->stVirtualInput[11].eMode = MODE_MOMENTARY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  pConfig->stVirtualInput[12].nEnabled = 0;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
  pConfig->stVirtualInput[12].nNot0 = 0;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
  pConfig->stVirtualInput[12].nVar0 = 0;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
  pConfig->stVirtualInput[12].eCond0 = COND_AND;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
  pConfig->stVirtualInput[12].nNot1 = 0;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
  pConfig->stVirtualInput[12].nVar1 = 0;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
  pConfig->stVirtualInput[12].eCond1 = COND_OR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
  pConfig->stVirtualInput[12].nNot2 = 0;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
  pConfig->stVirtualInput[12].nVar2 = 0;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
  pConfig->stVirtualInput[12].eMode = MODE_MOMENTARY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  pConfig->stVirtualInput[13].nEnabled = 0;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
  pConfig->stVirtualInput[13].nNot0 = 0;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
  pConfig->stVirtualInput[13].nVar0 = 0;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
  pConfig->stVirtualInput[13].eCond0 = COND_AND;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  pConfig->stVirtualInput[13].nNot1 = 0;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
  pConfig->stVirtualInput[13].nVar1 = 0;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
  pConfig->stVirtualInput[13].eCond1 = COND_OR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  pConfig->stVirtualInput[13].nNot2 = 0;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
  pConfig->stVirtualInput[13].nVar2 = 0;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  pConfig->stVirtualInput[13].eMode = MODE_MOMENTARY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308

  pConfig->stVirtualInput[14].nEnabled = 0;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  pConfig->stVirtualInput[14].nNot0 = 0;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  pConfig->stVirtualInput[14].nVar0 = 0;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
  pConfig->stVirtualInput[14].eCond0 = COND_AND;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  pConfig->stVirtualInput[14].nNot1 = 0;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  pConfig->stVirtualInput[14].nVar1 = 0;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  pConfig->stVirtualInput[14].eCond1 = COND_OR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  pConfig->stVirtualInput[14].nNot2 = 0;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  pConfig->stVirtualInput[14].nVar2 = 0;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
  pConfig->stVirtualInput[14].eMode = MODE_MOMENTARY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330

  pConfig->stVirtualInput[15].nEnabled = 0;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
  pConfig->stVirtualInput[15].nNot0 = 0;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
  pConfig->stVirtualInput[15].nVar0 = 0;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
  pConfig->stVirtualInput[15].eCond0 = COND_AND;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
  pConfig->stVirtualInput[15].nNot1 = 0;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
  pConfig->stVirtualInput[15].nVar1 = 0;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
  pConfig->stVirtualInput[15].eCond1 = COND_OR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
  pConfig->stVirtualInput[15].nNot2 = 0;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
  pConfig->stVirtualInput[15].nVar2 = 0;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
  pConfig->stVirtualInput[15].eMode = MODE_MOMENTARY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

  pConfig->stVirtualInput[16].nEnabled = 0;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
  pConfig->stVirtualInput[16].nNot0 = 0;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
  pConfig->stVirtualInput[16].nVar0 = 0;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
  pConfig->stVirtualInput[16].eCond0 = COND_AND;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  pConfig->stVirtualInput[16].nNot1 = 0;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
  pConfig->stVirtualInput[16].nVar1 = 0;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
  pConfig->stVirtualInput[16].eCond1 = COND_OR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
  pConfig->stVirtualInput[16].nNot2 = 0;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
  pConfig->stVirtualInput[16].nVar2 = 0;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
  pConfig->stVirtualInput[16].eMode = MODE_MOMENTARY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380

  pConfig->stVirtualInput[17].nEnabled = 0;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
  pConfig->stVirtualInput[17].nNot0 = 0;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
  pConfig->stVirtualInput[17].nVar0 = 0;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
  pConfig->stVirtualInput[17].eCond0 = COND_AND;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
  pConfig->stVirtualInput[17].nNot1 = 0;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
  pConfig->stVirtualInput[17].nVar1 = 0;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
  pConfig->stVirtualInput[17].eCond1 = COND_OR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
  pConfig->stVirtualInput[17].nNot2 = 0;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
  pConfig->stVirtualInput[17].nVar2 = 0;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
  pConfig->stVirtualInput[17].eMode = MODE_MOMENTARY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8

  pConfig->stVirtualInput[18].nEnabled = 0;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  pConfig->stVirtualInput[18].nNot0 = 0;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  pConfig->stVirtualInput[18].nVar0 = 0;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
  pConfig->stVirtualInput[18].eCond0 = COND_AND;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
  pConfig->stVirtualInput[18].nNot1 = 0;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
  pConfig->stVirtualInput[18].nVar1 = 0;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
  pConfig->stVirtualInput[18].eCond1 = COND_OR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
  pConfig->stVirtualInput[18].nNot2 = 0;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
  pConfig->stVirtualInput[18].nVar2 = 0;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
  pConfig->stVirtualInput[18].eMode = MODE_MOMENTARY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0

  pConfig->stVirtualInput[19].nEnabled = 0;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
  pConfig->stVirtualInput[19].nNot0 = 0;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
  pConfig->stVirtualInput[19].nVar0 = 0;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
  pConfig->stVirtualInput[19].eCond0 = COND_AND;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  pConfig->stVirtualInput[19].nNot1 = 0;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
  pConfig->stVirtualInput[19].nVar1 = 0;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
  pConfig->stVirtualInput[19].eCond1 = COND_OR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
  pConfig->stVirtualInput[19].nNot2 = 0;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
  pConfig->stVirtualInput[19].nVar2 = 0;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
  pConfig->stVirtualInput[19].eMode = MODE_MOMENTARY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8

  //Wiper
  pConfig->stWiper.nEnabled = 0;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
  pConfig->stWiper.nMode = 2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
  pConfig->stWiper.nSlowInput = 0;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
  pConfig->stWiper.nFastInput = 0;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
  pConfig->stWiper.nInterInput = 0;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
  pConfig->stWiper.nOnInput = 15;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	220f      	movs	r2, #15
 80059c2:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd
  pConfig->stWiper.nSpeedInput = 7;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2207      	movs	r2, #7
 80059ca:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
  pConfig->stWiper.nParkInput = 1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
  pConfig->stWiper.nParkStopLevel = 0;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  pConfig->stWiper.nSwipeInput = 4;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2204      	movs	r2, #4
 80059e2:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
  pConfig->stWiper.nWashInput = 14;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	220e      	movs	r2, #14
 80059ea:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
  pConfig->stWiper.nWashWipeCycles = 2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
  pConfig->stWiper.nSpeedMap[0] = 3;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2203      	movs	r2, #3
 80059fa:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
  pConfig->stWiper.nSpeedMap[1] = 4;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2204      	movs	r2, #4
 8005a02:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
  pConfig->stWiper.nSpeedMap[2] = 5;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2205      	movs	r2, #5
 8005a0a:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
  pConfig->stWiper.nSpeedMap[3] = 6;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2206      	movs	r2, #6
 8005a12:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
  pConfig->stWiper.nSpeedMap[4] = 7;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2207      	movs	r2, #7
 8005a1a:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
  pConfig->stWiper.nSpeedMap[5] = 8;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2208      	movs	r2, #8
 8005a22:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
  pConfig->stWiper.nSpeedMap[6] = 1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
  pConfig->stWiper.nSpeedMap[7] = 2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
  pConfig->stWiper.nIntermitTime[0] = 1000;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a3c:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
  pConfig->stWiper.nIntermitTime[1] = 2000;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005a46:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e
  pConfig->stWiper.nIntermitTime[2] = 3000;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005a50:	f8a3 2510 	strh.w	r2, [r3, #1296]	; 0x510
  pConfig->stWiper.nIntermitTime[3] = 4000;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005a5a:	f8a3 2512 	strh.w	r2, [r3, #1298]	; 0x512
  pConfig->stWiper.nIntermitTime[4] = 5000;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a64:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
  pConfig->stWiper.nIntermitTime[5] = 6000;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f241 7270 	movw	r2, #6000	; 0x1770
 8005a6e:	f8a3 2516 	strh.w	r2, [r3, #1302]	; 0x516

  //Flasher
  pConfig->stFlasher[0].nEnabled = 1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
  pConfig->stFlasher[0].nInput = 7;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2207      	movs	r2, #7
 8005a7e:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
  pConfig->stFlasher[0].nFlashOnTime = 500;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a88:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
  pConfig->stFlasher[0].nFlashOffTime = 500;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a92:	f8a3 2522 	strh.w	r2, [r3, #1314]	; 0x522
  pConfig->stFlasher[0].nSingleCycle = 0;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
  pConfig->stFlasher[0].nOutput = 10;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	220a      	movs	r2, #10
 8005aa2:	f883 2525 	strb.w	r2, [r3, #1317]	; 0x525

  pConfig->stFlasher[1].nEnabled = 1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
  pConfig->stFlasher[1].nInput = 8;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
  pConfig->stFlasher[1].nFlashOnTime = 250;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	22fa      	movs	r2, #250	; 0xfa
 8005aba:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
  pConfig->stFlasher[1].nFlashOffTime = 250;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	22fa      	movs	r2, #250	; 0xfa
 8005ac2:	f8a3 253a 	strh.w	r2, [r3, #1338]	; 0x53a
  pConfig->stFlasher[1].nSingleCycle = 0;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
  pConfig->stFlasher[1].nOutput = 11;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	220b      	movs	r2, #11
 8005ad2:	f883 253d 	strb.w	r2, [r3, #1341]	; 0x53d

  pConfig->stFlasher[2].nEnabled = 0;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
  pConfig->stFlasher[2].nInput = 0;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
  pConfig->stFlasher[2].nFlashOnTime = 0;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f8a3 2550 	strh.w	r2, [r3, #1360]	; 0x550
  pConfig->stFlasher[2].nFlashOffTime = 0;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f8a3 2552 	strh.w	r2, [r3, #1362]	; 0x552
  pConfig->stFlasher[2].nSingleCycle = 0;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
  pConfig->stFlasher[2].nOutput = 0;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555

  pConfig->stFlasher[3].nEnabled = 0;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
  pConfig->stFlasher[3].nInput = 0;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
  pConfig->stFlasher[3].nFlashOnTime = 0;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8a3 2568 	strh.w	r2, [r3, #1384]	; 0x568
  pConfig->stFlasher[3].nFlashOffTime = 0;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8a3 256a 	strh.w	r2, [r3, #1386]	; 0x56a
  pConfig->stFlasher[3].nSingleCycle = 0;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 256c 	strb.w	r2, [r3, #1388]	; 0x56c
  pConfig->stFlasher[3].nOutput = 0;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 256d 	strb.w	r2, [r3, #1389]	; 0x56d

  //Starter
  pConfig->stStarter.nEnabled = 0;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
  pConfig->stStarter.nInput = 8;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2208      	movs	r2, #8
 8005b42:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
  pConfig->stStarter.nDisableOut[0] = 0;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
  pConfig->stStarter.nDisableOut[1] = 1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
  pConfig->stStarter.nDisableOut[2] = 0;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
  pConfig->stStarter.nDisableOut[3] = 0;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
  pConfig->stStarter.nDisableOut[4] = 0;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
  pConfig->stStarter.nDisableOut[5] = 0;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
  pConfig->stStarter.nDisableOut[6] = 0;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2586 	strb.w	r2, [r3, #1414]	; 0x586
  pConfig->stStarter.nDisableOut[7] = 0;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2587 	strb.w	r2, [r3, #1415]	; 0x587
  pConfig->stStarter.nDisableOut[8] = 0;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2588 	strb.w	r2, [r3, #1416]	; 0x588
  pConfig->stStarter.nDisableOut[9] = 0;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
  pConfig->stStarter.nDisableOut[10] = 0;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
  pConfig->stStarter.nDisableOut[11] = 0;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 258b 	strb.w	r2, [r3, #1419]	; 0x58b

  //CAN Input
  pConfig->stCanInput[0].nEnabled = 1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 258c 	strb.w	r2, [r3, #1420]	; 0x58c
  pConfig->stCanInput[0].nId = 1602;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f240 6242 	movw	r2, #1602	; 0x642
 8005bb4:	f8a3 258e 	strh.w	r2, [r3, #1422]	; 0x58e
  pConfig->stCanInput[0].nLowByte = 0;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8a3 2590 	strh.w	r2, [r3, #1424]	; 0x590
  pConfig->stCanInput[0].nHighByte = 0;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8a3 2592 	strh.w	r2, [r3, #1426]	; 0x592
  pConfig->stCanInput[0].eOperator = OPER_BITWISE_AND;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2203      	movs	r2, #3
 8005bcc:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
  pConfig->stCanInput[0].nOnVal = 0xF;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	220f      	movs	r2, #15
 8005bd4:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
  pConfig->stCanInput[0].eMode = MODE_NUM;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598

  pConfig->stCanInput[1].nEnabled = 1;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
  pConfig->stCanInput[1].nId = 1602;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f240 6242 	movw	r2, #1602	; 0x642
 8005bee:	f8a3 25aa 	strh.w	r2, [r3, #1450]	; 0x5aa
  pConfig->stCanInput[1].nLowByte = 4;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	f8a3 25ac 	strh.w	r2, [r3, #1452]	; 0x5ac
  pConfig->stCanInput[1].nHighByte = 0;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8a3 25ae 	strh.w	r2, [r3, #1454]	; 0x5ae
  pConfig->stCanInput[1].eOperator = OPER_BITWISE_AND;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2203      	movs	r2, #3
 8005c06:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
  pConfig->stCanInput[1].nOnVal = 0x1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f8a3 25b2 	strh.w	r2, [r3, #1458]	; 0x5b2
  pConfig->stCanInput[1].eMode = MODE_MOMENTARY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4

  pConfig->stCanInput[2].nEnabled = 1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 25c4 	strb.w	r2, [r3, #1476]	; 0x5c4
  pConfig->stCanInput[2].nId = 1602;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f240 6242 	movw	r2, #1602	; 0x642
 8005c28:	f8a3 25c6 	strh.w	r2, [r3, #1478]	; 0x5c6
  pConfig->stCanInput[2].nLowByte = 4;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2204      	movs	r2, #4
 8005c30:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
  pConfig->stCanInput[2].nHighByte = 0;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8a3 25ca 	strh.w	r2, [r3, #1482]	; 0x5ca
  pConfig->stCanInput[2].eOperator = OPER_BITWISE_AND;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2203      	movs	r2, #3
 8005c40:	f883 25cc 	strb.w	r2, [r3, #1484]	; 0x5cc
  pConfig->stCanInput[2].nOnVal = 0x2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f8a3 25ce 	strh.w	r2, [r3, #1486]	; 0x5ce
  pConfig->stCanInput[2].eMode = MODE_MOMENTARY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0

  pConfig->stCanInput[3].nEnabled = 1;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
  pConfig->stCanInput[3].nId = 1602;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f240 6242 	movw	r2, #1602	; 0x642
 8005c62:	f8a3 25e2 	strh.w	r2, [r3, #1506]	; 0x5e2
  pConfig->stCanInput[3].nLowByte = 4;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2204      	movs	r2, #4
 8005c6a:	f8a3 25e4 	strh.w	r2, [r3, #1508]	; 0x5e4
  pConfig->stCanInput[3].nHighByte = 0;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8a3 25e6 	strh.w	r2, [r3, #1510]	; 0x5e6
  pConfig->stCanInput[3].eOperator = OPER_BITWISE_AND;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
  pConfig->stCanInput[3].nOnVal = 0x4;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2204      	movs	r2, #4
 8005c82:	f8a3 25ea 	strh.w	r2, [r3, #1514]	; 0x5ea
  pConfig->stCanInput[3].eMode = MODE_MOMENTARY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec

  pConfig->stCanInput[4].nEnabled = 1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
  pConfig->stCanInput[4].nId = 1602;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f240 6242 	movw	r2, #1602	; 0x642
 8005c9c:	f8a3 25fe 	strh.w	r2, [r3, #1534]	; 0x5fe
  pConfig->stCanInput[4].nLowByte = 4;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
  pConfig->stCanInput[4].nHighByte = 0;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
  pConfig->stCanInput[4].eOperator = OPER_BITWISE_AND;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
  pConfig->stCanInput[4].nOnVal = 0x8;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2208      	movs	r2, #8
 8005cbc:	f8a3 2606 	strh.w	r2, [r3, #1542]	; 0x606
  pConfig->stCanInput[4].eMode = MODE_MOMENTARY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608

  pConfig->stCanInput[5].nEnabled = 1;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
  pConfig->stCanInput[5].nId = 1602;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f240 6242 	movw	r2, #1602	; 0x642
 8005cd6:	f8a3 261a 	strh.w	r2, [r3, #1562]	; 0x61a
  pConfig->stCanInput[5].nLowByte = 4;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2204      	movs	r2, #4
 8005cde:	f8a3 261c 	strh.w	r2, [r3, #1564]	; 0x61c
  pConfig->stCanInput[5].nHighByte = 0;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8a3 261e 	strh.w	r2, [r3, #1566]	; 0x61e
  pConfig->stCanInput[5].eOperator = OPER_BITWISE_AND;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2203      	movs	r2, #3
 8005cee:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
  pConfig->stCanInput[5].nOnVal = 0x10;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
  pConfig->stCanInput[5].eMode = MODE_LATCHING;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

  pConfig->stCanInput[6].nEnabled = 1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
  pConfig->stCanInput[6].nId = 1602;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f240 6242 	movw	r2, #1602	; 0x642
 8005d10:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
  pConfig->stCanInput[6].nLowByte = 4;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2204      	movs	r2, #4
 8005d18:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
  pConfig->stCanInput[6].nHighByte = 0;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
  pConfig->stCanInput[6].eOperator = OPER_BITWISE_AND;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2203      	movs	r2, #3
 8005d28:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
  pConfig->stCanInput[6].nOnVal = 0x20;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f8a3 263e 	strh.w	r2, [r3, #1598]	; 0x63e
  pConfig->stCanInput[6].eMode = MODE_LATCHING;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

  pConfig->stCanInput[7].nEnabled = 1;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2650 	strb.w	r2, [r3, #1616]	; 0x650
  pConfig->stCanInput[7].nId = 1602;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f240 6242 	movw	r2, #1602	; 0x642
 8005d4a:	f8a3 2652 	strh.w	r2, [r3, #1618]	; 0x652
  pConfig->stCanInput[7].nLowByte = 4;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2204      	movs	r2, #4
 8005d52:	f8a3 2654 	strh.w	r2, [r3, #1620]	; 0x654
  pConfig->stCanInput[7].nHighByte = 0;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8a3 2656 	strh.w	r2, [r3, #1622]	; 0x656
  pConfig->stCanInput[7].eOperator = OPER_BITWISE_AND;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2203      	movs	r2, #3
 8005d62:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
  pConfig->stCanInput[7].nOnVal = 0x40;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2240      	movs	r2, #64	; 0x40
 8005d6a:	f8a3 265a 	strh.w	r2, [r3, #1626]	; 0x65a
  pConfig->stCanInput[7].eMode = MODE_MOMENTARY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c

  pConfig->stCanInput[8].nEnabled = 1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
  pConfig->stCanInput[8].nId = 1602;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f240 6242 	movw	r2, #1602	; 0x642
 8005d84:	f8a3 266e 	strh.w	r2, [r3, #1646]	; 0x66e
  pConfig->stCanInput[8].nLowByte = 4;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	f8a3 2670 	strh.w	r2, [r3, #1648]	; 0x670
  pConfig->stCanInput[8].nHighByte = 0;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8a3 2672 	strh.w	r2, [r3, #1650]	; 0x672
  pConfig->stCanInput[8].eOperator = OPER_BITWISE_AND;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
  pConfig->stCanInput[8].nOnVal = 0x80;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	f8a3 2676 	strh.w	r2, [r3, #1654]	; 0x676
  pConfig->stCanInput[8].eMode = MODE_LATCHING;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678

  pConfig->stCanInput[9].nEnabled = 1;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
  pConfig->stCanInput[9].nId = 1620;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f240 6254 	movw	r2, #1620	; 0x654
 8005dbe:	f8a3 268a 	strh.w	r2, [r3, #1674]	; 0x68a
  pConfig->stCanInput[9].nLowByte = 4;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	f8a3 268c 	strh.w	r2, [r3, #1676]	; 0x68c
  pConfig->stCanInput[9].nHighByte = 5;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2205      	movs	r2, #5
 8005dce:	f8a3 268e 	strh.w	r2, [r3, #1678]	; 0x68e
  pConfig->stCanInput[9].eOperator = OPER_EQUAL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
  pConfig->stCanInput[9].nOnVal = 1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f8a3 2692 	strh.w	r2, [r3, #1682]	; 0x692
  pConfig->stCanInput[9].eMode = MODE_NUM;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694

  pConfig->stCanInput[10].nEnabled = 1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
  pConfig->stCanInput[10].nId = 1620;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f240 6254 	movw	r2, #1620	; 0x654
 8005df8:	f8a3 26a6 	strh.w	r2, [r3, #1702]	; 0x6a6
  pConfig->stCanInput[10].nLowByte = 2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f8a3 26a8 	strh.w	r2, [r3, #1704]	; 0x6a8
  pConfig->stCanInput[10].nHighByte = 3;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2203      	movs	r2, #3
 8005e08:	f8a3 26aa 	strh.w	r2, [r3, #1706]	; 0x6aa
  pConfig->stCanInput[10].eOperator = OPER_EQUAL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
  pConfig->stCanInput[10].nOnVal = 1;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f8a3 26ae 	strh.w	r2, [r3, #1710]	; 0x6ae
  pConfig->stCanInput[10].eMode = MODE_NUM;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0

  pConfig->stCanInput[11].nEnabled = 1;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 26c0 	strb.w	r2, [r3, #1728]	; 0x6c0
  pConfig->stCanInput[11].nId = 1620;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f240 6254 	movw	r2, #1620	; 0x654
 8005e32:	f8a3 26c2 	strh.w	r2, [r3, #1730]	; 0x6c2
  pConfig->stCanInput[11].nLowByte = 0;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f8a3 26c4 	strh.w	r2, [r3, #1732]	; 0x6c4
  pConfig->stCanInput[11].nHighByte = 1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f8a3 26c6 	strh.w	r2, [r3, #1734]	; 0x6c6
  pConfig->stCanInput[11].eOperator = OPER_EQUAL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 26c8 	strb.w	r2, [r3, #1736]	; 0x6c8
  pConfig->stCanInput[11].nOnVal = 1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f8a3 26ca 	strh.w	r2, [r3, #1738]	; 0x6ca
  pConfig->stCanInput[11].eMode = MODE_NUM;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc

  pConfig->stCanInput[12].nEnabled = 1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
  pConfig->stCanInput[12].nId = 1620;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f240 6254 	movw	r2, #1620	; 0x654
 8005e6c:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
  pConfig->stCanInput[12].nLowByte = 6;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2206      	movs	r2, #6
 8005e74:	f8a3 26e0 	strh.w	r2, [r3, #1760]	; 0x6e0
  pConfig->stCanInput[12].nHighByte = 7;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2207      	movs	r2, #7
 8005e7c:	f8a3 26e2 	strh.w	r2, [r3, #1762]	; 0x6e2
  pConfig->stCanInput[12].eOperator = OPER_EQUAL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
  pConfig->stCanInput[12].nOnVal = 1;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
  pConfig->stCanInput[12].eMode = MODE_NUM;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8

  pConfig->stCanInput[13].nEnabled = 1;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
  pConfig->stCanInput[13].nId = 1621;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f240 6255 	movw	r2, #1621	; 0x655
 8005ea6:	f8a3 26fa 	strh.w	r2, [r3, #1786]	; 0x6fa
  pConfig->stCanInput[13].nLowByte = 0;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8a3 26fc 	strh.w	r2, [r3, #1788]	; 0x6fc
  pConfig->stCanInput[13].nHighByte = 1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f8a3 26fe 	strh.w	r2, [r3, #1790]	; 0x6fe
  pConfig->stCanInput[13].eOperator = OPER_EQUAL;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
  pConfig->stCanInput[13].nOnVal = 1;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f8a3 2702 	strh.w	r2, [r3, #1794]	; 0x702
  pConfig->stCanInput[13].eMode = MODE_NUM;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704

  pConfig->stCanInput[14].nEnabled = 1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
  pConfig->stCanInput[14].nId = 1621;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f240 6255 	movw	r2, #1621	; 0x655
 8005ee0:	f8a3 2716 	strh.w	r2, [r3, #1814]	; 0x716
  pConfig->stCanInput[14].nLowByte = 2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
  pConfig->stCanInput[14].nHighByte = 3;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2203      	movs	r2, #3
 8005ef0:	f8a3 271a 	strh.w	r2, [r3, #1818]	; 0x71a
  pConfig->stCanInput[14].eOperator = OPER_EQUAL;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
  pConfig->stCanInput[14].nOnVal = 1;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f8a3 271e 	strh.w	r2, [r3, #1822]	; 0x71e
  pConfig->stCanInput[14].eMode = MODE_NUM;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720

  pConfig->stCanInput[15].nEnabled = 1;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
  pConfig->stCanInput[15].nId = 1622;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f240 6256 	movw	r2, #1622	; 0x656
 8005f1a:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
  pConfig->stCanInput[15].nLowByte = 0;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
  pConfig->stCanInput[15].nHighByte = 0;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8a3 2736 	strh.w	r2, [r3, #1846]	; 0x736
  pConfig->stCanInput[15].eOperator = OPER_BITWISE_AND;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2203      	movs	r2, #3
 8005f32:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
  pConfig->stCanInput[15].nOnVal = 0x01;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f8a3 273a 	strh.w	r2, [r3, #1850]	; 0x73a
  pConfig->stCanInput[15].eMode = MODE_MOMENTARY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c

  pConfig->stCanInput[16].nEnabled = 1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
  pConfig->stCanInput[16].nId = 1622;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f240 6256 	movw	r2, #1622	; 0x656
 8005f54:	f8a3 274e 	strh.w	r2, [r3, #1870]	; 0x74e
  pConfig->stCanInput[16].nLowByte = 0;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8a3 2750 	strh.w	r2, [r3, #1872]	; 0x750
  pConfig->stCanInput[16].nHighByte = 0;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8a3 2752 	strh.w	r2, [r3, #1874]	; 0x752
  pConfig->stCanInput[16].eOperator = OPER_BITWISE_AND;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
  pConfig->stCanInput[16].nOnVal = 0x02;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
  pConfig->stCanInput[16].eMode = MODE_MOMENTARY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758

  pConfig->stCanInput[17].nEnabled = 1;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
  pConfig->stCanInput[17].nId = 1622;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f240 6256 	movw	r2, #1622	; 0x656
 8005f8e:	f8a3 276a 	strh.w	r2, [r3, #1898]	; 0x76a
  pConfig->stCanInput[17].nLowByte = 0;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8a3 276c 	strh.w	r2, [r3, #1900]	; 0x76c
  pConfig->stCanInput[17].nHighByte = 0;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f8a3 276e 	strh.w	r2, [r3, #1902]	; 0x76e
  pConfig->stCanInput[17].eOperator = OPER_BITWISE_AND;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
  pConfig->stCanInput[17].nOnVal = 0x04;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2204      	movs	r2, #4
 8005fae:	f8a3 2772 	strh.w	r2, [r3, #1906]	; 0x772
  pConfig->stCanInput[17].eMode = MODE_MOMENTARY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

  pConfig->stCanInput[18].nEnabled = 1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
  pConfig->stCanInput[18].nId = 1622;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f240 6256 	movw	r2, #1622	; 0x656
 8005fc8:	f8a3 2786 	strh.w	r2, [r3, #1926]	; 0x786
  pConfig->stCanInput[18].nLowByte = 0;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8a3 2788 	strh.w	r2, [r3, #1928]	; 0x788
  pConfig->stCanInput[18].nHighByte = 0;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f8a3 278a 	strh.w	r2, [r3, #1930]	; 0x78a
  pConfig->stCanInput[18].eOperator = OPER_BITWISE_AND;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
  pConfig->stCanInput[18].nOnVal = 0x08;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	f8a3 278e 	strh.w	r2, [r3, #1934]	; 0x78e
  pConfig->stCanInput[18].eMode = MODE_MOMENTARY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790

  pConfig->stCanInput[19].nEnabled = 1;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
  pConfig->stCanInput[19].nId = 1622;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f240 6256 	movw	r2, #1622	; 0x656
 8006002:	f8a3 27a2 	strh.w	r2, [r3, #1954]	; 0x7a2
  pConfig->stCanInput[19].nLowByte = 0;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f8a3 27a4 	strh.w	r2, [r3, #1956]	; 0x7a4
  pConfig->stCanInput[19].nHighByte = 0;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f8a3 27a6 	strh.w	r2, [r3, #1958]	; 0x7a6
  pConfig->stCanInput[19].eOperator = OPER_BITWISE_AND;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2203      	movs	r2, #3
 800601a:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
  pConfig->stCanInput[19].nOnVal = 0x10;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2210      	movs	r2, #16
 8006022:	f8a3 27aa 	strh.w	r2, [r3, #1962]	; 0x7aa
  pConfig->stCanInput[19].eMode = MODE_MOMENTARY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 27ac 	strb.w	r2, [r3, #1964]	; 0x7ac

  pConfig->stCanInput[20].nEnabled = 1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
  pConfig->stCanInput[20].nId = 1622;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f240 6256 	movw	r2, #1622	; 0x656
 800603c:	f8a3 27be 	strh.w	r2, [r3, #1982]	; 0x7be
  pConfig->stCanInput[20].nLowByte = 0;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f8a3 27c0 	strh.w	r2, [r3, #1984]	; 0x7c0
  pConfig->stCanInput[20].nHighByte = 0;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8a3 27c2 	strh.w	r2, [r3, #1986]	; 0x7c2
  pConfig->stCanInput[20].eOperator = OPER_BITWISE_AND;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2203      	movs	r2, #3
 8006054:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
  pConfig->stCanInput[20].nOnVal = 0x20;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f8a3 27c6 	strh.w	r2, [r3, #1990]	; 0x7c6
  pConfig->stCanInput[20].eMode = MODE_MOMENTARY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8

  pConfig->stCanInput[21].nEnabled = 1;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
  pConfig->stCanInput[21].nId = 1622;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f240 6256 	movw	r2, #1622	; 0x656
 8006076:	f8a3 27da 	strh.w	r2, [r3, #2010]	; 0x7da
  pConfig->stCanInput[21].nLowByte = 0;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f8a3 27dc 	strh.w	r2, [r3, #2012]	; 0x7dc
  pConfig->stCanInput[21].nHighByte = 0;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f8a3 27de 	strh.w	r2, [r3, #2014]	; 0x7de
  pConfig->stCanInput[21].eOperator = OPER_BITWISE_AND;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2203      	movs	r2, #3
 800608e:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
  pConfig->stCanInput[21].nOnVal = 0x40;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2240      	movs	r2, #64	; 0x40
 8006096:	f8a3 27e2 	strh.w	r2, [r3, #2018]	; 0x7e2
  pConfig->stCanInput[21].eMode = MODE_MOMENTARY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 27e4 	strb.w	r2, [r3, #2020]	; 0x7e4

  pConfig->stCanInput[22].nEnabled = 1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
  pConfig->stCanInput[22].nId = 1622;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f240 6256 	movw	r2, #1622	; 0x656
 80060b0:	f8a3 27f6 	strh.w	r2, [r3, #2038]	; 0x7f6
  pConfig->stCanInput[22].nLowByte = 0;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f8a3 27f8 	strh.w	r2, [r3, #2040]	; 0x7f8
  pConfig->stCanInput[22].nHighByte = 0;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8a3 27fa 	strh.w	r2, [r3, #2042]	; 0x7fa
  pConfig->stCanInput[22].eOperator = OPER_BITWISE_AND;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2203      	movs	r2, #3
 80060c8:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
  pConfig->stCanInput[22].nOnVal = 0x80;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2280      	movs	r2, #128	; 0x80
 80060d0:	f8a3 27fe 	strh.w	r2, [r3, #2046]	; 0x7fe
  pConfig->stCanInput[22].eMode = MODE_MOMENTARY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800

  pConfig->stCanInput[23].nEnabled = 1;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
  pConfig->stCanInput[23].nId = 1622;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f240 6256 	movw	r2, #1622	; 0x656
 80060ea:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
  pConfig->stCanInput[23].nLowByte = 1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
  pConfig->stCanInput[23].nHighByte = 0;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8a3 2816 	strh.w	r2, [r3, #2070]	; 0x816
  pConfig->stCanInput[23].eOperator = OPER_BITWISE_AND;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2203      	movs	r2, #3
 8006102:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
  pConfig->stCanInput[23].nOnVal = 0x01;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f8a3 281a 	strh.w	r2, [r3, #2074]	; 0x81a
  pConfig->stCanInput[23].eMode = MODE_MOMENTARY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c

  pConfig->stCanInput[24].nEnabled = 1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 282c 	strb.w	r2, [r3, #2092]	; 0x82c
  pConfig->stCanInput[24].nId = 1622;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f240 6256 	movw	r2, #1622	; 0x656
 8006124:	f8a3 282e 	strh.w	r2, [r3, #2094]	; 0x82e
  pConfig->stCanInput[24].nLowByte = 1;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f8a3 2830 	strh.w	r2, [r3, #2096]	; 0x830
  pConfig->stCanInput[24].nHighByte = 0;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f8a3 2832 	strh.w	r2, [r3, #2098]	; 0x832
  pConfig->stCanInput[24].eOperator = OPER_BITWISE_AND;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2203      	movs	r2, #3
 800613c:	f883 2834 	strb.w	r2, [r3, #2100]	; 0x834
  pConfig->stCanInput[24].nOnVal = 0x02;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f8a3 2836 	strh.w	r2, [r3, #2102]	; 0x836
  pConfig->stCanInput[24].eMode = MODE_MOMENTARY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838

  pConfig->stCanInput[25].nEnabled = 0;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
  pConfig->stCanInput[25].nId = 0;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f8a3 284a 	strh.w	r2, [r3, #2122]	; 0x84a
  pConfig->stCanInput[25].nLowByte = 0;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f8a3 284c 	strh.w	r2, [r3, #2124]	; 0x84c
  pConfig->stCanInput[25].nHighByte = 0;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8a3 284e 	strh.w	r2, [r3, #2126]	; 0x84e
  pConfig->stCanInput[25].eOperator = OPER_EQUAL;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
  pConfig->stCanInput[25].nOnVal = 0;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f8a3 2852 	strh.w	r2, [r3, #2130]	; 0x852
  pConfig->stCanInput[25].eMode = MODE_MOMENTARY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854

  pConfig->stCanInput[26].nEnabled = 0;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
  pConfig->stCanInput[26].nId = 0;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f8a3 2866 	strh.w	r2, [r3, #2150]	; 0x866
  pConfig->stCanInput[26].nLowByte = 0;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8a3 2868 	strh.w	r2, [r3, #2152]	; 0x868
  pConfig->stCanInput[26].nHighByte = 0;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8a3 286a 	strh.w	r2, [r3, #2154]	; 0x86a
  pConfig->stCanInput[26].eOperator = OPER_EQUAL;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
  pConfig->stCanInput[26].nOnVal = 0;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8a3 286e 	strh.w	r2, [r3, #2158]	; 0x86e
  pConfig->stCanInput[26].eMode = MODE_MOMENTARY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2870 	strb.w	r2, [r3, #2160]	; 0x870

  pConfig->stCanInput[27].nEnabled = 0;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
  pConfig->stCanInput[27].nId = 0;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8a3 2882 	strh.w	r2, [r3, #2178]	; 0x882
  pConfig->stCanInput[27].nLowByte = 0;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8a3 2884 	strh.w	r2, [r3, #2180]	; 0x884
  pConfig->stCanInput[27].nHighByte = 0;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8a3 2886 	strh.w	r2, [r3, #2182]	; 0x886
  pConfig->stCanInput[27].eOperator = OPER_EQUAL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
  pConfig->stCanInput[27].nOnVal = 0;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8a3 288a 	strh.w	r2, [r3, #2186]	; 0x88a
  pConfig->stCanInput[27].eMode = MODE_MOMENTARY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c

  pConfig->stCanInput[28].nEnabled = 0;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
  pConfig->stCanInput[28].nId = 0;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f8a3 289e 	strh.w	r2, [r3, #2206]	; 0x89e
  pConfig->stCanInput[28].nLowByte = 0;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f8a3 28a0 	strh.w	r2, [r3, #2208]	; 0x8a0
  pConfig->stCanInput[28].nHighByte = 0;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8a3 28a2 	strh.w	r2, [r3, #2210]	; 0x8a2
  pConfig->stCanInput[28].eOperator = OPER_EQUAL;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
  pConfig->stCanInput[28].nOnVal = 0;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f8a3 28a6 	strh.w	r2, [r3, #2214]	; 0x8a6
  pConfig->stCanInput[28].eMode = MODE_MOMENTARY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 28a8 	strb.w	r2, [r3, #2216]	; 0x8a8

  pConfig->stCanInput[29].nEnabled = 0;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
  pConfig->stCanInput[29].nId = 0;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f8a3 28ba 	strh.w	r2, [r3, #2234]	; 0x8ba
  pConfig->stCanInput[29].nLowByte = 0;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8a3 28bc 	strh.w	r2, [r3, #2236]	; 0x8bc
  pConfig->stCanInput[29].nHighByte = 0;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8a3 28be 	strh.w	r2, [r3, #2238]	; 0x8be
  pConfig->stCanInput[29].eOperator = OPER_EQUAL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 28c0 	strb.w	r2, [r3, #2240]	; 0x8c0
  pConfig->stCanInput[29].nOnVal = 0;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f8a3 28c2 	strh.w	r2, [r3, #2242]	; 0x8c2
  pConfig->stCanInput[29].eMode = MODE_MOMENTARY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4

  //CAN Output
  pConfig->stCanOutput.nEnabled = 0;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
  pConfig->stCanOutput.nBaseId = 2000;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006276:	f8a3 28d6 	strh.w	r2, [r3, #2262]	; 0x8d6
  pConfig->stCanOutput.nUpdateTime = 50;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2232      	movs	r2, #50	; 0x32
 800627e:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <EvaluateInput>:
 */

#include "pdm_input.h"

void EvaluateInput(PdmConfig_Input_t *pIn, uint16_t* pResult)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b086      	sub	sp, #24
 8006292:	af02      	add	r7, sp, #8
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d018      	beq.n	80062d2 <EvaluateInput+0x44>
    return;

  uint16_t nLogicResult;

  nLogicResult = *pIn->pInput > pIn->nOnLevel;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8b1b      	ldrh	r3, [r3, #24]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	bf8c      	ite	hi
 80062b0:	2301      	movhi	r3, #1
 80062b2:	2300      	movls	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	81fb      	strh	r3, [r7, #14]

  CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nLogicResult, pResult, pIn->nDebounceTime);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f103 000c 	add.w	r0, r3, #12
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	7a19      	ldrb	r1, [r3, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8b5b      	ldrh	r3, [r3, #26]
 80062c6:	89fa      	ldrh	r2, [r7, #14]
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	f001 fbf6 	bl	8007abc <CheckPushbutton>
 80062d0:	e000      	b.n	80062d4 <EvaluateInput+0x46>
    return;
 80062d2:	bf00      	nop
}
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <EvaluateStarter>:
 */

#include "starter.h"

void EvaluateStarter(PdmConfig_Starter_t *pStarter, uint8_t nIndex, uint16_t* pResult)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	460b      	mov	r3, r1
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	72fb      	strb	r3, [r7, #11]
    if(!pStarter->nEnabled)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <EvaluateStarter+0x1e>
      *pResult = 1;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	801a      	strh	r2, [r3, #0]
    else
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
}
 80062f6:	e010      	b.n	800631a <EvaluateStarter+0x40>
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
 80062f8:	7afb      	ldrb	r3, [r7, #11]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	7a1b      	ldrb	r3, [r3, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <EvaluateStarter+0x34>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <EvaluateStarter+0x38>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <EvaluateStarter+0x3a>
 8006312:	2300      	movs	r3, #0
 8006314:	b29a      	uxth	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	801a      	strh	r2, [r3, #0]
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800632e:	4b11      	ldr	r3, [pc, #68]	; (8006374 <HAL_MspInit+0x4c>)
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	4a10      	ldr	r2, [pc, #64]	; (8006374 <HAL_MspInit+0x4c>)
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	6193      	str	r3, [r2, #24]
 800633a:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <HAL_MspInit+0x4c>)
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	607b      	str	r3, [r7, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006346:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <HAL_MspInit+0x4c>)
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	4a0a      	ldr	r2, [pc, #40]	; (8006374 <HAL_MspInit+0x4c>)
 800634c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006350:	61d3      	str	r3, [r2, #28]
 8006352:	4b08      	ldr	r3, [pc, #32]	; (8006374 <HAL_MspInit+0x4c>)
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800635e:	2200      	movs	r2, #0
 8006360:	210f      	movs	r1, #15
 8006362:	f06f 0001 	mvn.w	r0, #1
 8006366:	f003 fb81 	bl	8009a6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	40021000 	.word	0x40021000

08006378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006380:	f107 0314 	add.w	r3, r7, #20
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	609a      	str	r2, [r3, #8]
 800638c:	60da      	str	r2, [r3, #12]
 800638e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006398:	d134      	bne.n	8006404 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800639a:	4b45      	ldr	r3, [pc, #276]	; (80064b0 <HAL_ADC_MspInit+0x138>)
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	4a44      	ldr	r2, [pc, #272]	; (80064b0 <HAL_ADC_MspInit+0x138>)
 80063a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a4:	6153      	str	r3, [r2, #20]
 80063a6:	4b42      	ldr	r3, [pc, #264]	; (80064b0 <HAL_ADC_MspInit+0x138>)
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80063b2:	4b40      	ldr	r3, [pc, #256]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063b4:	4a40      	ldr	r2, [pc, #256]	; (80064b8 <HAL_ADC_MspInit+0x140>)
 80063b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063b8:	4b3e      	ldr	r3, [pc, #248]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80063be:	4b3d      	ldr	r3, [pc, #244]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80063c4:	4b3b      	ldr	r3, [pc, #236]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80063ca:	4b3a      	ldr	r3, [pc, #232]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80063d2:	4b38      	ldr	r3, [pc, #224]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80063da:	4b36      	ldr	r3, [pc, #216]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063dc:	2220      	movs	r2, #32
 80063de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80063e0:	4b34      	ldr	r3, [pc, #208]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80063e6:	4833      	ldr	r0, [pc, #204]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063e8:	f003 fc54 	bl	8009c94 <HAL_DMA_Init>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80063f2:	f7fd fa31 	bl	8003858 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2e      	ldr	r2, [pc, #184]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38
 80063fc:	4a2d      	ldr	r2, [pc, #180]	; (80064b4 <HAL_ADC_MspInit+0x13c>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8006402:	e051      	b.n	80064a8 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC4)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a2c      	ldr	r2, [pc, #176]	; (80064bc <HAL_ADC_MspInit+0x144>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d14c      	bne.n	80064a8 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800640e:	4b28      	ldr	r3, [pc, #160]	; (80064b0 <HAL_ADC_MspInit+0x138>)
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	4a27      	ldr	r2, [pc, #156]	; (80064b0 <HAL_ADC_MspInit+0x138>)
 8006414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006418:	6153      	str	r3, [r2, #20]
 800641a:	4b25      	ldr	r3, [pc, #148]	; (80064b0 <HAL_ADC_MspInit+0x138>)
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006426:	4b22      	ldr	r3, [pc, #136]	; (80064b0 <HAL_ADC_MspInit+0x138>)
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	4a21      	ldr	r2, [pc, #132]	; (80064b0 <HAL_ADC_MspInit+0x138>)
 800642c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006430:	6153      	str	r3, [r2, #20]
 8006432:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <HAL_ADC_MspInit+0x138>)
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 800643e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006444:	2303      	movs	r3, #3
 8006446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006448:	2300      	movs	r3, #0
 800644a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 800644c:	f107 0314 	add.w	r3, r7, #20
 8006450:	4619      	mov	r1, r3
 8006452:	481b      	ldr	r0, [pc, #108]	; (80064c0 <HAL_ADC_MspInit+0x148>)
 8006454:	f003 fdd2 	bl	8009ffc <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8006458:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 800645a:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <HAL_ADC_MspInit+0x150>)
 800645c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800645e:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 8006460:	2200      	movs	r2, #0
 8006462:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8006464:	4b17      	ldr	r3, [pc, #92]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 8006466:	2200      	movs	r2, #0
 8006468:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800646a:	4b16      	ldr	r3, [pc, #88]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 800646c:	2280      	movs	r2, #128	; 0x80
 800646e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006470:	4b14      	ldr	r3, [pc, #80]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 8006472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006476:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006478:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 800647a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800647e:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8006480:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 8006482:	2220      	movs	r2, #32
 8006484:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8006486:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 8006488:	2200      	movs	r2, #0
 800648a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800648c:	480d      	ldr	r0, [pc, #52]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 800648e:	f003 fc01 	bl	8009c94 <HAL_DMA_Init>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <HAL_ADC_MspInit+0x124>
      Error_Handler();
 8006498:	f7fd f9de 	bl	8003858 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
 80064a2:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <HAL_ADC_MspInit+0x14c>)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80064a8:	bf00      	nop
 80064aa:	3728      	adds	r7, #40	; 0x28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40021000 	.word	0x40021000
 80064b4:	20002414 	.word	0x20002414
 80064b8:	40020008 	.word	0x40020008
 80064bc:	50000500 	.word	0x50000500
 80064c0:	48000400 	.word	0x48000400
 80064c4:	20002458 	.word	0x20002458
 80064c8:	4002041c 	.word	0x4002041c

080064cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08a      	sub	sp, #40	; 0x28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064d4:	f107 0314 	add.w	r3, r7, #20
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	605a      	str	r2, [r3, #4]
 80064de:	609a      	str	r2, [r3, #8]
 80064e0:	60da      	str	r2, [r3, #12]
 80064e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <HAL_CAN_MspInit+0x8c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d130      	bne.n	8006550 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80064ee:	4b1b      	ldr	r3, [pc, #108]	; (800655c <HAL_CAN_MspInit+0x90>)
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	4a1a      	ldr	r2, [pc, #104]	; (800655c <HAL_CAN_MspInit+0x90>)
 80064f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064f8:	61d3      	str	r3, [r2, #28]
 80064fa:	4b18      	ldr	r3, [pc, #96]	; (800655c <HAL_CAN_MspInit+0x90>)
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006506:	4b15      	ldr	r3, [pc, #84]	; (800655c <HAL_CAN_MspInit+0x90>)
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	4a14      	ldr	r2, [pc, #80]	; (800655c <HAL_CAN_MspInit+0x90>)
 800650c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006510:	6153      	str	r3, [r2, #20]
 8006512:	4b12      	ldr	r3, [pc, #72]	; (800655c <HAL_CAN_MspInit+0x90>)
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800651e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006524:	2302      	movs	r3, #2
 8006526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006528:	2300      	movs	r3, #0
 800652a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800652c:	2303      	movs	r3, #3
 800652e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8006530:	2309      	movs	r3, #9
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006534:	f107 0314 	add.w	r3, r7, #20
 8006538:	4619      	mov	r1, r3
 800653a:	4809      	ldr	r0, [pc, #36]	; (8006560 <HAL_CAN_MspInit+0x94>)
 800653c:	f003 fd5e 	bl	8009ffc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8006540:	2200      	movs	r2, #0
 8006542:	2105      	movs	r1, #5
 8006544:	2014      	movs	r0, #20
 8006546:	f003 fa91 	bl	8009a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800654a:	2014      	movs	r0, #20
 800654c:	f003 faaa 	bl	8009aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8006550:	bf00      	nop
 8006552:	3728      	adds	r7, #40	; 0x28
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40006400 	.word	0x40006400
 800655c:	40021000 	.word	0x40021000
 8006560:	48000400 	.word	0x48000400

08006564 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <HAL_CRC_MspInit+0x38>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d10b      	bne.n	800658e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006576:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <HAL_CRC_MspInit+0x3c>)
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	4a09      	ldr	r2, [pc, #36]	; (80065a0 <HAL_CRC_MspInit+0x3c>)
 800657c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006580:	6153      	str	r3, [r2, #20]
 8006582:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <HAL_CRC_MspInit+0x3c>)
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40023000 	.word	0x40023000
 80065a0:	40021000 	.word	0x40021000

080065a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08c      	sub	sp, #48	; 0x30
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065ac:	f107 031c 	add.w	r3, r7, #28
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	605a      	str	r2, [r3, #4]
 80065b6:	609a      	str	r2, [r3, #8]
 80065b8:	60da      	str	r2, [r3, #12]
 80065ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a2f      	ldr	r2, [pc, #188]	; (8006680 <HAL_I2C_MspInit+0xdc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d128      	bne.n	8006618 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065c6:	4b2f      	ldr	r3, [pc, #188]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	4a2e      	ldr	r2, [pc, #184]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 80065cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065d0:	6153      	str	r3, [r2, #20]
 80065d2:	4b2c      	ldr	r3, [pc, #176]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80065de:	23c0      	movs	r3, #192	; 0xc0
 80065e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065e2:	2312      	movs	r3, #18
 80065e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065e6:	2301      	movs	r3, #1
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065ea:	2303      	movs	r3, #3
 80065ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80065ee:	2304      	movs	r3, #4
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065f2:	f107 031c 	add.w	r3, r7, #28
 80065f6:	4619      	mov	r1, r3
 80065f8:	4823      	ldr	r0, [pc, #140]	; (8006688 <HAL_I2C_MspInit+0xe4>)
 80065fa:	f003 fcff 	bl	8009ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80065fe:	4b21      	ldr	r3, [pc, #132]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	4a20      	ldr	r2, [pc, #128]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 8006604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006608:	61d3      	str	r3, [r2, #28]
 800660a:	4b1e      	ldr	r3, [pc, #120]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006616:	e02e      	b.n	8006676 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a1b      	ldr	r2, [pc, #108]	; (800668c <HAL_I2C_MspInit+0xe8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d129      	bne.n	8006676 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006622:	4b18      	ldr	r3, [pc, #96]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	4a17      	ldr	r2, [pc, #92]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 8006628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662c:	6153      	str	r3, [r2, #20]
 800662e:	4b15      	ldr	r3, [pc, #84]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800663a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800663e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006640:	2312      	movs	r3, #18
 8006642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006644:	2301      	movs	r3, #1
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006648:	2303      	movs	r3, #3
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800664c:	2304      	movs	r3, #4
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006650:	f107 031c 	add.w	r3, r7, #28
 8006654:	4619      	mov	r1, r3
 8006656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800665a:	f003 fccf 	bl	8009ffc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	4a08      	ldr	r2, [pc, #32]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 8006664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006668:	61d3      	str	r3, [r2, #28]
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <HAL_I2C_MspInit+0xe0>)
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
}
 8006676:	bf00      	nop
 8006678:	3730      	adds	r7, #48	; 0x30
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40005400 	.word	0x40005400
 8006684:	40021000 	.word	0x40021000
 8006688:	48000400 	.word	0x48000400
 800668c:	40005800 	.word	0x40005800

08006690 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a0d      	ldr	r2, [pc, #52]	; (80066d4 <HAL_RTC_MspInit+0x44>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d111      	bne.n	80066c6 <HAL_RTC_MspInit+0x36>
 80066a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	fa93 f3a3 	rbit	r3, r3
 80066ae:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066b0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80066b2:	fab3 f383 	clz	r3, r3
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <HAL_RTC_MspInit+0x48>)
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	461a      	mov	r2, r3
 80066c2:	2301      	movs	r3, #1
 80066c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40002800 	.word	0x40002800
 80066d8:	10908100 	.word	0x10908100

080066dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e4:	f107 0314 	add.w	r3, r7, #20
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	605a      	str	r2, [r3, #4]
 80066ee:	609a      	str	r2, [r3, #8]
 80066f0:	60da      	str	r2, [r3, #12]
 80066f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a17      	ldr	r2, [pc, #92]	; (8006758 <HAL_SPI_MspInit+0x7c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d128      	bne.n	8006750 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80066fe:	4b17      	ldr	r3, [pc, #92]	; (800675c <HAL_SPI_MspInit+0x80>)
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	4a16      	ldr	r2, [pc, #88]	; (800675c <HAL_SPI_MspInit+0x80>)
 8006704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006708:	6193      	str	r3, [r2, #24]
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <HAL_SPI_MspInit+0x80>)
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006716:	4b11      	ldr	r3, [pc, #68]	; (800675c <HAL_SPI_MspInit+0x80>)
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	4a10      	ldr	r2, [pc, #64]	; (800675c <HAL_SPI_MspInit+0x80>)
 800671c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006720:	6153      	str	r3, [r2, #20]
 8006722:	4b0e      	ldr	r3, [pc, #56]	; (800675c <HAL_SPI_MspInit+0x80>)
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800672e:	23e0      	movs	r3, #224	; 0xe0
 8006730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006732:	2302      	movs	r3, #2
 8006734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800673a:	2303      	movs	r3, #3
 800673c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800673e:	2305      	movs	r3, #5
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006742:	f107 0314 	add.w	r3, r7, #20
 8006746:	4619      	mov	r1, r3
 8006748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800674c:	f003 fc56 	bl	8009ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006750:	bf00      	nop
 8006752:	3728      	adds	r7, #40	; 0x28
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40013000 	.word	0x40013000
 800675c:	40021000 	.word	0x40021000

08006760 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08c      	sub	sp, #48	; 0x30
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006770:	2200      	movs	r2, #0
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	2036      	movs	r0, #54	; 0x36
 8006776:	f003 f979 	bl	8009a6c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800677a:	2036      	movs	r0, #54	; 0x36
 800677c:	f003 f992 	bl	8009aa4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006780:	4b1f      	ldr	r3, [pc, #124]	; (8006800 <HAL_InitTick+0xa0>)
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	4a1e      	ldr	r2, [pc, #120]	; (8006800 <HAL_InitTick+0xa0>)
 8006786:	f043 0310 	orr.w	r3, r3, #16
 800678a:	61d3      	str	r3, [r2, #28]
 800678c:	4b1c      	ldr	r3, [pc, #112]	; (8006800 <HAL_InitTick+0xa0>)
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006798:	f107 0210 	add.w	r2, r7, #16
 800679c:	f107 0314 	add.w	r3, r7, #20
 80067a0:	4611      	mov	r1, r2
 80067a2:	4618      	mov	r0, r3
 80067a4:	f007 fa94 	bl	800dcd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80067a8:	f007 fa70 	bl	800dc8c <HAL_RCC_GetPCLK1Freq>
 80067ac:	4603      	mov	r3, r0
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	4a13      	ldr	r2, [pc, #76]	; (8006804 <HAL_InitTick+0xa4>)
 80067b6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ba:	0c9b      	lsrs	r3, r3, #18
 80067bc:	3b01      	subs	r3, #1
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <HAL_InitTick+0xa8>)
 80067c2:	4a12      	ldr	r2, [pc, #72]	; (800680c <HAL_InitTick+0xac>)
 80067c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <HAL_InitTick+0xa8>)
 80067c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80067cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80067ce:	4a0e      	ldr	r2, [pc, #56]	; (8006808 <HAL_InitTick+0xa8>)
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <HAL_InitTick+0xa8>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067da:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <HAL_InitTick+0xa8>)
 80067dc:	2200      	movs	r2, #0
 80067de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80067e0:	4809      	ldr	r0, [pc, #36]	; (8006808 <HAL_InitTick+0xa8>)
 80067e2:	f007 fde7 	bl	800e3b4 <HAL_TIM_Base_Init>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80067ec:	4806      	ldr	r0, [pc, #24]	; (8006808 <HAL_InitTick+0xa8>)
 80067ee:	f007 fe43 	bl	800e478 <HAL_TIM_Base_Start_IT>
 80067f2:	4603      	mov	r3, r0
 80067f4:	e000      	b.n	80067f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3730      	adds	r7, #48	; 0x30
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40021000 	.word	0x40021000
 8006804:	431bde83 	.word	0x431bde83
 8006808:	2000264c 	.word	0x2000264c
 800680c:	40001000 	.word	0x40001000

08006810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  __NOP();
 8006814:	bf00      	nop
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006816:	bf00      	nop
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006824:	e7fe      	b.n	8006824 <HardFault_Handler+0x4>

08006826 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006826:	b480      	push	{r7}
 8006828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800682a:	e7fe      	b.n	800682a <MemManage_Handler+0x4>

0800682c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006830:	e7fe      	b.n	8006830 <BusFault_Handler+0x4>

08006832 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006832:	b480      	push	{r7}
 8006834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006836:	e7fe      	b.n	8006836 <UsageFault_Handler+0x4>

08006838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800683c:	bf00      	nop
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800684c:	4802      	ldr	r0, [pc, #8]	; (8006858 <DMA1_Channel1_IRQHandler+0x10>)
 800684e:	f003 fac7 	bl	8009de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006852:	bf00      	nop
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20002414 	.word	0x20002414

0800685c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006860:	4802      	ldr	r0, [pc, #8]	; (800686c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8006862:	f002 fe1b 	bl	800949c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8006866:	bf00      	nop
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	2000249c 	.word	0x2000249c

08006870 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006874:	4802      	ldr	r0, [pc, #8]	; (8006880 <TIM6_DAC_IRQHandler+0x10>)
 8006876:	f007 fe69 	bl	800e54c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800687a:	bf00      	nop
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	2000264c 	.word	0x2000264c

08006884 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8006888:	4802      	ldr	r0, [pc, #8]	; (8006894 <DMA2_Channel2_IRQHandler+0x10>)
 800688a:	f003 faa9 	bl	8009de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800688e:	bf00      	nop
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20002458 	.word	0x20002458

08006898 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800689c:	4802      	ldr	r0, [pc, #8]	; (80068a8 <USB_LP_IRQHandler+0x10>)
 800689e:	f004 fb5e 	bl	800af5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80068a2:	bf00      	nop
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20004df0 	.word	0x20004df0

080068ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068b8:	2300      	movs	r3, #0
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e00a      	b.n	80068d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80068be:	f3af 8000 	nop.w
 80068c2:	4601      	mov	r1, r0
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	60ba      	str	r2, [r7, #8]
 80068ca:	b2ca      	uxtb	r2, r1
 80068cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	3301      	adds	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	429a      	cmp	r2, r3
 80068da:	dbf0      	blt.n	80068be <_read+0x12>
	}

return len;
 80068dc:	687b      	ldr	r3, [r7, #4]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
	return -1;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800690e:	605a      	str	r2, [r3, #4]
	return 0;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <_isatty>:

int _isatty(int file)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
	return 1;
 8006926:	2301      	movs	r3, #1
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
	return 0;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006958:	4a14      	ldr	r2, [pc, #80]	; (80069ac <_sbrk+0x5c>)
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <_sbrk+0x60>)
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006964:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <_sbrk+0x64>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d102      	bne.n	8006972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800696c:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <_sbrk+0x64>)
 800696e:	4a12      	ldr	r2, [pc, #72]	; (80069b8 <_sbrk+0x68>)
 8006970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006972:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <_sbrk+0x64>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4413      	add	r3, r2
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	429a      	cmp	r2, r3
 800697e:	d207      	bcs.n	8006990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006980:	f00f f896 	bl	8015ab0 <__errno>
 8006984:	4603      	mov	r3, r0
 8006986:	220c      	movs	r2, #12
 8006988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800698a:	f04f 33ff 	mov.w	r3, #4294967295
 800698e:	e009      	b.n	80069a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006990:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <_sbrk+0x64>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006996:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <_sbrk+0x64>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	4a05      	ldr	r2, [pc, #20]	; (80069b4 <_sbrk+0x64>)
 80069a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069a2:	68fb      	ldr	r3, [r7, #12]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	2000a000 	.word	0x2000a000
 80069b0:	00000400 	.word	0x00000400
 80069b4:	20002698 	.word	0x20002698
 80069b8:	20005310 	.word	0x20005310

080069bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <SystemInit+0x28>)
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c6:	4a07      	ldr	r2, [pc, #28]	; (80069e4 <SystemInit+0x28>)
 80069c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <SystemInit+0x28>)
 80069d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069d6:	609a      	str	r2, [r3, #8]
#endif
}
 80069d8:	bf00      	nop
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	e000ed00 	.word	0xe000ed00

080069e8 <EvaluateVirtInput>:
 */

#include "virtual_input.h"

void EvaluateVirtInput(PdmConfig_VirtualInput_t *pIn, uint16_t* pResult)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 80be 	beq.w	8006b78 <EvaluateVirtInput+0x190>
    return;
  if((pIn->pVar0 == 0) || (pIn->pVar1 == 0))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80bb 	beq.w	8006b7c <EvaluateVirtInput+0x194>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 80b6 	beq.w	8006b7c <EvaluateVirtInput+0x194>
    return;

  uint8_t nResult0, nResult1, nResult2, nResultSec0;

  nResult0 = *pIn->pVar0;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	73fb      	strb	r3, [r7, #15]
  if(pIn->nNot0)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d006      	beq.n	8006a2e <EvaluateVirtInput+0x46>
    nResult0 = !nResult0;
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bf0c      	ite	eq
 8006a26:	2301      	moveq	r3, #1
 8006a28:	2300      	movne	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	73fb      	strb	r3, [r7, #15]

  nResult1 = *pIn->pVar1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	73bb      	strb	r3, [r7, #14]
  if(pIn->nNot1)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7a5b      	ldrb	r3, [r3, #9]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d006      	beq.n	8006a4c <EvaluateVirtInput+0x64>
    nResult1 = !nResult1;
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bf0c      	ite	eq
 8006a44:	2301      	moveq	r3, #1
 8006a46:	2300      	movne	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	73bb      	strb	r3, [r7, #14]

  switch(pIn->eCond0)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	7a1b      	ldrb	r3, [r3, #8]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d01c      	beq.n	8006a8e <EvaluateVirtInput+0xa6>
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	dc25      	bgt.n	8006aa4 <EvaluateVirtInput+0xbc>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <EvaluateVirtInput+0x7a>
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d00b      	beq.n	8006a78 <EvaluateVirtInput+0x90>
 8006a60:	e020      	b.n	8006aa4 <EvaluateVirtInput+0xbc>
  {
  case COND_AND:
    nResultSec0 = nResult0 && nResult1;
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <EvaluateVirtInput+0x8a>
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <EvaluateVirtInput+0x8a>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <EvaluateVirtInput+0x8c>
 8006a72:	2300      	movs	r3, #0
 8006a74:	733b      	strb	r3, [r7, #12]
    break;
 8006a76:	e015      	b.n	8006aa4 <EvaluateVirtInput+0xbc>
  case COND_OR:
    nResultSec0 = nResult0 || nResult1;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <EvaluateVirtInput+0x9c>
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <EvaluateVirtInput+0xa0>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e000      	b.n	8006a8a <EvaluateVirtInput+0xa2>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	733b      	strb	r3, [r7, #12]
    break;
 8006a8c:	e00a      	b.n	8006aa4 <EvaluateVirtInput+0xbc>
  case COND_NOR:
    nResultSec0 = !nResult0 || !nResult1;
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <EvaluateVirtInput+0xb2>
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <EvaluateVirtInput+0xb6>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <EvaluateVirtInput+0xb8>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	733b      	strb	r3, [r7, #12]
    break;
 8006aa2:	bf00      	nop
  }

  //Only 2 conditions
  if(pIn->nVar2 == 0)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7c9b      	ldrb	r3, [r3, #18]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10c      	bne.n	8006ac6 <EvaluateVirtInput+0xde>
  {
    CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0, pResult, NO_DEBOUNCE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f103 001c 	add.w	r0, r3, #28
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7e19      	ldrb	r1, [r3, #24]
 8006ab6:	7b3b      	ldrb	r3, [r7, #12]
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	2300      	movs	r3, #0
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	f000 fffc 	bl	8007abc <CheckPushbutton>
    return;
 8006ac4:	e05b      	b.n	8006b7e <EvaluateVirtInput+0x196>
  }
  else
  {
    nResult2 = *pIn->pVar2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	737b      	strb	r3, [r7, #13]
    if(pIn->nNot2)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	7c5b      	ldrb	r3, [r3, #17]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d006      	beq.n	8006ae4 <EvaluateVirtInput+0xfc>
      nResult2 = !nResult2;
 8006ad6:	7b7b      	ldrb	r3, [r7, #13]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	bf0c      	ite	eq
 8006adc:	2301      	moveq	r3, #1
 8006ade:	2300      	movne	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	737b      	strb	r3, [r7, #13]

    switch(pIn->eCond0)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7a1b      	ldrb	r3, [r3, #8]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d030      	beq.n	8006b4e <EvaluateVirtInput+0x166>
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	dc46      	bgt.n	8006b7e <EvaluateVirtInput+0x196>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <EvaluateVirtInput+0x112>
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d015      	beq.n	8006b24 <EvaluateVirtInput+0x13c>
 8006af8:	e041      	b.n	8006b7e <EvaluateVirtInput+0x196>
    {
    case COND_AND:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 && nResult2, pResult, NO_DEBOUNCE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f103 001c 	add.w	r0, r3, #28
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7e19      	ldrb	r1, [r3, #24]
 8006b04:	7b3b      	ldrb	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <EvaluateVirtInput+0x12c>
 8006b0a:	7b7b      	ldrb	r3, [r7, #13]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <EvaluateVirtInput+0x12c>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <EvaluateVirtInput+0x12e>
 8006b14:	2300      	movs	r3, #0
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	f000 ffcd 	bl	8007abc <CheckPushbutton>
      return;
 8006b22:	e02c      	b.n	8006b7e <EvaluateVirtInput+0x196>
    case COND_OR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 || nResult2, pResult, NO_DEBOUNCE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f103 001c 	add.w	r0, r3, #28
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7e19      	ldrb	r1, [r3, #24]
 8006b2e:	7b3b      	ldrb	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <EvaluateVirtInput+0x152>
 8006b34:	7b7b      	ldrb	r3, [r7, #13]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <EvaluateVirtInput+0x156>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <EvaluateVirtInput+0x158>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	2300      	movs	r3, #0
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f000 ffb8 	bl	8007abc <CheckPushbutton>
      return;
 8006b4c:	e017      	b.n	8006b7e <EvaluateVirtInput+0x196>
    case COND_NOR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, !nResultSec0 || !nResult2, pResult, NO_DEBOUNCE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f103 001c 	add.w	r0, r3, #28
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	7e19      	ldrb	r1, [r3, #24]
 8006b58:	7b3b      	ldrb	r3, [r7, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <EvaluateVirtInput+0x17c>
 8006b5e:	7b7b      	ldrb	r3, [r7, #13]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <EvaluateVirtInput+0x180>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <EvaluateVirtInput+0x182>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f000 ffa3 	bl	8007abc <CheckPushbutton>
      return;
 8006b76:	e002      	b.n	8006b7e <EvaluateVirtInput+0x196>
    return;
 8006b78:	bf00      	nop
 8006b7a:	e000      	b.n	8006b7e <EvaluateVirtInput+0x196>
    return;
 8006b7c:	bf00      	nop
    }
  }

}
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bbc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006b88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006b8a:	e003      	b.n	8006b94 <LoopCopyDataInit>

08006b8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006b8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006b90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006b92:	3104      	adds	r1, #4

08006b94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006b94:	480b      	ldr	r0, [pc, #44]	; (8006bc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006b98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006b9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006b9c:	d3f6      	bcc.n	8006b8c <CopyDataInit>
	ldr	r2, =_sbss
 8006b9e:	4a0b      	ldr	r2, [pc, #44]	; (8006bcc <LoopForever+0x12>)
	b	LoopFillZerobss
 8006ba0:	e002      	b.n	8006ba8 <LoopFillZerobss>

08006ba2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006ba2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006ba4:	f842 3b04 	str.w	r3, [r2], #4

08006ba8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006ba8:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <LoopForever+0x16>)
	cmp	r2, r3
 8006baa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006bac:	d3f9      	bcc.n	8006ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006bae:	f7ff ff05 	bl	80069bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bb2:	f00e ff83 	bl	8015abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006bb6:	f7fc f9bf 	bl	8002f38 <main>

08006bba <LoopForever>:

LoopForever:
    b LoopForever
 8006bba:	e7fe      	b.n	8006bba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006bbc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8006bc0:	08016d00 	.word	0x08016d00
	ldr	r0, =_sdata
 8006bc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006bc8:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8006bcc:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8006bd0:	2000530c 	.word	0x2000530c

08006bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006bd4:	e7fe      	b.n	8006bd4 <ADC1_2_IRQHandler>
	...

08006bd8 <ADS1x15_SendRegs>:
#include "ads1x15.h"

#define I2C_TIMEOUT 100

HAL_StatusTypeDef ADS1x15_SendRegs(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings, uint8_t channel)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	461a      	mov	r2, r3
 8006be4:	460b      	mov	r3, r1
 8006be6:	817b      	strh	r3, [r7, #10]
 8006be8:	4613      	mov	r3, r2
 8006bea:	727b      	strb	r3, [r7, #9]
  HAL_StatusTypeDef eStatus;

	if(channel > 3) return HAL_ERROR;
 8006bec:	7a7b      	ldrb	r3, [r7, #9]
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d901      	bls.n	8006bf6 <ADS1x15_SendRegs+0x1e>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e067      	b.n	8006cc6 <ADS1x15_SendRegs+0xee>

	uint16_t config =
 8006bf6:	f240 1303 	movw	r3, #259	; 0x103
 8006bfa:	82fb      	strh	r3, [r7, #22]
				ADS1015_REG_CONFIG_CLAT_NONLAT |  // Non-latching (default val)
				ADS1015_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
				ADS1015_REG_CONFIG_CMODE_TRAD |   // Traditional comparator (default val)
				ADS1015_REG_CONFIG_MODE_SINGLE;

	config |= settings->dataRate;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	791b      	ldrb	r3, [r3, #4]
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	8afb      	ldrh	r3, [r7, #22]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	82fb      	strh	r3, [r7, #22]
	config |= settings->gain;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	885a      	ldrh	r2, [r3, #2]
 8006c0c:	8afb      	ldrh	r3, [r7, #22]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	82fb      	strh	r3, [r7, #22]

	switch(channel){
 8006c12:	7a7b      	ldrb	r3, [r7, #9]
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d81f      	bhi.n	8006c58 <ADS1x15_SendRegs+0x80>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <ADS1x15_SendRegs+0x48>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c31 	.word	0x08006c31
 8006c24:	08006c3b 	.word	0x08006c3b
 8006c28:	08006c45 	.word	0x08006c45
 8006c2c:	08006c4f 	.word	0x08006c4f
	case (0):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8006c30:	8afb      	ldrh	r3, [r7, #22]
 8006c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c36:	82fb      	strh	r3, [r7, #22]
		break;
 8006c38:	e00e      	b.n	8006c58 <ADS1x15_SendRegs+0x80>
	case (1):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8006c3a:	8afb      	ldrh	r3, [r7, #22]
 8006c3c:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8006c40:	82fb      	strh	r3, [r7, #22]
		break;
 8006c42:	e009      	b.n	8006c58 <ADS1x15_SendRegs+0x80>
	case (2):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8006c44:	8afb      	ldrh	r3, [r7, #22]
 8006c46:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8006c4a:	82fb      	strh	r3, [r7, #22]
		break;
 8006c4c:	e004      	b.n	8006c58 <ADS1x15_SendRegs+0x80>
	case (3):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8006c4e:	8afb      	ldrh	r3, [r7, #22]
 8006c50:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006c54:	82fb      	strh	r3, [r7, #22]
		break;
 8006c56:	bf00      	nop
	}

	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8006c58:	8afb      	ldrh	r3, [r7, #22]
 8006c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c62:	82fb      	strh	r3, [r7, #22]

	uint8_t writeVals[3];

	writeVals[0] = ADS1015_REG_POINTER_CONFIG;
 8006c64:	2301      	movs	r3, #1
 8006c66:	743b      	strb	r3, [r7, #16]
	writeVals[1] = config >> 8;
 8006c68:	8afb      	ldrh	r3, [r7, #22]
 8006c6a:	0a1b      	lsrs	r3, r3, #8
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	747b      	strb	r3, [r7, #17]
	writeVals[2] = config & 0xFF;
 8006c72:	8afb      	ldrh	r3, [r7, #22]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	74bb      	strb	r3, [r7, #18]

	eStatus = HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, I2C_TIMEOUT);
 8006c78:	897b      	ldrh	r3, [r7, #10]
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	b299      	uxth	r1, r3
 8006c7e:	f107 0210 	add.w	r2, r7, #16
 8006c82:	2364      	movs	r3, #100	; 0x64
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	2303      	movs	r3, #3
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f003 fbf3 	bl	800a474 <HAL_I2C_Master_Transmit>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	757b      	strb	r3, [r7, #21]
  if( eStatus != HAL_OK)
 8006c92:	7d7b      	ldrb	r3, [r7, #21]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <ADS1x15_SendRegs+0xc4>
  {
    return eStatus;
 8006c98:	7d7b      	ldrb	r3, [r7, #21]
 8006c9a:	e014      	b.n	8006cc6 <ADS1x15_SendRegs+0xee>
  }

	//Send convert register
	writeVals[0] = ADS1015_REG_POINTER_CONVERT;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	743b      	strb	r3, [r7, #16]

  eStatus = HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, I2C_TIMEOUT);
 8006ca0:	897b      	ldrh	r3, [r7, #10]
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	b299      	uxth	r1, r3
 8006ca6:	f107 0210 	add.w	r2, r7, #16
 8006caa:	2364      	movs	r3, #100	; 0x64
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	2301      	movs	r3, #1
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f003 fbdf 	bl	800a474 <HAL_I2C_Master_Transmit>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	757b      	strb	r3, [r7, #21]
  if( eStatus != HAL_OK)
 8006cba:	7d7b      	ldrb	r3, [r7, #21]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <ADS1x15_SendRegs+0xec>
  {
    return eStatus;
 8006cc0:	7d7b      	ldrb	r3, [r7, #21]
 8006cc2:	e000      	b.n	8006cc6 <ADS1x15_SendRegs+0xee>
  }

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop

08006cd0 <ADS1x15_ReadADC>:

HAL_StatusTypeDef ADS1x15_ReadADC(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings, uint16_t* val)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	607a      	str	r2, [r7, #4]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	817b      	strh	r3, [r7, #10]

  //Read received values
	uint8_t readVals[2];

	//Msg received - comms OK
	settings->commsOk = 1;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	719a      	strb	r2, [r3, #6]

	eStatus = HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, I2C_TIMEOUT);
 8006ce6:	897b      	ldrh	r3, [r7, #10]
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	b299      	uxth	r1, r3
 8006cec:	f107 0210 	add.w	r2, r7, #16
 8006cf0:	2364      	movs	r3, #100	; 0x64
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f003 fcb0 	bl	800a65c <HAL_I2C_Master_Receive>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	757b      	strb	r3, [r7, #21]
	if( eStatus != HAL_OK)
 8006d00:	7d7b      	ldrb	r3, [r7, #21]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <ADS1x15_ReadADC+0x3a>
  {
    return eStatus;
 8006d06:	7d7b      	ldrb	r3, [r7, #21]
 8006d08:	e01e      	b.n	8006d48 <ADS1x15_ReadADC+0x78>
  }

	uint16_t valRead = (readVals[0] << 8 | readVals[1]) >> settings->bitShift;
 8006d0a:	7c3b      	ldrb	r3, [r7, #16]
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	7c7a      	ldrb	r2, [r7, #17]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	7952      	ldrb	r2, [r2, #5]
 8006d16:	4113      	asrs	r3, r2
 8006d18:	82fb      	strh	r3, [r7, #22]

	if (settings->deviceType == ADS1115) {
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d104      	bne.n	8006d2c <ADS1x15_ReadADC+0x5c>
	  *val = valRead;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	8afa      	ldrh	r2, [r7, #22]
 8006d26:	801a      	strh	r2, [r3, #0]
	  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e00d      	b.n	8006d48 <ADS1x15_ReadADC+0x78>
  }
	else {
    // Shift 12-bit results right 4 bits for the ADS1015,
    // making sure we keep the sign bit intact
    if (valRead > 0x07FF) {
 8006d2c:	8afb      	ldrh	r3, [r7, #22]
 8006d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d32:	d305      	bcc.n	8006d40 <ADS1x15_ReadADC+0x70>
      // negative number - extend the sign to 16th bit
      valRead |= 0xF000;
 8006d34:	8afb      	ldrh	r3, [r7, #22]
 8006d36:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8006d3a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8006d3e:	82fb      	strh	r3, [r7, #22]
    }
    *val = valRead;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	8afa      	ldrh	r2, [r7, #22]
 8006d44:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8006d46:	2300      	movs	r3, #0
  }
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <CANBoardCheckConnection>:
  rx->nHeartbeat = msg[7];
  rx->nLastHeartbeatTime = HAL_GetTick();
}

void CANBoardCheckConnection(volatile CANBoard_RX_t* rx)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d10c      	bne.n	8006d86 <CANBoardCheckConnection+0x36>
      ((HAL_GetTick() - rx->nLastHeartbeatTime) > (CANBOARD_TX_DELAY * 4)))
 8006d6c:	f000 ff46 	bl	8007bfc <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	1ad3      	subs	r3, r2, r3
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 8006d78:	2bc8      	cmp	r3, #200	; 0xc8
 8006d7a:	d904      	bls.n	8006d86 <CANBoardCheckConnection+0x36>
  {
    rx->nConnected = 0;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006d84:	e003      	b.n	8006d8e <CANBoardCheckConnection+0x3e>
  }
  else
  {
    rx->nConnected = 1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }
  rx->nLastHeartbeat = rx->nHeartbeat;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <MCP9808_Init>:
#include "mcp9808.h"

uint8_t MCP9808_Overtemp, MCP9808_Undertemp, MCP9808_CriticalTemp;

uint8_t MCP9808_Init(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	807b      	strh	r3, [r7, #2]
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_MANUF_ID) != 0x0054)
 8006db0:	887b      	ldrh	r3, [r7, #2]
 8006db2:	2206      	movs	r2, #6
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f94e 	bl	8007058 <MCP9808_Read16>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b54      	cmp	r3, #84	; 0x54
 8006dc0:	d001      	beq.n	8006dc6 <MCP9808_Init+0x22>
    return 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e015      	b.n	8006df2 <MCP9808_Init+0x4e>
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_DEVICE_ID) != 0x0400)
 8006dc6:	887b      	ldrh	r3, [r7, #2]
 8006dc8:	2207      	movs	r2, #7
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f943 	bl	8007058 <MCP9808_Read16>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd8:	d001      	beq.n	8006dde <MCP9808_Init+0x3a>
    return 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e009      	b.n	8006df2 <MCP9808_Init+0x4e>
  //B6 = 0 (Tupper Tlower window unlocked)
  //B7 = 0 (Tcrit unlocked)
  //B8 = 0 (continous conversion)
  //B9-10 = 01 (Tupper Tlower hysterisis +1.5 deg C)
  //B11-15 = 00000 (not used)
  uint16_t config = (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_HYST_1_5);
 8006dde:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006de2:	81fb      	strh	r3, [r7, #14]
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, config);
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	8879      	ldrh	r1, [r7, #2]
 8006de8:	2201      	movs	r2, #1
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f90e 	bl	800700c <MCP9808_Write16>
  return 1;
 8006df0:	2301      	movs	r3, #1
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <MCP9808_ReadTempC_Int>:

  return temp;
}

int16_t MCP9808_ReadTempC_Int(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	807b      	strh	r3, [r7, #2]
  uint16_t t = MCP9808_Read16(hi2c, addr, MCP9808_REG_AMBIENT_TEMP);
 8006e08:	887b      	ldrh	r3, [r7, #2]
 8006e0a:	2205      	movs	r2, #5
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f922 	bl	8007058 <MCP9808_Read16>
 8006e14:	4603      	mov	r3, r0
 8006e16:	81fb      	strh	r3, [r7, #14]

  MCP9808_MapLimitBits(t);
 8006e18:	89fb      	ldrh	r3, [r7, #14]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f8ce 	bl	8006fbc <MCP9808_MapLimitBits>

  if (t != 0xFFFF) {
 8006e20:	89fb      	ldrh	r3, [r7, #14]
 8006e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01c      	beq.n	8006e64 <MCP9808_ReadTempC_Int+0x68>
    t = t & 0x0FFF;
 8006e2a:	89fb      	ldrh	r3, [r7, #14]
 8006e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e30:	81fb      	strh	r3, [r7, #14]
    t /= 16.0;
 8006e32:	89fb      	ldrh	r3, [r7, #14]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7f9 fb1d 	bl	8000474 <__aeabi_i2d>
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	; (8006e70 <MCP9808_ReadTempC_Int+0x74>)
 8006e40:	f7f9 fcac 	bl	800079c <__aeabi_ddiv>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	f7f9 fd8e 	bl	800096c <__aeabi_d2uiz>
 8006e50:	4603      	mov	r3, r0
 8006e52:	81fb      	strh	r3, [r7, #14]
    if (t & 0x1000)
 8006e54:	89fb      	ldrh	r3, [r7, #14]
 8006e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <MCP9808_ReadTempC_Int+0x68>
      t = -t;
 8006e5e:	89fb      	ldrh	r3, [r7, #14]
 8006e60:	425b      	negs	r3, r3
 8006e62:	81fb      	strh	r3, [r7, #14]
  }
  return t;
 8006e64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40300000 	.word	0x40300000

08006e74 <MCP9808_SetResolution>:
{
  return MCP9808_Read8(hi2c, addr, MCP9808_REG_RESOLUTION);
}

void MCP9808_SetResolution(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t val)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	807b      	strh	r3, [r7, #2]
 8006e80:	4613      	mov	r3, r2
 8006e82:	707b      	strb	r3, [r7, #1]
  MCP9808_Write8(hi2c, addr, MCP9808_REG_RESOLUTION, val);
 8006e84:	787b      	ldrb	r3, [r7, #1]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8879      	ldrh	r1, [r7, #2]
 8006e8a:	2208      	movs	r2, #8
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f913 	bl	80070b8 <MCP9808_Write8>
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <MCP9808_SetLimit>:
  conf_shutdown = conf_register & ~MCP9808_REG_CONFIG_SHUTDOWN;
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, conf_shutdown);
}

uint8_t MCP9808_SetLimit(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, float val)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	ed87 0a01 	vstr	s0, [r7, #4]
 8006eaa:	817b      	strh	r3, [r7, #10]
 8006eac:	4613      	mov	r3, r2
 8006eae:	727b      	strb	r3, [r7, #9]
  uint16_t newVal = val * 16.0;
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7f9 faf1 	bl	8000498 <__aeabi_f2d>
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	4b23      	ldr	r3, [pc, #140]	; (8006f48 <MCP9808_SetLimit+0xac>)
 8006ebc:	f7f9 fb44 	bl	8000548 <__aeabi_dmul>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	f7f9 fd50 	bl	800096c <__aeabi_d2uiz>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	82fb      	strh	r3, [r7, #22]
  if(val < 0)
 8006ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006edc:	d503      	bpl.n	8006ee6 <MCP9808_SetLimit+0x4a>
    newVal += 256;
 8006ede:	8afb      	ldrh	r3, [r7, #22]
 8006ee0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006ee4:	82fb      	strh	r3, [r7, #22]
  MCP9808_Write16(hi2c, addr, reg, val * 16.0);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7f9 fad6 	bl	8000498 <__aeabi_f2d>
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <MCP9808_SetLimit+0xac>)
 8006ef2:	f7f9 fb29 	bl	8000548 <__aeabi_dmul>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4610      	mov	r0, r2
 8006efc:	4619      	mov	r1, r3
 8006efe:	f7f9 fd35 	bl	800096c <__aeabi_d2uiz>
 8006f02:	4603      	mov	r3, r0
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	7a7a      	ldrb	r2, [r7, #9]
 8006f08:	8979      	ldrh	r1, [r7, #10]
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 f87e 	bl	800700c <MCP9808_Write16>

  float temp = MCP9808_RawToTemp(MCP9808_Read16(hi2c, addr, reg));
 8006f10:	7a7a      	ldrb	r2, [r7, #9]
 8006f12:	897b      	ldrh	r3, [r7, #10]
 8006f14:	4619      	mov	r1, r3
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f89e 	bl	8007058 <MCP9808_Read16>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 f814 	bl	8006f4c <MCP9808_RawToTemp>
 8006f24:	ed87 0a04 	vstr	s0, [r7, #16]

  if(val == temp)
 8006f28:	ed97 7a01 	vldr	s14, [r7, #4]
 8006f2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f30:	eeb4 7a67 	vcmp.f32	s14, s15
 8006f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f38:	d101      	bne.n	8006f3e <MCP9808_SetLimit+0xa2>
    return 1;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <MCP9808_SetLimit+0xa4>
  return 0;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40300000 	.word	0x40300000

08006f4c <MCP9808_RawToTemp>:

float MCP9808_RawToTemp(uint16_t raw)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	4603      	mov	r3, r0
 8006f54:	80fb      	strh	r3, [r7, #6]
  float temp = 0.0;
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
  if (raw != 0xFFFF) {
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <MCP9808_RawToTemp+0x56>
    temp = raw & 0x0FFF;
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f6c:	ee07 3a90 	vmov	s15, r3
 8006f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f74:	edc7 7a03 	vstr	s15, [r7, #12]
    temp /= 16.0;
 8006f78:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f7c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8006f80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f84:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw & 0x1000)
 8006f88:	88fb      	ldrh	r3, [r7, #6]
 8006f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <MCP9808_RawToTemp+0x56>
      temp -= 256;
 8006f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f96:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006fb8 <MCP9808_RawToTemp+0x6c>
 8006f9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f9e:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return temp;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	ee07 3a90 	vmov	s15, r3
}
 8006fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	43800000 	.word	0x43800000

08006fbc <MCP9808_MapLimitBits>:

void MCP9808_MapLimitBits(uint16_t raw)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	80fb      	strh	r3, [r7, #6]
  MCP9808_Overtemp     = (raw & MCP9808_REG_OVERTEMP) >> MCP9808_POS_OVERTEMP;
 8006fc6:	88fb      	ldrh	r3, [r7, #6]
 8006fc8:	139b      	asrs	r3, r3, #14
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <MCP9808_MapLimitBits+0x44>)
 8006fd4:	701a      	strb	r2, [r3, #0]
  MCP9808_Undertemp    = (raw & MCP9808_REG_UNDERTEMP) >> MCP9808_POS_UNDERTEMP;
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	135b      	asrs	r3, r3, #13
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	4b08      	ldr	r3, [pc, #32]	; (8007004 <MCP9808_MapLimitBits+0x48>)
 8006fe4:	701a      	strb	r2, [r3, #0]
  MCP9808_CriticalTemp = (raw & MCP9808_REG_CRITICALTEMP) >> MCP9808_POS_CRITICALTEMP;
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	0bdb      	lsrs	r3, r3, #15
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	4b06      	ldr	r3, [pc, #24]	; (8007008 <MCP9808_MapLimitBits+0x4c>)
 8006ff0:	701a      	strb	r2, [r3, #0]
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	2000269c 	.word	0x2000269c
 8007004:	2000269d 	.word	0x2000269d
 8007008:	2000269e 	.word	0x2000269e

0800700c <MCP9808_Write16>:

void MCP9808_Write16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val){
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af02      	add	r7, sp, #8
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	4608      	mov	r0, r1
 8007016:	4611      	mov	r1, r2
 8007018:	461a      	mov	r2, r3
 800701a:	4603      	mov	r3, r0
 800701c:	817b      	strh	r3, [r7, #10]
 800701e:	460b      	mov	r3, r1
 8007020:	727b      	strb	r3, [r7, #9]
 8007022:	4613      	mov	r3, r2
 8007024:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 8007026:	7a7b      	ldrb	r3, [r7, #9]
 8007028:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val >> 8;
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	0a1b      	lsrs	r3, r3, #8
 800702e:	b29b      	uxth	r3, r3
 8007030:	b2db      	uxtb	r3, r3
 8007032:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val & 0xFF;
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, 100);
 800703a:	897b      	ldrh	r3, [r7, #10]
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	b299      	uxth	r1, r3
 8007040:	f107 0214 	add.w	r2, r7, #20
 8007044:	2364      	movs	r3, #100	; 0x64
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	2303      	movs	r3, #3
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f003 fa12 	bl	800a474 <HAL_I2C_Master_Transmit>
}
 8007050:	bf00      	nop
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <MCP9808_Read16>:
uint16_t MCP9808_Read16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af02      	add	r7, sp, #8
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	807b      	strh	r3, [r7, #2]
 8007064:	4613      	mov	r3, r2
 8007066:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[1];
  uint8_t readVals[2];
  uint16_t val = 0xFFFF;
 8007068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800706c:	81fb      	strh	r3, [r7, #14]

  writeVals[0] = reg;
 800706e:	787b      	ldrb	r3, [r7, #1]
 8007070:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, 100);
 8007072:	887b      	ldrh	r3, [r7, #2]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	b299      	uxth	r1, r3
 8007078:	f107 020c 	add.w	r2, r7, #12
 800707c:	2364      	movs	r3, #100	; 0x64
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2301      	movs	r3, #1
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f003 f9f6 	bl	800a474 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, 100);
 8007088:	887b      	ldrh	r3, [r7, #2]
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	b299      	uxth	r1, r3
 800708e:	f107 0208 	add.w	r2, r7, #8
 8007092:	2364      	movs	r3, #100	; 0x64
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	2302      	movs	r3, #2
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f003 fadf 	bl	800a65c <HAL_I2C_Master_Receive>

  val = (readVals[0] << 8 | readVals[1]);
 800709e:	7a3b      	ldrb	r3, [r7, #8]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	b21a      	sxth	r2, r3
 80070a4:	7a7b      	ldrb	r3, [r7, #9]
 80070a6:	b21b      	sxth	r3, r3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	b21b      	sxth	r3, r3
 80070ac:	81fb      	strh	r3, [r7, #14]

  return val;
 80070ae:	89fb      	ldrh	r3, [r7, #14]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <MCP9808_Write8>:

void MCP9808_Write8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af02      	add	r7, sp, #8
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	4608      	mov	r0, r1
 80070c2:	4611      	mov	r1, r2
 80070c4:	461a      	mov	r2, r3
 80070c6:	4603      	mov	r3, r0
 80070c8:	817b      	strh	r3, [r7, #10]
 80070ca:	460b      	mov	r3, r1
 80070cc:	727b      	strb	r3, [r7, #9]
 80070ce:	4613      	mov	r3, r2
 80070d0:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 80070d2:	7a7b      	ldrb	r3, [r7, #9]
 80070d4:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val;
 80070d6:	88fb      	ldrh	r3, [r7, #6]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	757b      	strb	r3, [r7, #21]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 80070dc:	897b      	ldrh	r3, [r7, #10]
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	b299      	uxth	r1, r3
 80070e2:	f107 0214 	add.w	r2, r7, #20
 80070e6:	2364      	movs	r3, #100	; 0x64
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	2302      	movs	r3, #2
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f003 f9c1 	bl	800a474 <HAL_I2C_Master_Transmit>
}
 80070f2:	bf00      	nop
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <MCP9808_GetCriticalTemp>:

  return val;
}

uint8_t MCP9808_GetCriticalTemp()
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  return MCP9808_CriticalTemp;
 8007100:	4b03      	ldr	r3, [pc, #12]	; (8007110 <MCP9808_GetCriticalTemp+0x14>)
 8007102:	781b      	ldrb	r3, [r3, #0]
}
 8007104:	4618      	mov	r0, r3
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	2000269e 	.word	0x2000269e

08007114 <MCP9808_GetOvertemp>:

uint8_t MCP9808_GetOvertemp()
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  return MCP9808_Overtemp;
 8007118:	4b03      	ldr	r3, [pc, #12]	; (8007128 <MCP9808_GetOvertemp+0x14>)
 800711a:	781b      	ldrb	r3, [r3, #0]
}
 800711c:	4618      	mov	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	2000269c 	.word	0x2000269c

0800712c <PCA9539_WriteReg8>:
 */

#include "pca9539.h"

void PCA9539_WriteReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint8_t val)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af02      	add	r7, sp, #8
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	4608      	mov	r0, r1
 8007136:	4611      	mov	r1, r2
 8007138:	461a      	mov	r2, r3
 800713a:	4603      	mov	r3, r0
 800713c:	807b      	strh	r3, [r7, #2]
 800713e:	460b      	mov	r3, r1
 8007140:	707b      	strb	r3, [r7, #1]
 8007142:	4613      	mov	r3, r2
 8007144:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 8007146:	787b      	ldrb	r3, [r7, #1]
 8007148:	733b      	strb	r3, [r7, #12]
  writeVals[1] = val;
 800714a:	783b      	ldrb	r3, [r7, #0]
 800714c:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 800714e:	887b      	ldrh	r3, [r7, #2]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	b299      	uxth	r1, r3
 8007154:	f107 020c 	add.w	r2, r7, #12
 8007158:	2364      	movs	r3, #100	; 0x64
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	2302      	movs	r3, #2
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f003 f988 	bl	800a474 <HAL_I2C_Master_Transmit>
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <PCA9539_WriteReg16>:

  return val;
}

void PCA9539_WriteReg16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af02      	add	r7, sp, #8
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	461a      	mov	r2, r3
 800717a:	4603      	mov	r3, r0
 800717c:	817b      	strh	r3, [r7, #10]
 800717e:	460b      	mov	r3, r1
 8007180:	727b      	strb	r3, [r7, #9]
 8007182:	4613      	mov	r3, r2
 8007184:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 8007186:	7a7b      	ldrb	r3, [r7, #9]
 8007188:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val & 0xFF;
 800718a:	88fb      	ldrh	r3, [r7, #6]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val >> 8;
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	0a1b      	lsrs	r3, r3, #8
 8007194:	b29b      	uxth	r3, r3
 8007196:	b2db      	uxtb	r3, r3
 8007198:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, 100);
 800719a:	897b      	ldrh	r3, [r7, #10]
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	b299      	uxth	r1, r3
 80071a0:	f107 0214 	add.w	r2, r7, #20
 80071a4:	2364      	movs	r3, #100	; 0x64
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2303      	movs	r3, #3
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f003 f962 	bl	800a474 <HAL_I2C_Master_Transmit>
}
 80071b0:	bf00      	nop
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <PCA9635_Init>:


#include <pca9635.h>

void PCA9635_Init(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t blinking)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af02      	add	r7, sp, #8
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	807b      	strh	r3, [r7, #2]
 80071c4:	4613      	mov	r3, r2
 80071c6:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];

  writeVals[0] = PCA9635_REG_MODE1;
 80071c8:	2300      	movs	r3, #0
 80071ca:	733b      	strb	r3, [r7, #12]
  writeVals[1] = (PCA9635_MODE1_ALLCALL | PCA9635_MODE1_AI2); //Auto increment all registers
 80071cc:	2381      	movs	r3, #129	; 0x81
 80071ce:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 80071d0:	887b      	ldrh	r3, [r7, #2]
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	b299      	uxth	r1, r3
 80071d6:	f107 020c 	add.w	r2, r7, #12
 80071da:	2364      	movs	r3, #100	; 0x64
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	2302      	movs	r3, #2
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f003 f947 	bl	800a474 <HAL_I2C_Master_Transmit>

  if(blinking > 0){
 80071e6:	787b      	ldrb	r3, [r7, #1]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00e      	beq.n	800720a <PCA9635_Init+0x52>
    writeVals[0] = PCA9635_REG_MODE2;
 80071ec:	2301      	movs	r3, #1
 80071ee:	733b      	strb	r3, [r7, #12]
    writeVals[1] = (PCA9635_MODE2_OUTNE | PCA9635_MODE2_OUTDRV | PCA9635_MODE2_DMBLNK);
 80071f0:	2325      	movs	r3, #37	; 0x25
 80071f2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 80071f4:	887b      	ldrh	r3, [r7, #2]
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	b299      	uxth	r1, r3
 80071fa:	f107 020c 	add.w	r2, r7, #12
 80071fe:	2364      	movs	r3, #100	; 0x64
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	2302      	movs	r3, #2
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f003 f935 	bl	800a474 <HAL_I2C_Master_Transmit>
  }
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <PCA9635_SetPWM>:

void PCA9635_SetPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t channel, uint8_t value)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b086      	sub	sp, #24
 8007216:	af02      	add	r7, sp, #8
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	4608      	mov	r0, r1
 800721c:	4611      	mov	r1, r2
 800721e:	461a      	mov	r2, r3
 8007220:	4603      	mov	r3, r0
 8007222:	807b      	strh	r3, [r7, #2]
 8007224:	460b      	mov	r3, r1
 8007226:	707b      	strb	r3, [r7, #1]
 8007228:	4613      	mov	r3, r2
 800722a:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  if((channel >= 0) && (channel < 16)){
 800722c:	787b      	ldrb	r3, [r7, #1]
 800722e:	2b0f      	cmp	r3, #15
 8007230:	d810      	bhi.n	8007254 <PCA9635_SetPWM+0x42>
    writeVals[0] = PCA9635_REG_PWM(channel);
 8007232:	787b      	ldrb	r3, [r7, #1]
 8007234:	3302      	adds	r3, #2
 8007236:	b2db      	uxtb	r3, r3
 8007238:	733b      	strb	r3, [r7, #12]
    writeVals[1] = value;
 800723a:	783b      	ldrb	r3, [r7, #0]
 800723c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 800723e:	887b      	ldrh	r3, [r7, #2]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	b299      	uxth	r1, r3
 8007244:	f107 020c 	add.w	r2, r7, #12
 8007248:	2364      	movs	r3, #100	; 0x64
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	2302      	movs	r3, #2
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f003 f910 	bl	800a474 <HAL_I2C_Master_Transmit>
  }
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <PCA9635_SetGroupPWM>:

void PCA9635_SetGroupPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af02      	add	r7, sp, #8
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	807b      	strh	r3, [r7, #2]
 8007268:	4613      	mov	r3, r2
 800726a:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPPWM;
 800726c:	2312      	movs	r3, #18
 800726e:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 8007270:	787b      	ldrb	r3, [r7, #1]
 8007272:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8007274:	887b      	ldrh	r3, [r7, #2]
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	b299      	uxth	r1, r3
 800727a:	f107 020c 	add.w	r2, r7, #12
 800727e:	2364      	movs	r3, #100	; 0x64
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	2302      	movs	r3, #2
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f003 f8f5 	bl	800a474 <HAL_I2C_Master_Transmit>
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <PCA9635_SetGroupFreq>:

void PCA9635_SetGroupFreq(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af02      	add	r7, sp, #8
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	460b      	mov	r3, r1
 800729c:	807b      	strh	r3, [r7, #2]
 800729e:	4613      	mov	r3, r2
 80072a0:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPFREQ;
 80072a2:	2313      	movs	r3, #19
 80072a4:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 80072a6:	787b      	ldrb	r3, [r7, #1]
 80072a8:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 80072aa:	887b      	ldrh	r3, [r7, #2]
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	b299      	uxth	r1, r3
 80072b0:	f107 020c 	add.w	r2, r7, #12
 80072b4:	2364      	movs	r3, #100	; 0x64
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	2302      	movs	r3, #2
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f003 f8da 	bl	800a474 <HAL_I2C_Master_Transmit>
}
 80072c0:	bf00      	nop
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <PCA9635_SetAllNum>:

void PCA9635_SetAllNum(I2C_HandleTypeDef* hi2c, uint16_t addr, uint32_t values)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af02      	add	r7, sp, #8
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	460b      	mov	r3, r1
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 80072d6:	2394      	movs	r3, #148	; 0x94
 80072d8:	743b      	strb	r3, [r7, #16]
  writeVals[1] = values & 0xFF;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	747b      	strb	r3, [r7, #17]
  writeVals[2] = (values >> 8) ;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	0a1b      	lsrs	r3, r3, #8
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = (values >> 16);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	0c1b      	lsrs	r3, r3, #16
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = (values >> 24);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	0e1b      	lsrs	r3, r3, #24
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, 100);
 80072f8:	897b      	ldrh	r3, [r7, #10]
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	b299      	uxth	r1, r3
 80072fe:	f107 0210 	add.w	r2, r7, #16
 8007302:	2364      	movs	r3, #100	; 0x64
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	2305      	movs	r3, #5
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f003 f8b3 	bl	800a474 <HAL_I2C_Master_Transmit>
}
 800730e:	bf00      	nop
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <PCA9635_SetAll>:

void PCA9635_SetAll(I2C_HandleTypeDef* hi2c, uint16_t addr, PCA9635_LEDOnState_t state[16])
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b088      	sub	sp, #32
 800731a:	af02      	add	r7, sp, #8
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	460b      	mov	r3, r1
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 8007324:	2394      	movs	r3, #148	; 0x94
 8007326:	743b      	strb	r3, [r7, #16]
  writeVals[1] = state[0] + (state[1] << 2) + (state[2] << 4) + (state[3] << 6);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	781a      	ldrb	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3301      	adds	r3, #1
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	b2db      	uxtb	r3, r3
 8007336:	4413      	add	r3, r2
 8007338:	b2da      	uxtb	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3302      	adds	r3, #2
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4413      	add	r3, r2
 8007346:	b2da      	uxtb	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3303      	adds	r3, #3
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	019b      	lsls	r3, r3, #6
 8007350:	b2db      	uxtb	r3, r3
 8007352:	4413      	add	r3, r2
 8007354:	b2db      	uxtb	r3, r3
 8007356:	747b      	strb	r3, [r7, #17]
  writeVals[2] = state[4] + (state[5] << 2) + (state[6] << 4) + (state[7] << 6);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3304      	adds	r3, #4
 800735c:	781a      	ldrb	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3305      	adds	r3, #5
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	b2db      	uxtb	r3, r3
 8007368:	4413      	add	r3, r2
 800736a:	b2da      	uxtb	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3306      	adds	r3, #6
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	b2db      	uxtb	r3, r3
 8007376:	4413      	add	r3, r2
 8007378:	b2da      	uxtb	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3307      	adds	r3, #7
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	019b      	lsls	r3, r3, #6
 8007382:	b2db      	uxtb	r3, r3
 8007384:	4413      	add	r3, r2
 8007386:	b2db      	uxtb	r3, r3
 8007388:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = state[8] + (state[9] << 2) + (state[10] << 4) + (state[11] << 6);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3308      	adds	r3, #8
 800738e:	781a      	ldrb	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3309      	adds	r3, #9
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	b2db      	uxtb	r3, r3
 800739a:	4413      	add	r3, r2
 800739c:	b2da      	uxtb	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	330a      	adds	r3, #10
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	4413      	add	r3, r2
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	330b      	adds	r3, #11
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	019b      	lsls	r3, r3, #6
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	4413      	add	r3, r2
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = state[12] + (state[13] << 2) + (state[14] << 4) + (state[15] << 6);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	330c      	adds	r3, #12
 80073c0:	781a      	ldrb	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	330d      	adds	r3, #13
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	4413      	add	r3, r2
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	330e      	adds	r3, #14
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	4413      	add	r3, r2
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	330f      	adds	r3, #15
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	019b      	lsls	r3, r3, #6
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	4413      	add	r3, r2
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, 100);
 80073ee:	897b      	ldrh	r3, [r7, #10]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	b299      	uxth	r1, r3
 80073f4:	f107 0210 	add.w	r2, r7, #16
 80073f8:	2364      	movs	r3, #100	; 0x64
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	2305      	movs	r3, #5
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f003 f838 	bl	800a474 <HAL_I2C_Master_Transmit>
}
 8007404:	bf00      	nop
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <PCAL9554B_WriteReg8>:
 */

#include "pcal9554b.h"

void PCAL9554B_WriteReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint8_t val)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af02      	add	r7, sp, #8
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	4608      	mov	r0, r1
 8007416:	4611      	mov	r1, r2
 8007418:	461a      	mov	r2, r3
 800741a:	4603      	mov	r3, r0
 800741c:	807b      	strh	r3, [r7, #2]
 800741e:	460b      	mov	r3, r1
 8007420:	707b      	strb	r3, [r7, #1]
 8007422:	4613      	mov	r3, r2
 8007424:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 8007426:	787b      	ldrb	r3, [r7, #1]
 8007428:	733b      	strb	r3, [r7, #12]
  writeVals[1] = val;
 800742a:	783b      	ldrb	r3, [r7, #0]
 800742c:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 800742e:	887b      	ldrh	r3, [r7, #2]
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	b299      	uxth	r1, r3
 8007434:	f107 020c 	add.w	r2, r7, #12
 8007438:	2364      	movs	r3, #100	; 0x64
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	2302      	movs	r3, #2
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f003 f818 	bl	800a474 <HAL_I2C_Master_Transmit>
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <PCAL9554B_ReadReg8>:

uint8_t PCAL9554B_ReadReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af02      	add	r7, sp, #8
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	807b      	strh	r3, [r7, #2]
 8007458:	4613      	mov	r3, r2
 800745a:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[1];
  uint8_t readVals[1];

  uint8_t val = 0xFF;
 800745c:	23ff      	movs	r3, #255	; 0xff
 800745e:	73fb      	strb	r3, [r7, #15]

  writeVals[0] = reg;
 8007460:	787b      	ldrb	r3, [r7, #1]
 8007462:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, 100);
 8007464:	887b      	ldrh	r3, [r7, #2]
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	b299      	uxth	r1, r3
 800746a:	f107 020c 	add.w	r2, r7, #12
 800746e:	2364      	movs	r3, #100	; 0x64
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	2301      	movs	r3, #1
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f002 fffd 	bl	800a474 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 1, 100);
 800747a:	887b      	ldrh	r3, [r7, #2]
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	b299      	uxth	r1, r3
 8007480:	f107 0208 	add.w	r2, r7, #8
 8007484:	2364      	movs	r3, #100	; 0x64
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	2301      	movs	r3, #1
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f003 f8e6 	bl	800a65c <HAL_I2C_Master_Receive>

  val = readVals[0];
 8007490:	7a3b      	ldrb	r3, [r7, #8]
 8007492:	73fb      	strb	r3, [r7, #15]

  return val;
 8007494:	7bfb      	ldrb	r3, [r7, #15]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <TurningOff>:

#include "profet.h"

//Transient state
static void TurningOff(volatile ProfetTypeDef *profet)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	899b      	ldrh	r3, [r3, #12]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	43da      	mvns	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	8819      	ldrh	r1, [r3, #0]
 80074b4:	b209      	sxth	r1, r1
 80074b6:	b212      	sxth	r2, r2
 80074b8:	400a      	ands	r2, r1
 80074ba:	b212      	sxth	r2, r2
 80074bc:	b292      	uxth	r2, r2
 80074be:	801a      	strh	r2, [r3, #0]
  profet->eState = OFF;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	705a      	strb	r2, [r3, #1]
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <Off>:

static void Off(volatile ProfetTypeDef *profet)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  profet->cState = 'O';
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	224f      	movs	r2, #79	; 0x4f
 80074de:	70da      	strb	r2, [r3, #3]

  //Short circuit to battery check
  //TODO: Collapsing field will trigger this
  if (profet->nIL > 0.1) {
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	8c1b      	ldrh	r3, [r3, #32]
    //profet->eState = SHORT_CIRCUITING;
  }

  //Check for turn on
  if (profet->eReqState == ON) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	789b      	ldrb	r3, [r3, #2]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d102      	bne.n	80074f4 <Off+0x22>
    profet->eState = TURNING_ON;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2208      	movs	r2, #8
 80074f2:	705a      	strb	r2, [r3, #1]
  }
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <InRushing>:

//Transient state
static void InRushing(volatile ProfetTypeDef *profet)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	899b      	ldrh	r3, [r3, #12]
 800750c:	b299      	uxth	r1, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	881a      	ldrh	r2, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	b292      	uxth	r2, r2
 8007518:	801a      	strh	r2, [r3, #0]
  profet->nIL_On_Time = HAL_GetTick();
 800751a:	f000 fb6f 	bl	8007bfc <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	61da      	str	r2, [r3, #28]
  profet->eState  = IN_RUSH;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	705a      	strb	r2, [r3, #1]
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <InRush>:

static void InRush(volatile ProfetTypeDef *profet)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  if (profet->nIL > profet->nIL_InRush_Limit) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	8c1b      	ldrh	r3, [r3, #32]
 800753e:	b29a      	uxth	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	8adb      	ldrh	r3, [r3, #22]
 8007544:	b29b      	uxth	r3, r3
 8007546:	429a      	cmp	r2, r3
 8007548:	d902      	bls.n	8007550 <InRush+0x1e>
    profet->eState = OVERCURRENTING;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	220b      	movs	r2, #11
 800754e:	705a      	strb	r2, [r3, #1]
  }
  if((HAL_GetTick() - profet->nIL_On_Time) > profet->nIL_InRush_Time){
 8007550:	f000 fb54 	bl	8007bfc <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	8b12      	ldrh	r2, [r2, #24]
 8007560:	b292      	uxth	r2, r2
 8007562:	4293      	cmp	r3, r2
 8007564:	d902      	bls.n	800756c <InRush+0x3a>
    profet->eState = TURNING_ON;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2208      	movs	r2, #8
 800756a:	705a      	strb	r2, [r3, #1]
  }
  //Check for turn off
  if (profet->eReqState == OFF) {
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	789b      	ldrb	r3, [r3, #2]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <InRush+0x4a>
    profet->eState = TURNING_OFF;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2207      	movs	r2, #7
 800757a:	705a      	strb	r2, [r3, #1]
  }
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <TurningOn>:

//Transient state
static void TurningOn(volatile ProfetTypeDef *profet)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	899b      	ldrh	r3, [r3, #12]
 8007590:	b299      	uxth	r1, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	881a      	ldrh	r2, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	b292      	uxth	r2, r2
 800759c:	801a      	strh	r2, [r3, #0]
  profet->eState = ON;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	705a      	strb	r2, [r3, #1]
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <On>:

static void On(volatile ProfetTypeDef *profet)
{
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  profet->cState = '|';
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	227c      	movs	r2, #124	; 0x7c
 80075bc:	70da      	strb	r2, [r3, #3]

  //TODO: Dead short vs open load
  //Dead short will register no current
  //How to differentiate between open load?
  if (profet->nIL == 0) {
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8c1b      	ldrh	r3, [r3, #32]
  }

  //Check for fault (device overcurrent/overtemp/short)
  //IL will be very high
  //TODO: Calculate value from datasheet
  if (profet->nIS_Avg > 30000) {
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	89db      	ldrh	r3, [r3, #14]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	f247 5230 	movw	r2, #30000	; 0x7530
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d902      	bls.n	80075d6 <On+0x26>
    profet->eState = FAULTING;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	220c      	movs	r2, #12
 80075d4:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	789b      	ldrb	r3, [r3, #2]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <On+0x36>
    profet->eState = TURNING_OFF;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2207      	movs	r2, #7
 80075e4:	705a      	strb	r2, [r3, #1]
  }

  if ((profet->nIL > profet->nIL_Limit) && (profet->nOC_Detected == 0)){
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	8c1b      	ldrh	r3, [r3, #32]
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8a9b      	ldrh	r3, [r3, #20]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d90e      	bls.n	8007614 <On+0x64>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d108      	bne.n	8007614 <On+0x64>
    profet->nIL_On_Time = HAL_GetTick();
 8007602:	f000 fafb 	bl	8007bfc <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	61da      	str	r2, [r3, #28]
    profet->nOC_Detected = 1;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  if ((profet->nIL < profet->nIL_Limit) && (profet->nOC_Detected > 0)){
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8c1b      	ldrh	r3, [r3, #32]
 8007618:	b29a      	uxth	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8a9b      	ldrh	r3, [r3, #20]
 800761e:	b29b      	uxth	r3, r3
 8007620:	429a      	cmp	r2, r3
 8007622:	d209      	bcs.n	8007638 <On+0x88>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <On+0x88>
    profet->nOC_Detected = 0;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  if(profet->nOC_Detected > 0){
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d017      	beq.n	8007674 <On+0xc4>
    if((HAL_GetTick() - profet->nIL_On_Time) > GetTripTime(profet->eModel, profet->nIL, profet->nIL_Limit)){
 8007644:	f000 fada 	bl	8007bfc <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	1ad4      	subs	r4, r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	b2d8      	uxtb	r0, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8c1b      	ldrh	r3, [r3, #32]
 800765a:	b299      	uxth	r1, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	8a9b      	ldrh	r3, [r3, #20]
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	f000 f9b0 	bl	80079c8 <GetTripTime>
 8007668:	4603      	mov	r3, r0
 800766a:	429c      	cmp	r4, r3
 800766c:	d902      	bls.n	8007674 <On+0xc4>
      profet->eState = OVERCURRENTING;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	220b      	movs	r2, #11
 8007672:	705a      	strb	r2, [r3, #1]
    }
  }
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	bd90      	pop	{r4, r7, pc}

0800767c <Overcurrenting>:

//Transient state
static void Overcurrenting(volatile ProfetTypeDef *profet)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	8c1b      	ldrh	r3, [r3, #32]
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	849a      	strh	r2, [r3, #36]	; 0x24
  *profet->nIN_Port &= ~profet->nIN_Pin;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	899b      	ldrh	r3, [r3, #12]
 8007692:	b29b      	uxth	r3, r3
 8007694:	43da      	mvns	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	8819      	ldrh	r1, [r3, #0]
 800769c:	b209      	sxth	r1, r1
 800769e:	b212      	sxth	r2, r2
 80076a0:	400a      	ands	r2, r1
 80076a2:	b212      	sxth	r2, r2
 80076a4:	b292      	uxth	r2, r2
 80076a6:	801a      	strh	r2, [r3, #0]
  profet->nOC_TriggerTime = HAL_GetTick();
 80076a8:	f000 faa8 	bl	8007bfc <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	62da      	str	r2, [r3, #44]	; 0x2c
  profet->nOC_ResetCount++;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	3301      	adds	r3, #1
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  profet->eState = OVERCURRENT;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2204      	movs	r2, #4
 80076c8:	705a      	strb	r2, [r3, #1]
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <Overcurrent>:

static void Overcurrent(volatile ProfetTypeDef *profet)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  profet->cState = 'C';
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2243      	movs	r2, #67	; 0x43
 80076de:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	899b      	ldrh	r3, [r3, #12]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	43da      	mvns	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	8819      	ldrh	r1, [r3, #0]
 80076ee:	b209      	sxth	r1, r1
 80076f0:	b212      	sxth	r2, r2
 80076f2:	400a      	ands	r2, r1
 80076f4:	b212      	sxth	r2, r2
 80076f6:	b292      	uxth	r2, r2
 80076f8:	801a      	strh	r2, [r3, #0]
  if(profet->nOC_ResetCount <= profet->nOC_ResetLimit){
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007700:	b2da      	uxtb	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007708:	b2db      	uxtb	r3, r3
 800770a:	429a      	cmp	r2, r3
 800770c:	d80e      	bhi.n	800772c <Overcurrent+0x5a>
    if((HAL_GetTick() - profet->nOC_TriggerTime) > profet->nOC_ResetTime){
 800770e:	f000 fa75 	bl	8007bfc <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800771e:	b292      	uxth	r2, r2
 8007720:	4293      	cmp	r3, r2
 8007722:	d906      	bls.n	8007732 <Overcurrent+0x60>
      profet->eState = IN_RUSHING;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2209      	movs	r2, #9
 8007728:	705a      	strb	r2, [r3, #1]
 800772a:	e002      	b.n	8007732 <Overcurrent+0x60>
    }
  }
  else{
    profet->eState = SUSPENDING;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	220d      	movs	r2, #13
 8007730:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	789b      	ldrb	r3, [r3, #2]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d106      	bne.n	800774a <Overcurrent+0x78>
    profet->nOC_ResetCount = 0;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    profet->eState = TURNING_OFF;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2207      	movs	r2, #7
 8007748:	705a      	strb	r2, [r3, #1]
  }
}
 800774a:	bf00      	nop
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <ShortCircuiting>:

//Transient state
static void ShortCircuiting(volatile ProfetTypeDef *profet)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	8c1b      	ldrh	r3, [r3, #32]
 800775e:	b29a      	uxth	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	849a      	strh	r2, [r3, #36]	; 0x24
  profet->eState = SHORT_CIRCUIT;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2203      	movs	r2, #3
 8007768:	705a      	strb	r2, [r3, #1]
}
 800776a:	bf00      	nop
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <ShortCircuit>:

static void ShortCircuit(volatile ProfetTypeDef *profet)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  profet->cState = 'S';
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2253      	movs	r2, #83	; 0x53
 8007782:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	899b      	ldrh	r3, [r3, #12]
 8007788:	b29b      	uxth	r3, r3
 800778a:	43da      	mvns	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	8819      	ldrh	r1, [r3, #0]
 8007792:	b209      	sxth	r1, r1
 8007794:	b212      	sxth	r2, r2
 8007796:	400a      	ands	r2, r1
 8007798:	b212      	sxth	r2, r2
 800779a:	b292      	uxth	r2, r2
 800779c:	801a      	strh	r2, [r3, #0]
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <Suspending>:

//Transient state
static void Suspending(volatile ProfetTypeDef *profet)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	899b      	ldrh	r3, [r3, #12]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	43da      	mvns	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	8819      	ldrh	r1, [r3, #0]
 80077c0:	b209      	sxth	r1, r1
 80077c2:	b212      	sxth	r2, r2
 80077c4:	400a      	ands	r2, r1
 80077c6:	b212      	sxth	r2, r2
 80077c8:	b292      	uxth	r2, r2
 80077ca:	801a      	strh	r2, [r3, #0]
  profet->eState = SUSPENDED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2206      	movs	r2, #6
 80077d0:	705a      	strb	r2, [r3, #1]
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <Suspended>:

static void Suspended(volatile ProfetTypeDef *profet)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  profet->cState = 'X';
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2258      	movs	r2, #88	; 0x58
 80077ea:	70da      	strb	r2, [r3, #3]
  //TODO: replace with a reset
  if (profet->eReqState == OFF){
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	789b      	ldrb	r3, [r3, #2]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <Suspended+0x26>
    profet->nOC_ResetCount = 0;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    profet->eState = TURNING_OFF;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2207      	movs	r2, #7
 8007802:	705a      	strb	r2, [r3, #1]
  }
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <Faulting>:

//Transient state
static void Faulting(volatile ProfetTypeDef *profet)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	899b      	ldrh	r3, [r3, #12]
 800781c:	b29b      	uxth	r3, r3
 800781e:	43da      	mvns	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	8819      	ldrh	r1, [r3, #0]
 8007826:	b209      	sxth	r1, r1
 8007828:	b212      	sxth	r2, r2
 800782a:	400a      	ands	r2, r1
 800782c:	b212      	sxth	r2, r2
 800782e:	b292      	uxth	r2, r2
 8007830:	801a      	strh	r2, [r3, #0]
  profet->eState = FAULT;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2205      	movs	r2, #5
 8007836:	705a      	strb	r2, [r3, #1]
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <Fault>:

static void Fault(volatile ProfetTypeDef *profet)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  profet->cState = 'F';
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2246      	movs	r2, #70	; 0x46
 8007850:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	899b      	ldrh	r3, [r3, #12]
 8007856:	b29b      	uxth	r3, r3
 8007858:	43da      	mvns	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	8819      	ldrh	r1, [r3, #0]
 8007860:	b209      	sxth	r1, r1
 8007862:	b212      	sxth	r2, r2
 8007864:	400a      	ands	r2, r1
 8007866:	b212      	sxth	r2, r2
 8007868:	b292      	uxth	r2, r2
 800786a:	801a      	strh	r2, [r3, #0]
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <Profet_SM>:

void Profet_SM(volatile ProfetTypeDef *profet) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]

  switch (profet->eState) {
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b0d      	cmp	r3, #13
 8007888:	d856      	bhi.n	8007938 <Profet_SM+0xc0>
 800788a:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <Profet_SM+0x18>)
 800788c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007890:	080078d1 	.word	0x080078d1
 8007894:	080078f1 	.word	0x080078f1
 8007898:	080078e1 	.word	0x080078e1
 800789c:	08007901 	.word	0x08007901
 80078a0:	08007911 	.word	0x08007911
 80078a4:	08007921 	.word	0x08007921
 80078a8:	08007931 	.word	0x08007931
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	080078e9 	.word	0x080078e9
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078f9 	.word	0x080078f9
 80078bc:	08007909 	.word	0x08007909
 80078c0:	08007919 	.word	0x08007919
 80078c4:	08007929 	.word	0x08007929
  case TURNING_OFF:
    TurningOff(profet);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff fde8 	bl	800749e <TurningOff>
    break;
 80078ce:	e033      	b.n	8007938 <Profet_SM+0xc0>

  case OFF:
    Off(profet);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff fdfe 	bl	80074d2 <Off>
    break;
 80078d6:	e02f      	b.n	8007938 <Profet_SM+0xc0>

  case IN_RUSHING:
    InRushing(profet);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff fe11 	bl	8007500 <InRushing>
    break;
 80078de:	e02b      	b.n	8007938 <Profet_SM+0xc0>

  case IN_RUSH:
    InRush(profet);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff fe26 	bl	8007532 <InRush>
    break;
 80078e6:	e027      	b.n	8007938 <Profet_SM+0xc0>

  case TURNING_ON:
    TurningOn(profet);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fe4b 	bl	8007584 <TurningOn>
    break;
 80078ee:	e023      	b.n	8007938 <Profet_SM+0xc0>

  case ON:
    On(profet);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff fe5d 	bl	80075b0 <On>
    break;
 80078f6:	e01f      	b.n	8007938 <Profet_SM+0xc0>

  case SHORT_CIRCUITING:
    ShortCircuiting(profet);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff ff2a 	bl	8007752 <ShortCircuiting>
    break;
 80078fe:	e01b      	b.n	8007938 <Profet_SM+0xc0>

  case SHORT_CIRCUIT:
    ShortCircuit(profet);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff ff38 	bl	8007776 <ShortCircuit>
    break;
 8007906:	e017      	b.n	8007938 <Profet_SM+0xc0>

  case OVERCURRENTING:
    Overcurrenting(profet);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff feb7 	bl	800767c <Overcurrenting>
    break;
 800790e:	e013      	b.n	8007938 <Profet_SM+0xc0>

  case OVERCURRENT:
    Overcurrent(profet);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff fede 	bl	80076d2 <Overcurrent>
    break;
 8007916:	e00f      	b.n	8007938 <Profet_SM+0xc0>

  case FAULTING:
    Faulting(profet);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff ff79 	bl	8007810 <Faulting>
    break;
 800791e:	e00b      	b.n	8007938 <Profet_SM+0xc0>

  case FAULT:
    Fault(profet);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff ff8f 	bl	8007844 <Fault>
    break;
 8007926:	e007      	b.n	8007938 <Profet_SM+0xc0>

  case SUSPENDING:
    Suspending(profet);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff ff3e 	bl	80077aa <Suspending>
    break;
 800792e:	e003      	b.n	8007938 <Profet_SM+0xc0>

  case SUSPENDED:
    Suspended(profet);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff ff54 	bl	80077de <Suspended>
    break;
 8007936:	bf00      	nop

  }
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <Profet_UpdateIS>:

void Profet_UpdateIS(volatile ProfetTypeDef *profet, uint16_t newVal)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	807b      	strh	r3, [r7, #2]
  //Moving average without array or dividing
  //Store the new val, incase we need a non-filtered val elsewhere
  profet->nIS = newVal;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	887a      	ldrh	r2, [r7, #2]
 8007950:	845a      	strh	r2, [r3, #34]	; 0x22
  //Add new value to old sum
  profet->nIS_Sum += profet->nIS;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007956:	b29a      	uxth	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	441a      	add	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	611a      	str	r2, [r3, #16]
  //Shift sum by 1 which is equal to dividing by 2
  profet->nIS_Avg = profet->nIS_Sum >> 1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	085b      	lsrs	r3, r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	81da      	strh	r2, [r3, #14]
  //Remove the average from the sum, otherwise sum always goes up never down
  profet->nIS_Sum -= profet->nIS_Avg;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	89db      	ldrh	r3, [r3, #14]
 8007972:	b29a      	uxth	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	1a9a      	subs	r2, r3, r2
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	611a      	str	r2, [r3, #16]

  //Convert IS to IL (actual current)
  profet->nIL = (uint16_t)(((float)profet->nIS_Avg * profet->fKilis) / 100.0);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	89db      	ldrh	r3, [r3, #14]
 8007982:	b29b      	uxth	r3, r3
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007996:	ee17 0a90 	vmov	r0, s15
 800799a:	f7f8 fd7d 	bl	8000498 <__aeabi_f2d>
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <Profet_UpdateIS+0x84>)
 80079a4:	f7f8 fefa 	bl	800079c <__aeabi_ddiv>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4610      	mov	r0, r2
 80079ae:	4619      	mov	r1, r3
 80079b0:	f7f8 ffdc 	bl	800096c <__aeabi_d2uiz>
 80079b4:	4603      	mov	r3, r0
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	841a      	strh	r2, [r3, #32]
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40590000 	.word	0x40590000

080079c8 <GetTripTime>:

uint32_t GetTripTime(ProfetModelTypeDef eModel, uint16_t nIL, uint16_t nMaxIL)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	71fb      	strb	r3, [r7, #7]
 80079d2:	460b      	mov	r3, r1
 80079d4:	80bb      	strh	r3, [r7, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	807b      	strh	r3, [r7, #2]
  //Multiply by 10 to include first decimal point
  // 25A / 5A = 5
  // 5 * 10 = 50 nOCMult
  //Subtract 10 to start at index 0
  // nOCMult = 40
  uint8_t nOCMult = (uint8_t)(((float)nIL / (float)nMaxIL) * 10.0);
 80079da:	88bb      	ldrh	r3, [r7, #4]
 80079dc:	ee07 3a90 	vmov	s15, r3
 80079e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079e4:	887b      	ldrh	r3, [r7, #2]
 80079e6:	ee07 3a90 	vmov	s15, r3
 80079ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80079f2:	ee16 0a90 	vmov	r0, s13
 80079f6:	f7f8 fd4f 	bl	8000498 <__aeabi_f2d>
 80079fa:	f04f 0200 	mov.w	r2, #0
 80079fe:	4b2b      	ldr	r3, [pc, #172]	; (8007aac <GetTripTime+0xe4>)
 8007a00:	f7f8 fda2 	bl	8000548 <__aeabi_dmul>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	f7f8 ffae 	bl	800096c <__aeabi_d2uiz>
 8007a10:	4603      	mov	r3, r0
 8007a12:	75fb      	strb	r3, [r7, #23]
  nOCMult -= 10; //Subtract 10 to start at index 0
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	3b0a      	subs	r3, #10
 8007a18:	75fb      	strb	r3, [r7, #23]

  if(nOCMult < 0)
    nOCMult = 0;
  if(nOCMult > 91)
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	2b5b      	cmp	r3, #91	; 0x5b
 8007a1e:	d901      	bls.n	8007a24 <GetTripTime+0x5c>
    nOCMult = 91;
 8007a20:	235b      	movs	r3, #91	; 0x5b
 8007a22:	75fb      	strb	r3, [r7, #23]
      0x0273U,0x0260U,0x024EU,0x023DU,0x022DU,0x021DU,0x020EU,0x0200U,0x01F2U,0x01E5U,0x01D8U,
      0x01CBU,0x01C0U,0x01B4U,0x01A9U,0x019EU,0x0194U,0x018AU,0x0181U,0x0177U,0x016EU,0x0166U,
      0x015DU,0x0155U,0x014EU
  };

  uint16_t nTripTimeRaw = fTripTimeLookupTable[nOCMult];
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	4a22      	ldr	r2, [pc, #136]	; (8007ab0 <GetTripTime+0xe8>)
 8007a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a2c:	81fb      	strh	r3, [r7, #14]
       0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,
       1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,
       1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.40
   };

  uint32_t nTripTime = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60bb      	str	r3, [r7, #8]
  float fTripTimeMult = 0.0;
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]

  switch(eModel){
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d005      	beq.n	8007a4a <GetTripTime+0x82>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	db21      	blt.n	8007a86 <GetTripTime+0xbe>
 8007a42:	3b01      	subs	r3, #1
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d81e      	bhi.n	8007a86 <GetTripTime+0xbe>
 8007a48:	e00e      	b.n	8007a68 <GetTripTime+0xa0>
  case BTS7002_1EPP:
    if(nMaxIL < 200)
 8007a4a:	887b      	ldrh	r3, [r7, #2]
 8007a4c:	2bc7      	cmp	r3, #199	; 0xc7
 8007a4e:	d806      	bhi.n	8007a5e <GetTripTime+0x96>
      fTripTimeMult = fTripTimeMult_7002[nMaxIL];
 8007a50:	887b      	ldrh	r3, [r7, #2]
 8007a52:	4a18      	ldr	r2, [pc, #96]	; (8007ab4 <GetTripTime+0xec>)
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7002[199];
    break;
 8007a5c:	e013      	b.n	8007a86 <GetTripTime+0xbe>
      fTripTimeMult = fTripTimeMult_7002[199];
 8007a5e:	4b15      	ldr	r3, [pc, #84]	; (8007ab4 <GetTripTime+0xec>)
 8007a60:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 8007a64:	613b      	str	r3, [r7, #16]
    break;
 8007a66:	e00e      	b.n	8007a86 <GetTripTime+0xbe>

  case BTS7008_2EPA_CH1:
  case BTS7008_2EPA_CH2:
    if(nMaxIL < 80)
 8007a68:	887b      	ldrh	r3, [r7, #2]
 8007a6a:	2b4f      	cmp	r3, #79	; 0x4f
 8007a6c:	d806      	bhi.n	8007a7c <GetTripTime+0xb4>
      fTripTimeMult = fTripTimeMult_7008[nMaxIL];
 8007a6e:	887b      	ldrh	r3, [r7, #2]
 8007a70:	4a11      	ldr	r2, [pc, #68]	; (8007ab8 <GetTripTime+0xf0>)
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7008[79];
    break;
 8007a7a:	e003      	b.n	8007a84 <GetTripTime+0xbc>
      fTripTimeMult = fTripTimeMult_7008[79];
 8007a7c:	4b0e      	ldr	r3, [pc, #56]	; (8007ab8 <GetTripTime+0xf0>)
 8007a7e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8007a82:	613b      	str	r3, [r7, #16]
    break;
 8007a84:	bf00      	nop
  }

  nTripTime = (uint32_t)(nTripTimeRaw * fTripTimeMult);
 8007a86:	89fb      	ldrh	r3, [r7, #14]
 8007a88:	ee07 3a90 	vmov	s15, r3
 8007a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a90:	edd7 7a04 	vldr	s15, [r7, #16]
 8007a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9c:	ee17 3a90 	vmov	r3, s15
 8007aa0:	60bb      	str	r3, [r7, #8]

  return nTripTime;
 8007aa2:	68bb      	ldr	r3, [r7, #8]

}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40240000 	.word	0x40240000
 8007ab0:	0801675c 	.word	0x0801675c
 8007ab4:	08016814 	.word	0x08016814
 8007ab8:	08016b34 	.word	0x08016b34

08007abc <CheckPushbutton>:
 */

#include "pushbutton.h"

void CheckPushbutton(PushbuttonConfig_t* pb, PushbuttonMode_t mode, uint16_t nInput, uint16_t* nOutput, uint16_t nDebounceTime)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	607b      	str	r3, [r7, #4]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	72fb      	strb	r3, [r7, #11]
 8007aca:	4613      	mov	r3, r2
 8007acc:	813b      	strh	r3, [r7, #8]
  //=======================================================
  //Debounce and latch logic
  //=======================================================

  if(mode == MODE_MOMENTARY)
 8007ace:	7afb      	ldrb	r3, [r7, #11]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d132      	bne.n	8007b3a <CheckPushbutton+0x7e>
  {
    //Check for button change
    //Store trigger time
    if(nInput != pb->nLastState)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	893a      	ldrh	r2, [r7, #8]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d015      	beq.n	8007b0c <CheckPushbutton+0x50>
    {
      if(    ((nInput == 1) && (*nOutput == 0)) //Rising
 8007ae0:	893b      	ldrh	r3, [r7, #8]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d103      	bne.n	8007aee <CheckPushbutton+0x32>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d006      	beq.n	8007afc <CheckPushbutton+0x40>
          || ((nInput == 0) && (*nOutput == 1))) //Falling
 8007aee:	893b      	ldrh	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10b      	bne.n	8007b0c <CheckPushbutton+0x50>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d107      	bne.n	8007b0c <CheckPushbutton+0x50>
      {
        pb->nLastTrigTime = HAL_GetTick();
 8007afc:	f000 f87e 	bl	8007bfc <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	605a      	str	r2, [r3, #4]
        pb->nCheckTime = 1;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	721a      	strb	r2, [r3, #8]
      }
    }

    pb->nLastState = nInput;
 8007b0c:	893b      	ldrh	r3, [r7, #8]
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	7a1b      	ldrb	r3, [r3, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00e      	beq.n	8007b3a <CheckPushbutton+0x7e>
 8007b1c:	f000 f86e 	bl	8007bfc <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	1ad2      	subs	r2, r2, r3
 8007b28:	8b3b      	ldrh	r3, [r7, #24]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d905      	bls.n	8007b3a <CheckPushbutton+0x7e>
    {
      pb->nCheckTime = 0;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	721a      	strb	r2, [r3, #8]
      *nOutput = nInput;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	893a      	ldrh	r2, [r7, #8]
 8007b38:	801a      	strh	r2, [r3, #0]
    }

    //Don't change output
  }

  if(mode == MODE_LATCHING)
 8007b3a:	7afb      	ldrb	r3, [r7, #11]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d12e      	bne.n	8007b9e <CheckPushbutton+0xe2>
  {
    //Check for rising trigger
    //Store trigger time
    if((nInput != pb->nLastState) && (nInput == 1))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	893a      	ldrh	r2, [r7, #8]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d00a      	beq.n	8007b62 <CheckPushbutton+0xa6>
 8007b4c:	893b      	ldrh	r3, [r7, #8]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d107      	bne.n	8007b62 <CheckPushbutton+0xa6>
    {
      pb->nLastTrigTime = HAL_GetTick();
 8007b52:	f000 f853 	bl	8007bfc <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	605a      	str	r2, [r3, #4]
      pb->nCheckTime = 1;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	721a      	strb	r2, [r3, #8]
    }

    pb->nLastState = nInput;
 8007b62:	893b      	ldrh	r3, [r7, #8]
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	7a1b      	ldrb	r3, [r3, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d015      	beq.n	8007b9e <CheckPushbutton+0xe2>
 8007b72:	f000 f843 	bl	8007bfc <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	1ad2      	subs	r2, r2, r3
 8007b7e:	8b3b      	ldrh	r3, [r7, #24]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d90c      	bls.n	8007b9e <CheckPushbutton+0xe2>
    {
      pb->nCheckTime = 0;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	721a      	strb	r2, [r3, #8]
      *nOutput = !*nOutput;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bf0c      	ite	eq
 8007b92:	2301      	moveq	r3, #1
 8007b94:	2300      	movne	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007bac:	4b08      	ldr	r3, [pc, #32]	; (8007bd0 <HAL_Init+0x28>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a07      	ldr	r2, [pc, #28]	; (8007bd0 <HAL_Init+0x28>)
 8007bb2:	f043 0310 	orr.w	r3, r3, #16
 8007bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007bb8:	2003      	movs	r0, #3
 8007bba:	f001 ff4c 	bl	8009a56 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	f7fe fdce 	bl	8006760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007bc4:	f7fe fbb0 	bl	8006328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40022000 	.word	0x40022000

08007bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007bd8:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <HAL_IncTick+0x20>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4b06      	ldr	r3, [pc, #24]	; (8007bf8 <HAL_IncTick+0x24>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4413      	add	r3, r2
 8007be4:	4a04      	ldr	r2, [pc, #16]	; (8007bf8 <HAL_IncTick+0x24>)
 8007be6:	6013      	str	r3, [r2, #0]
}
 8007be8:	bf00      	nop
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000018 	.word	0x20000018
 8007bf8:	200026a0 	.word	0x200026a0

08007bfc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
  return uwTick;  
 8007c00:	4b03      	ldr	r3, [pc, #12]	; (8007c10 <HAL_GetTick+0x14>)
 8007c02:	681b      	ldr	r3, [r3, #0]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	200026a0 	.word	0x200026a0

08007c14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b09a      	sub	sp, #104	; 0x68
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e1c9      	b.n	8008004 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d176      	bne.n	8007d70 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d152      	bne.n	8007d30 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7fe fb67 	bl	8006378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d13b      	bne.n	8007d30 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 ff6d 	bl	8008b98 <ADC_Disable>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	f003 0310 	and.w	r3, r3, #16
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d12f      	bne.n	8007d30 <HAL_ADC_Init+0xe0>
 8007cd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d12b      	bne.n	8007d30 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cdc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007ce0:	f023 0302 	bic.w	r3, r3, #2
 8007ce4:	f043 0202 	orr.w	r2, r3, #2
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007cfa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007d0a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007d0c:	4b86      	ldr	r3, [pc, #536]	; (8007f28 <HAL_ADC_Init+0x2d8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a86      	ldr	r2, [pc, #536]	; (8007f2c <HAL_ADC_Init+0x2dc>)
 8007d12:	fba2 2303 	umull	r2, r3, r2, r3
 8007d16:	0c9a      	lsrs	r2, r3, #18
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007d22:	e002      	b.n	8007d2a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1f9      	bne.n	8007d24 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d007      	beq.n	8007d4e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8007d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d4c:	d110      	bne.n	8007d70 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	f023 0312 	bic.w	r3, r3, #18
 8007d56:	f043 0210 	orr.w	r2, r3, #16
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d62:	f043 0201 	orr.w	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f040 8136 	bne.w	8007fea <HAL_ADC_Init+0x39a>
 8007d7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f040 8131 	bne.w	8007fea <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f040 8129 	bne.w	8007fea <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007da0:	f043 0202 	orr.w	r2, r3, #2
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007db0:	d004      	beq.n	8007dbc <HAL_ADC_Init+0x16c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a5e      	ldr	r2, [pc, #376]	; (8007f30 <HAL_ADC_Init+0x2e0>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d101      	bne.n	8007dc0 <HAL_ADC_Init+0x170>
 8007dbc:	4b5d      	ldr	r3, [pc, #372]	; (8007f34 <HAL_ADC_Init+0x2e4>)
 8007dbe:	e000      	b.n	8007dc2 <HAL_ADC_Init+0x172>
 8007dc0:	4b5d      	ldr	r3, [pc, #372]	; (8007f38 <HAL_ADC_Init+0x2e8>)
 8007dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dcc:	d102      	bne.n	8007dd4 <HAL_ADC_Init+0x184>
 8007dce:	4b58      	ldr	r3, [pc, #352]	; (8007f30 <HAL_ADC_Init+0x2e0>)
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	e01a      	b.n	8007e0a <HAL_ADC_Init+0x1ba>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a55      	ldr	r2, [pc, #340]	; (8007f30 <HAL_ADC_Init+0x2e0>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d103      	bne.n	8007de6 <HAL_ADC_Init+0x196>
 8007dde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e011      	b.n	8007e0a <HAL_ADC_Init+0x1ba>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a54      	ldr	r2, [pc, #336]	; (8007f3c <HAL_ADC_Init+0x2ec>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d102      	bne.n	8007df6 <HAL_ADC_Init+0x1a6>
 8007df0:	4b53      	ldr	r3, [pc, #332]	; (8007f40 <HAL_ADC_Init+0x2f0>)
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	e009      	b.n	8007e0a <HAL_ADC_Init+0x1ba>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a51      	ldr	r2, [pc, #324]	; (8007f40 <HAL_ADC_Init+0x2f0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d102      	bne.n	8007e06 <HAL_ADC_Init+0x1b6>
 8007e00:	4b4e      	ldr	r3, [pc, #312]	; (8007f3c <HAL_ADC_Init+0x2ec>)
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	e001      	b.n	8007e0a <HAL_ADC_Init+0x1ba>
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d108      	bne.n	8007e2a <HAL_ADC_Init+0x1da>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d101      	bne.n	8007e2a <HAL_ADC_Init+0x1da>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <HAL_ADC_Init+0x1dc>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d11c      	bne.n	8007e6a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007e30:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d010      	beq.n	8007e58 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d107      	bne.n	8007e52 <HAL_ADC_Init+0x202>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <HAL_ADC_Init+0x202>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e000      	b.n	8007e54 <HAL_ADC_Init+0x204>
 8007e52:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d108      	bne.n	8007e6a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8007e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	431a      	orrs	r2, r3
 8007e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e68:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	7e5b      	ldrb	r3, [r3, #25]
 8007e6e:	035b      	lsls	r3, r3, #13
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e74:	2a01      	cmp	r2, #1
 8007e76:	d002      	beq.n	8007e7e <HAL_ADC_Init+0x22e>
 8007e78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e7c:	e000      	b.n	8007e80 <HAL_ADC_Init+0x230>
 8007e7e:	2200      	movs	r2, #0
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e90:	4313      	orrs	r3, r2
 8007e92:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d11b      	bne.n	8007ed6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	7e5b      	ldrb	r3, [r3, #25]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	045a      	lsls	r2, r3, #17
 8007eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb6:	663b      	str	r3, [r7, #96]	; 0x60
 8007eb8:	e00d      	b.n	8007ed6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007ec2:	f043 0220 	orr.w	r2, r3, #32
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	f043 0201 	orr.w	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d03a      	beq.n	8007f54 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a16      	ldr	r2, [pc, #88]	; (8007f3c <HAL_ADC_Init+0x2ec>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <HAL_ADC_Init+0x2a2>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a14      	ldr	r2, [pc, #80]	; (8007f40 <HAL_ADC_Init+0x2f0>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d128      	bne.n	8007f44 <HAL_ADC_Init+0x2f4>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8007efa:	d012      	beq.n	8007f22 <HAL_ADC_Init+0x2d2>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f04:	d00a      	beq.n	8007f1c <HAL_ADC_Init+0x2cc>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8007f0e:	d002      	beq.n	8007f16 <HAL_ADC_Init+0x2c6>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	e018      	b.n	8007f48 <HAL_ADC_Init+0x2f8>
 8007f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f1a:	e015      	b.n	8007f48 <HAL_ADC_Init+0x2f8>
 8007f1c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007f20:	e012      	b.n	8007f48 <HAL_ADC_Init+0x2f8>
 8007f22:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8007f26:	e00f      	b.n	8007f48 <HAL_ADC_Init+0x2f8>
 8007f28:	20000010 	.word	0x20000010
 8007f2c:	431bde83 	.word	0x431bde83
 8007f30:	50000100 	.word	0x50000100
 8007f34:	50000300 	.word	0x50000300
 8007f38:	50000700 	.word	0x50000700
 8007f3c:	50000400 	.word	0x50000400
 8007f40:	50000500 	.word	0x50000500
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f50:	4313      	orrs	r3, r2
 8007f52:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 030c 	and.w	r3, r3, #12
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d114      	bne.n	8007f8c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	6812      	ldr	r2, [r2, #0]
 8007f6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f70:	f023 0302 	bic.w	r3, r3, #2
 8007f74:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	7e1b      	ldrb	r3, [r3, #24]
 8007f7a:	039a      	lsls	r2, r3, #14
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f82:	005b      	lsls	r3, r3, #1
 8007f84:	4313      	orrs	r3, r2
 8007f86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	4b1e      	ldr	r3, [pc, #120]	; (800800c <HAL_ADC_Init+0x3bc>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d10c      	bne.n	8007fc2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fae:	f023 010f 	bic.w	r1, r3, #15
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	1e5a      	subs	r2, r3, #1
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8007fc0:	e007      	b.n	8007fd2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 020f 	bic.w	r2, r2, #15
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fdc:	f023 0303 	bic.w	r3, r3, #3
 8007fe0:	f043 0201 	orr.w	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	641a      	str	r2, [r3, #64]	; 0x40
 8007fe8:	e00a      	b.n	8008000 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	f023 0312 	bic.w	r3, r3, #18
 8007ff2:	f043 0210 	orr.w	r2, r3, #16
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8008000:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008004:	4618      	mov	r0, r3
 8008006:	3768      	adds	r7, #104	; 0x68
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	fff0c007 	.word	0xfff0c007

08008010 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	f040 80f7 	bne.w	800821e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <HAL_ADC_Start_DMA+0x2e>
 800803a:	2302      	movs	r3, #2
 800803c:	e0f2      	b.n	8008224 <HAL_ADC_Start_DMA+0x214>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800804e:	d004      	beq.n	800805a <HAL_ADC_Start_DMA+0x4a>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a75      	ldr	r2, [pc, #468]	; (800822c <HAL_ADC_Start_DMA+0x21c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d109      	bne.n	800806e <HAL_ADC_Start_DMA+0x5e>
 800805a:	4b75      	ldr	r3, [pc, #468]	; (8008230 <HAL_ADC_Start_DMA+0x220>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	2b00      	cmp	r3, #0
 8008064:	bf0c      	ite	eq
 8008066:	2301      	moveq	r3, #1
 8008068:	2300      	movne	r3, #0
 800806a:	b2db      	uxtb	r3, r3
 800806c:	e008      	b.n	8008080 <HAL_ADC_Start_DMA+0x70>
 800806e:	4b71      	ldr	r3, [pc, #452]	; (8008234 <HAL_ADC_Start_DMA+0x224>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 031f 	and.w	r3, r3, #31
 8008076:	2b00      	cmp	r3, #0
 8008078:	bf0c      	ite	eq
 800807a:	2301      	moveq	r3, #1
 800807c:	2300      	movne	r3, #0
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80c5 	beq.w	8008210 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fd22 	bl	8008ad0 <ADC_Enable>
 800808c:	4603      	mov	r3, r0
 800808e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	2b00      	cmp	r3, #0
 8008094:	f040 80b7 	bne.w	8008206 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80080a0:	f023 0301 	bic.w	r3, r3, #1
 80080a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080b4:	d004      	beq.n	80080c0 <HAL_ADC_Start_DMA+0xb0>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a5c      	ldr	r2, [pc, #368]	; (800822c <HAL_ADC_Start_DMA+0x21c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d106      	bne.n	80080ce <HAL_ADC_Start_DMA+0xbe>
 80080c0:	4b5b      	ldr	r3, [pc, #364]	; (8008230 <HAL_ADC_Start_DMA+0x220>)
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f003 031f 	and.w	r3, r3, #31
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d010      	beq.n	80080ee <HAL_ADC_Start_DMA+0xde>
 80080cc:	e005      	b.n	80080da <HAL_ADC_Start_DMA+0xca>
 80080ce:	4b59      	ldr	r3, [pc, #356]	; (8008234 <HAL_ADC_Start_DMA+0x224>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 031f 	and.w	r3, r3, #31
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d009      	beq.n	80080ee <HAL_ADC_Start_DMA+0xde>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080e2:	d004      	beq.n	80080ee <HAL_ADC_Start_DMA+0xde>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a53      	ldr	r2, [pc, #332]	; (8008238 <HAL_ADC_Start_DMA+0x228>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d115      	bne.n	800811a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d036      	beq.n	8008176 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008110:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8008118:	e02d      	b.n	8008176 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800812e:	d004      	beq.n	800813a <HAL_ADC_Start_DMA+0x12a>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a3d      	ldr	r2, [pc, #244]	; (800822c <HAL_ADC_Start_DMA+0x21c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d10a      	bne.n	8008150 <HAL_ADC_Start_DMA+0x140>
 800813a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008144:	2b00      	cmp	r3, #0
 8008146:	bf14      	ite	ne
 8008148:	2301      	movne	r3, #1
 800814a:	2300      	moveq	r3, #0
 800814c:	b2db      	uxtb	r3, r3
 800814e:	e008      	b.n	8008162 <HAL_ADC_Start_DMA+0x152>
 8008150:	4b39      	ldr	r3, [pc, #228]	; (8008238 <HAL_ADC_Start_DMA+0x228>)
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	bf14      	ite	ne
 800815c:	2301      	movne	r3, #1
 800815e:	2300      	moveq	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800816e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800817e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008182:	d106      	bne.n	8008192 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008188:	f023 0206 	bic.w	r2, r3, #6
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	645a      	str	r2, [r3, #68]	; 0x44
 8008190:	e002      	b.n	8008198 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a4:	4a25      	ldr	r2, [pc, #148]	; (800823c <HAL_ADC_Start_DMA+0x22c>)
 80081a6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ac:	4a24      	ldr	r2, [pc, #144]	; (8008240 <HAL_ADC_Start_DMA+0x230>)
 80081ae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b4:	4a23      	ldr	r2, [pc, #140]	; (8008244 <HAL_ADC_Start_DMA+0x234>)
 80081b6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	221c      	movs	r2, #28
 80081be:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0210 	orr.w	r2, r2, #16
 80081ce:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0201 	orr.w	r2, r2, #1
 80081de:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3340      	adds	r3, #64	; 0x40
 80081ea:	4619      	mov	r1, r3
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f001 fd97 	bl	8009d22 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0204 	orr.w	r2, r2, #4
 8008202:	609a      	str	r2, [r3, #8]
 8008204:	e00d      	b.n	8008222 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800820e:	e008      	b.n	8008222 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800821c:	e001      	b.n	8008222 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800821e:	2302      	movs	r3, #2
 8008220:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	50000100 	.word	0x50000100
 8008230:	50000300 	.word	0x50000300
 8008234:	50000700 	.word	0x50000700
 8008238:	50000400 	.word	0x50000400
 800823c:	08008a05 	.word	0x08008a05
 8008240:	08008a7f 	.word	0x08008a7f
 8008244:	08008a9b 	.word	0x08008a9b

08008248 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008248:	b480      	push	{r7}
 800824a:	b09b      	sub	sp, #108	; 0x6c
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008262:	2b01      	cmp	r3, #1
 8008264:	d101      	bne.n	800826a <HAL_ADC_ConfigChannel+0x22>
 8008266:	2302      	movs	r3, #2
 8008268:	e2ca      	b.n	8008800 <HAL_ADC_ConfigChannel+0x5b8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	f040 82ae 	bne.w	80087de <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b04      	cmp	r3, #4
 8008288:	d81c      	bhi.n	80082c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	4613      	mov	r3, r2
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	4413      	add	r3, r2
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	461a      	mov	r2, r3
 800829e:	231f      	movs	r3, #31
 80082a0:	4093      	lsls	r3, r2
 80082a2:	43db      	mvns	r3, r3
 80082a4:	4019      	ands	r1, r3
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	4413      	add	r3, r2
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	fa00 f203 	lsl.w	r2, r0, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	631a      	str	r2, [r3, #48]	; 0x30
 80082c2:	e063      	b.n	800838c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	2b09      	cmp	r3, #9
 80082ca:	d81e      	bhi.n	800830a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	4613      	mov	r3, r2
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	4413      	add	r3, r2
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	3b1e      	subs	r3, #30
 80082e0:	221f      	movs	r2, #31
 80082e2:	fa02 f303 	lsl.w	r3, r2, r3
 80082e6:	43db      	mvns	r3, r3
 80082e8:	4019      	ands	r1, r3
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	4613      	mov	r3, r2
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	4413      	add	r3, r2
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	3b1e      	subs	r3, #30
 80082fc:	fa00 f203 	lsl.w	r2, r0, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	635a      	str	r2, [r3, #52]	; 0x34
 8008308:	e040      	b.n	800838c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b0e      	cmp	r3, #14
 8008310:	d81e      	bhi.n	8008350 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	4613      	mov	r3, r2
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	4413      	add	r3, r2
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	3b3c      	subs	r3, #60	; 0x3c
 8008326:	221f      	movs	r2, #31
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	43db      	mvns	r3, r3
 800832e:	4019      	ands	r1, r3
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	4613      	mov	r3, r2
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	4413      	add	r3, r2
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	3b3c      	subs	r3, #60	; 0x3c
 8008342:	fa00 f203 	lsl.w	r2, r0, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	639a      	str	r2, [r3, #56]	; 0x38
 800834e:	e01d      	b.n	800838c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	4413      	add	r3, r2
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	3b5a      	subs	r3, #90	; 0x5a
 8008364:	221f      	movs	r2, #31
 8008366:	fa02 f303 	lsl.w	r3, r2, r3
 800836a:	43db      	mvns	r3, r3
 800836c:	4019      	ands	r1, r3
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	4613      	mov	r3, r2
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	4413      	add	r3, r2
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	3b5a      	subs	r3, #90	; 0x5a
 8008380:	fa00 f203 	lsl.w	r2, r0, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f003 030c 	and.w	r3, r3, #12
 8008396:	2b00      	cmp	r3, #0
 8008398:	f040 80e5 	bne.w	8008566 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b09      	cmp	r3, #9
 80083a2:	d91c      	bls.n	80083de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6999      	ldr	r1, [r3, #24]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4613      	mov	r3, r2
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	4413      	add	r3, r2
 80083b4:	3b1e      	subs	r3, #30
 80083b6:	2207      	movs	r2, #7
 80083b8:	fa02 f303 	lsl.w	r3, r2, r3
 80083bc:	43db      	mvns	r3, r3
 80083be:	4019      	ands	r1, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	6898      	ldr	r0, [r3, #8]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	4613      	mov	r3, r2
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	4413      	add	r3, r2
 80083ce:	3b1e      	subs	r3, #30
 80083d0:	fa00 f203 	lsl.w	r2, r0, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	619a      	str	r2, [r3, #24]
 80083dc:	e019      	b.n	8008412 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6959      	ldr	r1, [r3, #20]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	4613      	mov	r3, r2
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	4413      	add	r3, r2
 80083ee:	2207      	movs	r2, #7
 80083f0:	fa02 f303 	lsl.w	r3, r2, r3
 80083f4:	43db      	mvns	r3, r3
 80083f6:	4019      	ands	r1, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	6898      	ldr	r0, [r3, #8]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	4413      	add	r3, r2
 8008406:	fa00 f203 	lsl.w	r2, r0, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	695a      	ldr	r2, [r3, #20]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	08db      	lsrs	r3, r3, #3
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	fa02 f303 	lsl.w	r3, r2, r3
 8008428:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	3b01      	subs	r3, #1
 8008430:	2b03      	cmp	r3, #3
 8008432:	d84f      	bhi.n	80084d4 <HAL_ADC_ConfigChannel+0x28c>
 8008434:	a201      	add	r2, pc, #4	; (adr r2, 800843c <HAL_ADC_ConfigChannel+0x1f4>)
 8008436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843a:	bf00      	nop
 800843c:	0800844d 	.word	0x0800844d
 8008440:	0800846f 	.word	0x0800846f
 8008444:	08008491 	.word	0x08008491
 8008448:	080084b3 	.word	0x080084b3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008452:	4b9a      	ldr	r3, [pc, #616]	; (80086bc <HAL_ADC_ConfigChannel+0x474>)
 8008454:	4013      	ands	r3, r2
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	6812      	ldr	r2, [r2, #0]
 800845a:	0691      	lsls	r1, r2, #26
 800845c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800845e:	430a      	orrs	r2, r1
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800846a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800846c:	e07e      	b.n	800856c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008474:	4b91      	ldr	r3, [pc, #580]	; (80086bc <HAL_ADC_ConfigChannel+0x474>)
 8008476:	4013      	ands	r3, r2
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	6812      	ldr	r2, [r2, #0]
 800847c:	0691      	lsls	r1, r2, #26
 800847e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008480:	430a      	orrs	r2, r1
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800848c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800848e:	e06d      	b.n	800856c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008496:	4b89      	ldr	r3, [pc, #548]	; (80086bc <HAL_ADC_ConfigChannel+0x474>)
 8008498:	4013      	ands	r3, r2
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	6812      	ldr	r2, [r2, #0]
 800849e:	0691      	lsls	r1, r2, #26
 80084a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084a2:	430a      	orrs	r2, r1
 80084a4:	431a      	orrs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80084ae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80084b0:	e05c      	b.n	800856c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80084b8:	4b80      	ldr	r3, [pc, #512]	; (80086bc <HAL_ADC_ConfigChannel+0x474>)
 80084ba:	4013      	ands	r3, r2
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	6812      	ldr	r2, [r2, #0]
 80084c0:	0691      	lsls	r1, r2, #26
 80084c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084c4:	430a      	orrs	r2, r1
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80084d0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80084d2:	e04b      	b.n	800856c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	069b      	lsls	r3, r3, #26
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d107      	bne.n	80084f8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80084f6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	069b      	lsls	r3, r3, #26
 8008508:	429a      	cmp	r2, r3
 800850a:	d107      	bne.n	800851c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800851a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008522:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	069b      	lsls	r3, r3, #26
 800852c:	429a      	cmp	r2, r3
 800852e:	d107      	bne.n	8008540 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800853e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	069b      	lsls	r3, r3, #26
 8008550:	429a      	cmp	r2, r3
 8008552:	d10a      	bne.n	800856a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008562:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8008564:	e001      	b.n	800856a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8008566:	bf00      	nop
 8008568:	e000      	b.n	800856c <HAL_ADC_ConfigChannel+0x324>
      break;
 800856a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	2b01      	cmp	r3, #1
 8008578:	d108      	bne.n	800858c <HAL_ADC_ConfigChannel+0x344>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b01      	cmp	r3, #1
 8008586:	d101      	bne.n	800858c <HAL_ADC_ConfigChannel+0x344>
 8008588:	2301      	movs	r3, #1
 800858a:	e000      	b.n	800858e <HAL_ADC_ConfigChannel+0x346>
 800858c:	2300      	movs	r3, #0
 800858e:	2b00      	cmp	r3, #0
 8008590:	f040 8130 	bne.w	80087f4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d00f      	beq.n	80085bc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2201      	movs	r2, #1
 80085aa:	fa02 f303 	lsl.w	r3, r2, r3
 80085ae:	43da      	mvns	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	400a      	ands	r2, r1
 80085b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80085ba:	e049      	b.n	8008650 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2201      	movs	r2, #1
 80085ca:	409a      	lsls	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b09      	cmp	r3, #9
 80085dc:	d91c      	bls.n	8008618 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6999      	ldr	r1, [r3, #24]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	4613      	mov	r3, r2
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	4413      	add	r3, r2
 80085ee:	3b1b      	subs	r3, #27
 80085f0:	2207      	movs	r2, #7
 80085f2:	fa02 f303 	lsl.w	r3, r2, r3
 80085f6:	43db      	mvns	r3, r3
 80085f8:	4019      	ands	r1, r3
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	6898      	ldr	r0, [r3, #8]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	4613      	mov	r3, r2
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	4413      	add	r3, r2
 8008608:	3b1b      	subs	r3, #27
 800860a:	fa00 f203 	lsl.w	r2, r0, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	619a      	str	r2, [r3, #24]
 8008616:	e01b      	b.n	8008650 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6959      	ldr	r1, [r3, #20]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	4613      	mov	r3, r2
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	4413      	add	r3, r2
 800862a:	2207      	movs	r2, #7
 800862c:	fa02 f303 	lsl.w	r3, r2, r3
 8008630:	43db      	mvns	r3, r3
 8008632:	4019      	ands	r1, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	6898      	ldr	r0, [r3, #8]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	4613      	mov	r3, r2
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	4413      	add	r3, r2
 8008644:	fa00 f203 	lsl.w	r2, r0, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008658:	d004      	beq.n	8008664 <HAL_ADC_ConfigChannel+0x41c>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a18      	ldr	r2, [pc, #96]	; (80086c0 <HAL_ADC_ConfigChannel+0x478>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d101      	bne.n	8008668 <HAL_ADC_ConfigChannel+0x420>
 8008664:	4b17      	ldr	r3, [pc, #92]	; (80086c4 <HAL_ADC_ConfigChannel+0x47c>)
 8008666:	e000      	b.n	800866a <HAL_ADC_ConfigChannel+0x422>
 8008668:	4b17      	ldr	r3, [pc, #92]	; (80086c8 <HAL_ADC_ConfigChannel+0x480>)
 800866a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b10      	cmp	r3, #16
 8008672:	d105      	bne.n	8008680 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8008674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800867c:	2b00      	cmp	r3, #0
 800867e:	d015      	beq.n	80086ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8008684:	2b11      	cmp	r3, #17
 8008686:	d105      	bne.n	8008694 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8008688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8008698:	2b12      	cmp	r3, #18
 800869a:	f040 80ab 	bne.w	80087f4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800869e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f040 80a4 	bne.w	80087f4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086b4:	d10a      	bne.n	80086cc <HAL_ADC_ConfigChannel+0x484>
 80086b6:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <HAL_ADC_ConfigChannel+0x478>)
 80086b8:	60fb      	str	r3, [r7, #12]
 80086ba:	e022      	b.n	8008702 <HAL_ADC_ConfigChannel+0x4ba>
 80086bc:	83fff000 	.word	0x83fff000
 80086c0:	50000100 	.word	0x50000100
 80086c4:	50000300 	.word	0x50000300
 80086c8:	50000700 	.word	0x50000700
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a4e      	ldr	r2, [pc, #312]	; (800880c <HAL_ADC_ConfigChannel+0x5c4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d103      	bne.n	80086de <HAL_ADC_ConfigChannel+0x496>
 80086d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	e011      	b.n	8008702 <HAL_ADC_ConfigChannel+0x4ba>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a4b      	ldr	r2, [pc, #300]	; (8008810 <HAL_ADC_ConfigChannel+0x5c8>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d102      	bne.n	80086ee <HAL_ADC_ConfigChannel+0x4a6>
 80086e8:	4b4a      	ldr	r3, [pc, #296]	; (8008814 <HAL_ADC_ConfigChannel+0x5cc>)
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	e009      	b.n	8008702 <HAL_ADC_ConfigChannel+0x4ba>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a48      	ldr	r2, [pc, #288]	; (8008814 <HAL_ADC_ConfigChannel+0x5cc>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d102      	bne.n	80086fe <HAL_ADC_ConfigChannel+0x4b6>
 80086f8:	4b45      	ldr	r3, [pc, #276]	; (8008810 <HAL_ADC_ConfigChannel+0x5c8>)
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	e001      	b.n	8008702 <HAL_ADC_ConfigChannel+0x4ba>
 80086fe:	2300      	movs	r3, #0
 8008700:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 0303 	and.w	r3, r3, #3
 800870c:	2b01      	cmp	r3, #1
 800870e:	d108      	bne.n	8008722 <HAL_ADC_ConfigChannel+0x4da>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <HAL_ADC_ConfigChannel+0x4da>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <HAL_ADC_ConfigChannel+0x4dc>
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d150      	bne.n	80087ca <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8008728:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800872a:	2b00      	cmp	r3, #0
 800872c:	d010      	beq.n	8008750 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	2b01      	cmp	r3, #1
 8008738:	d107      	bne.n	800874a <HAL_ADC_ConfigChannel+0x502>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b01      	cmp	r3, #1
 8008744:	d101      	bne.n	800874a <HAL_ADC_ConfigChannel+0x502>
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <HAL_ADC_ConfigChannel+0x504>
 800874a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800874c:	2b00      	cmp	r3, #0
 800874e:	d13c      	bne.n	80087ca <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b10      	cmp	r3, #16
 8008756:	d11d      	bne.n	8008794 <HAL_ADC_ConfigChannel+0x54c>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008760:	d118      	bne.n	8008794 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8008762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800876a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800876c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800876e:	4b2a      	ldr	r3, [pc, #168]	; (8008818 <HAL_ADC_ConfigChannel+0x5d0>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a2a      	ldr	r2, [pc, #168]	; (800881c <HAL_ADC_ConfigChannel+0x5d4>)
 8008774:	fba2 2303 	umull	r2, r3, r2, r3
 8008778:	0c9a      	lsrs	r2, r3, #18
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008784:	e002      	b.n	800878c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	3b01      	subs	r3, #1
 800878a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1f9      	bne.n	8008786 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008792:	e02e      	b.n	80087f2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b11      	cmp	r3, #17
 800879a:	d10b      	bne.n	80087b4 <HAL_ADC_ConfigChannel+0x56c>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087a4:	d106      	bne.n	80087b4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80087a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80087ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80087b2:	e01e      	b.n	80087f2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b12      	cmp	r3, #18
 80087ba:	d11a      	bne.n	80087f2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80087bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80087c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087c6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80087c8:	e013      	b.n	80087f2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	f043 0220 	orr.w	r2, r3, #32
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80087dc:	e00a      	b.n	80087f4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	f043 0220 	orr.w	r2, r3, #32
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80087f0:	e000      	b.n	80087f4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80087f2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80087fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008800:	4618      	mov	r0, r3
 8008802:	376c      	adds	r7, #108	; 0x6c
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	50000100 	.word	0x50000100
 8008810:	50000400 	.word	0x50000400
 8008814:	50000500 	.word	0x50000500
 8008818:	20000010 	.word	0x20000010
 800881c:	431bde83 	.word	0x431bde83

08008820 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8008820:	b480      	push	{r7}
 8008822:	b099      	sub	sp, #100	; 0x64
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008838:	d102      	bne.n	8008840 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800883a:	4b6d      	ldr	r3, [pc, #436]	; (80089f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800883c:	60bb      	str	r3, [r7, #8]
 800883e:	e01a      	b.n	8008876 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a6a      	ldr	r2, [pc, #424]	; (80089f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d103      	bne.n	8008852 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800884a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800884e:	60bb      	str	r3, [r7, #8]
 8008850:	e011      	b.n	8008876 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a67      	ldr	r2, [pc, #412]	; (80089f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d102      	bne.n	8008862 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800885c:	4b66      	ldr	r3, [pc, #408]	; (80089f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800885e:	60bb      	str	r3, [r7, #8]
 8008860:	e009      	b.n	8008876 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a64      	ldr	r2, [pc, #400]	; (80089f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d102      	bne.n	8008872 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800886c:	4b61      	ldr	r3, [pc, #388]	; (80089f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800886e:	60bb      	str	r3, [r7, #8]
 8008870:	e001      	b.n	8008876 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8008872:	2300      	movs	r3, #0
 8008874:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e0b0      	b.n	80089e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800888a:	2302      	movs	r3, #2
 800888c:	e0a9      	b.n	80089e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f040 808d 	bne.w	80089c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f040 8086 	bne.w	80089c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088bc:	d004      	beq.n	80088c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a4b      	ldr	r2, [pc, #300]	; (80089f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d101      	bne.n	80088cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80088c8:	4b4c      	ldr	r3, [pc, #304]	; (80089fc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80088ca:	e000      	b.n	80088ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80088cc:	4b4c      	ldr	r3, [pc, #304]	; (8008a00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80088ce:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d040      	beq.n	800895a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80088d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	6859      	ldr	r1, [r3, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088ea:	035b      	lsls	r3, r3, #13
 80088ec:	430b      	orrs	r3, r1
 80088ee:	431a      	orrs	r2, r3
 80088f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f003 0303 	and.w	r3, r3, #3
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d108      	bne.n	8008914 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b01      	cmp	r3, #1
 800890e:	d101      	bne.n	8008914 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8008914:	2300      	movs	r3, #0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d15c      	bne.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	2b01      	cmp	r3, #1
 8008924:	d107      	bne.n	8008936 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b01      	cmp	r3, #1
 8008930:	d101      	bne.n	8008936 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8008932:	2301      	movs	r3, #1
 8008934:	e000      	b.n	8008938 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8008936:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8008938:	2b00      	cmp	r3, #0
 800893a:	d14b      	bne.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800893c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008944:	f023 030f 	bic.w	r3, r3, #15
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	6811      	ldr	r1, [r2, #0]
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	6892      	ldr	r2, [r2, #8]
 8008950:	430a      	orrs	r2, r1
 8008952:	431a      	orrs	r2, r3
 8008954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008956:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8008958:	e03c      	b.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800895a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008964:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	2b01      	cmp	r3, #1
 8008972:	d108      	bne.n	8008986 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b01      	cmp	r3, #1
 8008980:	d101      	bne.n	8008986 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8008982:	2301      	movs	r3, #1
 8008984:	e000      	b.n	8008988 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008986:	2300      	movs	r3, #0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d123      	bne.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 0303 	and.w	r3, r3, #3
 8008994:	2b01      	cmp	r3, #1
 8008996:	d107      	bne.n	80089a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d101      	bne.n	80089a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80089a4:	2301      	movs	r3, #1
 80089a6:	e000      	b.n	80089aa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80089a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d112      	bne.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80089ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80089b6:	f023 030f 	bic.w	r3, r3, #15
 80089ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80089be:	e009      	b.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c4:	f043 0220 	orr.w	r2, r3, #32
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80089d2:	e000      	b.n	80089d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80089d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80089de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80089e2:	4618      	mov	r0, r3
 80089e4:	3764      	adds	r7, #100	; 0x64
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	50000100 	.word	0x50000100
 80089f4:	50000400 	.word	0x50000400
 80089f8:	50000500 	.word	0x50000500
 80089fc:	50000300 	.word	0x50000300
 8008a00:	50000700 	.word	0x50000700

08008a04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d126      	bne.n	8008a6c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d115      	bne.n	8008a64 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d111      	bne.n	8008a64 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d105      	bne.n	8008a64 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	f043 0201 	orr.w	r2, r3, #1
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f7ff f8d5 	bl	8007c14 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8008a6a:	e004      	b.n	8008a76 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	4798      	blx	r3
}
 8008a76:	bf00      	nop
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f7ff f8cb 	bl	8007c28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab8:	f043 0204 	orr.w	r2, r3, #4
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff f8bb 	bl	8007c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d108      	bne.n	8008afc <ADC_Enable+0x2c>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <ADC_Enable+0x2c>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e000      	b.n	8008afe <ADC_Enable+0x2e>
 8008afc:	2300      	movs	r3, #0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d143      	bne.n	8008b8a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689a      	ldr	r2, [r3, #8]
 8008b08:	4b22      	ldr	r3, [pc, #136]	; (8008b94 <ADC_Enable+0xc4>)
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00d      	beq.n	8008b2c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	f043 0210 	orr.w	r2, r3, #16
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b20:	f043 0201 	orr.w	r2, r3, #1
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e02f      	b.n	8008b8c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0201 	orr.w	r2, r2, #1
 8008b3a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8008b3c:	f7ff f85e 	bl	8007bfc <HAL_GetTick>
 8008b40:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008b42:	e01b      	b.n	8008b7c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008b44:	f7ff f85a 	bl	8007bfc <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d914      	bls.n	8008b7c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d00d      	beq.n	8008b7c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	f043 0210 	orr.w	r2, r3, #16
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b70:	f043 0201 	orr.w	r2, r3, #1
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e007      	b.n	8008b8c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d1dc      	bne.n	8008b44 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	8000003f 	.word	0x8000003f

08008b98 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 0303 	and.w	r3, r3, #3
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d108      	bne.n	8008bc4 <ADC_Disable+0x2c>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <ADC_Disable+0x2c>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <ADC_Disable+0x2e>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d047      	beq.n	8008c5a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f003 030d 	and.w	r3, r3, #13
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d10f      	bne.n	8008bf8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f042 0202 	orr.w	r2, r2, #2
 8008be6:	609a      	str	r2, [r3, #8]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2203      	movs	r2, #3
 8008bee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8008bf0:	f7ff f804 	bl	8007bfc <HAL_GetTick>
 8008bf4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8008bf6:	e029      	b.n	8008c4c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfc:	f043 0210 	orr.w	r2, r3, #16
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c08:	f043 0201 	orr.w	r2, r3, #1
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e023      	b.n	8008c5c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008c14:	f7fe fff2 	bl	8007bfc <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d914      	bls.n	8008c4c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d10d      	bne.n	8008c4c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c34:	f043 0210 	orr.w	r2, r3, #16
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c40:	f043 0201 	orr.w	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e007      	b.n	8008c5c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d0dc      	beq.n	8008c14 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e0ed      	b.n	8008e52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7fd fc22 	bl	80064cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f042 0201 	orr.w	r2, r2, #1
 8008c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c98:	f7fe ffb0 	bl	8007bfc <HAL_GetTick>
 8008c9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008c9e:	e012      	b.n	8008cc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008ca0:	f7fe ffac 	bl	8007bfc <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	2b0a      	cmp	r3, #10
 8008cac:	d90b      	bls.n	8008cc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e0c5      	b.n	8008e52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0e5      	beq.n	8008ca0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0202 	bic.w	r2, r2, #2
 8008ce2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ce4:	f7fe ff8a 	bl	8007bfc <HAL_GetTick>
 8008ce8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008cea:	e012      	b.n	8008d12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008cec:	f7fe ff86 	bl	8007bfc <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b0a      	cmp	r3, #10
 8008cf8:	d90b      	bls.n	8008d12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2205      	movs	r2, #5
 8008d0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e09f      	b.n	8008e52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f003 0302 	and.w	r3, r3, #2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e5      	bne.n	8008cec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	7e1b      	ldrb	r3, [r3, #24]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d108      	bne.n	8008d3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	e007      	b.n	8008d4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	7e5b      	ldrb	r3, [r3, #25]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d108      	bne.n	8008d64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	e007      	b.n	8008d74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	7e9b      	ldrb	r3, [r3, #26]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d108      	bne.n	8008d8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0220 	orr.w	r2, r2, #32
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	e007      	b.n	8008d9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f022 0220 	bic.w	r2, r2, #32
 8008d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	7edb      	ldrb	r3, [r3, #27]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d108      	bne.n	8008db8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 0210 	bic.w	r2, r2, #16
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	e007      	b.n	8008dc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f042 0210 	orr.w	r2, r2, #16
 8008dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	7f1b      	ldrb	r3, [r3, #28]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d108      	bne.n	8008de2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0208 	orr.w	r2, r2, #8
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	e007      	b.n	8008df2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0208 	bic.w	r2, r2, #8
 8008df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	7f5b      	ldrb	r3, [r3, #29]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d108      	bne.n	8008e0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f042 0204 	orr.w	r2, r2, #4
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	e007      	b.n	8008e1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 0204 	bic.w	r2, r2, #4
 8008e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	431a      	orrs	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	ea42 0103 	orr.w	r1, r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	1e5a      	subs	r2, r3, #1
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b087      	sub	sp, #28
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e70:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008e72:	7cfb      	ldrb	r3, [r7, #19]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d003      	beq.n	8008e80 <HAL_CAN_ConfigFilter+0x26>
 8008e78:	7cfb      	ldrb	r3, [r7, #19]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	f040 80aa 	bne.w	8008fd4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008e86:	f043 0201 	orr.w	r2, r3, #1
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	f003 031f 	and.w	r3, r3, #31
 8008e98:	2201      	movs	r2, #1
 8008e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	43db      	mvns	r3, r3
 8008eaa:	401a      	ands	r2, r3
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d123      	bne.n	8008f02 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	43db      	mvns	r3, r3
 8008ec4:	401a      	ands	r2, r3
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008edc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	3248      	adds	r2, #72	; 0x48
 8008ee2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008ef6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008ef8:	6979      	ldr	r1, [r7, #20]
 8008efa:	3348      	adds	r3, #72	; 0x48
 8008efc:	00db      	lsls	r3, r3, #3
 8008efe:	440b      	add	r3, r1
 8008f00:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d122      	bne.n	8008f50 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	431a      	orrs	r2, r3
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008f2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	3248      	adds	r2, #72	; 0x48
 8008f30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008f44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008f46:	6979      	ldr	r1, [r7, #20]
 8008f48:	3348      	adds	r3, #72	; 0x48
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	440b      	add	r3, r1
 8008f4e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d109      	bne.n	8008f6c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	43db      	mvns	r3, r3
 8008f62:	401a      	ands	r2, r3
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8008f6a:	e007      	b.n	8008f7c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	431a      	orrs	r2, r3
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d109      	bne.n	8008f98 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	43db      	mvns	r3, r3
 8008f8e:	401a      	ands	r2, r3
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008f96:	e007      	b.n	8008fa8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d107      	bne.n	8008fc0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fc6:	f023 0201 	bic.w	r2, r3, #1
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e006      	b.n	8008fe2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
  }
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d12e      	bne.n	8009060 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2202      	movs	r2, #2
 8009006:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0201 	bic.w	r2, r2, #1
 8009018:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800901a:	f7fe fdef 	bl	8007bfc <HAL_GetTick>
 800901e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009020:	e012      	b.n	8009048 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009022:	f7fe fdeb 	bl	8007bfc <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	2b0a      	cmp	r3, #10
 800902e:	d90b      	bls.n	8009048 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2205      	movs	r2, #5
 8009040:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e012      	b.n	800906e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e5      	bne.n	8009022 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	e006      	b.n	800906e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
  }
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8009076:	b480      	push	{r7}
 8009078:	b089      	sub	sp, #36	; 0x24
 800907a:	af00      	add	r7, sp, #0
 800907c:	60f8      	str	r0, [r7, #12]
 800907e:	60b9      	str	r1, [r7, #8]
 8009080:	607a      	str	r2, [r7, #4]
 8009082:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f893 3020 	ldrb.w	r3, [r3, #32]
 800908a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009094:	7ffb      	ldrb	r3, [r7, #31]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d003      	beq.n	80090a2 <HAL_CAN_AddTxMessage+0x2c>
 800909a:	7ffb      	ldrb	r3, [r7, #31]
 800909c:	2b02      	cmp	r3, #2
 800909e:	f040 80b8 	bne.w	8009212 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 80a0 	beq.w	8009202 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	0e1b      	lsrs	r3, r3, #24
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d907      	bls.n	80090e2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e09e      	b.n	8009220 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80090e2:	2201      	movs	r2, #1
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	409a      	lsls	r2, r3
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10d      	bne.n	8009110 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80090fe:	68f9      	ldr	r1, [r7, #12]
 8009100:	6809      	ldr	r1, [r1, #0]
 8009102:	431a      	orrs	r2, r3
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	3318      	adds	r3, #24
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	440b      	add	r3, r1
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e00f      	b.n	8009130 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800911a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009120:	68f9      	ldr	r1, [r7, #12]
 8009122:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009124:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	3318      	adds	r3, #24
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	440b      	add	r3, r1
 800912e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	691a      	ldr	r2, [r3, #16]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	3318      	adds	r3, #24
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	440b      	add	r3, r1
 8009140:	3304      	adds	r3, #4
 8009142:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	7d1b      	ldrb	r3, [r3, #20]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d111      	bne.n	8009170 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	3318      	adds	r3, #24
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	4413      	add	r3, r2
 8009158:	3304      	adds	r3, #4
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	6811      	ldr	r1, [r2, #0]
 8009160:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	3318      	adds	r3, #24
 8009168:	011b      	lsls	r3, r3, #4
 800916a:	440b      	add	r3, r1
 800916c:	3304      	adds	r3, #4
 800916e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3307      	adds	r3, #7
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	061a      	lsls	r2, r3, #24
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3306      	adds	r3, #6
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	041b      	lsls	r3, r3, #16
 8009180:	431a      	orrs	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3305      	adds	r3, #5
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	4313      	orrs	r3, r2
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	3204      	adds	r2, #4
 8009190:	7812      	ldrb	r2, [r2, #0]
 8009192:	4610      	mov	r0, r2
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	6811      	ldr	r1, [r2, #0]
 8009198:	ea43 0200 	orr.w	r2, r3, r0
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	011b      	lsls	r3, r3, #4
 80091a0:	440b      	add	r3, r1
 80091a2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80091a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3303      	adds	r3, #3
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	061a      	lsls	r2, r3, #24
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3302      	adds	r3, #2
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	041b      	lsls	r3, r3, #16
 80091b8:	431a      	orrs	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3301      	adds	r3, #1
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	4313      	orrs	r3, r2
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	7812      	ldrb	r2, [r2, #0]
 80091c8:	4610      	mov	r0, r2
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	6811      	ldr	r1, [r2, #0]
 80091ce:	ea43 0200 	orr.w	r2, r3, r0
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	440b      	add	r3, r1
 80091d8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80091dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	3318      	adds	r3, #24
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	4413      	add	r3, r2
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	6811      	ldr	r1, [r2, #0]
 80091f0:	f043 0201 	orr.w	r2, r3, #1
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	3318      	adds	r3, #24
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	440b      	add	r3, r1
 80091fc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	e00e      	b.n	8009220 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e006      	b.n	8009220 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009216:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
  }
}
 8009220:	4618      	mov	r0, r3
 8009222:	3724      	adds	r7, #36	; 0x24
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
 8009238:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009240:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d003      	beq.n	8009250 <HAL_CAN_GetRxMessage+0x24>
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	2b02      	cmp	r3, #2
 800924c:	f040 80f3 	bne.w	8009436 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10e      	bne.n	8009274 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f003 0303 	and.w	r3, r3, #3
 8009260:	2b00      	cmp	r3, #0
 8009262:	d116      	bne.n	8009292 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009268:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e0e7      	b.n	8009444 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d107      	bne.n	8009292 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e0d8      	b.n	8009444 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	331b      	adds	r3, #27
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	4413      	add	r3, r2
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0204 	and.w	r2, r3, #4
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10c      	bne.n	80092ca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	331b      	adds	r3, #27
 80092b8:	011b      	lsls	r3, r3, #4
 80092ba:	4413      	add	r3, r2
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	0d5b      	lsrs	r3, r3, #21
 80092c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	e00b      	b.n	80092e2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	331b      	adds	r3, #27
 80092d2:	011b      	lsls	r3, r3, #4
 80092d4:	4413      	add	r3, r2
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	08db      	lsrs	r3, r3, #3
 80092da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	331b      	adds	r3, #27
 80092ea:	011b      	lsls	r3, r3, #4
 80092ec:	4413      	add	r3, r2
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0202 	and.w	r2, r3, #2
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	331b      	adds	r3, #27
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	4413      	add	r3, r2
 8009304:	3304      	adds	r3, #4
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 020f 	and.w	r2, r3, #15
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	331b      	adds	r3, #27
 8009318:	011b      	lsls	r3, r3, #4
 800931a:	4413      	add	r3, r2
 800931c:	3304      	adds	r3, #4
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	0a1b      	lsrs	r3, r3, #8
 8009322:	b2da      	uxtb	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	331b      	adds	r3, #27
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	4413      	add	r3, r2
 8009334:	3304      	adds	r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	0c1b      	lsrs	r3, r3, #16
 800933a:	b29a      	uxth	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	4413      	add	r3, r2
 800934a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	b2da      	uxtb	r2, r3
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	011b      	lsls	r3, r3, #4
 800935e:	4413      	add	r3, r2
 8009360:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	0a1a      	lsrs	r2, r3, #8
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	3301      	adds	r3, #1
 800936c:	b2d2      	uxtb	r2, r2
 800936e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	011b      	lsls	r3, r3, #4
 8009378:	4413      	add	r3, r2
 800937a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	0c1a      	lsrs	r2, r3, #16
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	3302      	adds	r3, #2
 8009386:	b2d2      	uxtb	r2, r2
 8009388:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	4413      	add	r3, r2
 8009394:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	0e1a      	lsrs	r2, r3, #24
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	3303      	adds	r3, #3
 80093a0:	b2d2      	uxtb	r2, r2
 80093a2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	011b      	lsls	r3, r3, #4
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	3304      	adds	r3, #4
 80093b8:	b2d2      	uxtb	r2, r2
 80093ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	011b      	lsls	r3, r3, #4
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	0a1a      	lsrs	r2, r3, #8
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	3305      	adds	r3, #5
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	011b      	lsls	r3, r3, #4
 80093de:	4413      	add	r3, r2
 80093e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	0c1a      	lsrs	r2, r3, #16
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	3306      	adds	r3, #6
 80093ec:	b2d2      	uxtb	r2, r2
 80093ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	0e1a      	lsrs	r2, r3, #24
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	3307      	adds	r3, #7
 8009406:	b2d2      	uxtb	r2, r2
 8009408:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d108      	bne.n	8009422 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0220 	orr.w	r2, r2, #32
 800941e:	60da      	str	r2, [r3, #12]
 8009420:	e007      	b.n	8009432 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f042 0220 	orr.w	r2, r2, #32
 8009430:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	e006      	b.n	8009444 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
  }
}
 8009444:	4618      	mov	r0, r3
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009460:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d002      	beq.n	800946e <HAL_CAN_ActivateNotification+0x1e>
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	2b02      	cmp	r3, #2
 800946c:	d109      	bne.n	8009482 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6959      	ldr	r1, [r3, #20]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	e006      	b.n	8009490 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
  }
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08a      	sub	sp, #40	; 0x28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80094a4:	2300      	movs	r3, #0
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d07c      	beq.n	80095dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d023      	beq.n	8009534 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2201      	movs	r2, #1
 80094f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f983 	bl	800980a <HAL_CAN_TxMailbox0CompleteCallback>
 8009504:	e016      	b.n	8009534 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b00      	cmp	r3, #0
 800950e:	d004      	beq.n	800951a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009516:	627b      	str	r3, [r7, #36]	; 0x24
 8009518:	e00c      	b.n	8009534 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	f003 0308 	and.w	r3, r3, #8
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
 800952c:	e002      	b.n	8009534 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f989 	bl	8009846 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800953a:	2b00      	cmp	r3, #0
 800953c:	d024      	beq.n	8009588 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009546:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f963 	bl	800981e <HAL_CAN_TxMailbox1CompleteCallback>
 8009558:	e016      	b.n	8009588 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800956a:	627b      	str	r3, [r7, #36]	; 0x24
 800956c:	e00c      	b.n	8009588 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009574:	2b00      	cmp	r3, #0
 8009576:	d004      	beq.n	8009582 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
 8009580:	e002      	b.n	8009588 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f969 	bl	800985a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d024      	beq.n	80095dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800959a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f943 	bl	8009832 <HAL_CAN_TxMailbox2CompleteCallback>
 80095ac:	e016      	b.n	80095dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095be:	627b      	str	r3, [r7, #36]	; 0x24
 80095c0:	e00c      	b.n	80095dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d004      	beq.n	80095d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
 80095d4:	e002      	b.n	80095dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f949 	bl	800986e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	f003 0308 	and.w	r3, r3, #8
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00c      	beq.n	8009600 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f003 0310 	and.w	r3, r3, #16
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d007      	beq.n	8009600 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2210      	movs	r2, #16
 80095fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00b      	beq.n	8009622 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f003 0308 	and.w	r3, r3, #8
 8009610:	2b00      	cmp	r3, #0
 8009612:	d006      	beq.n	8009622 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2208      	movs	r2, #8
 800961a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f930 	bl	8009882 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d009      	beq.n	8009640 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7f7 fb9c 	bl	8000d78 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00c      	beq.n	8009664 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f003 0310 	and.w	r3, r3, #16
 8009650:	2b00      	cmp	r3, #0
 8009652:	d007      	beq.n	8009664 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800965a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2210      	movs	r2, #16
 8009662:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	f003 0320 	and.w	r3, r3, #32
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00b      	beq.n	8009686 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f003 0308 	and.w	r3, r3, #8
 8009674:	2b00      	cmp	r3, #0
 8009676:	d006      	beq.n	8009686 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2208      	movs	r2, #8
 800967e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f912 	bl	80098aa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	f003 0310 	and.w	r3, r3, #16
 800968c:	2b00      	cmp	r3, #0
 800968e:	d009      	beq.n	80096a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	f003 0303 	and.w	r3, r3, #3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f8f9 	bl	8009896 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00b      	beq.n	80096c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	f003 0310 	and.w	r3, r3, #16
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d006      	beq.n	80096c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2210      	movs	r2, #16
 80096be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f8fc 	bl	80098be <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00b      	beq.n	80096e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	f003 0308 	and.w	r3, r3, #8
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d006      	beq.n	80096e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2208      	movs	r2, #8
 80096e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f8f5 	bl	80098d2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d07b      	beq.n	80097ea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	f003 0304 	and.w	r3, r3, #4
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d072      	beq.n	80097e2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009702:	2b00      	cmp	r3, #0
 8009704:	d008      	beq.n	8009718 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800970c:	2b00      	cmp	r3, #0
 800970e:	d003      	beq.n	8009718 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	f043 0301 	orr.w	r3, r3, #1
 8009716:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800971e:	2b00      	cmp	r3, #0
 8009720:	d008      	beq.n	8009734 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009728:	2b00      	cmp	r3, #0
 800972a:	d003      	beq.n	8009734 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	f043 0302 	orr.w	r3, r3, #2
 8009732:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800973a:	2b00      	cmp	r3, #0
 800973c:	d008      	beq.n	8009750 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009744:	2b00      	cmp	r3, #0
 8009746:	d003      	beq.n	8009750 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	f043 0304 	orr.w	r3, r3, #4
 800974e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009756:	2b00      	cmp	r3, #0
 8009758:	d043      	beq.n	80097e2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009760:	2b00      	cmp	r3, #0
 8009762:	d03e      	beq.n	80097e2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800976a:	2b60      	cmp	r3, #96	; 0x60
 800976c:	d02b      	beq.n	80097c6 <HAL_CAN_IRQHandler+0x32a>
 800976e:	2b60      	cmp	r3, #96	; 0x60
 8009770:	d82e      	bhi.n	80097d0 <HAL_CAN_IRQHandler+0x334>
 8009772:	2b50      	cmp	r3, #80	; 0x50
 8009774:	d022      	beq.n	80097bc <HAL_CAN_IRQHandler+0x320>
 8009776:	2b50      	cmp	r3, #80	; 0x50
 8009778:	d82a      	bhi.n	80097d0 <HAL_CAN_IRQHandler+0x334>
 800977a:	2b40      	cmp	r3, #64	; 0x40
 800977c:	d019      	beq.n	80097b2 <HAL_CAN_IRQHandler+0x316>
 800977e:	2b40      	cmp	r3, #64	; 0x40
 8009780:	d826      	bhi.n	80097d0 <HAL_CAN_IRQHandler+0x334>
 8009782:	2b30      	cmp	r3, #48	; 0x30
 8009784:	d010      	beq.n	80097a8 <HAL_CAN_IRQHandler+0x30c>
 8009786:	2b30      	cmp	r3, #48	; 0x30
 8009788:	d822      	bhi.n	80097d0 <HAL_CAN_IRQHandler+0x334>
 800978a:	2b10      	cmp	r3, #16
 800978c:	d002      	beq.n	8009794 <HAL_CAN_IRQHandler+0x2f8>
 800978e:	2b20      	cmp	r3, #32
 8009790:	d005      	beq.n	800979e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009792:	e01d      	b.n	80097d0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	f043 0308 	orr.w	r3, r3, #8
 800979a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800979c:	e019      	b.n	80097d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	f043 0310 	orr.w	r3, r3, #16
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80097a6:	e014      	b.n	80097d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	f043 0320 	orr.w	r3, r3, #32
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80097b0:	e00f      	b.n	80097d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80097ba:	e00a      	b.n	80097d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80097c4:	e005      	b.n	80097d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80097ce:	e000      	b.n	80097d2 <HAL_CAN_IRQHandler+0x336>
            break;
 80097d0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	699a      	ldr	r2, [r3, #24]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80097e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2204      	movs	r2, #4
 80097e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d008      	beq.n	8009802 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	431a      	orrs	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f872 	bl	80098e6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009802:	bf00      	nop
 8009804:	3728      	adds	r7, #40	; 0x28
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800981e:	b480      	push	{r7}
 8009820:	b083      	sub	sp, #12
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009826:	bf00      	nop
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800984e:	bf00      	nop
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009862:	bf00      	nop
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800988a:	bf00      	nop
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800989e:	bf00      	nop
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80098da:	bf00      	nop
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b083      	sub	sp, #12
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80098ee:	bf00      	nop
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
	...

080098fc <__NVIC_SetPriorityGrouping>:
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800990c:	4b0c      	ldr	r3, [pc, #48]	; (8009940 <__NVIC_SetPriorityGrouping+0x44>)
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009918:	4013      	ands	r3, r2
 800991a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800992c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800992e:	4a04      	ldr	r2, [pc, #16]	; (8009940 <__NVIC_SetPriorityGrouping+0x44>)
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	60d3      	str	r3, [r2, #12]
}
 8009934:	bf00      	nop
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	e000ed00 	.word	0xe000ed00

08009944 <__NVIC_GetPriorityGrouping>:
{
 8009944:	b480      	push	{r7}
 8009946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009948:	4b04      	ldr	r3, [pc, #16]	; (800995c <__NVIC_GetPriorityGrouping+0x18>)
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	0a1b      	lsrs	r3, r3, #8
 800994e:	f003 0307 	and.w	r3, r3, #7
}
 8009952:	4618      	mov	r0, r3
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	e000ed00 	.word	0xe000ed00

08009960 <__NVIC_EnableIRQ>:
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	4603      	mov	r3, r0
 8009968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800996a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800996e:	2b00      	cmp	r3, #0
 8009970:	db0b      	blt.n	800998a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	f003 021f 	and.w	r2, r3, #31
 8009978:	4907      	ldr	r1, [pc, #28]	; (8009998 <__NVIC_EnableIRQ+0x38>)
 800997a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800997e:	095b      	lsrs	r3, r3, #5
 8009980:	2001      	movs	r0, #1
 8009982:	fa00 f202 	lsl.w	r2, r0, r2
 8009986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800998a:	bf00      	nop
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	e000e100 	.word	0xe000e100

0800999c <__NVIC_SetPriority>:
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	6039      	str	r1, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	db0a      	blt.n	80099c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	490c      	ldr	r1, [pc, #48]	; (80099e8 <__NVIC_SetPriority+0x4c>)
 80099b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ba:	0112      	lsls	r2, r2, #4
 80099bc:	b2d2      	uxtb	r2, r2
 80099be:	440b      	add	r3, r1
 80099c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80099c4:	e00a      	b.n	80099dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	4908      	ldr	r1, [pc, #32]	; (80099ec <__NVIC_SetPriority+0x50>)
 80099cc:	79fb      	ldrb	r3, [r7, #7]
 80099ce:	f003 030f 	and.w	r3, r3, #15
 80099d2:	3b04      	subs	r3, #4
 80099d4:	0112      	lsls	r2, r2, #4
 80099d6:	b2d2      	uxtb	r2, r2
 80099d8:	440b      	add	r3, r1
 80099da:	761a      	strb	r2, [r3, #24]
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	e000e100 	.word	0xe000e100
 80099ec:	e000ed00 	.word	0xe000ed00

080099f0 <NVIC_EncodePriority>:
{
 80099f0:	b480      	push	{r7}
 80099f2:	b089      	sub	sp, #36	; 0x24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f003 0307 	and.w	r3, r3, #7
 8009a02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	f1c3 0307 	rsb	r3, r3, #7
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	bf28      	it	cs
 8009a0e:	2304      	movcs	r3, #4
 8009a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	3304      	adds	r3, #4
 8009a16:	2b06      	cmp	r3, #6
 8009a18:	d902      	bls.n	8009a20 <NVIC_EncodePriority+0x30>
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	3b03      	subs	r3, #3
 8009a1e:	e000      	b.n	8009a22 <NVIC_EncodePriority+0x32>
 8009a20:	2300      	movs	r3, #0
 8009a22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a24:	f04f 32ff 	mov.w	r2, #4294967295
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2e:	43da      	mvns	r2, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	401a      	ands	r2, r3
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009a38:	f04f 31ff 	mov.w	r1, #4294967295
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a42:	43d9      	mvns	r1, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a48:	4313      	orrs	r3, r2
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3724      	adds	r7, #36	; 0x24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7ff ff4c 	bl	80098fc <__NVIC_SetPriorityGrouping>
}
 8009a64:	bf00      	nop
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009a7e:	f7ff ff61 	bl	8009944 <__NVIC_GetPriorityGrouping>
 8009a82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	68b9      	ldr	r1, [r7, #8]
 8009a88:	6978      	ldr	r0, [r7, #20]
 8009a8a:	f7ff ffb1 	bl	80099f0 <NVIC_EncodePriority>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a94:	4611      	mov	r1, r2
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff ff80 	bl	800999c <__NVIC_SetPriority>
}
 8009a9c:	bf00      	nop
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff ff54 	bl	8009960 <__NVIC_EnableIRQ>
}
 8009ab8:	bf00      	nop
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e054      	b.n	8009b7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	7f5b      	ldrb	r3, [r3, #29]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d105      	bne.n	8009ae8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fc fd3e 	bl	8006564 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	791b      	ldrb	r3, [r3, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10c      	bne.n	8009b10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a22      	ldr	r2, [pc, #136]	; (8009b84 <HAL_CRC_Init+0xc4>)
 8009afc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689a      	ldr	r2, [r3, #8]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0218 	bic.w	r2, r2, #24
 8009b0c:	609a      	str	r2, [r3, #8]
 8009b0e:	e00c      	b.n	8009b2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6899      	ldr	r1, [r3, #8]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f834 	bl	8009b88 <HAL_CRCEx_Polynomial_Set>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e028      	b.n	8009b7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	795b      	ldrb	r3, [r3, #5]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d105      	bne.n	8009b3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3a:	611a      	str	r2, [r3, #16]
 8009b3c:	e004      	b.n	8009b48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	6912      	ldr	r2, [r2, #16]
 8009b46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	695a      	ldr	r2, [r3, #20]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	699a      	ldr	r2, [r3, #24]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	04c11db7 	.word	0x04c11db7

08009b88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009b98:	231f      	movs	r3, #31
 8009b9a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009b9c:	bf00      	nop
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	1e5a      	subs	r2, r3, #1
 8009ba2:	613a      	str	r2, [r7, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d009      	beq.n	8009bbc <HAL_CRCEx_Polynomial_Set+0x34>
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	f003 031f 	and.w	r3, r3, #31
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0f0      	beq.n	8009b9e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b18      	cmp	r3, #24
 8009bc0:	d846      	bhi.n	8009c50 <HAL_CRCEx_Polynomial_Set+0xc8>
 8009bc2:	a201      	add	r2, pc, #4	; (adr r2, 8009bc8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8009bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc8:	08009c57 	.word	0x08009c57
 8009bcc:	08009c51 	.word	0x08009c51
 8009bd0:	08009c51 	.word	0x08009c51
 8009bd4:	08009c51 	.word	0x08009c51
 8009bd8:	08009c51 	.word	0x08009c51
 8009bdc:	08009c51 	.word	0x08009c51
 8009be0:	08009c51 	.word	0x08009c51
 8009be4:	08009c51 	.word	0x08009c51
 8009be8:	08009c45 	.word	0x08009c45
 8009bec:	08009c51 	.word	0x08009c51
 8009bf0:	08009c51 	.word	0x08009c51
 8009bf4:	08009c51 	.word	0x08009c51
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c51 	.word	0x08009c51
 8009c00:	08009c51 	.word	0x08009c51
 8009c04:	08009c51 	.word	0x08009c51
 8009c08:	08009c39 	.word	0x08009c39
 8009c0c:	08009c51 	.word	0x08009c51
 8009c10:	08009c51 	.word	0x08009c51
 8009c14:	08009c51 	.word	0x08009c51
 8009c18:	08009c51 	.word	0x08009c51
 8009c1c:	08009c51 	.word	0x08009c51
 8009c20:	08009c51 	.word	0x08009c51
 8009c24:	08009c51 	.word	0x08009c51
 8009c28:	08009c2d 	.word	0x08009c2d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	2b06      	cmp	r3, #6
 8009c30:	d913      	bls.n	8009c5a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009c36:	e010      	b.n	8009c5a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	2b07      	cmp	r3, #7
 8009c3c:	d90f      	bls.n	8009c5e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009c42:	e00c      	b.n	8009c5e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	d90b      	bls.n	8009c62 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009c4e:	e008      	b.n	8009c62 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	75fb      	strb	r3, [r7, #23]
      break;
 8009c54:	e006      	b.n	8009c64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009c56:	bf00      	nop
 8009c58:	e004      	b.n	8009c64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009c5a:	bf00      	nop
 8009c5c:	e002      	b.n	8009c64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009c5e:	bf00      	nop
 8009c60:	e000      	b.n	8009c64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009c62:	bf00      	nop
  }
  if (status == HAL_OK)
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10d      	bne.n	8009c86 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f023 0118 	bic.w	r1, r3, #24
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	430a      	orrs	r2, r1
 8009c84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	371c      	adds	r7, #28
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e037      	b.n	8009d1a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2202      	movs	r2, #2
 8009cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009cc0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009cc4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f941 	bl	8009f84 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}  
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	607a      	str	r2, [r7, #4]
 8009d2e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d101      	bne.n	8009d42 <HAL_DMA_Start_IT+0x20>
 8009d3e:	2302      	movs	r3, #2
 8009d40:	e04a      	b.n	8009dd8 <HAL_DMA_Start_IT+0xb6>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d13a      	bne.n	8009dca <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f022 0201 	bic.w	r2, r2, #1
 8009d70:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	68b9      	ldr	r1, [r7, #8]
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f8d4 	bl	8009f26 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d008      	beq.n	8009d98 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f042 020e 	orr.w	r2, r2, #14
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	e00f      	b.n	8009db8 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 020a 	orr.w	r2, r2, #10
 8009da6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0204 	bic.w	r2, r2, #4
 8009db6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f042 0201 	orr.w	r2, r2, #1
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	e005      	b.n	8009dd6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
} 
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfc:	2204      	movs	r2, #4
 8009dfe:	409a      	lsls	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4013      	ands	r3, r2
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d024      	beq.n	8009e52 <HAL_DMA_IRQHandler+0x72>
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	f003 0304 	and.w	r3, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d01f      	beq.n	8009e52 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d107      	bne.n	8009e30 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f022 0204 	bic.w	r2, r2, #4
 8009e2e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e38:	2104      	movs	r1, #4
 8009e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8009e3e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d06a      	beq.n	8009f1e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8009e50:	e065      	b.n	8009f1e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	2202      	movs	r2, #2
 8009e58:	409a      	lsls	r2, r3
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d02c      	beq.n	8009ebc <HAL_DMA_IRQHandler+0xdc>
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d027      	beq.n	8009ebc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0320 	and.w	r3, r3, #32
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10b      	bne.n	8009e92 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f022 020a 	bic.w	r2, r2, #10
 8009e88:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9a:	2102      	movs	r1, #2
 8009e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8009ea0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d035      	beq.n	8009f1e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8009eba:	e030      	b.n	8009f1e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	409a      	lsls	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d028      	beq.n	8009f1e <HAL_DMA_IRQHandler+0x13e>
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d023      	beq.n	8009f1e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 020e 	bic.w	r2, r2, #14
 8009ee4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eee:	2101      	movs	r1, #1
 8009ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8009ef4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d004      	beq.n	8009f1e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	4798      	blx	r3
    }
  }
}  
 8009f1c:	e7ff      	b.n	8009f1e <HAL_DMA_IRQHandler+0x13e>
 8009f1e:	bf00      	nop
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b085      	sub	sp, #20
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	60f8      	str	r0, [r7, #12]
 8009f2e:	60b9      	str	r1, [r7, #8]
 8009f30:	607a      	str	r2, [r7, #4]
 8009f32:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8009f42:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	2b10      	cmp	r3, #16
 8009f52:	d108      	bne.n	8009f66 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009f64:	e007      	b.n	8009f76 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	60da      	str	r2, [r3, #12]
}
 8009f76:	bf00      	nop
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
	...

08009f84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	4b14      	ldr	r3, [pc, #80]	; (8009fe4 <DMA_CalcBaseAndBitshift+0x60>)
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d80f      	bhi.n	8009fb8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	4b12      	ldr	r3, [pc, #72]	; (8009fe8 <DMA_CalcBaseAndBitshift+0x64>)
 8009fa0:	4413      	add	r3, r2
 8009fa2:	4a12      	ldr	r2, [pc, #72]	; (8009fec <DMA_CalcBaseAndBitshift+0x68>)
 8009fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa8:	091b      	lsrs	r3, r3, #4
 8009faa:	009a      	lsls	r2, r3, #2
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a0f      	ldr	r2, [pc, #60]	; (8009ff0 <DMA_CalcBaseAndBitshift+0x6c>)
 8009fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8009fb6:	e00e      	b.n	8009fd6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	; (8009ff4 <DMA_CalcBaseAndBitshift+0x70>)
 8009fc0:	4413      	add	r3, r2
 8009fc2:	4a0a      	ldr	r2, [pc, #40]	; (8009fec <DMA_CalcBaseAndBitshift+0x68>)
 8009fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc8:	091b      	lsrs	r3, r3, #4
 8009fca:	009a      	lsls	r2, r3, #2
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a09      	ldr	r2, [pc, #36]	; (8009ff8 <DMA_CalcBaseAndBitshift+0x74>)
 8009fd4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009fd6:	bf00      	nop
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	40020407 	.word	0x40020407
 8009fe8:	bffdfff8 	.word	0xbffdfff8
 8009fec:	cccccccd 	.word	0xcccccccd
 8009ff0:	40020000 	.word	0x40020000
 8009ff4:	bffdfbf8 	.word	0xbffdfbf8
 8009ff8:	40020400 	.word	0x40020400

08009ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b087      	sub	sp, #28
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a006:	2300      	movs	r3, #0
 800a008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a00a:	e154      	b.n	800a2b6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	2101      	movs	r1, #1
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	fa01 f303 	lsl.w	r3, r1, r3
 800a018:	4013      	ands	r3, r2
 800a01a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 8146 	beq.w	800a2b0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	f003 0303 	and.w	r3, r3, #3
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d005      	beq.n	800a03c <HAL_GPIO_Init+0x40>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f003 0303 	and.w	r3, r3, #3
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d130      	bne.n	800a09e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	005b      	lsls	r3, r3, #1
 800a046:	2203      	movs	r2, #3
 800a048:	fa02 f303 	lsl.w	r3, r2, r3
 800a04c:	43db      	mvns	r3, r3
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	4013      	ands	r3, r2
 800a052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	68da      	ldr	r2, [r3, #12]
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	005b      	lsls	r3, r3, #1
 800a05c:	fa02 f303 	lsl.w	r3, r2, r3
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	4313      	orrs	r3, r2
 800a064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a072:	2201      	movs	r2, #1
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	fa02 f303 	lsl.w	r3, r2, r3
 800a07a:	43db      	mvns	r3, r3
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	4013      	ands	r3, r2
 800a080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	091b      	lsrs	r3, r3, #4
 800a088:	f003 0201 	and.w	r2, r3, #1
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	fa02 f303 	lsl.w	r3, r2, r3
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	4313      	orrs	r3, r2
 800a096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d017      	beq.n	800a0da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	2203      	movs	r2, #3
 800a0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ba:	43db      	mvns	r3, r3
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	4013      	ands	r3, r2
 800a0c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	689a      	ldr	r2, [r3, #8]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	005b      	lsls	r3, r3, #1
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f003 0303 	and.w	r3, r3, #3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d123      	bne.n	800a12e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	08da      	lsrs	r2, r3, #3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3208      	adds	r2, #8
 800a0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f003 0307 	and.w	r3, r3, #7
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	220f      	movs	r2, #15
 800a0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a102:	43db      	mvns	r3, r3
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4013      	ands	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	691a      	ldr	r2, [r3, #16]
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f003 0307 	and.w	r3, r3, #7
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	fa02 f303 	lsl.w	r3, r2, r3
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	08da      	lsrs	r2, r3, #3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3208      	adds	r2, #8
 800a128:	6939      	ldr	r1, [r7, #16]
 800a12a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	2203      	movs	r2, #3
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	43db      	mvns	r3, r3
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	4013      	ands	r3, r2
 800a144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	f003 0203 	and.w	r2, r3, #3
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	fa02 f303 	lsl.w	r3, r2, r3
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	4313      	orrs	r3, r2
 800a15a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 80a0 	beq.w	800a2b0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a170:	4b58      	ldr	r3, [pc, #352]	; (800a2d4 <HAL_GPIO_Init+0x2d8>)
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	4a57      	ldr	r2, [pc, #348]	; (800a2d4 <HAL_GPIO_Init+0x2d8>)
 800a176:	f043 0301 	orr.w	r3, r3, #1
 800a17a:	6193      	str	r3, [r2, #24]
 800a17c:	4b55      	ldr	r3, [pc, #340]	; (800a2d4 <HAL_GPIO_Init+0x2d8>)
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	60bb      	str	r3, [r7, #8]
 800a186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a188:	4a53      	ldr	r2, [pc, #332]	; (800a2d8 <HAL_GPIO_Init+0x2dc>)
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	089b      	lsrs	r3, r3, #2
 800a18e:	3302      	adds	r3, #2
 800a190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	f003 0303 	and.w	r3, r3, #3
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	220f      	movs	r2, #15
 800a1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a4:	43db      	mvns	r3, r3
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a1b2:	d019      	beq.n	800a1e8 <HAL_GPIO_Init+0x1ec>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a49      	ldr	r2, [pc, #292]	; (800a2dc <HAL_GPIO_Init+0x2e0>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d013      	beq.n	800a1e4 <HAL_GPIO_Init+0x1e8>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a48      	ldr	r2, [pc, #288]	; (800a2e0 <HAL_GPIO_Init+0x2e4>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d00d      	beq.n	800a1e0 <HAL_GPIO_Init+0x1e4>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a47      	ldr	r2, [pc, #284]	; (800a2e4 <HAL_GPIO_Init+0x2e8>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d007      	beq.n	800a1dc <HAL_GPIO_Init+0x1e0>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a46      	ldr	r2, [pc, #280]	; (800a2e8 <HAL_GPIO_Init+0x2ec>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d101      	bne.n	800a1d8 <HAL_GPIO_Init+0x1dc>
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	e008      	b.n	800a1ea <HAL_GPIO_Init+0x1ee>
 800a1d8:	2305      	movs	r3, #5
 800a1da:	e006      	b.n	800a1ea <HAL_GPIO_Init+0x1ee>
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e004      	b.n	800a1ea <HAL_GPIO_Init+0x1ee>
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	e002      	b.n	800a1ea <HAL_GPIO_Init+0x1ee>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e000      	b.n	800a1ea <HAL_GPIO_Init+0x1ee>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	f002 0203 	and.w	r2, r2, #3
 800a1f0:	0092      	lsls	r2, r2, #2
 800a1f2:	4093      	lsls	r3, r2
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a1fa:	4937      	ldr	r1, [pc, #220]	; (800a2d8 <HAL_GPIO_Init+0x2dc>)
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	089b      	lsrs	r3, r3, #2
 800a200:	3302      	adds	r3, #2
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a208:	4b38      	ldr	r3, [pc, #224]	; (800a2ec <HAL_GPIO_Init+0x2f0>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	43db      	mvns	r3, r3
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	4013      	ands	r3, r2
 800a216:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4313      	orrs	r3, r2
 800a22a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a22c:	4a2f      	ldr	r2, [pc, #188]	; (800a2ec <HAL_GPIO_Init+0x2f0>)
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a232:	4b2e      	ldr	r3, [pc, #184]	; (800a2ec <HAL_GPIO_Init+0x2f0>)
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	43db      	mvns	r3, r3
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	4013      	ands	r3, r2
 800a240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4313      	orrs	r3, r2
 800a254:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a256:	4a25      	ldr	r2, [pc, #148]	; (800a2ec <HAL_GPIO_Init+0x2f0>)
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a25c:	4b23      	ldr	r3, [pc, #140]	; (800a2ec <HAL_GPIO_Init+0x2f0>)
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	43db      	mvns	r3, r3
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	4013      	ands	r3, r2
 800a26a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a280:	4a1a      	ldr	r2, [pc, #104]	; (800a2ec <HAL_GPIO_Init+0x2f0>)
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a286:	4b19      	ldr	r3, [pc, #100]	; (800a2ec <HAL_GPIO_Init+0x2f0>)
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	43db      	mvns	r3, r3
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	4013      	ands	r3, r2
 800a294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a2aa:	4a10      	ldr	r2, [pc, #64]	; (800a2ec <HAL_GPIO_Init+0x2f0>)
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f47f aea3 	bne.w	800a00c <HAL_GPIO_Init+0x10>
  }
}
 800a2c6:	bf00      	nop
 800a2c8:	bf00      	nop
 800a2ca:	371c      	adds	r7, #28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	40021000 	.word	0x40021000
 800a2d8:	40010000 	.word	0x40010000
 800a2dc:	48000400 	.word	0x48000400
 800a2e0:	48000800 	.word	0x48000800
 800a2e4:	48000c00 	.word	0x48000c00
 800a2e8:	48001000 	.word	0x48001000
 800a2ec:	40010400 	.word	0x40010400

0800a2f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	807b      	strh	r3, [r7, #2]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a300:	787b      	ldrb	r3, [r7, #1]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a306:	887a      	ldrh	r2, [r7, #2]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a30c:	e002      	b.n	800a314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a30e:	887a      	ldrh	r2, [r7, #2]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a332:	887a      	ldrh	r2, [r7, #2]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	4013      	ands	r3, r2
 800a338:	041a      	lsls	r2, r3, #16
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	43d9      	mvns	r1, r3
 800a33e:	887b      	ldrh	r3, [r7, #2]
 800a340:	400b      	ands	r3, r1
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	619a      	str	r2, [r3, #24]
}
 800a348:	bf00      	nop
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e081      	b.n	800a46a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d106      	bne.n	800a380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7fc f912 	bl	80065a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2224      	movs	r2, #36	; 0x24
 800a384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 0201 	bic.w	r2, r2, #1
 800a396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a3a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d107      	bne.n	800a3ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689a      	ldr	r2, [r3, #8]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3ca:	609a      	str	r2, [r3, #8]
 800a3cc:	e006      	b.n	800a3dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a3da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d104      	bne.n	800a3ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	6812      	ldr	r2, [r2, #0]
 800a3f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a3fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a400:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a410:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	691a      	ldr	r2, [r3, #16]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	699b      	ldr	r3, [r3, #24]
 800a422:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	430a      	orrs	r2, r1
 800a42a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	69d9      	ldr	r1, [r3, #28]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a1a      	ldr	r2, [r3, #32]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f042 0201 	orr.w	r2, r2, #1
 800a44a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2220      	movs	r2, #32
 800a456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
	...

0800a474 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af02      	add	r7, sp, #8
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	607a      	str	r2, [r7, #4]
 800a47e:	461a      	mov	r2, r3
 800a480:	460b      	mov	r3, r1
 800a482:	817b      	strh	r3, [r7, #10]
 800a484:	4613      	mov	r3, r2
 800a486:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	2b20      	cmp	r3, #32
 800a492:	f040 80da 	bne.w	800a64a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_I2C_Master_Transmit+0x30>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e0d3      	b.n	800a64c <HAL_I2C_Master_Transmit+0x1d8>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a4ac:	f7fd fba6 	bl	8007bfc <HAL_GetTick>
 800a4b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	2319      	movs	r3, #25
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 f9e6 	bl	800a890 <I2C_WaitOnFlagUntilTimeout>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e0be      	b.n	800a64c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2221      	movs	r2, #33	; 0x21
 800a4d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2210      	movs	r2, #16
 800a4da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	893a      	ldrh	r2, [r7, #8]
 800a4ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	2bff      	cmp	r3, #255	; 0xff
 800a4fe:	d90e      	bls.n	800a51e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	22ff      	movs	r2, #255	; 0xff
 800a504:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	8979      	ldrh	r1, [r7, #10]
 800a50e:	4b51      	ldr	r3, [pc, #324]	; (800a654 <HAL_I2C_Master_Transmit+0x1e0>)
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fb58 	bl	800abcc <I2C_TransferConfig>
 800a51c:	e06c      	b.n	800a5f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a522:	b29a      	uxth	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	8979      	ldrh	r1, [r7, #10]
 800a530:	4b48      	ldr	r3, [pc, #288]	; (800a654 <HAL_I2C_Master_Transmit+0x1e0>)
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 fb47 	bl	800abcc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800a53e:	e05b      	b.n	800a5f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	6a39      	ldr	r1, [r7, #32]
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 f9e3 	bl	800a910 <I2C_WaitOnTXISFlagUntilTimeout>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d001      	beq.n	800a554 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	e07b      	b.n	800a64c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	781a      	ldrb	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a56e:	b29b      	uxth	r3, r3
 800a570:	3b01      	subs	r3, #1
 800a572:	b29a      	uxth	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a57c:	3b01      	subs	r3, #1
 800a57e:	b29a      	uxth	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a588:	b29b      	uxth	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d034      	beq.n	800a5f8 <HAL_I2C_Master_Transmit+0x184>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	d130      	bne.n	800a5f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	2200      	movs	r2, #0
 800a59e:	2180      	movs	r1, #128	; 0x80
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 f975 	bl	800a890 <I2C_WaitOnFlagUntilTimeout>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e04d      	b.n	800a64c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	2bff      	cmp	r3, #255	; 0xff
 800a5b8:	d90e      	bls.n	800a5d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	22ff      	movs	r2, #255	; 0xff
 800a5be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	8979      	ldrh	r1, [r7, #10]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 fafb 	bl	800abcc <I2C_TransferConfig>
 800a5d6:	e00f      	b.n	800a5f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	8979      	ldrh	r1, [r7, #10]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 faea 	bl	800abcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d19e      	bne.n	800a540 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	6a39      	ldr	r1, [r7, #32]
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f000 f9c2 	bl	800a990 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e01a      	b.n	800a64c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2220      	movs	r2, #32
 800a61c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6859      	ldr	r1, [r3, #4]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	4b0b      	ldr	r3, [pc, #44]	; (800a658 <HAL_I2C_Master_Transmit+0x1e4>)
 800a62a:	400b      	ands	r3, r1
 800a62c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2220      	movs	r2, #32
 800a632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	e000      	b.n	800a64c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a64a:	2302      	movs	r3, #2
  }
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	80002000 	.word	0x80002000
 800a658:	fe00e800 	.word	0xfe00e800

0800a65c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af02      	add	r7, sp, #8
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	607a      	str	r2, [r7, #4]
 800a666:	461a      	mov	r2, r3
 800a668:	460b      	mov	r3, r1
 800a66a:	817b      	strh	r3, [r7, #10]
 800a66c:	4613      	mov	r3, r2
 800a66e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b20      	cmp	r3, #32
 800a67a:	f040 80db 	bne.w	800a834 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a684:	2b01      	cmp	r3, #1
 800a686:	d101      	bne.n	800a68c <HAL_I2C_Master_Receive+0x30>
 800a688:	2302      	movs	r3, #2
 800a68a:	e0d4      	b.n	800a836 <HAL_I2C_Master_Receive+0x1da>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a694:	f7fd fab2 	bl	8007bfc <HAL_GetTick>
 800a698:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	2319      	movs	r3, #25
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f000 f8f2 	bl	800a890 <I2C_WaitOnFlagUntilTimeout>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e0bf      	b.n	800a836 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2222      	movs	r2, #34	; 0x22
 800a6ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2210      	movs	r2, #16
 800a6c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	893a      	ldrh	r2, [r7, #8]
 800a6d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	2bff      	cmp	r3, #255	; 0xff
 800a6e6:	d90e      	bls.n	800a706 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	22ff      	movs	r2, #255	; 0xff
 800a6ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	8979      	ldrh	r1, [r7, #10]
 800a6f6:	4b52      	ldr	r3, [pc, #328]	; (800a840 <HAL_I2C_Master_Receive+0x1e4>)
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 fa64 	bl	800abcc <I2C_TransferConfig>
 800a704:	e06d      	b.n	800a7e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a714:	b2da      	uxtb	r2, r3
 800a716:	8979      	ldrh	r1, [r7, #10]
 800a718:	4b49      	ldr	r3, [pc, #292]	; (800a840 <HAL_I2C_Master_Receive+0x1e4>)
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 fa53 	bl	800abcc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a726:	e05c      	b.n	800a7e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	6a39      	ldr	r1, [r7, #32]
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f000 f96b 	bl	800aa08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e07c      	b.n	800a836 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	b2d2      	uxtb	r2, r2
 800a748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	1c5a      	adds	r2, r3, #1
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a758:	3b01      	subs	r3, #1
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a764:	b29b      	uxth	r3, r3
 800a766:	3b01      	subs	r3, #1
 800a768:	b29a      	uxth	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a772:	b29b      	uxth	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	d034      	beq.n	800a7e2 <HAL_I2C_Master_Receive+0x186>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d130      	bne.n	800a7e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	6a3b      	ldr	r3, [r7, #32]
 800a786:	2200      	movs	r2, #0
 800a788:	2180      	movs	r1, #128	; 0x80
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 f880 	bl	800a890 <I2C_WaitOnFlagUntilTimeout>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e04d      	b.n	800a836 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	2bff      	cmp	r3, #255	; 0xff
 800a7a2:	d90e      	bls.n	800a7c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	22ff      	movs	r2, #255	; 0xff
 800a7a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	8979      	ldrh	r1, [r7, #10]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f000 fa06 	bl	800abcc <I2C_TransferConfig>
 800a7c0:	e00f      	b.n	800a7e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	8979      	ldrh	r1, [r7, #10]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f000 f9f5 	bl	800abcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d19d      	bne.n	800a728 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	6a39      	ldr	r1, [r7, #32]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 f8cd 	bl	800a990 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e01a      	b.n	800a836 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2220      	movs	r2, #32
 800a806:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6859      	ldr	r1, [r3, #4]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	4b0c      	ldr	r3, [pc, #48]	; (800a844 <HAL_I2C_Master_Receive+0x1e8>)
 800a814:	400b      	ands	r3, r1
 800a816:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	e000      	b.n	800a836 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a834:	2302      	movs	r3, #2
  }
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	80002400 	.word	0x80002400
 800a844:	fe00e800 	.word	0xfe00e800

0800a848 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d103      	bne.n	800a866 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2200      	movs	r2, #0
 800a864:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	2b01      	cmp	r3, #1
 800a872:	d007      	beq.n	800a884 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	699a      	ldr	r2, [r3, #24]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f042 0201 	orr.w	r2, r2, #1
 800a882:	619a      	str	r2, [r3, #24]
  }
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	4613      	mov	r3, r2
 800a89e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a8a0:	e022      	b.n	800a8e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a8:	d01e      	beq.n	800a8e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8aa:	f7fd f9a7 	bl	8007bfc <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d302      	bcc.n	800a8c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d113      	bne.n	800a8e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c4:	f043 0220 	orr.w	r2, r3, #32
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e00f      	b.n	800a908 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	699a      	ldr	r2, [r3, #24]
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	bf0c      	ite	eq
 800a8f8:	2301      	moveq	r3, #1
 800a8fa:	2300      	movne	r3, #0
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	461a      	mov	r2, r3
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	429a      	cmp	r2, r3
 800a904:	d0cd      	beq.n	800a8a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a91c:	e02c      	b.n	800a978 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	68b9      	ldr	r1, [r7, #8]
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f000 f8dc 	bl	800aae0 <I2C_IsAcknowledgeFailed>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e02a      	b.n	800a988 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a938:	d01e      	beq.n	800a978 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a93a:	f7fd f95f 	bl	8007bfc <HAL_GetTick>
 800a93e:	4602      	mov	r2, r0
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	429a      	cmp	r2, r3
 800a948:	d302      	bcc.n	800a950 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d113      	bne.n	800a978 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a954:	f043 0220 	orr.w	r2, r3, #32
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2220      	movs	r2, #32
 800a960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e007      	b.n	800a988 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b02      	cmp	r3, #2
 800a984:	d1cb      	bne.n	800a91e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a99c:	e028      	b.n	800a9f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	68b9      	ldr	r1, [r7, #8]
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 f89c 	bl	800aae0 <I2C_IsAcknowledgeFailed>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e026      	b.n	800aa00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9b2:	f7fd f923 	bl	8007bfc <HAL_GetTick>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d302      	bcc.n	800a9c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d113      	bne.n	800a9f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9cc:	f043 0220 	orr.w	r2, r3, #32
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e007      	b.n	800aa00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	f003 0320 	and.w	r3, r3, #32
 800a9fa:	2b20      	cmp	r3, #32
 800a9fc:	d1cf      	bne.n	800a99e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aa14:	e055      	b.n	800aac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	68b9      	ldr	r1, [r7, #8]
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 f860 	bl	800aae0 <I2C_IsAcknowledgeFailed>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e053      	b.n	800aad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	f003 0320 	and.w	r3, r3, #32
 800aa34:	2b20      	cmp	r3, #32
 800aa36:	d129      	bne.n	800aa8c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	f003 0304 	and.w	r3, r3, #4
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	d105      	bne.n	800aa52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d001      	beq.n	800aa52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e03f      	b.n	800aad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2220      	movs	r2, #32
 800aa58:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6859      	ldr	r1, [r3, #4]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	4b1d      	ldr	r3, [pc, #116]	; (800aadc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800aa66:	400b      	ands	r3, r1
 800aa68:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2220      	movs	r2, #32
 800aa74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e022      	b.n	800aad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa8c:	f7fd f8b6 	bl	8007bfc <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d302      	bcc.n	800aaa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10f      	bne.n	800aac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa6:	f043 0220 	orr.w	r2, r3, #32
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2220      	movs	r2, #32
 800aab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e007      	b.n	800aad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	f003 0304 	and.w	r3, r3, #4
 800aacc:	2b04      	cmp	r3, #4
 800aace:	d1a2      	bne.n	800aa16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	fe00e800 	.word	0xfe00e800

0800aae0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	f003 0310 	and.w	r3, r3, #16
 800aaf6:	2b10      	cmp	r3, #16
 800aaf8:	d161      	bne.n	800abbe <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab08:	d02b      	beq.n	800ab62 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab18:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab1a:	e022      	b.n	800ab62 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab22:	d01e      	beq.n	800ab62 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab24:	f7fd f86a 	bl	8007bfc <HAL_GetTick>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d302      	bcc.n	800ab3a <I2C_IsAcknowledgeFailed+0x5a>
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d113      	bne.n	800ab62 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab3e:	f043 0220 	orr.w	r2, r3, #32
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2220      	movs	r2, #32
 800ab4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e02e      	b.n	800abc0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	f003 0320 	and.w	r3, r3, #32
 800ab6c:	2b20      	cmp	r3, #32
 800ab6e:	d1d5      	bne.n	800ab1c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2210      	movs	r2, #16
 800ab76:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff fe61 	bl	800a848 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6859      	ldr	r1, [r3, #4]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	4b0d      	ldr	r3, [pc, #52]	; (800abc8 <I2C_IsAcknowledgeFailed+0xe8>)
 800ab92:	400b      	ands	r3, r1
 800ab94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9a:	f043 0204 	orr.w	r2, r3, #4
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2220      	movs	r2, #32
 800aba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e000      	b.n	800abc0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	fe00e800 	.word	0xfe00e800

0800abcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	607b      	str	r3, [r7, #4]
 800abd6:	460b      	mov	r3, r1
 800abd8:	817b      	strh	r3, [r7, #10]
 800abda:	4613      	mov	r3, r2
 800abdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	685a      	ldr	r2, [r3, #4]
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	0d5b      	lsrs	r3, r3, #21
 800abe8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800abec:	4b0d      	ldr	r3, [pc, #52]	; (800ac24 <I2C_TransferConfig+0x58>)
 800abee:	430b      	orrs	r3, r1
 800abf0:	43db      	mvns	r3, r3
 800abf2:	ea02 0103 	and.w	r1, r2, r3
 800abf6:	897b      	ldrh	r3, [r7, #10]
 800abf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800abfc:	7a7b      	ldrb	r3, [r7, #9]
 800abfe:	041b      	lsls	r3, r3, #16
 800ac00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac04:	431a      	orrs	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	431a      	orrs	r2, r3
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	431a      	orrs	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	430a      	orrs	r2, r1
 800ac14:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	03ff63ff 	.word	0x03ff63ff

0800ac28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b20      	cmp	r3, #32
 800ac3c:	d138      	bne.n	800acb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d101      	bne.n	800ac4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ac48:	2302      	movs	r3, #2
 800ac4a:	e032      	b.n	800acb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2224      	movs	r2, #36	; 0x24
 800ac58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f022 0201 	bic.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ac7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6819      	ldr	r1, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f042 0201 	orr.w	r2, r2, #1
 800ac9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	e000      	b.n	800acb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800acb0:	2302      	movs	r3, #2
  }
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b085      	sub	sp, #20
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	2b20      	cmp	r3, #32
 800acd2:	d139      	bne.n	800ad48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d101      	bne.n	800ace2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800acde:	2302      	movs	r3, #2
 800ace0:	e033      	b.n	800ad4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2224      	movs	r2, #36	; 0x24
 800acee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f022 0201 	bic.w	r2, r2, #1
 800ad00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ad10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	021b      	lsls	r3, r3, #8
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f042 0201 	orr.w	r2, r2, #1
 800ad32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2220      	movs	r2, #32
 800ad38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	e000      	b.n	800ad4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ad48:	2302      	movs	r3, #2
  }
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr

0800ad56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ad56:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad58:	b08b      	sub	sp, #44	; 0x2c
 800ad5a:	af06      	add	r7, sp, #24
 800ad5c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e0d0      	b.n	800af0a <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d106      	bne.n	800ad82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f00a fbb9 	bl	80154f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2203      	movs	r2, #3
 800ad86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f003 fde9 	bl	800e966 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad94:	2300      	movs	r3, #0
 800ad96:	73fb      	strb	r3, [r7, #15]
 800ad98:	e04c      	b.n	800ae34 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	6879      	ldr	r1, [r7, #4]
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	4613      	mov	r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4413      	add	r3, r2
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	440b      	add	r3, r1
 800adaa:	3301      	adds	r3, #1
 800adac:	2201      	movs	r2, #1
 800adae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	00db      	lsls	r3, r3, #3
 800adbe:	440b      	add	r3, r1
 800adc0:	7bfa      	ldrb	r2, [r7, #15]
 800adc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800adc4:	7bfa      	ldrb	r2, [r7, #15]
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	b298      	uxth	r0, r3
 800adca:	6879      	ldr	r1, [r7, #4]
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	440b      	add	r3, r1
 800add6:	3336      	adds	r3, #54	; 0x36
 800add8:	4602      	mov	r2, r0
 800adda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	1c5a      	adds	r2, r3, #1
 800ade2:	4613      	mov	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	440b      	add	r3, r1
 800adec:	3303      	adds	r3, #3
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800adf2:	7bfa      	ldrb	r2, [r7, #15]
 800adf4:	6879      	ldr	r1, [r7, #4]
 800adf6:	4613      	mov	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	440b      	add	r3, r1
 800ae00:	3338      	adds	r3, #56	; 0x38
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ae06:	7bfa      	ldrb	r2, [r7, #15]
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	00db      	lsls	r3, r3, #3
 800ae12:	440b      	add	r3, r1
 800ae14:	333c      	adds	r3, #60	; 0x3c
 800ae16:	2200      	movs	r2, #0
 800ae18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ae1a:	7bfa      	ldrb	r2, [r7, #15]
 800ae1c:	6879      	ldr	r1, [r7, #4]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	00db      	lsls	r3, r3, #3
 800ae26:	440b      	add	r3, r1
 800ae28:	3340      	adds	r3, #64	; 0x40
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	3301      	adds	r3, #1
 800ae32:	73fb      	strb	r3, [r7, #15]
 800ae34:	7bfa      	ldrb	r2, [r7, #15]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d3ad      	bcc.n	800ad9a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]
 800ae42:	e044      	b.n	800aece <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ae44:	7bfa      	ldrb	r2, [r7, #15]
 800ae46:	6879      	ldr	r1, [r7, #4]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	440b      	add	r3, r1
 800ae52:	f203 1369 	addw	r3, r3, #361	; 0x169
 800ae56:	2200      	movs	r2, #0
 800ae58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ae5a:	7bfa      	ldrb	r2, [r7, #15]
 800ae5c:	6879      	ldr	r1, [r7, #4]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	440b      	add	r3, r1
 800ae68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ae6c:	7bfa      	ldrb	r2, [r7, #15]
 800ae6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ae70:	7bfa      	ldrb	r2, [r7, #15]
 800ae72:	6879      	ldr	r1, [r7, #4]
 800ae74:	4613      	mov	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	00db      	lsls	r3, r3, #3
 800ae7c:	440b      	add	r3, r1
 800ae7e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ae86:	7bfa      	ldrb	r2, [r7, #15]
 800ae88:	6879      	ldr	r1, [r7, #4]
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	00db      	lsls	r3, r3, #3
 800ae92:	440b      	add	r3, r1
 800ae94:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae9c:	7bfa      	ldrb	r2, [r7, #15]
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	4613      	mov	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	00db      	lsls	r3, r3, #3
 800aea8:	440b      	add	r3, r1
 800aeaa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aeb2:	7bfa      	ldrb	r2, [r7, #15]
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	00db      	lsls	r3, r3, #3
 800aebe:	440b      	add	r3, r1
 800aec0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800aec4:	2200      	movs	r2, #0
 800aec6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	3301      	adds	r3, #1
 800aecc:	73fb      	strb	r3, [r7, #15]
 800aece:	7bfa      	ldrb	r2, [r7, #15]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d3b5      	bcc.n	800ae44 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	603b      	str	r3, [r7, #0]
 800aede:	687e      	ldr	r6, [r7, #4]
 800aee0:	466d      	mov	r5, sp
 800aee2:	f106 0410 	add.w	r4, r6, #16
 800aee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	602b      	str	r3, [r5, #0]
 800aeee:	1d33      	adds	r3, r6, #4
 800aef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aef2:	6838      	ldr	r0, [r7, #0]
 800aef4:	f003 fd52 	bl	800e99c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b082      	sub	sp, #8
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800af20:	2b01      	cmp	r3, #1
 800af22:	d101      	bne.n	800af28 <HAL_PCD_Start+0x16>
 800af24:	2302      	movs	r3, #2
 800af26:	e016      	b.n	800af56 <HAL_PCD_Start+0x44>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4618      	mov	r0, r3
 800af36:	f003 fcff 	bl	800e938 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800af3a:	2101      	movs	r1, #1
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f00a fd7f 	bl	8015a40 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4618      	mov	r0, r3
 800af48:	f005 ff14 	bl	8010d74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b082      	sub	sp, #8
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f005 ff0d 	bl	8010d8a <USB_ReadInterrupts>
 800af70:	4603      	mov	r3, r0
 800af72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af7a:	d102      	bne.n	800af82 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 faf6 	bl	800b56e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4618      	mov	r0, r3
 800af88:	f005 feff 	bl	8010d8a <USB_ReadInterrupts>
 800af8c:	4603      	mov	r3, r0
 800af8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af96:	d112      	bne.n	800afbe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afaa:	b292      	uxth	r2, r2
 800afac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f00a fb48 	bl	8015646 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800afb6:	2100      	movs	r1, #0
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f8c7 	bl	800b14c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f005 fee1 	bl	8010d8a <USB_ReadInterrupts>
 800afc8:	4603      	mov	r3, r0
 800afca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afd2:	d10b      	bne.n	800afec <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afdc:	b29a      	uxth	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800afe6:	b292      	uxth	r2, r2
 800afe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f005 feca 	bl	8010d8a <USB_ReadInterrupts>
 800aff6:	4603      	mov	r3, r0
 800aff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800affc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b000:	d10b      	bne.n	800b01a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b014:	b292      	uxth	r2, r2
 800b016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4618      	mov	r0, r3
 800b020:	f005 feb3 	bl	8010d8a <USB_ReadInterrupts>
 800b024:	4603      	mov	r3, r0
 800b026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b02a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b02e:	d126      	bne.n	800b07e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b038:	b29a      	uxth	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f022 0204 	bic.w	r2, r2, #4
 800b042:	b292      	uxth	r2, r2
 800b044:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b050:	b29a      	uxth	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f022 0208 	bic.w	r2, r2, #8
 800b05a:	b292      	uxth	r2, r2
 800b05c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f00a fb29 	bl	80156b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b06e:	b29a      	uxth	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b078:	b292      	uxth	r2, r2
 800b07a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4618      	mov	r0, r3
 800b084:	f005 fe81 	bl	8010d8a <USB_ReadInterrupts>
 800b088:	4603      	mov	r3, r0
 800b08a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b08e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b092:	d126      	bne.n	800b0e2 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f042 0208 	orr.w	r2, r2, #8
 800b0a6:	b292      	uxth	r2, r2
 800b0a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0be:	b292      	uxth	r2, r2
 800b0c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f042 0204 	orr.w	r2, r2, #4
 800b0d6:	b292      	uxth	r2, r2
 800b0d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f00a fad1 	bl	8015684 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f005 fe4f 	bl	8010d8a <USB_ReadInterrupts>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0f6:	d10e      	bne.n	800b116 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b100:	b29a      	uxth	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b10a:	b292      	uxth	r2, r2
 800b10c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f00a fa8a 	bl	801562a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f005 fe35 	bl	8010d8a <USB_ReadInterrupts>
 800b120:	4603      	mov	r3, r0
 800b122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b12a:	d10b      	bne.n	800b144 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b134:	b29a      	uxth	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b13e:	b292      	uxth	r2, r2
 800b140:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d101      	bne.n	800b166 <HAL_PCD_SetAddress+0x1a>
 800b162:	2302      	movs	r3, #2
 800b164:	e013      	b.n	800b18e <HAL_PCD_SetAddress+0x42>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	78fa      	ldrb	r2, [r7, #3]
 800b172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	78fa      	ldrb	r2, [r7, #3]
 800b17c:	4611      	mov	r1, r2
 800b17e:	4618      	mov	r0, r3
 800b180:	f005 fde4 	bl	8010d4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b084      	sub	sp, #16
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	4608      	mov	r0, r1
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	70fb      	strb	r3, [r7, #3]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	803b      	strh	r3, [r7, #0]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b1b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	da0e      	bge.n	800b1da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	f003 0307 	and.w	r3, r3, #7
 800b1c2:	1c5a      	adds	r2, r3, #1
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	705a      	strb	r2, [r3, #1]
 800b1d8:	e00e      	b.n	800b1f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b1da:	78fb      	ldrb	r3, [r7, #3]
 800b1dc:	f003 0207 	and.w	r2, r3, #7
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	00db      	lsls	r3, r3, #3
 800b1e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	f003 0307 	and.w	r3, r3, #7
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b204:	883a      	ldrh	r2, [r7, #0]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	78ba      	ldrb	r2, [r7, #2]
 800b20e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	785b      	ldrb	r3, [r3, #1]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d004      	beq.n	800b222 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b222:	78bb      	ldrb	r3, [r7, #2]
 800b224:	2b02      	cmp	r3, #2
 800b226:	d102      	bne.n	800b22e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b234:	2b01      	cmp	r3, #1
 800b236:	d101      	bne.n	800b23c <HAL_PCD_EP_Open+0xa6>
 800b238:	2302      	movs	r3, #2
 800b23a:	e00e      	b.n	800b25a <HAL_PCD_EP_Open+0xc4>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68f9      	ldr	r1, [r7, #12]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f003 fbc8 	bl	800e9e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b258:	7afb      	ldrb	r3, [r7, #11]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b084      	sub	sp, #16
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	460b      	mov	r3, r1
 800b26c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b26e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b272:	2b00      	cmp	r3, #0
 800b274:	da0e      	bge.n	800b294 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b276:	78fb      	ldrb	r3, [r7, #3]
 800b278:	f003 0307 	and.w	r3, r3, #7
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	4613      	mov	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4413      	add	r3, r2
 800b284:	00db      	lsls	r3, r3, #3
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	4413      	add	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2201      	movs	r2, #1
 800b290:	705a      	strb	r2, [r3, #1]
 800b292:	e00e      	b.n	800b2b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b294:	78fb      	ldrb	r3, [r7, #3]
 800b296:	f003 0207 	and.w	r2, r3, #7
 800b29a:	4613      	mov	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	00db      	lsls	r3, r3, #3
 800b2a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b2b2:	78fb      	ldrb	r3, [r7, #3]
 800b2b4:	f003 0307 	and.w	r3, r3, #7
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d101      	bne.n	800b2cc <HAL_PCD_EP_Close+0x6a>
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	e00e      	b.n	800b2ea <HAL_PCD_EP_Close+0x88>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68f9      	ldr	r1, [r7, #12]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f003 ff14 	bl	800f108 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b086      	sub	sp, #24
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	60f8      	str	r0, [r7, #12]
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	603b      	str	r3, [r7, #0]
 800b2fe:	460b      	mov	r3, r1
 800b300:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b302:	7afb      	ldrb	r3, [r7, #11]
 800b304:	f003 0207 	and.w	r2, r3, #7
 800b308:	4613      	mov	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4413      	add	r3, r2
 800b30e:	00db      	lsls	r3, r3, #3
 800b310:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	4413      	add	r3, r2
 800b318:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2200      	movs	r2, #0
 800b32a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2200      	movs	r2, #0
 800b330:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b332:	7afb      	ldrb	r3, [r7, #11]
 800b334:	f003 0307 	and.w	r3, r3, #7
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b33e:	7afb      	ldrb	r3, [r7, #11]
 800b340:	f003 0307 	and.w	r3, r3, #7
 800b344:	2b00      	cmp	r3, #0
 800b346:	d106      	bne.n	800b356 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6979      	ldr	r1, [r7, #20]
 800b34e:	4618      	mov	r0, r3
 800b350:	f004 f8c7 	bl	800f4e2 <USB_EPStartXfer>
 800b354:	e005      	b.n	800b362 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6979      	ldr	r1, [r7, #20]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f004 f8c0 	bl	800f4e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3718      	adds	r7, #24
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	460b      	mov	r3, r1
 800b376:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b378:	78fb      	ldrb	r3, [r7, #3]
 800b37a:	f003 0207 	and.w	r2, r3, #7
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	4613      	mov	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	440b      	add	r3, r1
 800b38a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b38e:	681b      	ldr	r3, [r3, #0]
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	607a      	str	r2, [r7, #4]
 800b3a6:	603b      	str	r3, [r7, #0]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	f003 0307 	and.w	r3, r3, #7
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4413      	add	r3, r2
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b3e8:	7afb      	ldrb	r3, [r7, #11]
 800b3ea:	f003 0307 	and.w	r3, r3, #7
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b3f4:	7afb      	ldrb	r3, [r7, #11]
 800b3f6:	f003 0307 	and.w	r3, r3, #7
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d106      	bne.n	800b40c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6979      	ldr	r1, [r7, #20]
 800b404:	4618      	mov	r0, r3
 800b406:	f004 f86c 	bl	800f4e2 <USB_EPStartXfer>
 800b40a:	e005      	b.n	800b418 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6979      	ldr	r1, [r7, #20]
 800b412:	4618      	mov	r0, r3
 800b414:	f004 f865 	bl	800f4e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b084      	sub	sp, #16
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	460b      	mov	r3, r1
 800b42c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b42e:	78fb      	ldrb	r3, [r7, #3]
 800b430:	f003 0207 	and.w	r2, r3, #7
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d901      	bls.n	800b440 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e03e      	b.n	800b4be <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b444:	2b00      	cmp	r3, #0
 800b446:	da0e      	bge.n	800b466 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	f003 0307 	and.w	r3, r3, #7
 800b44e:	1c5a      	adds	r2, r3, #1
 800b450:	4613      	mov	r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4413      	add	r3, r2
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	4413      	add	r3, r2
 800b45c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2201      	movs	r2, #1
 800b462:	705a      	strb	r2, [r3, #1]
 800b464:	e00c      	b.n	800b480 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b466:	78fa      	ldrb	r2, [r7, #3]
 800b468:	4613      	mov	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4413      	add	r3, r2
 800b46e:	00db      	lsls	r3, r3, #3
 800b470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	4413      	add	r3, r2
 800b478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2201      	movs	r2, #1
 800b484:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b486:	78fb      	ldrb	r3, [r7, #3]
 800b488:	f003 0307 	and.w	r3, r3, #7
 800b48c:	b2da      	uxtb	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d101      	bne.n	800b4a0 <HAL_PCD_EP_SetStall+0x7e>
 800b49c:	2302      	movs	r3, #2
 800b49e:	e00e      	b.n	800b4be <HAL_PCD_EP_SetStall+0x9c>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68f9      	ldr	r1, [r7, #12]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f005 fb4d 	bl	8010b4e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b4d2:	78fb      	ldrb	r3, [r7, #3]
 800b4d4:	f003 020f 	and.w	r2, r3, #15
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d901      	bls.n	800b4e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e040      	b.n	800b566 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b4e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	da0e      	bge.n	800b50a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b4ec:	78fb      	ldrb	r3, [r7, #3]
 800b4ee:	f003 0307 	and.w	r3, r3, #7
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4413      	add	r3, r2
 800b4fa:	00db      	lsls	r3, r3, #3
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	4413      	add	r3, r2
 800b500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2201      	movs	r2, #1
 800b506:	705a      	strb	r2, [r3, #1]
 800b508:	e00e      	b.n	800b528 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b50a:	78fb      	ldrb	r3, [r7, #3]
 800b50c:	f003 0207 	and.w	r2, r3, #7
 800b510:	4613      	mov	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4413      	add	r3, r2
 800b516:	00db      	lsls	r3, r3, #3
 800b518:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	4413      	add	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b52e:	78fb      	ldrb	r3, [r7, #3]
 800b530:	f003 0307 	and.w	r3, r3, #7
 800b534:	b2da      	uxtb	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b540:	2b01      	cmp	r3, #1
 800b542:	d101      	bne.n	800b548 <HAL_PCD_EP_ClrStall+0x82>
 800b544:	2302      	movs	r3, #2
 800b546:	e00e      	b.n	800b566 <HAL_PCD_EP_ClrStall+0xa0>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68f9      	ldr	r1, [r7, #12]
 800b556:	4618      	mov	r0, r3
 800b558:	f005 fb4a 	bl	8010bf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b096      	sub	sp, #88	; 0x58
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b576:	e3a9      	b.n	800bccc <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b580:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b584:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	f003 030f 	and.w	r3, r3, #15
 800b58e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800b592:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b596:	2b00      	cmp	r3, #0
 800b598:	f040 8164 	bne.w	800b864 <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b59c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b5a0:	f003 0310 	and.w	r3, r3, #16
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d152      	bne.n	800b64e <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b5b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5b8:	81fb      	strh	r3, [r7, #14]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	89fb      	ldrh	r3, [r7, #14]
 800b5c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3328      	adds	r3, #40	; 0x28
 800b5d0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	4413      	add	r3, r2
 800b5e6:	3302      	adds	r3, #2
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6812      	ldr	r2, [r2, #0]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b600:	695a      	ldr	r2, [r3, #20]
 800b602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b604:	69db      	ldr	r3, [r3, #28]
 800b606:	441a      	add	r2, r3
 800b608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b60a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b60c:	2100      	movs	r1, #0
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f009 fff1 	bl	80155f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f000 8355 	beq.w	800bccc <PCD_EP_ISR_Handler+0x75e>
 800b622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	2b00      	cmp	r3, #0
 800b628:	f040 8350 	bne.w	800bccc <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b632:	b2db      	uxtb	r3, r3
 800b634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	b292      	uxth	r2, r2
 800b640:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b64c:	e33e      	b.n	800bccc <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b654:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	881b      	ldrh	r3, [r3, #0]
 800b65c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b660:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d034      	beq.n	800b6d6 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b674:	b29b      	uxth	r3, r3
 800b676:	461a      	mov	r2, r3
 800b678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	4413      	add	r3, r2
 800b680:	3306      	adds	r3, #6
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	6812      	ldr	r2, [r2, #0]
 800b688:	4413      	add	r3, r2
 800b68a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b696:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6818      	ldr	r0, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	f005 fbc3 	bl	8010e36 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b6bc:	4013      	ands	r3, r2
 800b6be:	823b      	strh	r3, [r7, #16]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	8a3a      	ldrh	r2, [r7, #16]
 800b6c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b6ca:	b292      	uxth	r2, r2
 800b6cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f009 ff64 	bl	801559c <HAL_PCD_SetupStageCallback>
 800b6d4:	e2fa      	b.n	800bccc <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b6d6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f280 82f6 	bge.w	800bccc <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	881b      	ldrh	r3, [r3, #0]
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	83fb      	strh	r3, [r7, #30]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	8bfa      	ldrh	r2, [r7, #30]
 800b6f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b6fa:	b292      	uxth	r2, r2
 800b6fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b706:	b29b      	uxth	r3, r3
 800b708:	461a      	mov	r2, r3
 800b70a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	4413      	add	r3, r2
 800b712:	3306      	adds	r3, #6
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	6812      	ldr	r2, [r2, #0]
 800b71a:	4413      	add	r3, r2
 800b71c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b728:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b72c:	69db      	ldr	r3, [r3, #28]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d019      	beq.n	800b766 <PCD_EP_ISR_Handler+0x1f8>
 800b732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d015      	beq.n	800b766 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6818      	ldr	r0, [r3, #0]
 800b73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b740:	6959      	ldr	r1, [r3, #20]
 800b742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b744:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b748:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	f005 fb73 	bl	8010e36 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b752:	695a      	ldr	r2, [r3, #20]
 800b754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b756:	69db      	ldr	r3, [r3, #28]
 800b758:	441a      	add	r2, r3
 800b75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b75c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b75e:	2100      	movs	r1, #0
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f009 ff2d 	bl	80155c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	881b      	ldrh	r3, [r3, #0]
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b772:	2b00      	cmp	r3, #0
 800b774:	f040 82aa 	bne.w	800bccc <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b786:	b29b      	uxth	r3, r3
 800b788:	461a      	mov	r2, r3
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	4413      	add	r3, r2
 800b78e:	61bb      	str	r3, [r7, #24]
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d112      	bne.n	800b7c6 <PCD_EP_ISR_Handler+0x258>
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	801a      	strh	r2, [r3, #0]
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	881b      	ldrh	r3, [r3, #0]
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	801a      	strh	r2, [r3, #0]
 800b7c4:	e02f      	b.n	800b826 <PCD_EP_ISR_Handler+0x2b8>
 800b7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	2b3e      	cmp	r3, #62	; 0x3e
 800b7cc:	d813      	bhi.n	800b7f6 <PCD_EP_ISR_Handler+0x288>
 800b7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	085b      	lsrs	r3, r3, #1
 800b7d4:	647b      	str	r3, [r7, #68]	; 0x44
 800b7d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d002      	beq.n	800b7e8 <PCD_EP_ISR_Handler+0x27a>
 800b7e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	647b      	str	r3, [r7, #68]	; 0x44
 800b7e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	029b      	lsls	r3, r3, #10
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	801a      	strh	r2, [r3, #0]
 800b7f4:	e017      	b.n	800b826 <PCD_EP_ISR_Handler+0x2b8>
 800b7f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	095b      	lsrs	r3, r3, #5
 800b7fc:	647b      	str	r3, [r7, #68]	; 0x44
 800b7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	f003 031f 	and.w	r3, r3, #31
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <PCD_EP_ISR_Handler+0x2a2>
 800b80a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b80c:	3b01      	subs	r3, #1
 800b80e:	647b      	str	r3, [r7, #68]	; 0x44
 800b810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b812:	b29b      	uxth	r3, r3
 800b814:	029b      	lsls	r3, r3, #10
 800b816:	b29b      	uxth	r3, r3
 800b818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b81c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b820:	b29a      	uxth	r2, r3
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	881b      	ldrh	r3, [r3, #0]
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b836:	827b      	strh	r3, [r7, #18]
 800b838:	8a7b      	ldrh	r3, [r7, #18]
 800b83a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b83e:	827b      	strh	r3, [r7, #18]
 800b840:	8a7b      	ldrh	r3, [r7, #18]
 800b842:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b846:	827b      	strh	r3, [r7, #18]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	8a7b      	ldrh	r3, [r7, #18]
 800b84e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b85a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b85e:	b29b      	uxth	r3, r3
 800b860:	8013      	strh	r3, [r2, #0]
 800b862:	e233      	b.n	800bccc <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	461a      	mov	r2, r3
 800b86a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b878:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f280 80fc 	bge.w	800ba7a <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4413      	add	r3, r2
 800b890:	881b      	ldrh	r3, [r3, #0]
 800b892:	b29a      	uxth	r2, r3
 800b894:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b898:	4013      	ands	r3, r2
 800b89a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b8b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b8b4:	b292      	uxth	r2, r2
 800b8b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b8b8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800b8bc:	4613      	mov	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8d0:	7b1b      	ldrb	r3, [r3, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d125      	bne.n	800b922 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	4413      	add	r3, r2
 800b8ea:	3306      	adds	r3, #6
 800b8ec:	005b      	lsls	r3, r3, #1
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	6812      	ldr	r2, [r2, #0]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800b902:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b906:	2b00      	cmp	r3, #0
 800b908:	f000 8092 	beq.w	800ba30 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6818      	ldr	r0, [r3, #0]
 800b910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b912:	6959      	ldr	r1, [r3, #20]
 800b914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b916:	88da      	ldrh	r2, [r3, #6]
 800b918:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b91c:	f005 fa8b 	bl	8010e36 <USB_ReadPMA>
 800b920:	e086      	b.n	800ba30 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b924:	78db      	ldrb	r3, [r3, #3]
 800b926:	2b02      	cmp	r3, #2
 800b928:	d10a      	bne.n	800b940 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b92a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b92e:	461a      	mov	r2, r3
 800b930:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f9d8 	bl	800bce8 <HAL_PCD_EP_DB_Receive>
 800b938:	4603      	mov	r3, r0
 800b93a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b93e:	e077      	b.n	800ba30 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	461a      	mov	r2, r3
 800b946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	881b      	ldrh	r3, [r3, #0]
 800b950:	b29b      	uxth	r3, r3
 800b952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b95a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	461a      	mov	r2, r3
 800b964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	441a      	add	r2, r3
 800b96c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b97c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b980:	b29b      	uxth	r3, r3
 800b982:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	461a      	mov	r2, r3
 800b98a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	881b      	ldrh	r3, [r3, #0]
 800b994:	b29b      	uxth	r3, r3
 800b996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d024      	beq.n	800b9e8 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	00db      	lsls	r3, r3, #3
 800b9b0:	4413      	add	r3, r2
 800b9b2:	3302      	adds	r3, #2
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	6812      	ldr	r2, [r2, #0]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800b9ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d02e      	beq.n	800ba30 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6818      	ldr	r0, [r3, #0]
 800b9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d8:	6959      	ldr	r1, [r3, #20]
 800b9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9dc:	891a      	ldrh	r2, [r3, #8]
 800b9de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b9e2:	f005 fa28 	bl	8010e36 <USB_ReadPMA>
 800b9e6:	e023      	b.n	800ba30 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	00db      	lsls	r3, r3, #3
 800b9fa:	4413      	add	r3, r2
 800b9fc:	3306      	adds	r3, #6
 800b9fe:	005b      	lsls	r3, r3, #1
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	6812      	ldr	r2, [r2, #0]
 800ba04:	4413      	add	r3, r2
 800ba06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba10:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800ba14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d009      	beq.n	800ba30 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba22:	6959      	ldr	r1, [r3, #20]
 800ba24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba26:	895a      	ldrh	r2, [r3, #10]
 800ba28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba2c:	f005 fa03 	bl	8010e36 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ba30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba32:	69da      	ldr	r2, [r3, #28]
 800ba34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba38:	441a      	add	r2, r3
 800ba3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ba3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba40:	695a      	ldr	r2, [r3, #20]
 800ba42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba46:	441a      	add	r2, r3
 800ba48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba4a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ba4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d005      	beq.n	800ba60 <PCD_EP_ISR_Handler+0x4f2>
 800ba54:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800ba58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d206      	bcs.n	800ba6e <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ba60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f009 fdaa 	bl	80155c0 <HAL_PCD_DataOutStageCallback>
 800ba6c:	e005      	b.n	800ba7a <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ba74:	4618      	mov	r0, r3
 800ba76:	f003 fd34 	bl	800f4e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ba7a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ba7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 8122 	beq.w	800bccc <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800ba88:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ba8c:	1c5a      	adds	r2, r3, #1
 800ba8e:	4613      	mov	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	00db      	lsls	r3, r3, #3
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	4413      	add	r3, r2
 800ba9a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	461a      	mov	r2, r3
 800baa2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4413      	add	r3, r2
 800baaa:	881b      	ldrh	r3, [r3, #0]
 800baac:	b29b      	uxth	r3, r3
 800baae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800bab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bab6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	441a      	add	r2, r3
 800bac8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bacc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800bad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bada:	78db      	ldrb	r3, [r3, #3]
 800badc:	2b02      	cmp	r3, #2
 800bade:	f000 809d 	beq.w	800bc1c <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 800bae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae4:	2200      	movs	r2, #0
 800bae6:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bae8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800baec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d046      	beq.n	800bb82 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800baf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baf6:	785b      	ldrb	r3, [r3, #1]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d126      	bne.n	800bb4a <PCD_EP_ISR_Handler+0x5dc>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	627b      	str	r3, [r7, #36]	; 0x24
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb10:	4413      	add	r3, r2
 800bb12:	627b      	str	r3, [r7, #36]	; 0x24
 800bb14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	011a      	lsls	r2, r3, #4
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb22:	623b      	str	r3, [r7, #32]
 800bb24:	6a3b      	ldr	r3, [r7, #32]
 800bb26:	881b      	ldrh	r3, [r3, #0]
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	801a      	strh	r2, [r3, #0]
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	881b      	ldrh	r3, [r3, #0]
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	6a3b      	ldr	r3, [r7, #32]
 800bb46:	801a      	strh	r2, [r3, #0]
 800bb48:	e061      	b.n	800bc0e <PCD_EP_ISR_Handler+0x6a0>
 800bb4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb4c:	785b      	ldrb	r3, [r3, #1]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d15d      	bne.n	800bc0e <PCD_EP_ISR_Handler+0x6a0>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	461a      	mov	r2, r3
 800bb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb66:	4413      	add	r3, r2
 800bb68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	011a      	lsls	r2, r3, #4
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	4413      	add	r3, r2
 800bb74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb78:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	801a      	strh	r2, [r3, #0]
 800bb80:	e045      	b.n	800bc0e <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb8a:	785b      	ldrb	r3, [r3, #1]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d126      	bne.n	800bbde <PCD_EP_ISR_Handler+0x670>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	637b      	str	r3, [r7, #52]	; 0x34
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba4:	4413      	add	r3, r2
 800bba6:	637b      	str	r3, [r7, #52]	; 0x34
 800bba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	011a      	lsls	r2, r3, #4
 800bbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb0:	4413      	add	r3, r2
 800bbb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bbb6:	633b      	str	r3, [r7, #48]	; 0x30
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	801a      	strh	r2, [r3, #0]
 800bbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbca:	881b      	ldrh	r3, [r3, #0]
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	801a      	strh	r2, [r3, #0]
 800bbdc:	e017      	b.n	800bc0e <PCD_EP_ISR_Handler+0x6a0>
 800bbde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe0:	785b      	ldrb	r3, [r3, #1]
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d113      	bne.n	800bc0e <PCD_EP_ISR_Handler+0x6a0>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf4:	4413      	add	r3, r2
 800bbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	011a      	lsls	r2, r3, #4
 800bbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc00:	4413      	add	r3, r2
 800bc02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bc06:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bc0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	4619      	mov	r1, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f009 fcee 	bl	80155f6 <HAL_PCD_DataInStageCallback>
 800bc1a:	e057      	b.n	800bccc <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800bc1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc1e:	78db      	ldrb	r3, [r3, #3]
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d14c      	bne.n	800bcbe <PCD_EP_ISR_Handler+0x750>
 800bc24:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d146      	bne.n	800bcbe <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	00db      	lsls	r3, r3, #3
 800bc42:	4413      	add	r3, r2
 800bc44:	3302      	adds	r3, #2
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	6812      	ldr	r2, [r2, #0]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc58:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 800bc5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc5e:	699a      	ldr	r2, [r3, #24]
 800bc60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d907      	bls.n	800bc78 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 800bc68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc6a:	699a      	ldr	r2, [r3, #24]
 800bc6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc70:	1ad2      	subs	r2, r2, r3
 800bc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc74:	619a      	str	r2, [r3, #24]
 800bc76:	e002      	b.n	800bc7e <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 800bc78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800bc7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d106      	bne.n	800bc94 <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bc86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f009 fcb2 	bl	80155f6 <HAL_PCD_DataInStageCallback>
 800bc92:	e01b      	b.n	800bccc <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800bc94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc96:	695a      	ldr	r2, [r3, #20]
 800bc98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc9c:	441a      	add	r2, r3
 800bc9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800bca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca4:	69da      	ldr	r2, [r3, #28]
 800bca6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bcaa:	441a      	add	r2, r3
 800bcac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcae:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f003 fc13 	bl	800f4e2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800bcbc:	e006      	b.n	800bccc <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800bcbe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 f91b 	bl	800bf02 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	b21b      	sxth	r3, r3
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f6ff ac4d 	blt.w	800b578 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3758      	adds	r7, #88	; 0x58
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bcf6:	88fb      	ldrh	r3, [r7, #6]
 800bcf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d07e      	beq.n	800bdfe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	4413      	add	r3, r2
 800bd14:	3302      	adds	r3, #2
 800bd16:	005b      	lsls	r3, r3, #1
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	6812      	ldr	r2, [r2, #0]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	699a      	ldr	r2, [r3, #24]
 800bd2e:	8b7b      	ldrh	r3, [r7, #26]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d306      	bcc.n	800bd42 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	699a      	ldr	r2, [r3, #24]
 800bd38:	8b7b      	ldrh	r3, [r7, #26]
 800bd3a:	1ad2      	subs	r2, r2, r3
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	619a      	str	r2, [r3, #24]
 800bd40:	e002      	b.n	800bd48 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	2200      	movs	r2, #0
 800bd46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d123      	bne.n	800bd98 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	461a      	mov	r2, r3
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd6a:	833b      	strh	r3, [r7, #24]
 800bd6c:	8b3b      	ldrh	r3, [r7, #24]
 800bd6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bd72:	833b      	strh	r3, [r7, #24]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	441a      	add	r2, r3
 800bd82:	8b3b      	ldrh	r3, [r7, #24]
 800bd84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bd98:	88fb      	ldrh	r3, [r7, #6]
 800bd9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d01f      	beq.n	800bde2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	461a      	mov	r2, r3
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	881b      	ldrh	r3, [r3, #0]
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdbc:	82fb      	strh	r3, [r7, #22]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	441a      	add	r2, r3
 800bdcc:	8afb      	ldrh	r3, [r7, #22]
 800bdce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bde2:	8b7b      	ldrh	r3, [r7, #26]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 8087 	beq.w	800bef8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6818      	ldr	r0, [r3, #0]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	6959      	ldr	r1, [r3, #20]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	891a      	ldrh	r2, [r3, #8]
 800bdf6:	8b7b      	ldrh	r3, [r7, #26]
 800bdf8:	f005 f81d 	bl	8010e36 <USB_ReadPMA>
 800bdfc:	e07c      	b.n	800bef8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be06:	b29b      	uxth	r3, r3
 800be08:	461a      	mov	r2, r3
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	00db      	lsls	r3, r3, #3
 800be10:	4413      	add	r3, r2
 800be12:	3306      	adds	r3, #6
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	6812      	ldr	r2, [r2, #0]
 800be1a:	4413      	add	r3, r2
 800be1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be26:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	699a      	ldr	r2, [r3, #24]
 800be2c:	8b7b      	ldrh	r3, [r7, #26]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d306      	bcc.n	800be40 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	699a      	ldr	r2, [r3, #24]
 800be36:	8b7b      	ldrh	r3, [r7, #26]
 800be38:	1ad2      	subs	r2, r2, r3
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	619a      	str	r2, [r3, #24]
 800be3e:	e002      	b.n	800be46 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2200      	movs	r2, #0
 800be44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	699b      	ldr	r3, [r3, #24]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d123      	bne.n	800be96 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	881b      	ldrh	r3, [r3, #0]
 800be5e:	b29b      	uxth	r3, r3
 800be60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be68:	83fb      	strh	r3, [r7, #30]
 800be6a:	8bfb      	ldrh	r3, [r7, #30]
 800be6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be70:	83fb      	strh	r3, [r7, #30]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	461a      	mov	r2, r3
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	441a      	add	r2, r3
 800be80:	8bfb      	ldrh	r3, [r7, #30]
 800be82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be92:	b29b      	uxth	r3, r3
 800be94:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800be96:	88fb      	ldrh	r3, [r7, #6]
 800be98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d11f      	bne.n	800bee0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	461a      	mov	r2, r3
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beba:	83bb      	strh	r3, [r7, #28]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	461a      	mov	r2, r3
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	441a      	add	r2, r3
 800beca:	8bbb      	ldrh	r3, [r7, #28]
 800becc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bed8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bedc:	b29b      	uxth	r3, r3
 800bede:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bee0:	8b7b      	ldrh	r3, [r7, #26]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d008      	beq.n	800bef8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6818      	ldr	r0, [r3, #0]
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	6959      	ldr	r1, [r3, #20]
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	895a      	ldrh	r2, [r3, #10]
 800bef2:	8b7b      	ldrh	r3, [r7, #26]
 800bef4:	f004 ff9f 	bl	8010e36 <USB_ReadPMA>
    }
  }

  return count;
 800bef8:	8b7b      	ldrh	r3, [r7, #26]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3720      	adds	r7, #32
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b0a2      	sub	sp, #136	; 0x88
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	60f8      	str	r0, [r7, #12]
 800bf0a:	60b9      	str	r1, [r7, #8]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bf10:	88fb      	ldrh	r3, [r7, #6]
 800bf12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 81c7 	beq.w	800c2aa <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	461a      	mov	r2, r3
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	00db      	lsls	r3, r3, #3
 800bf2e:	4413      	add	r3, r2
 800bf30:	3302      	adds	r3, #2
 800bf32:	005b      	lsls	r3, r3, #1
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	6812      	ldr	r2, [r2, #0]
 800bf38:	4413      	add	r3, r2
 800bf3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf3e:	881b      	ldrh	r3, [r3, #0]
 800bf40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	699a      	ldr	r2, [r3, #24]
 800bf4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d907      	bls.n	800bf64 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	699a      	ldr	r2, [r3, #24]
 800bf58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf5c:	1ad2      	subs	r2, r2, r3
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	619a      	str	r2, [r3, #24]
 800bf62:	e002      	b.n	800bf6a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	2200      	movs	r2, #0
 800bf68:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f040 80b9 	bne.w	800c0e6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	785b      	ldrb	r3, [r3, #1]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d126      	bne.n	800bfca <HAL_PCD_EP_DB_Transmit+0xc8>
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf90:	4413      	add	r3, r2
 800bf92:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	011a      	lsls	r2, r3, #4
 800bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9c:	4413      	add	r3, r2
 800bf9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	801a      	strh	r2, [r3, #0]
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	801a      	strh	r2, [r3, #0]
 800bfc8:	e01a      	b.n	800c000 <HAL_PCD_EP_DB_Transmit+0xfe>
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	785b      	ldrb	r3, [r3, #1]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d116      	bne.n	800c000 <HAL_PCD_EP_DB_Transmit+0xfe>
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	633b      	str	r3, [r7, #48]	; 0x30
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe6:	4413      	add	r3, r2
 800bfe8:	633b      	str	r3, [r7, #48]	; 0x30
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	011a      	lsls	r2, r3, #4
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	4413      	add	r3, r2
 800bff4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffc:	2200      	movs	r2, #0
 800bffe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	623b      	str	r3, [r7, #32]
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	785b      	ldrb	r3, [r3, #1]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d126      	bne.n	800c05c <HAL_PCD_EP_DB_Transmit+0x15a>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	61bb      	str	r3, [r7, #24]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	461a      	mov	r2, r3
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	4413      	add	r3, r2
 800c024:	61bb      	str	r3, [r7, #24]
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	011a      	lsls	r2, r3, #4
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	4413      	add	r3, r2
 800c030:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c034:	617b      	str	r3, [r7, #20]
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c040:	b29a      	uxth	r2, r3
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	801a      	strh	r2, [r3, #0]
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	881b      	ldrh	r3, [r3, #0]
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c054:	b29a      	uxth	r2, r3
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	801a      	strh	r2, [r3, #0]
 800c05a:	e017      	b.n	800c08c <HAL_PCD_EP_DB_Transmit+0x18a>
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	785b      	ldrb	r3, [r3, #1]
 800c060:	2b01      	cmp	r3, #1
 800c062:	d113      	bne.n	800c08c <HAL_PCD_EP_DB_Transmit+0x18a>
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	461a      	mov	r2, r3
 800c070:	6a3b      	ldr	r3, [r7, #32]
 800c072:	4413      	add	r3, r2
 800c074:	623b      	str	r3, [r7, #32]
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	011a      	lsls	r2, r3, #4
 800c07c:	6a3b      	ldr	r3, [r7, #32]
 800c07e:	4413      	add	r3, r2
 800c080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c084:	61fb      	str	r3, [r7, #28]
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	2200      	movs	r2, #0
 800c08a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	4619      	mov	r1, r3
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f009 faaf 	bl	80155f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c098:	88fb      	ldrh	r3, [r7, #6]
 800c09a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 82d4 	beq.w	800c64c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0be:	827b      	strh	r3, [r7, #18]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	441a      	add	r2, r3
 800c0ce:	8a7b      	ldrh	r3, [r7, #18]
 800c0d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	8013      	strh	r3, [r2, #0]
 800c0e4:	e2b2      	b.n	800c64c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c0e6:	88fb      	ldrh	r3, [r7, #6]
 800c0e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d021      	beq.n	800c134 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	b29b      	uxth	r3, r3
 800c102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c10a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	441a      	add	r2, r3
 800c11c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c130:	b29b      	uxth	r3, r3
 800c132:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	f040 8286 	bne.w	800c64c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	695a      	ldr	r2, [r3, #20]
 800c144:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c148:	441a      	add	r2, r3
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	69da      	ldr	r2, [r3, #28]
 800c152:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c156:	441a      	add	r2, r3
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	6a1a      	ldr	r2, [r3, #32]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	429a      	cmp	r2, r3
 800c166:	d309      	bcc.n	800c17c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	6a1a      	ldr	r2, [r3, #32]
 800c172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c174:	1ad2      	subs	r2, r2, r3
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	621a      	str	r2, [r3, #32]
 800c17a:	e015      	b.n	800c1a8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	6a1b      	ldr	r3, [r3, #32]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d107      	bne.n	800c194 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800c184:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c188:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c192:	e009      	b.n	800c1a8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	785b      	ldrb	r3, [r3, #1]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d155      	bne.n	800c25c <HAL_PCD_EP_DB_Transmit+0x35a>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c4:	4413      	add	r3, r2
 800c1c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	011a      	lsls	r2, r3, #4
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c1d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d112      	bne.n	800c204 <HAL_PCD_EP_DB_Transmit+0x302>
 800c1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ec:	801a      	strh	r2, [r3, #0]
 800c1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c200:	801a      	strh	r2, [r3, #0]
 800c202:	e047      	b.n	800c294 <HAL_PCD_EP_DB_Transmit+0x392>
 800c204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c206:	2b3e      	cmp	r3, #62	; 0x3e
 800c208:	d811      	bhi.n	800c22e <HAL_PCD_EP_DB_Transmit+0x32c>
 800c20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20c:	085b      	lsrs	r3, r3, #1
 800c20e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <HAL_PCD_EP_DB_Transmit+0x31e>
 800c21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c21c:	3301      	adds	r3, #1
 800c21e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c222:	b29b      	uxth	r3, r3
 800c224:	029b      	lsls	r3, r3, #10
 800c226:	b29a      	uxth	r2, r3
 800c228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22a:	801a      	strh	r2, [r3, #0]
 800c22c:	e032      	b.n	800c294 <HAL_PCD_EP_DB_Transmit+0x392>
 800c22e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c230:	095b      	lsrs	r3, r3, #5
 800c232:	64bb      	str	r3, [r7, #72]	; 0x48
 800c234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c236:	f003 031f 	and.w	r3, r3, #31
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d102      	bne.n	800c244 <HAL_PCD_EP_DB_Transmit+0x342>
 800c23e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c240:	3b01      	subs	r3, #1
 800c242:	64bb      	str	r3, [r7, #72]	; 0x48
 800c244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c246:	b29b      	uxth	r3, r3
 800c248:	029b      	lsls	r3, r3, #10
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c254:	b29a      	uxth	r2, r3
 800c256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c258:	801a      	strh	r2, [r3, #0]
 800c25a:	e01b      	b.n	800c294 <HAL_PCD_EP_DB_Transmit+0x392>
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	785b      	ldrb	r3, [r3, #1]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d117      	bne.n	800c294 <HAL_PCD_EP_DB_Transmit+0x392>
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	643b      	str	r3, [r7, #64]	; 0x40
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c272:	b29b      	uxth	r3, r3
 800c274:	461a      	mov	r2, r3
 800c276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c278:	4413      	add	r3, r2
 800c27a:	643b      	str	r3, [r7, #64]	; 0x40
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	011a      	lsls	r2, r3, #4
 800c282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c284:	4413      	add	r3, r2
 800c286:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c28a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c28c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c28e:	b29a      	uxth	r2, r3
 800c290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c292:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6818      	ldr	r0, [r3, #0]
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	6959      	ldr	r1, [r3, #20]
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	891a      	ldrh	r2, [r3, #8]
 800c2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	f004 fd81 	bl	8010daa <USB_WritePMA>
 800c2a8:	e1d0      	b.n	800c64c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	00db      	lsls	r3, r3, #3
 800c2bc:	4413      	add	r3, r2
 800c2be:	3306      	adds	r3, #6
 800c2c0:	005b      	lsls	r3, r3, #1
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	6812      	ldr	r2, [r2, #0]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2cc:	881b      	ldrh	r3, [r3, #0]
 800c2ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	699a      	ldr	r2, [r3, #24]
 800c2da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d307      	bcc.n	800c2f2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	699a      	ldr	r2, [r3, #24]
 800c2e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c2ea:	1ad2      	subs	r2, r2, r3
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	619a      	str	r2, [r3, #24]
 800c2f0:	e002      	b.n	800c2f8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	699b      	ldr	r3, [r3, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f040 80c4 	bne.w	800c48a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	785b      	ldrb	r3, [r3, #1]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d126      	bne.n	800c358 <HAL_PCD_EP_DB_Transmit+0x456>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c318:	b29b      	uxth	r3, r3
 800c31a:	461a      	mov	r2, r3
 800c31c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c31e:	4413      	add	r3, r2
 800c320:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	011a      	lsls	r2, r3, #4
 800c328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c32a:	4413      	add	r3, r2
 800c32c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c330:	66bb      	str	r3, [r7, #104]	; 0x68
 800c332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	b29b      	uxth	r3, r3
 800c338:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c340:	801a      	strh	r2, [r3, #0]
 800c342:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c344:	881b      	ldrh	r3, [r3, #0]
 800c346:	b29b      	uxth	r3, r3
 800c348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c34c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c350:	b29a      	uxth	r2, r3
 800c352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c354:	801a      	strh	r2, [r3, #0]
 800c356:	e01a      	b.n	800c38e <HAL_PCD_EP_DB_Transmit+0x48c>
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	785b      	ldrb	r3, [r3, #1]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d116      	bne.n	800c38e <HAL_PCD_EP_DB_Transmit+0x48c>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	677b      	str	r3, [r7, #116]	; 0x74
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c36e:	b29b      	uxth	r3, r3
 800c370:	461a      	mov	r2, r3
 800c372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c374:	4413      	add	r3, r2
 800c376:	677b      	str	r3, [r7, #116]	; 0x74
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	011a      	lsls	r2, r3, #4
 800c37e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c380:	4413      	add	r3, r2
 800c382:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c386:	673b      	str	r3, [r7, #112]	; 0x70
 800c388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c38a:	2200      	movs	r2, #0
 800c38c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	67bb      	str	r3, [r7, #120]	; 0x78
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	785b      	ldrb	r3, [r3, #1]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d12f      	bne.n	800c3fc <HAL_PCD_EP_DB_Transmit+0x4fa>
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	011a      	lsls	r2, r3, #4
 800c3c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c3ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3d2:	881b      	ldrh	r3, [r3, #0]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3e0:	801a      	strh	r2, [r3, #0]
 800c3e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3f8:	801a      	strh	r2, [r3, #0]
 800c3fa:	e017      	b.n	800c42c <HAL_PCD_EP_DB_Transmit+0x52a>
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	785b      	ldrb	r3, [r3, #1]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d113      	bne.n	800c42c <HAL_PCD_EP_DB_Transmit+0x52a>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	461a      	mov	r2, r3
 800c410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c412:	4413      	add	r3, r2
 800c414:	67bb      	str	r3, [r7, #120]	; 0x78
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	011a      	lsls	r2, r3, #4
 800c41c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c41e:	4413      	add	r3, r2
 800c420:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c424:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c428:	2200      	movs	r2, #0
 800c42a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	4619      	mov	r1, r3
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f009 f8df 	bl	80155f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c438:	88fb      	ldrh	r3, [r7, #6]
 800c43a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f040 8104 	bne.w	800c64c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	461a      	mov	r2, r3
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	4413      	add	r3, r2
 800c452:	881b      	ldrh	r3, [r3, #0]
 800c454:	b29b      	uxth	r3, r3
 800c456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c45e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	441a      	add	r2, r3
 800c470:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c47c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c484:	b29b      	uxth	r3, r3
 800c486:	8013      	strh	r3, [r2, #0]
 800c488:	e0e0      	b.n	800c64c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c48a:	88fb      	ldrh	r3, [r7, #6]
 800c48c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d121      	bne.n	800c4d8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	461a      	mov	r2, r3
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	881b      	ldrh	r3, [r3, #0]
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	441a      	add	r2, r3
 800c4c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c4c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	f040 80b4 	bne.w	800c64c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	695a      	ldr	r2, [r3, #20]
 800c4e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c4ec:	441a      	add	r2, r3
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	69da      	ldr	r2, [r3, #28]
 800c4f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c4fa:	441a      	add	r2, r3
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	6a1a      	ldr	r2, [r3, #32]
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d309      	bcc.n	800c520 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	691b      	ldr	r3, [r3, #16]
 800c510:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	6a1a      	ldr	r2, [r3, #32]
 800c516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c518:	1ad2      	subs	r2, r2, r3
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	621a      	str	r2, [r3, #32]
 800c51e:	e015      	b.n	800c54c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	6a1b      	ldr	r3, [r3, #32]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d107      	bne.n	800c538 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800c528:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c52c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	2200      	movs	r2, #0
 800c532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c536:	e009      	b.n	800c54c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	6a1b      	ldr	r3, [r3, #32]
 800c53c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2200      	movs	r2, #0
 800c542:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2200      	movs	r2, #0
 800c548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	667b      	str	r3, [r7, #100]	; 0x64
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	785b      	ldrb	r3, [r3, #1]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d155      	bne.n	800c606 <HAL_PCD_EP_DB_Transmit+0x704>
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c568:	b29b      	uxth	r3, r3
 800c56a:	461a      	mov	r2, r3
 800c56c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c56e:	4413      	add	r3, r2
 800c570:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	011a      	lsls	r2, r3, #4
 800c578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c57a:	4413      	add	r3, r2
 800c57c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c580:	65bb      	str	r3, [r7, #88]	; 0x58
 800c582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c584:	2b00      	cmp	r3, #0
 800c586:	d112      	bne.n	800c5ae <HAL_PCD_EP_DB_Transmit+0x6ac>
 800c588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c58a:	881b      	ldrh	r3, [r3, #0]
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c592:	b29a      	uxth	r2, r3
 800c594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c596:	801a      	strh	r2, [r3, #0]
 800c598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c59a:	881b      	ldrh	r3, [r3, #0]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5aa:	801a      	strh	r2, [r3, #0]
 800c5ac:	e044      	b.n	800c638 <HAL_PCD_EP_DB_Transmit+0x736>
 800c5ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5b0:	2b3e      	cmp	r3, #62	; 0x3e
 800c5b2:	d811      	bhi.n	800c5d8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800c5b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5b6:	085b      	lsrs	r3, r3, #1
 800c5b8:	657b      	str	r3, [r7, #84]	; 0x54
 800c5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5bc:	f003 0301 	and.w	r3, r3, #1
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d002      	beq.n	800c5ca <HAL_PCD_EP_DB_Transmit+0x6c8>
 800c5c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	657b      	str	r3, [r7, #84]	; 0x54
 800c5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	029b      	lsls	r3, r3, #10
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5d4:	801a      	strh	r2, [r3, #0]
 800c5d6:	e02f      	b.n	800c638 <HAL_PCD_EP_DB_Transmit+0x736>
 800c5d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5da:	095b      	lsrs	r3, r3, #5
 800c5dc:	657b      	str	r3, [r7, #84]	; 0x54
 800c5de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5e0:	f003 031f 	and.w	r3, r3, #31
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d102      	bne.n	800c5ee <HAL_PCD_EP_DB_Transmit+0x6ec>
 800c5e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	657b      	str	r3, [r7, #84]	; 0x54
 800c5ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	029b      	lsls	r3, r3, #10
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c602:	801a      	strh	r2, [r3, #0]
 800c604:	e018      	b.n	800c638 <HAL_PCD_EP_DB_Transmit+0x736>
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	785b      	ldrb	r3, [r3, #1]
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d114      	bne.n	800c638 <HAL_PCD_EP_DB_Transmit+0x736>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c616:	b29b      	uxth	r3, r3
 800c618:	461a      	mov	r2, r3
 800c61a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c61c:	4413      	add	r3, r2
 800c61e:	667b      	str	r3, [r7, #100]	; 0x64
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	011a      	lsls	r2, r3, #4
 800c626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c628:	4413      	add	r3, r2
 800c62a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c62e:	663b      	str	r3, [r7, #96]	; 0x60
 800c630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c632:	b29a      	uxth	r2, r3
 800c634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c636:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6818      	ldr	r0, [r3, #0]
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	6959      	ldr	r1, [r3, #20]
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	895a      	ldrh	r2, [r3, #10]
 800c644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c646:	b29b      	uxth	r3, r3
 800c648:	f004 fbaf 	bl	8010daa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	461a      	mov	r2, r3
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	881b      	ldrh	r3, [r3, #0]
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c666:	823b      	strh	r3, [r7, #16]
 800c668:	8a3b      	ldrh	r3, [r7, #16]
 800c66a:	f083 0310 	eor.w	r3, r3, #16
 800c66e:	823b      	strh	r3, [r7, #16]
 800c670:	8a3b      	ldrh	r3, [r7, #16]
 800c672:	f083 0320 	eor.w	r3, r3, #32
 800c676:	823b      	strh	r3, [r7, #16]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	461a      	mov	r2, r3
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	441a      	add	r2, r3
 800c686:	8a3b      	ldrh	r3, [r7, #16]
 800c688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c68c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c698:	b29b      	uxth	r3, r3
 800c69a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3788      	adds	r7, #136	; 0x88
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	b087      	sub	sp, #28
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	60f8      	str	r0, [r7, #12]
 800c6ae:	607b      	str	r3, [r7, #4]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	817b      	strh	r3, [r7, #10]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c6b8:	897b      	ldrh	r3, [r7, #10]
 800c6ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00b      	beq.n	800c6dc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c6c4:	897b      	ldrh	r3, [r7, #10]
 800c6c6:	f003 0307 	and.w	r3, r3, #7
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4413      	add	r3, r2
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	617b      	str	r3, [r7, #20]
 800c6da:	e009      	b.n	800c6f0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c6dc:	897a      	ldrh	r2, [r7, #10]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c6f0:	893b      	ldrh	r3, [r7, #8]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d107      	bne.n	800c706 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	80da      	strh	r2, [r3, #6]
 800c704:	e00b      	b.n	800c71e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2201      	movs	r2, #1
 800c70a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	b29a      	uxth	r2, r3
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	0c1b      	lsrs	r3, r3, #16
 800c718:	b29a      	uxth	r2, r3
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	371c      	adds	r7, #28
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c72c:	b480      	push	{r7}
 800c72e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 800c730:	4b05      	ldr	r3, [pc, #20]	; (800c748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a04      	ldr	r2, [pc, #16]	; (800c748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c73a:	6013      	str	r3, [r2, #0]
}
 800c73c:	bf00      	nop
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	40007000 	.word	0x40007000

0800c74c <HAL_PWR_EnableWakeUpPin>:
  *         This parameter can be value of :
  *           @ref PWR_WakeUp_Pins
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <HAL_PWR_EnableWakeUpPin+0x20>)
 800c756:	685a      	ldr	r2, [r3, #4]
 800c758:	4904      	ldr	r1, [pc, #16]	; (800c76c <HAL_PWR_EnableWakeUpPin+0x20>)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	604b      	str	r3, [r1, #4]
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	40007000 	.word	0x40007000

0800c770 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be values of :
  *           @ref PWR_WakeUp_Pins
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <HAL_PWR_DisableWakeUpPin+0x24>)
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	43db      	mvns	r3, r3
 800c780:	4904      	ldr	r1, [pc, #16]	; (800c794 <HAL_PWR_DisableWakeUpPin+0x24>)
 800c782:	4013      	ands	r3, r2
 800c784:	604b      	str	r3, [r1, #4]
}
 800c786:	bf00      	nop
 800c788:	370c      	adds	r7, #12
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	40007000 	.word	0x40007000

0800c798 <HAL_PWR_EnterSTANDBYMode>:
  *            Alarm out, or RTC clock calibration out, 
  *          - WKUP pins if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800c798:	b480      	push	{r7}
 800c79a:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800c79c:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a07      	ldr	r2, [pc, #28]	; (800c7c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800c7a2:	f043 0302 	orr.w	r3, r3, #2
 800c7a6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800c7a8:	4b06      	ldr	r3, [pc, #24]	; (800c7c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	4a05      	ldr	r2, [pc, #20]	; (800c7c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800c7ae:	f043 0304 	orr.w	r3, r3, #4
 800c7b2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800c7b4:	bf30      	wfi
}
 800c7b6:	bf00      	nop
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr
 800c7c0:	40007000 	.word	0x40007000
 800c7c4:	e000ed00 	.word	0xe000ed00

0800c7c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c7d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c7d8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c7da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c7de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d102      	bne.n	800c7ee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	f001 b823 	b.w	800d834 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c7ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c7f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 0301 	and.w	r3, r3, #1
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f000 817d 	beq.w	800cafe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800c804:	4bbc      	ldr	r3, [pc, #752]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	f003 030c 	and.w	r3, r3, #12
 800c80c:	2b04      	cmp	r3, #4
 800c80e:	d00c      	beq.n	800c82a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c810:	4bb9      	ldr	r3, [pc, #740]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	f003 030c 	and.w	r3, r3, #12
 800c818:	2b08      	cmp	r3, #8
 800c81a:	d15c      	bne.n	800c8d6 <HAL_RCC_OscConfig+0x10e>
 800c81c:	4bb6      	ldr	r3, [pc, #728]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c828:	d155      	bne.n	800c8d6 <HAL_RCC_OscConfig+0x10e>
 800c82a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c82e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c832:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c836:	fa93 f3a3 	rbit	r3, r3
 800c83a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800c83e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c842:	fab3 f383 	clz	r3, r3
 800c846:	b2db      	uxtb	r3, r3
 800c848:	095b      	lsrs	r3, r3, #5
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	f043 0301 	orr.w	r3, r3, #1
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b01      	cmp	r3, #1
 800c854:	d102      	bne.n	800c85c <HAL_RCC_OscConfig+0x94>
 800c856:	4ba8      	ldr	r3, [pc, #672]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	e015      	b.n	800c888 <HAL_RCC_OscConfig+0xc0>
 800c85c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c860:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c864:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800c868:	fa93 f3a3 	rbit	r3, r3
 800c86c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800c870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c874:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800c878:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c87c:	fa93 f3a3 	rbit	r3, r3
 800c880:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800c884:	4b9c      	ldr	r3, [pc, #624]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c888:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c88c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800c890:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800c894:	fa92 f2a2 	rbit	r2, r2
 800c898:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800c89c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800c8a0:	fab2 f282 	clz	r2, r2
 800c8a4:	b2d2      	uxtb	r2, r2
 800c8a6:	f042 0220 	orr.w	r2, r2, #32
 800c8aa:	b2d2      	uxtb	r2, r2
 800c8ac:	f002 021f 	and.w	r2, r2, #31
 800c8b0:	2101      	movs	r1, #1
 800c8b2:	fa01 f202 	lsl.w	r2, r1, r2
 800c8b6:	4013      	ands	r3, r2
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 811f 	beq.w	800cafc <HAL_RCC_OscConfig+0x334>
 800c8be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c8c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f040 8116 	bne.w	800cafc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	f000 bfaf 	b.w	800d834 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c8d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c8da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8e6:	d106      	bne.n	800c8f6 <HAL_RCC_OscConfig+0x12e>
 800c8e8:	4b83      	ldr	r3, [pc, #524]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a82      	ldr	r2, [pc, #520]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c8ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8f2:	6013      	str	r3, [r2, #0]
 800c8f4:	e036      	b.n	800c964 <HAL_RCC_OscConfig+0x19c>
 800c8f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c8fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10c      	bne.n	800c920 <HAL_RCC_OscConfig+0x158>
 800c906:	4b7c      	ldr	r3, [pc, #496]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a7b      	ldr	r2, [pc, #492]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c90c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c910:	6013      	str	r3, [r2, #0]
 800c912:	4b79      	ldr	r3, [pc, #484]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a78      	ldr	r2, [pc, #480]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c91c:	6013      	str	r3, [r2, #0]
 800c91e:	e021      	b.n	800c964 <HAL_RCC_OscConfig+0x19c>
 800c920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c924:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c930:	d10c      	bne.n	800c94c <HAL_RCC_OscConfig+0x184>
 800c932:	4b71      	ldr	r3, [pc, #452]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a70      	ldr	r2, [pc, #448]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c93c:	6013      	str	r3, [r2, #0]
 800c93e:	4b6e      	ldr	r3, [pc, #440]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a6d      	ldr	r2, [pc, #436]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c948:	6013      	str	r3, [r2, #0]
 800c94a:	e00b      	b.n	800c964 <HAL_RCC_OscConfig+0x19c>
 800c94c:	4b6a      	ldr	r3, [pc, #424]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a69      	ldr	r2, [pc, #420]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c956:	6013      	str	r3, [r2, #0]
 800c958:	4b67      	ldr	r3, [pc, #412]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a66      	ldr	r2, [pc, #408]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c95e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c962:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c964:	4b64      	ldr	r3, [pc, #400]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c968:	f023 020f 	bic.w	r2, r3, #15
 800c96c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	495f      	ldr	r1, [pc, #380]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c97a:	4313      	orrs	r3, r2
 800c97c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c97e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d059      	beq.n	800ca42 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c98e:	f7fb f935 	bl	8007bfc <HAL_GetTick>
 800c992:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c996:	e00a      	b.n	800c9ae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c998:	f7fb f930 	bl	8007bfc <HAL_GetTick>
 800c99c:	4602      	mov	r2, r0
 800c99e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c9a2:	1ad3      	subs	r3, r2, r3
 800c9a4:	2b64      	cmp	r3, #100	; 0x64
 800c9a6:	d902      	bls.n	800c9ae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	f000 bf43 	b.w	800d834 <HAL_RCC_OscConfig+0x106c>
 800c9ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c9b2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9b6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800c9ba:	fa93 f3a3 	rbit	r3, r3
 800c9be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800c9c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9c6:	fab3 f383 	clz	r3, r3
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	095b      	lsrs	r3, r3, #5
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	f043 0301 	orr.w	r3, r3, #1
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d102      	bne.n	800c9e0 <HAL_RCC_OscConfig+0x218>
 800c9da:	4b47      	ldr	r3, [pc, #284]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	e015      	b.n	800ca0c <HAL_RCC_OscConfig+0x244>
 800c9e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c9e4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9e8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800c9ec:	fa93 f3a3 	rbit	r3, r3
 800c9f0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800c9f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c9f8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800c9fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800ca00:	fa93 f3a3 	rbit	r3, r3
 800ca04:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800ca08:	4b3b      	ldr	r3, [pc, #236]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ca10:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800ca14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800ca18:	fa92 f2a2 	rbit	r2, r2
 800ca1c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800ca20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800ca24:	fab2 f282 	clz	r2, r2
 800ca28:	b2d2      	uxtb	r2, r2
 800ca2a:	f042 0220 	orr.w	r2, r2, #32
 800ca2e:	b2d2      	uxtb	r2, r2
 800ca30:	f002 021f 	and.w	r2, r2, #31
 800ca34:	2101      	movs	r1, #1
 800ca36:	fa01 f202 	lsl.w	r2, r1, r2
 800ca3a:	4013      	ands	r3, r2
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d0ab      	beq.n	800c998 <HAL_RCC_OscConfig+0x1d0>
 800ca40:	e05d      	b.n	800cafe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca42:	f7fb f8db 	bl	8007bfc <HAL_GetTick>
 800ca46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca4a:	e00a      	b.n	800ca62 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca4c:	f7fb f8d6 	bl	8007bfc <HAL_GetTick>
 800ca50:	4602      	mov	r2, r0
 800ca52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	2b64      	cmp	r3, #100	; 0x64
 800ca5a:	d902      	bls.n	800ca62 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	f000 bee9 	b.w	800d834 <HAL_RCC_OscConfig+0x106c>
 800ca62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ca66:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ca6e:	fa93 f3a3 	rbit	r3, r3
 800ca72:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800ca76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca7a:	fab3 f383 	clz	r3, r3
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	095b      	lsrs	r3, r3, #5
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	f043 0301 	orr.w	r3, r3, #1
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d102      	bne.n	800ca94 <HAL_RCC_OscConfig+0x2cc>
 800ca8e:	4b1a      	ldr	r3, [pc, #104]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	e015      	b.n	800cac0 <HAL_RCC_OscConfig+0x2f8>
 800ca94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ca98:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca9c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800caa0:	fa93 f3a3 	rbit	r3, r3
 800caa4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800caa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800caac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800cab0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800cab4:	fa93 f3a3 	rbit	r3, r3
 800cab8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800cabc:	4b0e      	ldr	r3, [pc, #56]	; (800caf8 <HAL_RCC_OscConfig+0x330>)
 800cabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cac4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800cac8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800cacc:	fa92 f2a2 	rbit	r2, r2
 800cad0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800cad4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800cad8:	fab2 f282 	clz	r2, r2
 800cadc:	b2d2      	uxtb	r2, r2
 800cade:	f042 0220 	orr.w	r2, r2, #32
 800cae2:	b2d2      	uxtb	r2, r2
 800cae4:	f002 021f 	and.w	r2, r2, #31
 800cae8:	2101      	movs	r1, #1
 800caea:	fa01 f202 	lsl.w	r2, r1, r2
 800caee:	4013      	ands	r3, r2
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1ab      	bne.n	800ca4c <HAL_RCC_OscConfig+0x284>
 800caf4:	e003      	b.n	800cafe <HAL_RCC_OscConfig+0x336>
 800caf6:	bf00      	nop
 800caf8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cafc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cafe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 0302 	and.w	r3, r3, #2
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f000 817d 	beq.w	800ce0e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800cb14:	4ba6      	ldr	r3, [pc, #664]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	f003 030c 	and.w	r3, r3, #12
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00b      	beq.n	800cb38 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800cb20:	4ba3      	ldr	r3, [pc, #652]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	f003 030c 	and.w	r3, r3, #12
 800cb28:	2b08      	cmp	r3, #8
 800cb2a:	d172      	bne.n	800cc12 <HAL_RCC_OscConfig+0x44a>
 800cb2c:	4ba0      	ldr	r3, [pc, #640]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d16c      	bne.n	800cc12 <HAL_RCC_OscConfig+0x44a>
 800cb38:	2302      	movs	r3, #2
 800cb3a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb3e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cb42:	fa93 f3a3 	rbit	r3, r3
 800cb46:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800cb4a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb4e:	fab3 f383 	clz	r3, r3
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	095b      	lsrs	r3, r3, #5
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	f043 0301 	orr.w	r3, r3, #1
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d102      	bne.n	800cb68 <HAL_RCC_OscConfig+0x3a0>
 800cb62:	4b93      	ldr	r3, [pc, #588]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	e013      	b.n	800cb90 <HAL_RCC_OscConfig+0x3c8>
 800cb68:	2302      	movs	r3, #2
 800cb6a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb6e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800cb72:	fa93 f3a3 	rbit	r3, r3
 800cb76:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800cb7a:	2302      	movs	r3, #2
 800cb7c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800cb80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cb84:	fa93 f3a3 	rbit	r3, r3
 800cb88:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800cb8c:	4b88      	ldr	r3, [pc, #544]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800cb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb90:	2202      	movs	r2, #2
 800cb92:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800cb96:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800cb9a:	fa92 f2a2 	rbit	r2, r2
 800cb9e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800cba2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800cba6:	fab2 f282 	clz	r2, r2
 800cbaa:	b2d2      	uxtb	r2, r2
 800cbac:	f042 0220 	orr.w	r2, r2, #32
 800cbb0:	b2d2      	uxtb	r2, r2
 800cbb2:	f002 021f 	and.w	r2, r2, #31
 800cbb6:	2101      	movs	r1, #1
 800cbb8:	fa01 f202 	lsl.w	r2, r1, r2
 800cbbc:	4013      	ands	r3, r2
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00a      	beq.n	800cbd8 <HAL_RCC_OscConfig+0x410>
 800cbc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cbc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d002      	beq.n	800cbd8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	f000 be2e 	b.w	800d834 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbd8:	4b75      	ldr	r3, [pc, #468]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cbe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cbe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	695b      	ldr	r3, [r3, #20]
 800cbec:	21f8      	movs	r1, #248	; 0xf8
 800cbee:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbf2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800cbf6:	fa91 f1a1 	rbit	r1, r1
 800cbfa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800cbfe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800cc02:	fab1 f181 	clz	r1, r1
 800cc06:	b2c9      	uxtb	r1, r1
 800cc08:	408b      	lsls	r3, r1
 800cc0a:	4969      	ldr	r1, [pc, #420]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cc10:	e0fd      	b.n	800ce0e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cc12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	691b      	ldr	r3, [r3, #16]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f000 8088 	beq.w	800cd34 <HAL_RCC_OscConfig+0x56c>
 800cc24:	2301      	movs	r3, #1
 800cc26:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800cc2e:	fa93 f3a3 	rbit	r3, r3
 800cc32:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800cc36:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cc3a:	fab3 f383 	clz	r3, r3
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800cc44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc50:	f7fa ffd4 	bl	8007bfc <HAL_GetTick>
 800cc54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc58:	e00a      	b.n	800cc70 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc5a:	f7fa ffcf 	bl	8007bfc <HAL_GetTick>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d902      	bls.n	800cc70 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	f000 bde2 	b.w	800d834 <HAL_RCC_OscConfig+0x106c>
 800cc70:	2302      	movs	r3, #2
 800cc72:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc76:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800cc7a:	fa93 f3a3 	rbit	r3, r3
 800cc7e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800cc82:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc86:	fab3 f383 	clz	r3, r3
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	095b      	lsrs	r3, r3, #5
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	f043 0301 	orr.w	r3, r3, #1
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d102      	bne.n	800cca0 <HAL_RCC_OscConfig+0x4d8>
 800cc9a:	4b45      	ldr	r3, [pc, #276]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	e013      	b.n	800ccc8 <HAL_RCC_OscConfig+0x500>
 800cca0:	2302      	movs	r3, #2
 800cca2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cca6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ccaa:	fa93 f3a3 	rbit	r3, r3
 800ccae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800ccb2:	2302      	movs	r3, #2
 800ccb4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800ccb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ccbc:	fa93 f3a3 	rbit	r3, r3
 800ccc0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800ccc4:	4b3a      	ldr	r3, [pc, #232]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800ccc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc8:	2202      	movs	r2, #2
 800ccca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800ccce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ccd2:	fa92 f2a2 	rbit	r2, r2
 800ccd6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800ccda:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800ccde:	fab2 f282 	clz	r2, r2
 800cce2:	b2d2      	uxtb	r2, r2
 800cce4:	f042 0220 	orr.w	r2, r2, #32
 800cce8:	b2d2      	uxtb	r2, r2
 800ccea:	f002 021f 	and.w	r2, r2, #31
 800ccee:	2101      	movs	r1, #1
 800ccf0:	fa01 f202 	lsl.w	r2, r1, r2
 800ccf4:	4013      	ands	r3, r2
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0af      	beq.n	800cc5a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccfa:	4b2d      	ldr	r3, [pc, #180]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cd02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	695b      	ldr	r3, [r3, #20]
 800cd0e:	21f8      	movs	r1, #248	; 0xf8
 800cd10:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd14:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800cd18:	fa91 f1a1 	rbit	r1, r1
 800cd1c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800cd20:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800cd24:	fab1 f181 	clz	r1, r1
 800cd28:	b2c9      	uxtb	r1, r1
 800cd2a:	408b      	lsls	r3, r1
 800cd2c:	4920      	ldr	r1, [pc, #128]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	600b      	str	r3, [r1, #0]
 800cd32:	e06c      	b.n	800ce0e <HAL_RCC_OscConfig+0x646>
 800cd34:	2301      	movs	r3, #1
 800cd36:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cd3e:	fa93 f3a3 	rbit	r3, r3
 800cd42:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800cd46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd4a:	fab3 f383 	clz	r3, r3
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800cd54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd60:	f7fa ff4c 	bl	8007bfc <HAL_GetTick>
 800cd64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd68:	e00a      	b.n	800cd80 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd6a:	f7fa ff47 	bl	8007bfc <HAL_GetTick>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d902      	bls.n	800cd80 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	f000 bd5a 	b.w	800d834 <HAL_RCC_OscConfig+0x106c>
 800cd80:	2302      	movs	r3, #2
 800cd82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cd8a:	fa93 f3a3 	rbit	r3, r3
 800cd8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800cd92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd96:	fab3 f383 	clz	r3, r3
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	095b      	lsrs	r3, r3, #5
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	f043 0301 	orr.w	r3, r3, #1
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d104      	bne.n	800cdb4 <HAL_RCC_OscConfig+0x5ec>
 800cdaa:	4b01      	ldr	r3, [pc, #4]	; (800cdb0 <HAL_RCC_OscConfig+0x5e8>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	e015      	b.n	800cddc <HAL_RCC_OscConfig+0x614>
 800cdb0:	40021000 	.word	0x40021000
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cdba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cdbe:	fa93 f3a3 	rbit	r3, r3
 800cdc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800cdc6:	2302      	movs	r3, #2
 800cdc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800cdcc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cdd0:	fa93 f3a3 	rbit	r3, r3
 800cdd4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800cdd8:	4bc8      	ldr	r3, [pc, #800]	; (800d0fc <HAL_RCC_OscConfig+0x934>)
 800cdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cddc:	2202      	movs	r2, #2
 800cdde:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800cde2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800cde6:	fa92 f2a2 	rbit	r2, r2
 800cdea:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800cdee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800cdf2:	fab2 f282 	clz	r2, r2
 800cdf6:	b2d2      	uxtb	r2, r2
 800cdf8:	f042 0220 	orr.w	r2, r2, #32
 800cdfc:	b2d2      	uxtb	r2, r2
 800cdfe:	f002 021f 	and.w	r2, r2, #31
 800ce02:	2101      	movs	r1, #1
 800ce04:	fa01 f202 	lsl.w	r2, r1, r2
 800ce08:	4013      	ands	r3, r2
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1ad      	bne.n	800cd6a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f003 0308 	and.w	r3, r3, #8
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f000 8110 	beq.w	800d044 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ce24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d079      	beq.n	800cf28 <HAL_RCC_OscConfig+0x760>
 800ce34:	2301      	movs	r3, #1
 800ce36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ce3e:	fa93 f3a3 	rbit	r3, r3
 800ce42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800ce46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce4a:	fab3 f383 	clz	r3, r3
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	461a      	mov	r2, r3
 800ce52:	4bab      	ldr	r3, [pc, #684]	; (800d100 <HAL_RCC_OscConfig+0x938>)
 800ce54:	4413      	add	r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	461a      	mov	r2, r3
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ce5e:	f7fa fecd 	bl	8007bfc <HAL_GetTick>
 800ce62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce66:	e00a      	b.n	800ce7e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce68:	f7fa fec8 	bl	8007bfc <HAL_GetTick>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d902      	bls.n	800ce7e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	f000 bcdb 	b.w	800d834 <HAL_RCC_OscConfig+0x106c>
 800ce7e:	2302      	movs	r3, #2
 800ce80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ce88:	fa93 f3a3 	rbit	r3, r3
 800ce8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ce90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ce98:	2202      	movs	r2, #2
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cea0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	fa93 f2a3 	rbit	r2, r3
 800ceaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ceae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ceb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cebc:	2202      	movs	r2, #2
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	fa93 f2a3 	rbit	r2, r3
 800cece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ced2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ced6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ced8:	4b88      	ldr	r3, [pc, #544]	; (800d0fc <HAL_RCC_OscConfig+0x934>)
 800ceda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cedc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cee0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cee4:	2102      	movs	r1, #2
 800cee6:	6019      	str	r1, [r3, #0]
 800cee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ceec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	fa93 f1a3 	rbit	r1, r3
 800cef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cefa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cefe:	6019      	str	r1, [r3, #0]
  return result;
 800cf00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	fab3 f383 	clz	r3, r3
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	f003 031f 	and.w	r3, r3, #31
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf20:	4013      	ands	r3, r2
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d0a0      	beq.n	800ce68 <HAL_RCC_OscConfig+0x6a0>
 800cf26:	e08d      	b.n	800d044 <HAL_RCC_OscConfig+0x87c>
 800cf28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800cf30:	2201      	movs	r2, #1
 800cf32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	fa93 f2a3 	rbit	r2, r3
 800cf42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cf4a:	601a      	str	r2, [r3, #0]
  return result;
 800cf4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cf54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cf56:	fab3 f383 	clz	r3, r3
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	4b68      	ldr	r3, [pc, #416]	; (800d100 <HAL_RCC_OscConfig+0x938>)
 800cf60:	4413      	add	r3, r2
 800cf62:	009b      	lsls	r3, r3, #2
 800cf64:	461a      	mov	r2, r3
 800cf66:	2300      	movs	r3, #0
 800cf68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cf6a:	f7fa fe47 	bl	8007bfc <HAL_GetTick>
 800cf6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf72:	e00a      	b.n	800cf8a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cf74:	f7fa fe42 	bl	8007bfc <HAL_GetTick>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d902      	bls.n	800cf8a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800cf84:	2303      	movs	r3, #3
 800cf86:	f000 bc55 	b.w	800d834 <HAL_RCC_OscConfig+0x106c>
 800cf8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800cf92:	2202      	movs	r2, #2
 800cf94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	fa93 f2a3 	rbit	r2, r3
 800cfa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfa8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfb2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cfb6:	2202      	movs	r2, #2
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfbe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	fa93 f2a3 	rbit	r2, r3
 800cfc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cfd0:	601a      	str	r2, [r3, #0]
 800cfd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cfda:	2202      	movs	r2, #2
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	fa93 f2a3 	rbit	r2, r3
 800cfec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cff0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800cff4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cff6:	4b41      	ldr	r3, [pc, #260]	; (800d0fc <HAL_RCC_OscConfig+0x934>)
 800cff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cffe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d002:	2102      	movs	r1, #2
 800d004:	6019      	str	r1, [r3, #0]
 800d006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d00a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	fa93 f1a3 	rbit	r1, r3
 800d014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d018:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d01c:	6019      	str	r1, [r3, #0]
  return result;
 800d01e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d022:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	fab3 f383 	clz	r3, r3
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d032:	b2db      	uxtb	r3, r3
 800d034:	f003 031f 	and.w	r3, r3, #31
 800d038:	2101      	movs	r1, #1
 800d03a:	fa01 f303 	lsl.w	r3, r1, r3
 800d03e:	4013      	ands	r3, r2
 800d040:	2b00      	cmp	r3, #0
 800d042:	d197      	bne.n	800cf74 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d048:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f003 0304 	and.w	r3, r3, #4
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 81a1 	beq.w	800d39c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d05a:	2300      	movs	r3, #0
 800d05c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d060:	4b26      	ldr	r3, [pc, #152]	; (800d0fc <HAL_RCC_OscConfig+0x934>)
 800d062:	69db      	ldr	r3, [r3, #28]
 800d064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d116      	bne.n	800d09a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d06c:	4b23      	ldr	r3, [pc, #140]	; (800d0fc <HAL_RCC_OscConfig+0x934>)
 800d06e:	69db      	ldr	r3, [r3, #28]
 800d070:	4a22      	ldr	r2, [pc, #136]	; (800d0fc <HAL_RCC_OscConfig+0x934>)
 800d072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d076:	61d3      	str	r3, [r2, #28]
 800d078:	4b20      	ldr	r3, [pc, #128]	; (800d0fc <HAL_RCC_OscConfig+0x934>)
 800d07a:	69db      	ldr	r3, [r3, #28]
 800d07c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800d080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d084:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d08e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800d092:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800d094:	2301      	movs	r3, #1
 800d096:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d09a:	4b1a      	ldr	r3, [pc, #104]	; (800d104 <HAL_RCC_OscConfig+0x93c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d11a      	bne.n	800d0dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d0a6:	4b17      	ldr	r3, [pc, #92]	; (800d104 <HAL_RCC_OscConfig+0x93c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a16      	ldr	r2, [pc, #88]	; (800d104 <HAL_RCC_OscConfig+0x93c>)
 800d0ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d0b2:	f7fa fda3 	bl	8007bfc <HAL_GetTick>
 800d0b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d0ba:	e009      	b.n	800d0d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0bc:	f7fa fd9e 	bl	8007bfc <HAL_GetTick>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	2b64      	cmp	r3, #100	; 0x64
 800d0ca:	d901      	bls.n	800d0d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e3b1      	b.n	800d834 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d0d0:	4b0c      	ldr	r3, [pc, #48]	; (800d104 <HAL_RCC_OscConfig+0x93c>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d0ef      	beq.n	800d0bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d0dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d10d      	bne.n	800d108 <HAL_RCC_OscConfig+0x940>
 800d0ec:	4b03      	ldr	r3, [pc, #12]	; (800d0fc <HAL_RCC_OscConfig+0x934>)
 800d0ee:	6a1b      	ldr	r3, [r3, #32]
 800d0f0:	4a02      	ldr	r2, [pc, #8]	; (800d0fc <HAL_RCC_OscConfig+0x934>)
 800d0f2:	f043 0301 	orr.w	r3, r3, #1
 800d0f6:	6213      	str	r3, [r2, #32]
 800d0f8:	e03c      	b.n	800d174 <HAL_RCC_OscConfig+0x9ac>
 800d0fa:	bf00      	nop
 800d0fc:	40021000 	.word	0x40021000
 800d100:	10908120 	.word	0x10908120
 800d104:	40007000 	.word	0x40007000
 800d108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d10c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10c      	bne.n	800d132 <HAL_RCC_OscConfig+0x96a>
 800d118:	4bc1      	ldr	r3, [pc, #772]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d11a:	6a1b      	ldr	r3, [r3, #32]
 800d11c:	4ac0      	ldr	r2, [pc, #768]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d11e:	f023 0301 	bic.w	r3, r3, #1
 800d122:	6213      	str	r3, [r2, #32]
 800d124:	4bbe      	ldr	r3, [pc, #760]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d126:	6a1b      	ldr	r3, [r3, #32]
 800d128:	4abd      	ldr	r2, [pc, #756]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d12a:	f023 0304 	bic.w	r3, r3, #4
 800d12e:	6213      	str	r3, [r2, #32]
 800d130:	e020      	b.n	800d174 <HAL_RCC_OscConfig+0x9ac>
 800d132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	2b05      	cmp	r3, #5
 800d140:	d10c      	bne.n	800d15c <HAL_RCC_OscConfig+0x994>
 800d142:	4bb7      	ldr	r3, [pc, #732]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d144:	6a1b      	ldr	r3, [r3, #32]
 800d146:	4ab6      	ldr	r2, [pc, #728]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d148:	f043 0304 	orr.w	r3, r3, #4
 800d14c:	6213      	str	r3, [r2, #32]
 800d14e:	4bb4      	ldr	r3, [pc, #720]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d150:	6a1b      	ldr	r3, [r3, #32]
 800d152:	4ab3      	ldr	r2, [pc, #716]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d154:	f043 0301 	orr.w	r3, r3, #1
 800d158:	6213      	str	r3, [r2, #32]
 800d15a:	e00b      	b.n	800d174 <HAL_RCC_OscConfig+0x9ac>
 800d15c:	4bb0      	ldr	r3, [pc, #704]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d15e:	6a1b      	ldr	r3, [r3, #32]
 800d160:	4aaf      	ldr	r2, [pc, #700]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d162:	f023 0301 	bic.w	r3, r3, #1
 800d166:	6213      	str	r3, [r2, #32]
 800d168:	4bad      	ldr	r3, [pc, #692]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d16a:	6a1b      	ldr	r3, [r3, #32]
 800d16c:	4aac      	ldr	r2, [pc, #688]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d16e:	f023 0304 	bic.w	r3, r3, #4
 800d172:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d178:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	f000 8081 	beq.w	800d288 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d186:	f7fa fd39 	bl	8007bfc <HAL_GetTick>
 800d18a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d18e:	e00b      	b.n	800d1a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d190:	f7fa fd34 	bl	8007bfc <HAL_GetTick>
 800d194:	4602      	mov	r2, r0
 800d196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d901      	bls.n	800d1a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	e345      	b.n	800d834 <HAL_RCC_OscConfig+0x106c>
 800d1a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d1b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	fa93 f2a3 	rbit	r2, r3
 800d1c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d1d4:	2202      	movs	r2, #2
 800d1d6:	601a      	str	r2, [r3, #0]
 800d1d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	fa93 f2a3 	rbit	r2, r3
 800d1e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d1ee:	601a      	str	r2, [r3, #0]
  return result;
 800d1f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1f4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d1f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1fa:	fab3 f383 	clz	r3, r3
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	095b      	lsrs	r3, r3, #5
 800d202:	b2db      	uxtb	r3, r3
 800d204:	f043 0302 	orr.w	r3, r3, #2
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d102      	bne.n	800d214 <HAL_RCC_OscConfig+0xa4c>
 800d20e:	4b84      	ldr	r3, [pc, #528]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d210:	6a1b      	ldr	r3, [r3, #32]
 800d212:	e013      	b.n	800d23c <HAL_RCC_OscConfig+0xa74>
 800d214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d218:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d21c:	2202      	movs	r2, #2
 800d21e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d224:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	fa93 f2a3 	rbit	r2, r3
 800d22e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d232:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	4b79      	ldr	r3, [pc, #484]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d240:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800d244:	2102      	movs	r1, #2
 800d246:	6011      	str	r1, [r2, #0]
 800d248:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d24c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800d250:	6812      	ldr	r2, [r2, #0]
 800d252:	fa92 f1a2 	rbit	r1, r2
 800d256:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d25a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800d25e:	6011      	str	r1, [r2, #0]
  return result;
 800d260:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d264:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800d268:	6812      	ldr	r2, [r2, #0]
 800d26a:	fab2 f282 	clz	r2, r2
 800d26e:	b2d2      	uxtb	r2, r2
 800d270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d274:	b2d2      	uxtb	r2, r2
 800d276:	f002 021f 	and.w	r2, r2, #31
 800d27a:	2101      	movs	r1, #1
 800d27c:	fa01 f202 	lsl.w	r2, r1, r2
 800d280:	4013      	ands	r3, r2
 800d282:	2b00      	cmp	r3, #0
 800d284:	d084      	beq.n	800d190 <HAL_RCC_OscConfig+0x9c8>
 800d286:	e07f      	b.n	800d388 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d288:	f7fa fcb8 	bl	8007bfc <HAL_GetTick>
 800d28c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d290:	e00b      	b.n	800d2aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d292:	f7fa fcb3 	bl	8007bfc <HAL_GetTick>
 800d296:	4602      	mov	r2, r0
 800d298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d901      	bls.n	800d2aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	e2c4      	b.n	800d834 <HAL_RCC_OscConfig+0x106c>
 800d2aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2ae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d2b2:	2202      	movs	r2, #2
 800d2b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	fa93 f2a3 	rbit	r2, r3
 800d2c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d2cc:	601a      	str	r2, [r3, #0]
 800d2ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d2d6:	2202      	movs	r2, #2
 800d2d8:	601a      	str	r2, [r3, #0]
 800d2da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	fa93 f2a3 	rbit	r2, r3
 800d2e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d2f0:	601a      	str	r2, [r3, #0]
  return result;
 800d2f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2f6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d2fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d2fc:	fab3 f383 	clz	r3, r3
 800d300:	b2db      	uxtb	r3, r3
 800d302:	095b      	lsrs	r3, r3, #5
 800d304:	b2db      	uxtb	r3, r3
 800d306:	f043 0302 	orr.w	r3, r3, #2
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b02      	cmp	r3, #2
 800d30e:	d102      	bne.n	800d316 <HAL_RCC_OscConfig+0xb4e>
 800d310:	4b43      	ldr	r3, [pc, #268]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d312:	6a1b      	ldr	r3, [r3, #32]
 800d314:	e013      	b.n	800d33e <HAL_RCC_OscConfig+0xb76>
 800d316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d31a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800d31e:	2202      	movs	r2, #2
 800d320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d326:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	fa93 f2a3 	rbit	r2, r3
 800d330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d334:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800d338:	601a      	str	r2, [r3, #0]
 800d33a:	4b39      	ldr	r3, [pc, #228]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d342:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800d346:	2102      	movs	r1, #2
 800d348:	6011      	str	r1, [r2, #0]
 800d34a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d34e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800d352:	6812      	ldr	r2, [r2, #0]
 800d354:	fa92 f1a2 	rbit	r1, r2
 800d358:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d35c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800d360:	6011      	str	r1, [r2, #0]
  return result;
 800d362:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d366:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800d36a:	6812      	ldr	r2, [r2, #0]
 800d36c:	fab2 f282 	clz	r2, r2
 800d370:	b2d2      	uxtb	r2, r2
 800d372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d376:	b2d2      	uxtb	r2, r2
 800d378:	f002 021f 	and.w	r2, r2, #31
 800d37c:	2101      	movs	r1, #1
 800d37e:	fa01 f202 	lsl.w	r2, r1, r2
 800d382:	4013      	ands	r3, r2
 800d384:	2b00      	cmp	r3, #0
 800d386:	d184      	bne.n	800d292 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d388:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d105      	bne.n	800d39c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d390:	4b23      	ldr	r3, [pc, #140]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d392:	69db      	ldr	r3, [r3, #28]
 800d394:	4a22      	ldr	r2, [pc, #136]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d39a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d39c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	69db      	ldr	r3, [r3, #28]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f000 8242 	beq.w	800d832 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d3ae:	4b1c      	ldr	r3, [pc, #112]	; (800d420 <HAL_RCC_OscConfig+0xc58>)
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	f003 030c 	and.w	r3, r3, #12
 800d3b6:	2b08      	cmp	r3, #8
 800d3b8:	f000 8213 	beq.w	800d7e2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d3bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	69db      	ldr	r3, [r3, #28]
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	f040 8162 	bne.w	800d692 <HAL_RCC_OscConfig+0xeca>
 800d3ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3d2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d3d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d3da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3e0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	fa93 f2a3 	rbit	r2, r3
 800d3ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3ee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d3f2:	601a      	str	r2, [r3, #0]
  return result;
 800d3f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3f8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d3fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d3fe:	fab3 f383 	clz	r3, r3
 800d402:	b2db      	uxtb	r3, r3
 800d404:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d408:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	461a      	mov	r2, r3
 800d410:	2300      	movs	r3, #0
 800d412:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d414:	f7fa fbf2 	bl	8007bfc <HAL_GetTick>
 800d418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d41c:	e00c      	b.n	800d438 <HAL_RCC_OscConfig+0xc70>
 800d41e:	bf00      	nop
 800d420:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d424:	f7fa fbea 	bl	8007bfc <HAL_GetTick>
 800d428:	4602      	mov	r2, r0
 800d42a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	2b02      	cmp	r3, #2
 800d432:	d901      	bls.n	800d438 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e1fd      	b.n	800d834 <HAL_RCC_OscConfig+0x106c>
 800d438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d43c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d444:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d44a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	fa93 f2a3 	rbit	r2, r3
 800d454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d458:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800d45c:	601a      	str	r2, [r3, #0]
  return result;
 800d45e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d462:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800d466:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d468:	fab3 f383 	clz	r3, r3
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	095b      	lsrs	r3, r3, #5
 800d470:	b2db      	uxtb	r3, r3
 800d472:	f043 0301 	orr.w	r3, r3, #1
 800d476:	b2db      	uxtb	r3, r3
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d102      	bne.n	800d482 <HAL_RCC_OscConfig+0xcba>
 800d47c:	4bb0      	ldr	r3, [pc, #704]	; (800d740 <HAL_RCC_OscConfig+0xf78>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	e027      	b.n	800d4d2 <HAL_RCC_OscConfig+0xd0a>
 800d482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d486:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d48a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d48e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d494:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	fa93 f2a3 	rbit	r2, r3
 800d49e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800d4a6:	601a      	str	r2, [r3, #0]
 800d4a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4ac:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d4b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d4b4:	601a      	str	r2, [r3, #0]
 800d4b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4ba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	fa93 f2a3 	rbit	r2, r3
 800d4c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800d4cc:	601a      	str	r2, [r3, #0]
 800d4ce:	4b9c      	ldr	r3, [pc, #624]	; (800d740 <HAL_RCC_OscConfig+0xf78>)
 800d4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d4d6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800d4da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d4de:	6011      	str	r1, [r2, #0]
 800d4e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d4e4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800d4e8:	6812      	ldr	r2, [r2, #0]
 800d4ea:	fa92 f1a2 	rbit	r1, r2
 800d4ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d4f2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800d4f6:	6011      	str	r1, [r2, #0]
  return result;
 800d4f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d4fc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800d500:	6812      	ldr	r2, [r2, #0]
 800d502:	fab2 f282 	clz	r2, r2
 800d506:	b2d2      	uxtb	r2, r2
 800d508:	f042 0220 	orr.w	r2, r2, #32
 800d50c:	b2d2      	uxtb	r2, r2
 800d50e:	f002 021f 	and.w	r2, r2, #31
 800d512:	2101      	movs	r1, #1
 800d514:	fa01 f202 	lsl.w	r2, r1, r2
 800d518:	4013      	ands	r3, r2
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d182      	bne.n	800d424 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d51e:	4b88      	ldr	r3, [pc, #544]	; (800d740 <HAL_RCC_OscConfig+0xf78>)
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800d526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d52a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	6a1b      	ldr	r3, [r3, #32]
 800d53e:	430b      	orrs	r3, r1
 800d540:	497f      	ldr	r1, [pc, #508]	; (800d740 <HAL_RCC_OscConfig+0xf78>)
 800d542:	4313      	orrs	r3, r2
 800d544:	604b      	str	r3, [r1, #4]
 800d546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d54a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d54e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d558:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	fa93 f2a3 	rbit	r2, r3
 800d562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d566:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d56a:	601a      	str	r2, [r3, #0]
  return result;
 800d56c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d570:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d574:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d576:	fab3 f383 	clz	r3, r3
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d580:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	461a      	mov	r2, r3
 800d588:	2301      	movs	r3, #1
 800d58a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d58c:	f7fa fb36 	bl	8007bfc <HAL_GetTick>
 800d590:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d594:	e009      	b.n	800d5aa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d596:	f7fa fb31 	bl	8007bfc <HAL_GetTick>
 800d59a:	4602      	mov	r2, r0
 800d59c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	d901      	bls.n	800d5aa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800d5a6:	2303      	movs	r3, #3
 800d5a8:	e144      	b.n	800d834 <HAL_RCC_OscConfig+0x106c>
 800d5aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d5ae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d5b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d5b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d5bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	fa93 f2a3 	rbit	r2, r3
 800d5c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d5ca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d5ce:	601a      	str	r2, [r3, #0]
  return result;
 800d5d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d5d4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d5d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d5da:	fab3 f383 	clz	r3, r3
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	095b      	lsrs	r3, r3, #5
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	f043 0301 	orr.w	r3, r3, #1
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d102      	bne.n	800d5f4 <HAL_RCC_OscConfig+0xe2c>
 800d5ee:	4b54      	ldr	r3, [pc, #336]	; (800d740 <HAL_RCC_OscConfig+0xf78>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	e027      	b.n	800d644 <HAL_RCC_OscConfig+0xe7c>
 800d5f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d5f8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800d5fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d606:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	fa93 f2a3 	rbit	r2, r3
 800d610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d614:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d61e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d626:	601a      	str	r2, [r3, #0]
 800d628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d62c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	fa93 f2a3 	rbit	r2, r3
 800d636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d63a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800d63e:	601a      	str	r2, [r3, #0]
 800d640:	4b3f      	ldr	r3, [pc, #252]	; (800d740 <HAL_RCC_OscConfig+0xf78>)
 800d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d644:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d648:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800d64c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d650:	6011      	str	r1, [r2, #0]
 800d652:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d656:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800d65a:	6812      	ldr	r2, [r2, #0]
 800d65c:	fa92 f1a2 	rbit	r1, r2
 800d660:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d664:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800d668:	6011      	str	r1, [r2, #0]
  return result;
 800d66a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d66e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800d672:	6812      	ldr	r2, [r2, #0]
 800d674:	fab2 f282 	clz	r2, r2
 800d678:	b2d2      	uxtb	r2, r2
 800d67a:	f042 0220 	orr.w	r2, r2, #32
 800d67e:	b2d2      	uxtb	r2, r2
 800d680:	f002 021f 	and.w	r2, r2, #31
 800d684:	2101      	movs	r1, #1
 800d686:	fa01 f202 	lsl.w	r2, r1, r2
 800d68a:	4013      	ands	r3, r2
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d082      	beq.n	800d596 <HAL_RCC_OscConfig+0xdce>
 800d690:	e0cf      	b.n	800d832 <HAL_RCC_OscConfig+0x106a>
 800d692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d696:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d69a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d69e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d6a4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	fa93 f2a3 	rbit	r2, r3
 800d6ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d6b2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d6b6:	601a      	str	r2, [r3, #0]
  return result;
 800d6b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d6bc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d6c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d6c2:	fab3 f383 	clz	r3, r3
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d6cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6d8:	f7fa fa90 	bl	8007bfc <HAL_GetTick>
 800d6dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d6e0:	e009      	b.n	800d6f6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d6e2:	f7fa fa8b 	bl	8007bfc <HAL_GetTick>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d901      	bls.n	800d6f6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	e09e      	b.n	800d834 <HAL_RCC_OscConfig+0x106c>
 800d6f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d6fa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d6fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d708:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	fa93 f2a3 	rbit	r2, r3
 800d712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d716:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d71a:	601a      	str	r2, [r3, #0]
  return result;
 800d71c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d720:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d724:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d726:	fab3 f383 	clz	r3, r3
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	095b      	lsrs	r3, r3, #5
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	f043 0301 	orr.w	r3, r3, #1
 800d734:	b2db      	uxtb	r3, r3
 800d736:	2b01      	cmp	r3, #1
 800d738:	d104      	bne.n	800d744 <HAL_RCC_OscConfig+0xf7c>
 800d73a:	4b01      	ldr	r3, [pc, #4]	; (800d740 <HAL_RCC_OscConfig+0xf78>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	e029      	b.n	800d794 <HAL_RCC_OscConfig+0xfcc>
 800d740:	40021000 	.word	0x40021000
 800d744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d748:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d74c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d756:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	fa93 f2a3 	rbit	r2, r3
 800d760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d764:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d76e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d776:	601a      	str	r2, [r3, #0]
 800d778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d77c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	fa93 f2a3 	rbit	r2, r3
 800d786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d78a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800d78e:	601a      	str	r2, [r3, #0]
 800d790:	4b2b      	ldr	r3, [pc, #172]	; (800d840 <HAL_RCC_OscConfig+0x1078>)
 800d792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d794:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d798:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800d79c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d7a0:	6011      	str	r1, [r2, #0]
 800d7a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d7a6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800d7aa:	6812      	ldr	r2, [r2, #0]
 800d7ac:	fa92 f1a2 	rbit	r1, r2
 800d7b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d7b4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800d7b8:	6011      	str	r1, [r2, #0]
  return result;
 800d7ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d7be:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800d7c2:	6812      	ldr	r2, [r2, #0]
 800d7c4:	fab2 f282 	clz	r2, r2
 800d7c8:	b2d2      	uxtb	r2, r2
 800d7ca:	f042 0220 	orr.w	r2, r2, #32
 800d7ce:	b2d2      	uxtb	r2, r2
 800d7d0:	f002 021f 	and.w	r2, r2, #31
 800d7d4:	2101      	movs	r1, #1
 800d7d6:	fa01 f202 	lsl.w	r2, r1, r2
 800d7da:	4013      	ands	r3, r2
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d180      	bne.n	800d6e2 <HAL_RCC_OscConfig+0xf1a>
 800d7e0:	e027      	b.n	800d832 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d7e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d7e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	69db      	ldr	r3, [r3, #28]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d101      	bne.n	800d7f6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e01e      	b.n	800d834 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d7f6:	4b12      	ldr	r3, [pc, #72]	; (800d840 <HAL_RCC_OscConfig+0x1078>)
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800d7fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d802:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800d806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d80a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	6a1b      	ldr	r3, [r3, #32]
 800d812:	429a      	cmp	r2, r3
 800d814:	d10b      	bne.n	800d82e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800d816:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d81a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800d81e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d001      	beq.n	800d832 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e000      	b.n	800d834 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	40021000 	.word	0x40021000

0800d844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b09e      	sub	sp, #120	; 0x78
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800d84e:	2300      	movs	r3, #0
 800d850:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d101      	bne.n	800d85c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	e162      	b.n	800db22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d85c:	4b90      	ldr	r3, [pc, #576]	; (800daa0 <HAL_RCC_ClockConfig+0x25c>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f003 0307 	and.w	r3, r3, #7
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	429a      	cmp	r2, r3
 800d868:	d910      	bls.n	800d88c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d86a:	4b8d      	ldr	r3, [pc, #564]	; (800daa0 <HAL_RCC_ClockConfig+0x25c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f023 0207 	bic.w	r2, r3, #7
 800d872:	498b      	ldr	r1, [pc, #556]	; (800daa0 <HAL_RCC_ClockConfig+0x25c>)
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	4313      	orrs	r3, r2
 800d878:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d87a:	4b89      	ldr	r3, [pc, #548]	; (800daa0 <HAL_RCC_ClockConfig+0x25c>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f003 0307 	and.w	r3, r3, #7
 800d882:	683a      	ldr	r2, [r7, #0]
 800d884:	429a      	cmp	r2, r3
 800d886:	d001      	beq.n	800d88c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d888:	2301      	movs	r3, #1
 800d88a:	e14a      	b.n	800db22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f003 0302 	and.w	r3, r3, #2
 800d894:	2b00      	cmp	r3, #0
 800d896:	d008      	beq.n	800d8aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d898:	4b82      	ldr	r3, [pc, #520]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	497f      	ldr	r1, [pc, #508]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f000 80dc 	beq.w	800da70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d13c      	bne.n	800d93a <HAL_RCC_ClockConfig+0xf6>
 800d8c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d8c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8c8:	fa93 f3a3 	rbit	r3, r3
 800d8cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800d8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d8d0:	fab3 f383 	clz	r3, r3
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	095b      	lsrs	r3, r3, #5
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	f043 0301 	orr.w	r3, r3, #1
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d102      	bne.n	800d8ea <HAL_RCC_ClockConfig+0xa6>
 800d8e4:	4b6f      	ldr	r3, [pc, #444]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	e00f      	b.n	800d90a <HAL_RCC_ClockConfig+0xc6>
 800d8ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d8ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8f2:	fa93 f3a3 	rbit	r3, r3
 800d8f6:	667b      	str	r3, [r7, #100]	; 0x64
 800d8f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d8fc:	663b      	str	r3, [r7, #96]	; 0x60
 800d8fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d900:	fa93 f3a3 	rbit	r3, r3
 800d904:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d906:	4b67      	ldr	r3, [pc, #412]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800d908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d90e:	65ba      	str	r2, [r7, #88]	; 0x58
 800d910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d912:	fa92 f2a2 	rbit	r2, r2
 800d916:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800d918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d91a:	fab2 f282 	clz	r2, r2
 800d91e:	b2d2      	uxtb	r2, r2
 800d920:	f042 0220 	orr.w	r2, r2, #32
 800d924:	b2d2      	uxtb	r2, r2
 800d926:	f002 021f 	and.w	r2, r2, #31
 800d92a:	2101      	movs	r1, #1
 800d92c:	fa01 f202 	lsl.w	r2, r1, r2
 800d930:	4013      	ands	r3, r2
 800d932:	2b00      	cmp	r3, #0
 800d934:	d17b      	bne.n	800da2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800d936:	2301      	movs	r3, #1
 800d938:	e0f3      	b.n	800db22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	2b02      	cmp	r3, #2
 800d940:	d13c      	bne.n	800d9bc <HAL_RCC_ClockConfig+0x178>
 800d942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d946:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d94a:	fa93 f3a3 	rbit	r3, r3
 800d94e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800d950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d952:	fab3 f383 	clz	r3, r3
 800d956:	b2db      	uxtb	r3, r3
 800d958:	095b      	lsrs	r3, r3, #5
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	f043 0301 	orr.w	r3, r3, #1
 800d960:	b2db      	uxtb	r3, r3
 800d962:	2b01      	cmp	r3, #1
 800d964:	d102      	bne.n	800d96c <HAL_RCC_ClockConfig+0x128>
 800d966:	4b4f      	ldr	r3, [pc, #316]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	e00f      	b.n	800d98c <HAL_RCC_ClockConfig+0x148>
 800d96c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d970:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d974:	fa93 f3a3 	rbit	r3, r3
 800d978:	647b      	str	r3, [r7, #68]	; 0x44
 800d97a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d97e:	643b      	str	r3, [r7, #64]	; 0x40
 800d980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d982:	fa93 f3a3 	rbit	r3, r3
 800d986:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d988:	4b46      	ldr	r3, [pc, #280]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800d98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d990:	63ba      	str	r2, [r7, #56]	; 0x38
 800d992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d994:	fa92 f2a2 	rbit	r2, r2
 800d998:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800d99a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d99c:	fab2 f282 	clz	r2, r2
 800d9a0:	b2d2      	uxtb	r2, r2
 800d9a2:	f042 0220 	orr.w	r2, r2, #32
 800d9a6:	b2d2      	uxtb	r2, r2
 800d9a8:	f002 021f 	and.w	r2, r2, #31
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	fa01 f202 	lsl.w	r2, r1, r2
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d13a      	bne.n	800da2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e0b2      	b.n	800db22 <HAL_RCC_ClockConfig+0x2de>
 800d9bc:	2302      	movs	r3, #2
 800d9be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c2:	fa93 f3a3 	rbit	r3, r3
 800d9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800d9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9ca:	fab3 f383 	clz	r3, r3
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	095b      	lsrs	r3, r3, #5
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f043 0301 	orr.w	r3, r3, #1
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d102      	bne.n	800d9e4 <HAL_RCC_ClockConfig+0x1a0>
 800d9de:	4b31      	ldr	r3, [pc, #196]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	e00d      	b.n	800da00 <HAL_RCC_ClockConfig+0x1bc>
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ea:	fa93 f3a3 	rbit	r3, r3
 800d9ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	623b      	str	r3, [r7, #32]
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	fa93 f3a3 	rbit	r3, r3
 800d9fa:	61fb      	str	r3, [r7, #28]
 800d9fc:	4b29      	ldr	r3, [pc, #164]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800d9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da00:	2202      	movs	r2, #2
 800da02:	61ba      	str	r2, [r7, #24]
 800da04:	69ba      	ldr	r2, [r7, #24]
 800da06:	fa92 f2a2 	rbit	r2, r2
 800da0a:	617a      	str	r2, [r7, #20]
  return result;
 800da0c:	697a      	ldr	r2, [r7, #20]
 800da0e:	fab2 f282 	clz	r2, r2
 800da12:	b2d2      	uxtb	r2, r2
 800da14:	f042 0220 	orr.w	r2, r2, #32
 800da18:	b2d2      	uxtb	r2, r2
 800da1a:	f002 021f 	and.w	r2, r2, #31
 800da1e:	2101      	movs	r1, #1
 800da20:	fa01 f202 	lsl.w	r2, r1, r2
 800da24:	4013      	ands	r3, r2
 800da26:	2b00      	cmp	r3, #0
 800da28:	d101      	bne.n	800da2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800da2a:	2301      	movs	r3, #1
 800da2c:	e079      	b.n	800db22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800da2e:	4b1d      	ldr	r3, [pc, #116]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	f023 0203 	bic.w	r2, r3, #3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	491a      	ldr	r1, [pc, #104]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800da3c:	4313      	orrs	r3, r2
 800da3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800da40:	f7fa f8dc 	bl	8007bfc <HAL_GetTick>
 800da44:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da46:	e00a      	b.n	800da5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da48:	f7fa f8d8 	bl	8007bfc <HAL_GetTick>
 800da4c:	4602      	mov	r2, r0
 800da4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	f241 3288 	movw	r2, #5000	; 0x1388
 800da56:	4293      	cmp	r3, r2
 800da58:	d901      	bls.n	800da5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800da5a:	2303      	movs	r3, #3
 800da5c:	e061      	b.n	800db22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da5e:	4b11      	ldr	r3, [pc, #68]	; (800daa4 <HAL_RCC_ClockConfig+0x260>)
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	f003 020c 	and.w	r2, r3, #12
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d1eb      	bne.n	800da48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800da70:	4b0b      	ldr	r3, [pc, #44]	; (800daa0 <HAL_RCC_ClockConfig+0x25c>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f003 0307 	and.w	r3, r3, #7
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d214      	bcs.n	800daa8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da7e:	4b08      	ldr	r3, [pc, #32]	; (800daa0 <HAL_RCC_ClockConfig+0x25c>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f023 0207 	bic.w	r2, r3, #7
 800da86:	4906      	ldr	r1, [pc, #24]	; (800daa0 <HAL_RCC_ClockConfig+0x25c>)
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800da8e:	4b04      	ldr	r3, [pc, #16]	; (800daa0 <HAL_RCC_ClockConfig+0x25c>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f003 0307 	and.w	r3, r3, #7
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d005      	beq.n	800daa8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800da9c:	2301      	movs	r3, #1
 800da9e:	e040      	b.n	800db22 <HAL_RCC_ClockConfig+0x2de>
 800daa0:	40022000 	.word	0x40022000
 800daa4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f003 0304 	and.w	r3, r3, #4
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d008      	beq.n	800dac6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dab4:	4b1d      	ldr	r3, [pc, #116]	; (800db2c <HAL_RCC_ClockConfig+0x2e8>)
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	491a      	ldr	r1, [pc, #104]	; (800db2c <HAL_RCC_ClockConfig+0x2e8>)
 800dac2:	4313      	orrs	r3, r2
 800dac4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f003 0308 	and.w	r3, r3, #8
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d009      	beq.n	800dae6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dad2:	4b16      	ldr	r3, [pc, #88]	; (800db2c <HAL_RCC_ClockConfig+0x2e8>)
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	691b      	ldr	r3, [r3, #16]
 800dade:	00db      	lsls	r3, r3, #3
 800dae0:	4912      	ldr	r1, [pc, #72]	; (800db2c <HAL_RCC_ClockConfig+0x2e8>)
 800dae2:	4313      	orrs	r3, r2
 800dae4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800dae6:	f000 f85b 	bl	800dba0 <HAL_RCC_GetSysClockFreq>
 800daea:	4601      	mov	r1, r0
 800daec:	4b0f      	ldr	r3, [pc, #60]	; (800db2c <HAL_RCC_ClockConfig+0x2e8>)
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800daf4:	22f0      	movs	r2, #240	; 0xf0
 800daf6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	fa92 f2a2 	rbit	r2, r2
 800dafe:	60fa      	str	r2, [r7, #12]
  return result;
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	fab2 f282 	clz	r2, r2
 800db06:	b2d2      	uxtb	r2, r2
 800db08:	40d3      	lsrs	r3, r2
 800db0a:	4a09      	ldr	r2, [pc, #36]	; (800db30 <HAL_RCC_ClockConfig+0x2ec>)
 800db0c:	5cd3      	ldrb	r3, [r2, r3]
 800db0e:	fa21 f303 	lsr.w	r3, r1, r3
 800db12:	4a08      	ldr	r2, [pc, #32]	; (800db34 <HAL_RCC_ClockConfig+0x2f0>)
 800db14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800db16:	4b08      	ldr	r3, [pc, #32]	; (800db38 <HAL_RCC_ClockConfig+0x2f4>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7f8 fe20 	bl	8006760 <HAL_InitTick>
  
  return HAL_OK;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3778      	adds	r7, #120	; 0x78
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	40021000 	.word	0x40021000
 800db30:	08016744 	.word	0x08016744
 800db34:	20000010 	.word	0x20000010
 800db38:	20000014 	.word	0x20000014

0800db3c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b08a      	sub	sp, #40	; 0x28
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800db48:	2302      	movs	r3, #2
 800db4a:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800db4c:	2303      	movs	r3, #3
 800db4e:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800db50:	2300      	movs	r3, #0
 800db52:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800db54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db58:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800db5a:	2300      	movs	r3, #0
 800db5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800db5e:	4b0f      	ldr	r3, [pc, #60]	; (800db9c <HAL_RCC_MCOConfig+0x60>)
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	4a0e      	ldr	r2, [pc, #56]	; (800db9c <HAL_RCC_MCOConfig+0x60>)
 800db64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db68:	6153      	str	r3, [r2, #20]
 800db6a:	4b0c      	ldr	r3, [pc, #48]	; (800db9c <HAL_RCC_MCOConfig+0x60>)
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db72:	613b      	str	r3, [r7, #16]
 800db74:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800db76:	f107 0314 	add.w	r3, r7, #20
 800db7a:	4619      	mov	r1, r3
 800db7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800db80:	f7fc fa3c 	bl	8009ffc <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800db84:	4b05      	ldr	r3, [pc, #20]	; (800db9c <HAL_RCC_MCOConfig+0x60>)
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800db8c:	4903      	ldr	r1, [pc, #12]	; (800db9c <HAL_RCC_MCOConfig+0x60>)
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	4313      	orrs	r3, r2
 800db92:	604b      	str	r3, [r1, #4]
}
 800db94:	bf00      	nop
 800db96:	3728      	adds	r7, #40	; 0x28
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	40021000 	.word	0x40021000

0800dba0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b08b      	sub	sp, #44	; 0x2c
 800dba4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800dba6:	2300      	movs	r3, #0
 800dba8:	61fb      	str	r3, [r7, #28]
 800dbaa:	2300      	movs	r3, #0
 800dbac:	61bb      	str	r3, [r7, #24]
 800dbae:	2300      	movs	r3, #0
 800dbb0:	627b      	str	r3, [r7, #36]	; 0x24
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800dbba:	4b29      	ldr	r3, [pc, #164]	; (800dc60 <HAL_RCC_GetSysClockFreq+0xc0>)
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	f003 030c 	and.w	r3, r3, #12
 800dbc6:	2b04      	cmp	r3, #4
 800dbc8:	d002      	beq.n	800dbd0 <HAL_RCC_GetSysClockFreq+0x30>
 800dbca:	2b08      	cmp	r3, #8
 800dbcc:	d003      	beq.n	800dbd6 <HAL_RCC_GetSysClockFreq+0x36>
 800dbce:	e03c      	b.n	800dc4a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800dbd0:	4b24      	ldr	r3, [pc, #144]	; (800dc64 <HAL_RCC_GetSysClockFreq+0xc4>)
 800dbd2:	623b      	str	r3, [r7, #32]
      break;
 800dbd4:	e03c      	b.n	800dc50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800dbdc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800dbe0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dbe2:	68ba      	ldr	r2, [r7, #8]
 800dbe4:	fa92 f2a2 	rbit	r2, r2
 800dbe8:	607a      	str	r2, [r7, #4]
  return result;
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	fab2 f282 	clz	r2, r2
 800dbf0:	b2d2      	uxtb	r2, r2
 800dbf2:	40d3      	lsrs	r3, r2
 800dbf4:	4a1c      	ldr	r2, [pc, #112]	; (800dc68 <HAL_RCC_GetSysClockFreq+0xc8>)
 800dbf6:	5cd3      	ldrb	r3, [r2, r3]
 800dbf8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800dbfa:	4b19      	ldr	r3, [pc, #100]	; (800dc60 <HAL_RCC_GetSysClockFreq+0xc0>)
 800dbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfe:	f003 030f 	and.w	r3, r3, #15
 800dc02:	220f      	movs	r2, #15
 800dc04:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc06:	693a      	ldr	r2, [r7, #16]
 800dc08:	fa92 f2a2 	rbit	r2, r2
 800dc0c:	60fa      	str	r2, [r7, #12]
  return result;
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	fab2 f282 	clz	r2, r2
 800dc14:	b2d2      	uxtb	r2, r2
 800dc16:	40d3      	lsrs	r3, r2
 800dc18:	4a14      	ldr	r2, [pc, #80]	; (800dc6c <HAL_RCC_GetSysClockFreq+0xcc>)
 800dc1a:	5cd3      	ldrb	r3, [r2, r3]
 800dc1c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d008      	beq.n	800dc3a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800dc28:	4a0e      	ldr	r2, [pc, #56]	; (800dc64 <HAL_RCC_GetSysClockFreq+0xc4>)
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	fb02 f303 	mul.w	r3, r2, r3
 800dc36:	627b      	str	r3, [r7, #36]	; 0x24
 800dc38:	e004      	b.n	800dc44 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	4a0c      	ldr	r2, [pc, #48]	; (800dc70 <HAL_RCC_GetSysClockFreq+0xd0>)
 800dc3e:	fb02 f303 	mul.w	r3, r2, r3
 800dc42:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	623b      	str	r3, [r7, #32]
      break;
 800dc48:	e002      	b.n	800dc50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800dc4a:	4b06      	ldr	r3, [pc, #24]	; (800dc64 <HAL_RCC_GetSysClockFreq+0xc4>)
 800dc4c:	623b      	str	r3, [r7, #32]
      break;
 800dc4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dc50:	6a3b      	ldr	r3, [r7, #32]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	372c      	adds	r7, #44	; 0x2c
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	40021000 	.word	0x40021000
 800dc64:	007a1200 	.word	0x007a1200
 800dc68:	08016c74 	.word	0x08016c74
 800dc6c:	08016c84 	.word	0x08016c84
 800dc70:	003d0900 	.word	0x003d0900

0800dc74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dc74:	b480      	push	{r7}
 800dc76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dc78:	4b03      	ldr	r3, [pc, #12]	; (800dc88 <HAL_RCC_GetHCLKFreq+0x14>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop
 800dc88:	20000010 	.word	0x20000010

0800dc8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800dc92:	f7ff ffef 	bl	800dc74 <HAL_RCC_GetHCLKFreq>
 800dc96:	4601      	mov	r1, r0
 800dc98:	4b0b      	ldr	r3, [pc, #44]	; (800dcc8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dca0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800dca4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	fa92 f2a2 	rbit	r2, r2
 800dcac:	603a      	str	r2, [r7, #0]
  return result;
 800dcae:	683a      	ldr	r2, [r7, #0]
 800dcb0:	fab2 f282 	clz	r2, r2
 800dcb4:	b2d2      	uxtb	r2, r2
 800dcb6:	40d3      	lsrs	r3, r2
 800dcb8:	4a04      	ldr	r2, [pc, #16]	; (800dccc <HAL_RCC_GetPCLK1Freq+0x40>)
 800dcba:	5cd3      	ldrb	r3, [r2, r3]
 800dcbc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	40021000 	.word	0x40021000
 800dccc:	08016754 	.word	0x08016754

0800dcd0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	220f      	movs	r2, #15
 800dcde:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dce0:	4b12      	ldr	r3, [pc, #72]	; (800dd2c <HAL_RCC_GetClockConfig+0x5c>)
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	f003 0203 	and.w	r2, r3, #3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800dcec:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <HAL_RCC_GetClockConfig+0x5c>)
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800dcf8:	4b0c      	ldr	r3, [pc, #48]	; (800dd2c <HAL_RCC_GetClockConfig+0x5c>)
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800dd04:	4b09      	ldr	r3, [pc, #36]	; (800dd2c <HAL_RCC_GetClockConfig+0x5c>)
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	08db      	lsrs	r3, r3, #3
 800dd0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800dd12:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <HAL_RCC_GetClockConfig+0x60>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 0207 	and.w	r2, r3, #7
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	601a      	str	r2, [r3, #0]
}
 800dd1e:	bf00      	nop
 800dd20:	370c      	adds	r7, #12
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	40021000 	.word	0x40021000
 800dd30:	40022000 	.word	0x40022000

0800dd34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b092      	sub	sp, #72	; 0x48
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800dd40:	2300      	movs	r3, #0
 800dd42:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800dd44:	2300      	movs	r3, #0
 800dd46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f000 80d4 	beq.w	800df00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dd58:	4b4e      	ldr	r3, [pc, #312]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dd5a:	69db      	ldr	r3, [r3, #28]
 800dd5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d10e      	bne.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dd64:	4b4b      	ldr	r3, [pc, #300]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dd66:	69db      	ldr	r3, [r3, #28]
 800dd68:	4a4a      	ldr	r2, [pc, #296]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dd6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd6e:	61d3      	str	r3, [r2, #28]
 800dd70:	4b48      	ldr	r3, [pc, #288]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dd72:	69db      	ldr	r3, [r3, #28]
 800dd74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd78:	60bb      	str	r3, [r7, #8]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dd82:	4b45      	ldr	r3, [pc, #276]	; (800de98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d118      	bne.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dd8e:	4b42      	ldr	r3, [pc, #264]	; (800de98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a41      	ldr	r2, [pc, #260]	; (800de98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800dd94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dd9a:	f7f9 ff2f 	bl	8007bfc <HAL_GetTick>
 800dd9e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dda0:	e008      	b.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dda2:	f7f9 ff2b 	bl	8007bfc <HAL_GetTick>
 800dda6:	4602      	mov	r2, r0
 800dda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddaa:	1ad3      	subs	r3, r2, r3
 800ddac:	2b64      	cmp	r3, #100	; 0x64
 800ddae:	d901      	bls.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	e169      	b.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ddb4:	4b38      	ldr	r3, [pc, #224]	; (800de98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d0f0      	beq.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ddc0:	4b34      	ldr	r3, [pc, #208]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ddc2:	6a1b      	ldr	r3, [r3, #32]
 800ddc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ddc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ddca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f000 8084 	beq.w	800deda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ddda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d07c      	beq.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dde0:	4b2c      	ldr	r3, [pc, #176]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dde2:	6a1b      	ldr	r3, [r3, #32]
 800dde4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dde8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ddee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf2:	fa93 f3a3 	rbit	r3, r3
 800ddf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ddfa:	fab3 f383 	clz	r3, r3
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	461a      	mov	r2, r3
 800de02:	4b26      	ldr	r3, [pc, #152]	; (800de9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800de04:	4413      	add	r3, r2
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	461a      	mov	r2, r3
 800de0a:	2301      	movs	r3, #1
 800de0c:	6013      	str	r3, [r2, #0]
 800de0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800de12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de16:	fa93 f3a3 	rbit	r3, r3
 800de1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800de1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800de1e:	fab3 f383 	clz	r3, r3
 800de22:	b2db      	uxtb	r3, r3
 800de24:	461a      	mov	r2, r3
 800de26:	4b1d      	ldr	r3, [pc, #116]	; (800de9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800de28:	4413      	add	r3, r2
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	461a      	mov	r2, r3
 800de2e:	2300      	movs	r3, #0
 800de30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800de32:	4a18      	ldr	r2, [pc, #96]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800de34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800de38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de3a:	f003 0301 	and.w	r3, r3, #1
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d04b      	beq.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de42:	f7f9 fedb 	bl	8007bfc <HAL_GetTick>
 800de46:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de48:	e00a      	b.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de4a:	f7f9 fed7 	bl	8007bfc <HAL_GetTick>
 800de4e:	4602      	mov	r2, r0
 800de50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de52:	1ad3      	subs	r3, r2, r3
 800de54:	f241 3288 	movw	r2, #5000	; 0x1388
 800de58:	4293      	cmp	r3, r2
 800de5a:	d901      	bls.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800de5c:	2303      	movs	r3, #3
 800de5e:	e113      	b.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800de60:	2302      	movs	r3, #2
 800de62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de66:	fa93 f3a3 	rbit	r3, r3
 800de6a:	627b      	str	r3, [r7, #36]	; 0x24
 800de6c:	2302      	movs	r3, #2
 800de6e:	623b      	str	r3, [r7, #32]
 800de70:	6a3b      	ldr	r3, [r7, #32]
 800de72:	fa93 f3a3 	rbit	r3, r3
 800de76:	61fb      	str	r3, [r7, #28]
  return result;
 800de78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de7a:	fab3 f383 	clz	r3, r3
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	095b      	lsrs	r3, r3, #5
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f043 0302 	orr.w	r3, r3, #2
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b02      	cmp	r3, #2
 800de8c:	d108      	bne.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800de8e:	4b01      	ldr	r3, [pc, #4]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800de90:	6a1b      	ldr	r3, [r3, #32]
 800de92:	e00d      	b.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800de94:	40021000 	.word	0x40021000
 800de98:	40007000 	.word	0x40007000
 800de9c:	10908100 	.word	0x10908100
 800dea0:	2302      	movs	r3, #2
 800dea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	fa93 f3a3 	rbit	r3, r3
 800deaa:	617b      	str	r3, [r7, #20]
 800deac:	4b78      	ldr	r3, [pc, #480]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800deae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb0:	2202      	movs	r2, #2
 800deb2:	613a      	str	r2, [r7, #16]
 800deb4:	693a      	ldr	r2, [r7, #16]
 800deb6:	fa92 f2a2 	rbit	r2, r2
 800deba:	60fa      	str	r2, [r7, #12]
  return result;
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	fab2 f282 	clz	r2, r2
 800dec2:	b2d2      	uxtb	r2, r2
 800dec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dec8:	b2d2      	uxtb	r2, r2
 800deca:	f002 021f 	and.w	r2, r2, #31
 800dece:	2101      	movs	r1, #1
 800ded0:	fa01 f202 	lsl.w	r2, r1, r2
 800ded4:	4013      	ands	r3, r2
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d0b7      	beq.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800deda:	4b6d      	ldr	r3, [pc, #436]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dedc:	6a1b      	ldr	r3, [r3, #32]
 800dede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	496a      	ldr	r1, [pc, #424]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dee8:	4313      	orrs	r3, r2
 800deea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800deec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800def0:	2b01      	cmp	r3, #1
 800def2:	d105      	bne.n	800df00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800def4:	4b66      	ldr	r3, [pc, #408]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800def6:	69db      	ldr	r3, [r3, #28]
 800def8:	4a65      	ldr	r2, [pc, #404]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800defa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800defe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f003 0301 	and.w	r3, r3, #1
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d008      	beq.n	800df1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800df0c:	4b60      	ldr	r3, [pc, #384]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df10:	f023 0203 	bic.w	r2, r3, #3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	495d      	ldr	r1, [pc, #372]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df1a:	4313      	orrs	r3, r2
 800df1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f003 0302 	and.w	r3, r3, #2
 800df26:	2b00      	cmp	r3, #0
 800df28:	d008      	beq.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800df2a:	4b59      	ldr	r3, [pc, #356]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	68db      	ldr	r3, [r3, #12]
 800df36:	4956      	ldr	r1, [pc, #344]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df38:	4313      	orrs	r3, r2
 800df3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f003 0304 	and.w	r3, r3, #4
 800df44:	2b00      	cmp	r3, #0
 800df46:	d008      	beq.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800df48:	4b51      	ldr	r3, [pc, #324]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	691b      	ldr	r3, [r3, #16]
 800df54:	494e      	ldr	r1, [pc, #312]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df56:	4313      	orrs	r3, r2
 800df58:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f003 0320 	and.w	r3, r3, #32
 800df62:	2b00      	cmp	r3, #0
 800df64:	d008      	beq.n	800df78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800df66:	4b4a      	ldr	r3, [pc, #296]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df6a:	f023 0210 	bic.w	r2, r3, #16
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	69db      	ldr	r3, [r3, #28]
 800df72:	4947      	ldr	r1, [pc, #284]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df74:	4313      	orrs	r3, r2
 800df76:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df80:	2b00      	cmp	r3, #0
 800df82:	d008      	beq.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800df84:	4b42      	ldr	r3, [pc, #264]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df90:	493f      	ldr	r1, [pc, #252]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df92:	4313      	orrs	r3, r2
 800df94:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d008      	beq.n	800dfb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dfa2:	4b3b      	ldr	r3, [pc, #236]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dfa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa6:	f023 0220 	bic.w	r2, r3, #32
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6a1b      	ldr	r3, [r3, #32]
 800dfae:	4938      	ldr	r1, [pc, #224]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f003 0308 	and.w	r3, r3, #8
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d008      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dfc0:	4b33      	ldr	r3, [pc, #204]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dfc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	695b      	ldr	r3, [r3, #20]
 800dfcc:	4930      	ldr	r1, [pc, #192]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f003 0310 	and.w	r3, r3, #16
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d008      	beq.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dfde:	4b2c      	ldr	r3, [pc, #176]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dfe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	699b      	ldr	r3, [r3, #24]
 800dfea:	4929      	ldr	r1, [pc, #164]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dfec:	4313      	orrs	r3, r2
 800dfee:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d008      	beq.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dffc:	4b24      	ldr	r3, [pc, #144]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e008:	4921      	ldr	r1, [pc, #132]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e00a:	4313      	orrs	r3, r2
 800e00c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e016:	2b00      	cmp	r3, #0
 800e018:	d008      	beq.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e01a:	4b1d      	ldr	r3, [pc, #116]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e026:	491a      	ldr	r1, [pc, #104]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e028:	4313      	orrs	r3, r2
 800e02a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e034:	2b00      	cmp	r3, #0
 800e036:	d008      	beq.n	800e04a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800e038:	4b15      	ldr	r3, [pc, #84]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e044:	4912      	ldr	r1, [pc, #72]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e046:	4313      	orrs	r3, r2
 800e048:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e052:	2b00      	cmp	r3, #0
 800e054:	d008      	beq.n	800e068 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800e056:	4b0e      	ldr	r3, [pc, #56]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e05a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e062:	490b      	ldr	r1, [pc, #44]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e064:	4313      	orrs	r3, r2
 800e066:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e070:	2b00      	cmp	r3, #0
 800e072:	d008      	beq.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800e074:	4b06      	ldr	r3, [pc, #24]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e078:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e080:	4903      	ldr	r1, [pc, #12]	; (800e090 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e082:	4313      	orrs	r3, r2
 800e084:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800e086:	2300      	movs	r3, #0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3748      	adds	r7, #72	; 0x48
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	40021000 	.word	0x40021000

0800e094 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d101      	bne.n	800e0a6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e083      	b.n	800e1ae <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	7f5b      	ldrb	r3, [r3, #29]
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d105      	bne.n	800e0bc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f7f8 faea 	bl	8006690 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2202      	movs	r2, #2
 800e0c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	22ca      	movs	r2, #202	; 0xca
 800e0c8:	625a      	str	r2, [r3, #36]	; 0x24
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2253      	movs	r2, #83	; 0x53
 800e0d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f897 	bl	800e206 <RTC_EnterInitMode>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d008      	beq.n	800e0f0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	22ff      	movs	r2, #255	; 0xff
 800e0e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2204      	movs	r2, #4
 800e0ea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e05e      	b.n	800e1ae <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	689b      	ldr	r3, [r3, #8]
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	6812      	ldr	r2, [r2, #0]
 800e0fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e102:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	6899      	ldr	r1, [r3, #8]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	685a      	ldr	r2, [r3, #4]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	431a      	orrs	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	431a      	orrs	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	430a      	orrs	r2, r1
 800e120:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	68d2      	ldr	r2, [r2, #12]
 800e12a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6919      	ldr	r1, [r3, #16]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	041a      	lsls	r2, r3, #16
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	430a      	orrs	r2, r1
 800e13e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68da      	ldr	r2, [r3, #12]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e14e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	f003 0320 	and.w	r3, r3, #32
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d10e      	bne.n	800e17c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f829 	bl	800e1b6 <HAL_RTC_WaitForSynchro>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d008      	beq.n	800e17c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	22ff      	movs	r2, #255	; 0xff
 800e170:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2204      	movs	r2, #4
 800e176:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	e018      	b.n	800e1ae <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e18a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	699a      	ldr	r2, [r3, #24]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	430a      	orrs	r2, r1
 800e19c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	22ff      	movs	r2, #255	; 0xff
 800e1a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
  }
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b084      	sub	sp, #16
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	68da      	ldr	r2, [r3, #12]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e1d0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800e1d2:	f7f9 fd13 	bl	8007bfc <HAL_GetTick>
 800e1d6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e1d8:	e009      	b.n	800e1ee <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e1da:	f7f9 fd0f 	bl	8007bfc <HAL_GetTick>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	1ad3      	subs	r3, r2, r3
 800e1e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1e8:	d901      	bls.n	800e1ee <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	e007      	b.n	800e1fe <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	f003 0320 	and.w	r3, r3, #32
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d0ee      	beq.n	800e1da <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b084      	sub	sp, #16
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e20e:	2300      	movs	r3, #0
 800e210:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d119      	bne.n	800e254 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f04f 32ff 	mov.w	r2, #4294967295
 800e228:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e22a:	f7f9 fce7 	bl	8007bfc <HAL_GetTick>
 800e22e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e230:	e009      	b.n	800e246 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e232:	f7f9 fce3 	bl	8007bfc <HAL_GetTick>
 800e236:	4602      	mov	r2, r0
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	1ad3      	subs	r3, r2, r3
 800e23c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e240:	d901      	bls.n	800e246 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800e242:	2303      	movs	r3, #3
 800e244:	e007      	b.n	800e256 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e250:	2b00      	cmp	r3, #0
 800e252:	d0ee      	beq.n	800e232 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b084      	sub	sp, #16
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d101      	bne.n	800e270 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e09d      	b.n	800e3ac <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e274:	2b00      	cmp	r3, #0
 800e276:	d108      	bne.n	800e28a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e280:	d009      	beq.n	800e296 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2200      	movs	r2, #0
 800e286:	61da      	str	r2, [r3, #28]
 800e288:	e005      	b.n	800e296 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d106      	bne.n	800e2b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7f8 fa13 	bl	80066dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2cc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	68db      	ldr	r3, [r3, #12]
 800e2d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e2d6:	d902      	bls.n	800e2de <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	e002      	b.n	800e2e4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e2de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e2ec:	d007      	beq.n	800e2fe <HAL_SPI_Init+0xa0>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e2f6:	d002      	beq.n	800e2fe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	689b      	ldr	r3, [r3, #8]
 800e30a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e30e:	431a      	orrs	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	f003 0302 	and.w	r3, r3, #2
 800e318:	431a      	orrs	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	695b      	ldr	r3, [r3, #20]
 800e31e:	f003 0301 	and.w	r3, r3, #1
 800e322:	431a      	orrs	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	699b      	ldr	r3, [r3, #24]
 800e328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e32c:	431a      	orrs	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	69db      	ldr	r3, [r3, #28]
 800e332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e336:	431a      	orrs	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6a1b      	ldr	r3, [r3, #32]
 800e33c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e340:	ea42 0103 	orr.w	r1, r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e348:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	430a      	orrs	r2, r1
 800e352:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	699b      	ldr	r3, [r3, #24]
 800e358:	0c1b      	lsrs	r3, r3, #16
 800e35a:	f003 0204 	and.w	r2, r3, #4
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e362:	f003 0310 	and.w	r3, r3, #16
 800e366:	431a      	orrs	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36c:	f003 0308 	and.w	r3, r3, #8
 800e370:	431a      	orrs	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e37a:	ea42 0103 	orr.w	r1, r2, r3
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	430a      	orrs	r2, r1
 800e38a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	69da      	ldr	r2, [r3, #28]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e39a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d101      	bne.n	800e3c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e049      	b.n	800e45a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d106      	bne.n	800e3e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 f841 	bl	800e462 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	3304      	adds	r3, #4
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	4610      	mov	r0, r2
 800e3f4:	f000 f9f2 	bl	800e7dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2201      	movs	r2, #1
 800e414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2201      	movs	r2, #1
 800e41c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2201      	movs	r2, #1
 800e424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2201      	movs	r2, #1
 800e42c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2201      	movs	r2, #1
 800e434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2201      	movs	r2, #1
 800e43c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2201      	movs	r2, #1
 800e444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2201      	movs	r2, #1
 800e44c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2201      	movs	r2, #1
 800e454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e458:	2300      	movs	r3, #0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3708      	adds	r7, #8
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e462:	b480      	push	{r7}
 800e464:	b083      	sub	sp, #12
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e46a:	bf00      	nop
 800e46c:	370c      	adds	r7, #12
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
	...

0800e478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e486:	b2db      	uxtb	r3, r3
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d001      	beq.n	800e490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e48c:	2301      	movs	r3, #1
 800e48e:	e04a      	b.n	800e526 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2202      	movs	r2, #2
 800e494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68da      	ldr	r2, [r3, #12]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f042 0201 	orr.w	r2, r2, #1
 800e4a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a21      	ldr	r2, [pc, #132]	; (800e534 <HAL_TIM_Base_Start_IT+0xbc>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d018      	beq.n	800e4e4 <HAL_TIM_Base_Start_IT+0x6c>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4ba:	d013      	beq.n	800e4e4 <HAL_TIM_Base_Start_IT+0x6c>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a1d      	ldr	r2, [pc, #116]	; (800e538 <HAL_TIM_Base_Start_IT+0xc0>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d00e      	beq.n	800e4e4 <HAL_TIM_Base_Start_IT+0x6c>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a1c      	ldr	r2, [pc, #112]	; (800e53c <HAL_TIM_Base_Start_IT+0xc4>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d009      	beq.n	800e4e4 <HAL_TIM_Base_Start_IT+0x6c>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a1a      	ldr	r2, [pc, #104]	; (800e540 <HAL_TIM_Base_Start_IT+0xc8>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d004      	beq.n	800e4e4 <HAL_TIM_Base_Start_IT+0x6c>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a19      	ldr	r2, [pc, #100]	; (800e544 <HAL_TIM_Base_Start_IT+0xcc>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d115      	bne.n	800e510 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	689a      	ldr	r2, [r3, #8]
 800e4ea:	4b17      	ldr	r3, [pc, #92]	; (800e548 <HAL_TIM_Base_Start_IT+0xd0>)
 800e4ec:	4013      	ands	r3, r2
 800e4ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2b06      	cmp	r3, #6
 800e4f4:	d015      	beq.n	800e522 <HAL_TIM_Base_Start_IT+0xaa>
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4fc:	d011      	beq.n	800e522 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f042 0201 	orr.w	r2, r2, #1
 800e50c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e50e:	e008      	b.n	800e522 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f042 0201 	orr.w	r2, r2, #1
 800e51e:	601a      	str	r2, [r3, #0]
 800e520:	e000      	b.n	800e524 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e522:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	40012c00 	.word	0x40012c00
 800e538:	40000400 	.word	0x40000400
 800e53c:	40000800 	.word	0x40000800
 800e540:	40013400 	.word	0x40013400
 800e544:	40014000 	.word	0x40014000
 800e548:	00010007 	.word	0x00010007

0800e54c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	f003 0302 	and.w	r3, r3, #2
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d122      	bne.n	800e5a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	f003 0302 	and.w	r3, r3, #2
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d11b      	bne.n	800e5a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f06f 0202 	mvn.w	r2, #2
 800e578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2201      	movs	r2, #1
 800e57e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	699b      	ldr	r3, [r3, #24]
 800e586:	f003 0303 	and.w	r3, r3, #3
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d003      	beq.n	800e596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 f905 	bl	800e79e <HAL_TIM_IC_CaptureCallback>
 800e594:	e005      	b.n	800e5a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 f8f7 	bl	800e78a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 f908 	bl	800e7b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	f003 0304 	and.w	r3, r3, #4
 800e5b2:	2b04      	cmp	r3, #4
 800e5b4:	d122      	bne.n	800e5fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	f003 0304 	and.w	r3, r3, #4
 800e5c0:	2b04      	cmp	r3, #4
 800e5c2:	d11b      	bne.n	800e5fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f06f 0204 	mvn.w	r2, #4
 800e5cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2202      	movs	r2, #2
 800e5d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	699b      	ldr	r3, [r3, #24]
 800e5da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d003      	beq.n	800e5ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 f8db 	bl	800e79e <HAL_TIM_IC_CaptureCallback>
 800e5e8:	e005      	b.n	800e5f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 f8cd 	bl	800e78a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 f8de 	bl	800e7b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	691b      	ldr	r3, [r3, #16]
 800e602:	f003 0308 	and.w	r3, r3, #8
 800e606:	2b08      	cmp	r3, #8
 800e608:	d122      	bne.n	800e650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	f003 0308 	and.w	r3, r3, #8
 800e614:	2b08      	cmp	r3, #8
 800e616:	d11b      	bne.n	800e650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f06f 0208 	mvn.w	r2, #8
 800e620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2204      	movs	r2, #4
 800e626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	69db      	ldr	r3, [r3, #28]
 800e62e:	f003 0303 	and.w	r3, r3, #3
 800e632:	2b00      	cmp	r3, #0
 800e634:	d003      	beq.n	800e63e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f8b1 	bl	800e79e <HAL_TIM_IC_CaptureCallback>
 800e63c:	e005      	b.n	800e64a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f8a3 	bl	800e78a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 f8b4 	bl	800e7b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2200      	movs	r2, #0
 800e64e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	691b      	ldr	r3, [r3, #16]
 800e656:	f003 0310 	and.w	r3, r3, #16
 800e65a:	2b10      	cmp	r3, #16
 800e65c:	d122      	bne.n	800e6a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	f003 0310 	and.w	r3, r3, #16
 800e668:	2b10      	cmp	r3, #16
 800e66a:	d11b      	bne.n	800e6a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f06f 0210 	mvn.w	r2, #16
 800e674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2208      	movs	r2, #8
 800e67a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	69db      	ldr	r3, [r3, #28]
 800e682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e686:	2b00      	cmp	r3, #0
 800e688:	d003      	beq.n	800e692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 f887 	bl	800e79e <HAL_TIM_IC_CaptureCallback>
 800e690:	e005      	b.n	800e69e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 f879 	bl	800e78a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f88a 	bl	800e7b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	691b      	ldr	r3, [r3, #16]
 800e6aa:	f003 0301 	and.w	r3, r3, #1
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d10e      	bne.n	800e6d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	f003 0301 	and.w	r3, r3, #1
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d107      	bne.n	800e6d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f06f 0201 	mvn.w	r2, #1
 800e6c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7f5 f8ac 	bl	8003828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	691b      	ldr	r3, [r3, #16]
 800e6d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6da:	2b80      	cmp	r3, #128	; 0x80
 800e6dc:	d10e      	bne.n	800e6fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6e8:	2b80      	cmp	r3, #128	; 0x80
 800e6ea:	d107      	bne.n	800e6fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e6f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 f90a 	bl	800e910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e70a:	d10e      	bne.n	800e72a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e716:	2b80      	cmp	r3, #128	; 0x80
 800e718:	d107      	bne.n	800e72a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 f8fd 	bl	800e924 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e734:	2b40      	cmp	r3, #64	; 0x40
 800e736:	d10e      	bne.n	800e756 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e742:	2b40      	cmp	r3, #64	; 0x40
 800e744:	d107      	bne.n	800e756 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e74e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 f838 	bl	800e7c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	691b      	ldr	r3, [r3, #16]
 800e75c:	f003 0320 	and.w	r3, r3, #32
 800e760:	2b20      	cmp	r3, #32
 800e762:	d10e      	bne.n	800e782 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	f003 0320 	and.w	r3, r3, #32
 800e76e:	2b20      	cmp	r3, #32
 800e770:	d107      	bne.n	800e782 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f06f 0220 	mvn.w	r2, #32
 800e77a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 f8bd 	bl	800e8fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e782:	bf00      	nop
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e78a:	b480      	push	{r7}
 800e78c:	b083      	sub	sp, #12
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e792:	bf00      	nop
 800e794:	370c      	adds	r7, #12
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b083      	sub	sp, #12
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e7a6:	bf00      	nop
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e7b2:	b480      	push	{r7}
 800e7b4:	b083      	sub	sp, #12
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e7ba:	bf00      	nop
 800e7bc:	370c      	adds	r7, #12
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr

0800e7c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e7c6:	b480      	push	{r7}
 800e7c8:	b083      	sub	sp, #12
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e7ce:	bf00      	nop
 800e7d0:	370c      	adds	r7, #12
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
	...

0800e7dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b085      	sub	sp, #20
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	4a3c      	ldr	r2, [pc, #240]	; (800e8e0 <TIM_Base_SetConfig+0x104>)
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d00f      	beq.n	800e814 <TIM_Base_SetConfig+0x38>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7fa:	d00b      	beq.n	800e814 <TIM_Base_SetConfig+0x38>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	4a39      	ldr	r2, [pc, #228]	; (800e8e4 <TIM_Base_SetConfig+0x108>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d007      	beq.n	800e814 <TIM_Base_SetConfig+0x38>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	4a38      	ldr	r2, [pc, #224]	; (800e8e8 <TIM_Base_SetConfig+0x10c>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d003      	beq.n	800e814 <TIM_Base_SetConfig+0x38>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	4a37      	ldr	r2, [pc, #220]	; (800e8ec <TIM_Base_SetConfig+0x110>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d108      	bne.n	800e826 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e81a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	4313      	orrs	r3, r2
 800e824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4a2d      	ldr	r2, [pc, #180]	; (800e8e0 <TIM_Base_SetConfig+0x104>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d01b      	beq.n	800e866 <TIM_Base_SetConfig+0x8a>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e834:	d017      	beq.n	800e866 <TIM_Base_SetConfig+0x8a>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	4a2a      	ldr	r2, [pc, #168]	; (800e8e4 <TIM_Base_SetConfig+0x108>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d013      	beq.n	800e866 <TIM_Base_SetConfig+0x8a>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4a29      	ldr	r2, [pc, #164]	; (800e8e8 <TIM_Base_SetConfig+0x10c>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d00f      	beq.n	800e866 <TIM_Base_SetConfig+0x8a>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4a28      	ldr	r2, [pc, #160]	; (800e8ec <TIM_Base_SetConfig+0x110>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d00b      	beq.n	800e866 <TIM_Base_SetConfig+0x8a>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4a27      	ldr	r2, [pc, #156]	; (800e8f0 <TIM_Base_SetConfig+0x114>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d007      	beq.n	800e866 <TIM_Base_SetConfig+0x8a>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4a26      	ldr	r2, [pc, #152]	; (800e8f4 <TIM_Base_SetConfig+0x118>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d003      	beq.n	800e866 <TIM_Base_SetConfig+0x8a>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4a25      	ldr	r2, [pc, #148]	; (800e8f8 <TIM_Base_SetConfig+0x11c>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d108      	bne.n	800e878 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e86c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	4313      	orrs	r3, r2
 800e876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	695b      	ldr	r3, [r3, #20]
 800e882:	4313      	orrs	r3, r2
 800e884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	689a      	ldr	r2, [r3, #8]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4a10      	ldr	r2, [pc, #64]	; (800e8e0 <TIM_Base_SetConfig+0x104>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d00f      	beq.n	800e8c4 <TIM_Base_SetConfig+0xe8>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4a11      	ldr	r2, [pc, #68]	; (800e8ec <TIM_Base_SetConfig+0x110>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d00b      	beq.n	800e8c4 <TIM_Base_SetConfig+0xe8>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4a10      	ldr	r2, [pc, #64]	; (800e8f0 <TIM_Base_SetConfig+0x114>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d007      	beq.n	800e8c4 <TIM_Base_SetConfig+0xe8>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4a0f      	ldr	r2, [pc, #60]	; (800e8f4 <TIM_Base_SetConfig+0x118>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d003      	beq.n	800e8c4 <TIM_Base_SetConfig+0xe8>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4a0e      	ldr	r2, [pc, #56]	; (800e8f8 <TIM_Base_SetConfig+0x11c>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d103      	bne.n	800e8cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	691a      	ldr	r2, [r3, #16]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	615a      	str	r2, [r3, #20]
}
 800e8d2:	bf00      	nop
 800e8d4:	3714      	adds	r7, #20
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	40012c00 	.word	0x40012c00
 800e8e4:	40000400 	.word	0x40000400
 800e8e8:	40000800 	.word	0x40000800
 800e8ec:	40013400 	.word	0x40013400
 800e8f0:	40014000 	.word	0x40014000
 800e8f4:	40014400 	.word	0x40014400
 800e8f8:	40014800 	.word	0x40014800

0800e8fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e904:	bf00      	nop
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e918:	bf00      	nop
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e92c:	bf00      	nop
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e938:	b480      	push	{r7}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e948:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800e94c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	b29a      	uxth	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3714      	adds	r7, #20
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr

0800e966 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e966:	b480      	push	{r7}
 800e968:	b085      	sub	sp, #20
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e96e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800e972:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	b29b      	uxth	r3, r3
 800e980:	43db      	mvns	r3, r3
 800e982:	b29b      	uxth	r3, r3
 800e984:	4013      	ands	r3, r2
 800e986:	b29a      	uxth	r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3714      	adds	r7, #20
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e99c:	b084      	sub	sp, #16
 800e99e:	b480      	push	{r7}
 800e9a0:	b083      	sub	sp, #12
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	f107 0014 	add.w	r0, r7, #20
 800e9aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	370c      	adds	r7, #12
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	b004      	add	sp, #16
 800e9dc:	4770      	bx	lr
	...

0800e9e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b09d      	sub	sp, #116	; 0x74
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	4413      	add	r3, r2
 800e9fa:	881b      	ldrh	r3, [r3, #0]
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ea02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea06:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	78db      	ldrb	r3, [r3, #3]
 800ea0e:	2b03      	cmp	r3, #3
 800ea10:	d81f      	bhi.n	800ea52 <USB_ActivateEndpoint+0x72>
 800ea12:	a201      	add	r2, pc, #4	; (adr r2, 800ea18 <USB_ActivateEndpoint+0x38>)
 800ea14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea18:	0800ea29 	.word	0x0800ea29
 800ea1c:	0800ea45 	.word	0x0800ea45
 800ea20:	0800ea5b 	.word	0x0800ea5b
 800ea24:	0800ea37 	.word	0x0800ea37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ea28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ea2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ea34:	e012      	b.n	800ea5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ea36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ea3a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ea3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ea42:	e00b      	b.n	800ea5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ea44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ea48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ea4c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ea50:	e004      	b.n	800ea5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ea52:	2301      	movs	r3, #1
 800ea54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ea58:	e000      	b.n	800ea5c <USB_ActivateEndpoint+0x7c>
      break;
 800ea5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	441a      	add	r2, r3
 800ea66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ea6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	009b      	lsls	r3, r3, #2
 800ea86:	4413      	add	r3, r2
 800ea88:	881b      	ldrh	r3, [r3, #0]
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	b21b      	sxth	r3, r3
 800ea8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea96:	b21a      	sxth	r2, r3
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	b21b      	sxth	r3, r3
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	b21b      	sxth	r3, r3
 800eaa2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	441a      	add	r2, r3
 800eab0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800eab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eabc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	7b1b      	ldrb	r3, [r3, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f040 8149 	bne.w	800ed64 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	785b      	ldrb	r3, [r3, #1]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	f000 8084 	beq.w	800ebe4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	61bb      	str	r3, [r7, #24]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	461a      	mov	r2, r3
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	4413      	add	r3, r2
 800eaee:	61bb      	str	r3, [r7, #24]
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	011a      	lsls	r2, r3, #4
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	4413      	add	r3, r2
 800eafa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eafe:	617b      	str	r3, [r7, #20]
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	88db      	ldrh	r3, [r3, #6]
 800eb04:	085b      	lsrs	r3, r3, #1
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	005b      	lsls	r3, r3, #1
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	4413      	add	r3, r2
 800eb1a:	881b      	ldrh	r3, [r3, #0]
 800eb1c:	827b      	strh	r3, [r7, #18]
 800eb1e:	8a7b      	ldrh	r3, [r7, #18]
 800eb20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d01b      	beq.n	800eb60 <USB_ActivateEndpoint+0x180>
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	009b      	lsls	r3, r3, #2
 800eb30:	4413      	add	r3, r2
 800eb32:	881b      	ldrh	r3, [r3, #0]
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb3e:	823b      	strh	r3, [r7, #16]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	009b      	lsls	r3, r3, #2
 800eb48:	441a      	add	r2, r3
 800eb4a:	8a3b      	ldrh	r3, [r7, #16]
 800eb4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	78db      	ldrb	r3, [r3, #3]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d020      	beq.n	800ebaa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	009b      	lsls	r3, r3, #2
 800eb70:	4413      	add	r3, r2
 800eb72:	881b      	ldrh	r3, [r3, #0]
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb7e:	81bb      	strh	r3, [r7, #12]
 800eb80:	89bb      	ldrh	r3, [r7, #12]
 800eb82:	f083 0320 	eor.w	r3, r3, #32
 800eb86:	81bb      	strh	r3, [r7, #12]
 800eb88:	687a      	ldr	r2, [r7, #4]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	441a      	add	r2, r3
 800eb92:	89bb      	ldrh	r3, [r7, #12]
 800eb94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	8013      	strh	r3, [r2, #0]
 800eba8:	e2a6      	b.n	800f0f8 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	4413      	add	r3, r2
 800ebb4:	881b      	ldrh	r3, [r3, #0]
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebc0:	81fb      	strh	r3, [r7, #14]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	441a      	add	r2, r3
 800ebcc:	89fb      	ldrh	r3, [r7, #14]
 800ebce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ebda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	8013      	strh	r3, [r2, #0]
 800ebe2:	e289      	b.n	800f0f8 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	633b      	str	r3, [r7, #48]	; 0x30
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf4:	4413      	add	r3, r2
 800ebf6:	633b      	str	r3, [r7, #48]	; 0x30
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	011a      	lsls	r2, r3, #4
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec00:	4413      	add	r3, r2
 800ec02:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ec06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	88db      	ldrh	r3, [r3, #6]
 800ec0c:	085b      	lsrs	r3, r3, #1
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	005b      	lsls	r3, r3, #1
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	461a      	mov	r2, r3
 800ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec28:	4413      	add	r3, r2
 800ec2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	011a      	lsls	r2, r3, #4
 800ec32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec34:	4413      	add	r3, r2
 800ec36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ec3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	691b      	ldr	r3, [r3, #16]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d112      	bne.n	800ec6a <USB_ActivateEndpoint+0x28a>
 800ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec46:	881b      	ldrh	r3, [r3, #0]
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ec4e:	b29a      	uxth	r2, r3
 800ec50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec52:	801a      	strh	r2, [r3, #0]
 800ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec56:	881b      	ldrh	r3, [r3, #0]
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec66:	801a      	strh	r2, [r3, #0]
 800ec68:	e02f      	b.n	800ecca <USB_ActivateEndpoint+0x2ea>
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	691b      	ldr	r3, [r3, #16]
 800ec6e:	2b3e      	cmp	r3, #62	; 0x3e
 800ec70:	d813      	bhi.n	800ec9a <USB_ActivateEndpoint+0x2ba>
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	691b      	ldr	r3, [r3, #16]
 800ec76:	085b      	lsrs	r3, r3, #1
 800ec78:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	f003 0301 	and.w	r3, r3, #1
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d002      	beq.n	800ec8c <USB_ActivateEndpoint+0x2ac>
 800ec86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec88:	3301      	adds	r3, #1
 800ec8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	029b      	lsls	r3, r3, #10
 800ec92:	b29a      	uxth	r2, r3
 800ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec96:	801a      	strh	r2, [r3, #0]
 800ec98:	e017      	b.n	800ecca <USB_ActivateEndpoint+0x2ea>
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	095b      	lsrs	r3, r3, #5
 800eca0:	66bb      	str	r3, [r7, #104]	; 0x68
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	f003 031f 	and.w	r3, r3, #31
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d102      	bne.n	800ecb4 <USB_ActivateEndpoint+0x2d4>
 800ecae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecb0:	3b01      	subs	r3, #1
 800ecb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	029b      	lsls	r3, r3, #10
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	4413      	add	r3, r2
 800ecd4:	881b      	ldrh	r3, [r3, #0]
 800ecd6:	847b      	strh	r3, [r7, #34]	; 0x22
 800ecd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d01b      	beq.n	800ed1a <USB_ActivateEndpoint+0x33a>
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	4413      	add	r3, r2
 800ecec:	881b      	ldrh	r3, [r3, #0]
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ecf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecf8:	843b      	strh	r3, [r7, #32]
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	441a      	add	r2, r3
 800ed04:	8c3b      	ldrh	r3, [r7, #32]
 800ed06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ed12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	4413      	add	r3, r2
 800ed24:	881b      	ldrh	r3, [r3, #0]
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed30:	83fb      	strh	r3, [r7, #30]
 800ed32:	8bfb      	ldrh	r3, [r7, #30]
 800ed34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ed38:	83fb      	strh	r3, [r7, #30]
 800ed3a:	8bfb      	ldrh	r3, [r7, #30]
 800ed3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ed40:	83fb      	strh	r3, [r7, #30]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	441a      	add	r2, r3
 800ed4c:	8bfb      	ldrh	r3, [r7, #30]
 800ed4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	8013      	strh	r3, [r2, #0]
 800ed62:	e1c9      	b.n	800f0f8 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	78db      	ldrb	r3, [r3, #3]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d11e      	bne.n	800edaa <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	4413      	add	r3, r2
 800ed76:	881b      	ldrh	r3, [r3, #0]
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed82:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	441a      	add	r2, r3
 800ed90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ed94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed9c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800eda0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	8013      	strh	r3, [r2, #0]
 800eda8:	e01d      	b.n	800ede6 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	4413      	add	r3, r2
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800edbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edc0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	441a      	add	r2, r3
 800edce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800edd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	461a      	mov	r2, r3
 800edf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edf6:	4413      	add	r3, r2
 800edf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	011a      	lsls	r2, r3, #4
 800ee00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee02:	4413      	add	r3, r2
 800ee04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ee08:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	891b      	ldrh	r3, [r3, #8]
 800ee0e:	085b      	lsrs	r3, r3, #1
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee18:	801a      	strh	r2, [r3, #0]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	657b      	str	r3, [r7, #84]	; 0x54
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	461a      	mov	r2, r3
 800ee28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee2a:	4413      	add	r3, r2
 800ee2c:	657b      	str	r3, [r7, #84]	; 0x54
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	011a      	lsls	r2, r3, #4
 800ee34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee36:	4413      	add	r3, r2
 800ee38:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ee3c:	653b      	str	r3, [r7, #80]	; 0x50
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	895b      	ldrh	r3, [r3, #10]
 800ee42:	085b      	lsrs	r3, r3, #1
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	005b      	lsls	r3, r3, #1
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee4c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	785b      	ldrb	r3, [r3, #1]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	f040 8093 	bne.w	800ef7e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	881b      	ldrh	r3, [r3, #0]
 800ee64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ee68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d01b      	beq.n	800eeac <USB_ActivateEndpoint+0x4cc>
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	4413      	add	r3, r2
 800ee7e:	881b      	ldrh	r3, [r3, #0]
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	441a      	add	r2, r3
 800ee96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	4413      	add	r3, r2
 800eeb6:	881b      	ldrh	r3, [r3, #0]
 800eeb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800eeba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d01b      	beq.n	800eefc <USB_ActivateEndpoint+0x51c>
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	4413      	add	r3, r2
 800eece:	881b      	ldrh	r3, [r3, #0]
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeda:	877b      	strh	r3, [r7, #58]	; 0x3a
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	441a      	add	r2, r3
 800eee6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eeec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eef4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	4413      	add	r3, r2
 800ef06:	881b      	ldrh	r3, [r3, #0]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef12:	873b      	strh	r3, [r7, #56]	; 0x38
 800ef14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef16:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ef1a:	873b      	strh	r3, [r7, #56]	; 0x38
 800ef1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ef22:	873b      	strh	r3, [r7, #56]	; 0x38
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	441a      	add	r2, r3
 800ef2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	4413      	add	r3, r2
 800ef4e:	881b      	ldrh	r3, [r3, #0]
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef5a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	441a      	add	r2, r3
 800ef66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ef68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	8013      	strh	r3, [r2, #0]
 800ef7c:	e0bc      	b.n	800f0f8 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	881b      	ldrh	r3, [r3, #0]
 800ef8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ef8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d01d      	beq.n	800efd6 <USB_ActivateEndpoint+0x5f6>
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	4413      	add	r3, r2
 800efa4:	881b      	ldrh	r3, [r3, #0]
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	441a      	add	r2, r3
 800efbe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800efc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800efce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	009b      	lsls	r3, r3, #2
 800efde:	4413      	add	r3, r2
 800efe0:	881b      	ldrh	r3, [r3, #0]
 800efe2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800efe6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800efea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d01d      	beq.n	800f02e <USB_ActivateEndpoint+0x64e>
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	009b      	lsls	r3, r3, #2
 800effa:	4413      	add	r3, r2
 800effc:	881b      	ldrh	r3, [r3, #0]
 800effe:	b29b      	uxth	r3, r3
 800f000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f008:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	441a      	add	r2, r3
 800f016:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f01a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f01e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f026:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	78db      	ldrb	r3, [r3, #3]
 800f032:	2b01      	cmp	r3, #1
 800f034:	d024      	beq.n	800f080 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	4413      	add	r3, r2
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	b29b      	uxth	r3, r3
 800f044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f04c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f050:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f054:	f083 0320 	eor.w	r3, r3, #32
 800f058:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	441a      	add	r2, r3
 800f066:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f06a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f06e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	8013      	strh	r3, [r2, #0]
 800f07e:	e01d      	b.n	800f0bc <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	4413      	add	r3, r2
 800f08a:	881b      	ldrh	r3, [r3, #0]
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f096:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	009b      	lsls	r3, r3, #2
 800f0a2:	441a      	add	r2, r3
 800f0a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f0a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	881b      	ldrh	r3, [r3, #0]
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f0ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	441a      	add	r2, r3
 800f0e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800f0f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3774      	adds	r7, #116	; 0x74
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f108:	b480      	push	{r7}
 800f10a:	b08d      	sub	sp, #52	; 0x34
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	7b1b      	ldrb	r3, [r3, #12]
 800f116:	2b00      	cmp	r3, #0
 800f118:	f040 808e 	bne.w	800f238 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	785b      	ldrb	r3, [r3, #1]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d044      	beq.n	800f1ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	009b      	lsls	r3, r3, #2
 800f12c:	4413      	add	r3, r2
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	81bb      	strh	r3, [r7, #12]
 800f132:	89bb      	ldrh	r3, [r7, #12]
 800f134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d01b      	beq.n	800f174 <USB_DeactivateEndpoint+0x6c>
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	009b      	lsls	r3, r3, #2
 800f144:	4413      	add	r3, r2
 800f146:	881b      	ldrh	r3, [r3, #0]
 800f148:	b29b      	uxth	r3, r3
 800f14a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f152:	817b      	strh	r3, [r7, #10]
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	009b      	lsls	r3, r3, #2
 800f15c:	441a      	add	r2, r3
 800f15e:	897b      	ldrh	r3, [r7, #10]
 800f160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f16c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f170:	b29b      	uxth	r3, r3
 800f172:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	4413      	add	r3, r2
 800f17e:	881b      	ldrh	r3, [r3, #0]
 800f180:	b29b      	uxth	r3, r3
 800f182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f18a:	813b      	strh	r3, [r7, #8]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	781b      	ldrb	r3, [r3, #0]
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	441a      	add	r2, r3
 800f196:	893b      	ldrh	r3, [r7, #8]
 800f198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f19c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	8013      	strh	r3, [r2, #0]
 800f1ac:	e192      	b.n	800f4d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	009b      	lsls	r3, r3, #2
 800f1b6:	4413      	add	r3, r2
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	827b      	strh	r3, [r7, #18]
 800f1bc:	8a7b      	ldrh	r3, [r7, #18]
 800f1be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d01b      	beq.n	800f1fe <USB_DeactivateEndpoint+0xf6>
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	4413      	add	r3, r2
 800f1d0:	881b      	ldrh	r3, [r3, #0]
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1dc:	823b      	strh	r3, [r7, #16]
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	441a      	add	r2, r3
 800f1e8:	8a3b      	ldrh	r3, [r7, #16]
 800f1ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	4413      	add	r3, r2
 800f208:	881b      	ldrh	r3, [r3, #0]
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f214:	81fb      	strh	r3, [r7, #14]
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	441a      	add	r2, r3
 800f220:	89fb      	ldrh	r3, [r7, #14]
 800f222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f22a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f22e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f232:	b29b      	uxth	r3, r3
 800f234:	8013      	strh	r3, [r2, #0]
 800f236:	e14d      	b.n	800f4d4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	785b      	ldrb	r3, [r3, #1]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f040 80a5 	bne.w	800f38c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4413      	add	r3, r2
 800f24c:	881b      	ldrh	r3, [r3, #0]
 800f24e:	843b      	strh	r3, [r7, #32]
 800f250:	8c3b      	ldrh	r3, [r7, #32]
 800f252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f256:	2b00      	cmp	r3, #0
 800f258:	d01b      	beq.n	800f292 <USB_DeactivateEndpoint+0x18a>
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	4413      	add	r3, r2
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	b29b      	uxth	r3, r3
 800f268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f26c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f270:	83fb      	strh	r3, [r7, #30]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	009b      	lsls	r3, r3, #2
 800f27a:	441a      	add	r2, r3
 800f27c:	8bfb      	ldrh	r3, [r7, #30]
 800f27e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f28e:	b29b      	uxth	r3, r3
 800f290:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	4413      	add	r3, r2
 800f29c:	881b      	ldrh	r3, [r3, #0]
 800f29e:	83bb      	strh	r3, [r7, #28]
 800f2a0:	8bbb      	ldrh	r3, [r7, #28]
 800f2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d01b      	beq.n	800f2e2 <USB_DeactivateEndpoint+0x1da>
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	4413      	add	r3, r2
 800f2b4:	881b      	ldrh	r3, [r3, #0]
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2c0:	837b      	strh	r3, [r7, #26]
 800f2c2:	687a      	ldr	r2, [r7, #4]
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	441a      	add	r2, r3
 800f2cc:	8b7b      	ldrh	r3, [r7, #26]
 800f2ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	4413      	add	r3, r2
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2f8:	833b      	strh	r3, [r7, #24]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	441a      	add	r2, r3
 800f304:	8b3b      	ldrh	r3, [r7, #24]
 800f306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f30a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f30e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f316:	b29b      	uxth	r3, r3
 800f318:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	4413      	add	r3, r2
 800f324:	881b      	ldrh	r3, [r3, #0]
 800f326:	b29b      	uxth	r3, r3
 800f328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f32c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f330:	82fb      	strh	r3, [r7, #22]
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	441a      	add	r2, r3
 800f33c:	8afb      	ldrh	r3, [r7, #22]
 800f33e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f34a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f34e:	b29b      	uxth	r3, r3
 800f350:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	4413      	add	r3, r2
 800f35c:	881b      	ldrh	r3, [r3, #0]
 800f35e:	b29b      	uxth	r3, r3
 800f360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f368:	82bb      	strh	r3, [r7, #20]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	441a      	add	r2, r3
 800f374:	8abb      	ldrh	r3, [r7, #20]
 800f376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f37a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f37e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f386:	b29b      	uxth	r3, r3
 800f388:	8013      	strh	r3, [r2, #0]
 800f38a:	e0a3      	b.n	800f4d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	4413      	add	r3, r2
 800f396:	881b      	ldrh	r3, [r3, #0]
 800f398:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f39a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f39c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d01b      	beq.n	800f3dc <USB_DeactivateEndpoint+0x2d4>
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	4413      	add	r3, r2
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f3bc:	687a      	ldr	r2, [r7, #4]
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	441a      	add	r2, r3
 800f3c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f3c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f3d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f3dc:	687a      	ldr	r2, [r7, #4]
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	4413      	add	r3, r2
 800f3e6:	881b      	ldrh	r3, [r3, #0]
 800f3e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f3ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d01b      	beq.n	800f42c <USB_DeactivateEndpoint+0x324>
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	4413      	add	r3, r2
 800f3fe:	881b      	ldrh	r3, [r3, #0]
 800f400:	b29b      	uxth	r3, r3
 800f402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f40a:	853b      	strh	r3, [r7, #40]	; 0x28
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	009b      	lsls	r3, r3, #2
 800f414:	441a      	add	r2, r3
 800f416:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f41c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f424:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f428:	b29b      	uxth	r3, r3
 800f42a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f42c:	687a      	ldr	r2, [r7, #4]
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	4413      	add	r3, r2
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	b29b      	uxth	r3, r3
 800f43a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f442:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	441a      	add	r2, r3
 800f44e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f460:	b29b      	uxth	r3, r3
 800f462:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f464:	687a      	ldr	r2, [r7, #4]
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	4413      	add	r3, r2
 800f46e:	881b      	ldrh	r3, [r3, #0]
 800f470:	b29b      	uxth	r3, r3
 800f472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f47a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	441a      	add	r2, r3
 800f486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f48c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f498:	b29b      	uxth	r3, r3
 800f49a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	4413      	add	r3, r2
 800f4a6:	881b      	ldrh	r3, [r3, #0]
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4b2:	847b      	strh	r3, [r7, #34]	; 0x22
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	441a      	add	r2, r3
 800f4be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3734      	adds	r7, #52	; 0x34
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr

0800f4e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b0c2      	sub	sp, #264	; 0x108
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4f0:	6018      	str	r0, [r3, #0]
 800f4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4fa:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	785b      	ldrb	r3, [r3, #1]
 800f508:	2b01      	cmp	r3, #1
 800f50a:	f040 867b 	bne.w	8010204 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	699a      	ldr	r2, [r3, #24]
 800f51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f51e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	429a      	cmp	r2, r3
 800f528:	d908      	bls.n	800f53c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800f52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	691b      	ldr	r3, [r3, #16]
 800f536:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f53a:	e007      	b.n	800f54c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800f53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	699b      	ldr	r3, [r3, #24]
 800f548:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f54c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	7b1b      	ldrb	r3, [r3, #12]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d13a      	bne.n	800f5d2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	6959      	ldr	r1, [r3, #20]
 800f568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f56c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	88da      	ldrh	r2, [r3, #6]
 800f574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f578:	b29b      	uxth	r3, r3
 800f57a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f57e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f582:	6800      	ldr	r0, [r0, #0]
 800f584:	f001 fc11 	bl	8010daa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f58c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	613b      	str	r3, [r7, #16]
 800f594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	613b      	str	r3, [r7, #16]
 800f5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	011a      	lsls	r2, r3, #4
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	4413      	add	r3, r2
 800f5be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f5c2:	60fb      	str	r3, [r7, #12]
 800f5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5c8:	b29a      	uxth	r2, r3
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	801a      	strh	r2, [r3, #0]
 800f5ce:	f000 bde3 	b.w	8010198 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	78db      	ldrb	r3, [r3, #3]
 800f5de:	2b02      	cmp	r3, #2
 800f5e0:	f040 843a 	bne.w	800fe58 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	6a1a      	ldr	r2, [r3, #32]
 800f5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	691b      	ldr	r3, [r3, #16]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	f240 83b7 	bls.w	800fd70 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	009b      	lsls	r3, r3, #2
 800f61a:	4413      	add	r3, r2
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	b29b      	uxth	r3, r3
 800f620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f628:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	441a      	add	r2, r3
 800f646:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f64a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f64e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f652:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	6a1a      	ldr	r2, [r3, #32]
 800f66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f66e:	1ad2      	subs	r2, r2, r3
 800f670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f68a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	4413      	add	r3, r2
 800f696:	881b      	ldrh	r3, [r3, #0]
 800f698:	b29b      	uxth	r3, r3
 800f69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f000 81b3 	beq.w	800fa0a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	633b      	str	r3, [r7, #48]	; 0x30
 800f6b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	785b      	ldrb	r3, [r3, #1]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d16d      	bne.n	800f79c <USB_EPStartXfer+0x2ba>
 800f6c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800f6cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	461a      	mov	r2, r3
 800f6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e0:	4413      	add	r3, r2
 800f6e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800f6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	011a      	lsls	r2, r3, #4
 800f6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f4:	4413      	add	r3, r2
 800f6f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f6fa:	627b      	str	r3, [r7, #36]	; 0x24
 800f6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f700:	2b00      	cmp	r3, #0
 800f702:	d112      	bne.n	800f72a <USB_EPStartXfer+0x248>
 800f704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	b29b      	uxth	r3, r3
 800f70a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f70e:	b29a      	uxth	r2, r3
 800f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f712:	801a      	strh	r2, [r3, #0]
 800f714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f716:	881b      	ldrh	r3, [r3, #0]
 800f718:	b29b      	uxth	r3, r3
 800f71a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f71e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f722:	b29a      	uxth	r2, r3
 800f724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f726:	801a      	strh	r2, [r3, #0]
 800f728:	e05d      	b.n	800f7e6 <USB_EPStartXfer+0x304>
 800f72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f72e:	2b3e      	cmp	r3, #62	; 0x3e
 800f730:	d817      	bhi.n	800f762 <USB_EPStartXfer+0x280>
 800f732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f736:	085b      	lsrs	r3, r3, #1
 800f738:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f740:	f003 0301 	and.w	r3, r3, #1
 800f744:	2b00      	cmp	r3, #0
 800f746:	d004      	beq.n	800f752 <USB_EPStartXfer+0x270>
 800f748:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f74c:	3301      	adds	r3, #1
 800f74e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f752:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f756:	b29b      	uxth	r3, r3
 800f758:	029b      	lsls	r3, r3, #10
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75e:	801a      	strh	r2, [r3, #0]
 800f760:	e041      	b.n	800f7e6 <USB_EPStartXfer+0x304>
 800f762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f766:	095b      	lsrs	r3, r3, #5
 800f768:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f770:	f003 031f 	and.w	r3, r3, #31
 800f774:	2b00      	cmp	r3, #0
 800f776:	d104      	bne.n	800f782 <USB_EPStartXfer+0x2a0>
 800f778:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f77c:	3b01      	subs	r3, #1
 800f77e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f782:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f786:	b29b      	uxth	r3, r3
 800f788:	029b      	lsls	r3, r3, #10
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f794:	b29a      	uxth	r2, r3
 800f796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f798:	801a      	strh	r2, [r3, #0]
 800f79a:	e024      	b.n	800f7e6 <USB_EPStartXfer+0x304>
 800f79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	785b      	ldrb	r3, [r3, #1]
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d11c      	bne.n	800f7e6 <USB_EPStartXfer+0x304>
 800f7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	461a      	mov	r2, r3
 800f7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c0:	4413      	add	r3, r2
 800f7c2:	633b      	str	r3, [r7, #48]	; 0x30
 800f7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	011a      	lsls	r2, r3, #4
 800f7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d4:	4413      	add	r3, r2
 800f7d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f7da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	895b      	ldrh	r3, [r3, #10]
 800f7f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	6959      	ldr	r1, [r3, #20]
 800f802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f806:	b29b      	uxth	r3, r3
 800f808:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f80c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f810:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f814:	6800      	ldr	r0, [r0, #0]
 800f816:	f001 fac8 	bl	8010daa <USB_WritePMA>
            ep->xfer_buff += len;
 800f81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	695a      	ldr	r2, [r3, #20]
 800f826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f82a:	441a      	add	r2, r3
 800f82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f83c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	6a1a      	ldr	r2, [r3, #32]
 800f844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	429a      	cmp	r2, r3
 800f852:	d90f      	bls.n	800f874 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800f854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	6a1a      	ldr	r2, [r3, #32]
 800f860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f864:	1ad2      	subs	r2, r2, r3
 800f866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f86a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	621a      	str	r2, [r3, #32]
 800f872:	e00e      	b.n	800f892 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800f874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	6a1b      	ldr	r3, [r3, #32]
 800f880:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2200      	movs	r2, #0
 800f890:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	785b      	ldrb	r3, [r3, #1]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d16d      	bne.n	800f97e <USB_EPStartXfer+0x49c>
 800f8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	61bb      	str	r3, [r7, #24]
 800f8ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	461a      	mov	r2, r3
 800f8c0:	69bb      	ldr	r3, [r7, #24]
 800f8c2:	4413      	add	r3, r2
 800f8c4:	61bb      	str	r3, [r7, #24]
 800f8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	011a      	lsls	r2, r3, #4
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	4413      	add	r3, r2
 800f8d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f8dc:	617b      	str	r3, [r7, #20]
 800f8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d112      	bne.n	800f90c <USB_EPStartXfer+0x42a>
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	881b      	ldrh	r3, [r3, #0]
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	801a      	strh	r2, [r3, #0]
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	881b      	ldrh	r3, [r3, #0]
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f904:	b29a      	uxth	r2, r3
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	801a      	strh	r2, [r3, #0]
 800f90a:	e063      	b.n	800f9d4 <USB_EPStartXfer+0x4f2>
 800f90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f910:	2b3e      	cmp	r3, #62	; 0x3e
 800f912:	d817      	bhi.n	800f944 <USB_EPStartXfer+0x462>
 800f914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f918:	085b      	lsrs	r3, r3, #1
 800f91a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f922:	f003 0301 	and.w	r3, r3, #1
 800f926:	2b00      	cmp	r3, #0
 800f928:	d004      	beq.n	800f934 <USB_EPStartXfer+0x452>
 800f92a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f92e:	3301      	adds	r3, #1
 800f930:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f938:	b29b      	uxth	r3, r3
 800f93a:	029b      	lsls	r3, r3, #10
 800f93c:	b29a      	uxth	r2, r3
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	801a      	strh	r2, [r3, #0]
 800f942:	e047      	b.n	800f9d4 <USB_EPStartXfer+0x4f2>
 800f944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f948:	095b      	lsrs	r3, r3, #5
 800f94a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f952:	f003 031f 	and.w	r3, r3, #31
 800f956:	2b00      	cmp	r3, #0
 800f958:	d104      	bne.n	800f964 <USB_EPStartXfer+0x482>
 800f95a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f95e:	3b01      	subs	r3, #1
 800f960:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f968:	b29b      	uxth	r3, r3
 800f96a:	029b      	lsls	r3, r3, #10
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f976:	b29a      	uxth	r2, r3
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	801a      	strh	r2, [r3, #0]
 800f97c:	e02a      	b.n	800f9d4 <USB_EPStartXfer+0x4f2>
 800f97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	785b      	ldrb	r3, [r3, #1]
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	d122      	bne.n	800f9d4 <USB_EPStartXfer+0x4f2>
 800f98e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	623b      	str	r3, [r7, #32]
 800f99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f99e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	6a3b      	ldr	r3, [r7, #32]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	623b      	str	r3, [r7, #32]
 800f9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	011a      	lsls	r2, r3, #4
 800f9c0:	6a3b      	ldr	r3, [r7, #32]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f9c8:	61fb      	str	r3, [r7, #28]
 800f9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	891b      	ldrh	r3, [r3, #8]
 800f9e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f9e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	6959      	ldr	r1, [r3, #20]
 800f9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9f4:	b29b      	uxth	r3, r3
 800f9f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f9fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f9fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fa02:	6800      	ldr	r0, [r0, #0]
 800fa04:	f001 f9d1 	bl	8010daa <USB_WritePMA>
 800fa08:	e3c6      	b.n	8010198 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fa0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	785b      	ldrb	r3, [r3, #1]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d16d      	bne.n	800faf6 <USB_EPStartXfer+0x614>
 800fa1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	461a      	mov	r2, r3
 800fa38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa3a:	4413      	add	r3, r2
 800fa3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	011a      	lsls	r2, r3, #4
 800fa4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa4e:	4413      	add	r3, r2
 800fa50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fa54:	647b      	str	r3, [r7, #68]	; 0x44
 800fa56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d112      	bne.n	800fa84 <USB_EPStartXfer+0x5a2>
 800fa5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa60:	881b      	ldrh	r3, [r3, #0]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fa68:	b29a      	uxth	r2, r3
 800fa6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa6c:	801a      	strh	r2, [r3, #0]
 800fa6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa70:	881b      	ldrh	r3, [r3, #0]
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa7c:	b29a      	uxth	r2, r3
 800fa7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa80:	801a      	strh	r2, [r3, #0]
 800fa82:	e063      	b.n	800fb4c <USB_EPStartXfer+0x66a>
 800fa84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa88:	2b3e      	cmp	r3, #62	; 0x3e
 800fa8a:	d817      	bhi.n	800fabc <USB_EPStartXfer+0x5da>
 800fa8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa90:	085b      	lsrs	r3, r3, #1
 800fa92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fa96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa9a:	f003 0301 	and.w	r3, r3, #1
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d004      	beq.n	800faac <USB_EPStartXfer+0x5ca>
 800faa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800faa6:	3301      	adds	r3, #1
 800faa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800faac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	029b      	lsls	r3, r3, #10
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fab8:	801a      	strh	r2, [r3, #0]
 800faba:	e047      	b.n	800fb4c <USB_EPStartXfer+0x66a>
 800fabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fac0:	095b      	lsrs	r3, r3, #5
 800fac2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800faca:	f003 031f 	and.w	r3, r3, #31
 800face:	2b00      	cmp	r3, #0
 800fad0:	d104      	bne.n	800fadc <USB_EPStartXfer+0x5fa>
 800fad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fad6:	3b01      	subs	r3, #1
 800fad8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fadc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	029b      	lsls	r3, r3, #10
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800faea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800faee:	b29a      	uxth	r2, r3
 800faf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faf2:	801a      	strh	r2, [r3, #0]
 800faf4:	e02a      	b.n	800fb4c <USB_EPStartXfer+0x66a>
 800faf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fafa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	785b      	ldrb	r3, [r3, #1]
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d122      	bne.n	800fb4c <USB_EPStartXfer+0x66a>
 800fb06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	653b      	str	r3, [r7, #80]	; 0x50
 800fb12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	461a      	mov	r2, r3
 800fb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb26:	4413      	add	r3, r2
 800fb28:	653b      	str	r3, [r7, #80]	; 0x50
 800fb2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	011a      	lsls	r2, r3, #4
 800fb38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb3a:	4413      	add	r3, r2
 800fb3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fb40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800fb4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	891b      	ldrh	r3, [r3, #8]
 800fb58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fb5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	6959      	ldr	r1, [r3, #20]
 800fb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fb72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fb76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fb7a:	6800      	ldr	r0, [r0, #0]
 800fb7c:	f001 f915 	bl	8010daa <USB_WritePMA>
            ep->xfer_buff += len;
 800fb80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	695a      	ldr	r2, [r3, #20]
 800fb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb90:	441a      	add	r2, r3
 800fb92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fb9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	6a1a      	ldr	r2, [r3, #32]
 800fbaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	691b      	ldr	r3, [r3, #16]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d90f      	bls.n	800fbda <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800fbba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	6a1a      	ldr	r2, [r3, #32]
 800fbc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbca:	1ad2      	subs	r2, r2, r3
 800fbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	621a      	str	r2, [r3, #32]
 800fbd8:	e00e      	b.n	800fbf8 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800fbda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	6a1b      	ldr	r3, [r3, #32]
 800fbe6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800fbea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fbf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	643b      	str	r3, [r7, #64]	; 0x40
 800fc04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	785b      	ldrb	r3, [r3, #1]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d16d      	bne.n	800fcf0 <USB_EPStartXfer+0x80e>
 800fc14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	461a      	mov	r2, r3
 800fc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc34:	4413      	add	r3, r2
 800fc36:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	011a      	lsls	r2, r3, #4
 800fc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc48:	4413      	add	r3, r2
 800fc4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fc4e:	637b      	str	r3, [r7, #52]	; 0x34
 800fc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d112      	bne.n	800fc7e <USB_EPStartXfer+0x79c>
 800fc58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc5a:	881b      	ldrh	r3, [r3, #0]
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc66:	801a      	strh	r2, [r3, #0]
 800fc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc6a:	881b      	ldrh	r3, [r3, #0]
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc7a:	801a      	strh	r2, [r3, #0]
 800fc7c:	e05d      	b.n	800fd3a <USB_EPStartXfer+0x858>
 800fc7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc82:	2b3e      	cmp	r3, #62	; 0x3e
 800fc84:	d817      	bhi.n	800fcb6 <USB_EPStartXfer+0x7d4>
 800fc86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc8a:	085b      	lsrs	r3, r3, #1
 800fc8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc94:	f003 0301 	and.w	r3, r3, #1
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d004      	beq.n	800fca6 <USB_EPStartXfer+0x7c4>
 800fc9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fca0:	3301      	adds	r3, #1
 800fca2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	029b      	lsls	r3, r3, #10
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcb2:	801a      	strh	r2, [r3, #0]
 800fcb4:	e041      	b.n	800fd3a <USB_EPStartXfer+0x858>
 800fcb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcba:	095b      	lsrs	r3, r3, #5
 800fcbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fcc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcc4:	f003 031f 	and.w	r3, r3, #31
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d104      	bne.n	800fcd6 <USB_EPStartXfer+0x7f4>
 800fccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fcd0:	3b01      	subs	r3, #1
 800fcd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fcd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	029b      	lsls	r3, r3, #10
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcec:	801a      	strh	r2, [r3, #0]
 800fcee:	e024      	b.n	800fd3a <USB_EPStartXfer+0x858>
 800fcf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	785b      	ldrb	r3, [r3, #1]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d11c      	bne.n	800fd3a <USB_EPStartXfer+0x858>
 800fd00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	461a      	mov	r2, r3
 800fd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd14:	4413      	add	r3, r2
 800fd16:	643b      	str	r3, [r7, #64]	; 0x40
 800fd18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	011a      	lsls	r2, r3, #4
 800fd26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd28:	4413      	add	r3, r2
 800fd2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fd3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	895b      	ldrh	r3, [r3, #10]
 800fd46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fd4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	6959      	ldr	r1, [r3, #20]
 800fd56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fd60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fd64:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fd68:	6800      	ldr	r0, [r0, #0]
 800fd6a:	f001 f81e 	bl	8010daa <USB_WritePMA>
 800fd6e:	e213      	b.n	8010198 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800fd70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	6a1b      	ldr	r3, [r3, #32]
 800fd7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800fd80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	009b      	lsls	r3, r3, #2
 800fd98:	4413      	add	r3, r2
 800fd9a:	881b      	ldrh	r3, [r3, #0]
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800fda2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fda6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800fdaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	441a      	add	r2, r3
 800fdc4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fdc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fdcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fdd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fde0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fde8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdf6:	b29b      	uxth	r3, r3
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdfc:	4413      	add	r3, r2
 800fdfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	011a      	lsls	r2, r3, #4
 800fe0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe10:	4413      	add	r3, r2
 800fe12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fe16:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe1c:	b29a      	uxth	r2, r3
 800fe1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fe22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	891b      	ldrh	r3, [r3, #8]
 800fe2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fe32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	6959      	ldr	r1, [r3, #20]
 800fe3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fe48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fe4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fe50:	6800      	ldr	r0, [r0, #0]
 800fe52:	f000 ffaa 	bl	8010daa <USB_WritePMA>
 800fe56:	e19f      	b.n	8010198 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800fe58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	6a1a      	ldr	r2, [r3, #32]
 800fe64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe68:	1ad2      	subs	r2, r2, r3
 800fe6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fe76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	009b      	lsls	r3, r3, #2
 800fe8e:	4413      	add	r3, r2
 800fe90:	881b      	ldrh	r3, [r3, #0]
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	f000 80bc 	beq.w	8010016 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fe9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	673b      	str	r3, [r7, #112]	; 0x70
 800feaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	785b      	ldrb	r3, [r3, #1]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d16d      	bne.n	800ff96 <USB_EPStartXfer+0xab4>
 800feba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800febe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	66bb      	str	r3, [r7, #104]	; 0x68
 800fec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	461a      	mov	r2, r3
 800fed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800feda:	4413      	add	r3, r2
 800fedc:	66bb      	str	r3, [r7, #104]	; 0x68
 800fede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	011a      	lsls	r2, r3, #4
 800feec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800feee:	4413      	add	r3, r2
 800fef0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fef4:	667b      	str	r3, [r7, #100]	; 0x64
 800fef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d112      	bne.n	800ff24 <USB_EPStartXfer+0xa42>
 800fefe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ff08:	b29a      	uxth	r2, r3
 800ff0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff0c:	801a      	strh	r2, [r3, #0]
 800ff0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff10:	881b      	ldrh	r3, [r3, #0]
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff20:	801a      	strh	r2, [r3, #0]
 800ff22:	e05d      	b.n	800ffe0 <USB_EPStartXfer+0xafe>
 800ff24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff28:	2b3e      	cmp	r3, #62	; 0x3e
 800ff2a:	d817      	bhi.n	800ff5c <USB_EPStartXfer+0xa7a>
 800ff2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff30:	085b      	lsrs	r3, r3, #1
 800ff32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ff36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff3a:	f003 0301 	and.w	r3, r3, #1
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d004      	beq.n	800ff4c <USB_EPStartXfer+0xa6a>
 800ff42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ff46:	3301      	adds	r3, #1
 800ff48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ff4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	029b      	lsls	r3, r3, #10
 800ff54:	b29a      	uxth	r2, r3
 800ff56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff58:	801a      	strh	r2, [r3, #0]
 800ff5a:	e041      	b.n	800ffe0 <USB_EPStartXfer+0xafe>
 800ff5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff60:	095b      	lsrs	r3, r3, #5
 800ff62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ff66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff6a:	f003 031f 	and.w	r3, r3, #31
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d104      	bne.n	800ff7c <USB_EPStartXfer+0xa9a>
 800ff72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ff76:	3b01      	subs	r3, #1
 800ff78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ff7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	029b      	lsls	r3, r3, #10
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff92:	801a      	strh	r2, [r3, #0]
 800ff94:	e024      	b.n	800ffe0 <USB_EPStartXfer+0xafe>
 800ff96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	785b      	ldrb	r3, [r3, #1]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d11c      	bne.n	800ffe0 <USB_EPStartXfer+0xafe>
 800ffa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ffba:	4413      	add	r3, r2
 800ffbc:	673b      	str	r3, [r7, #112]	; 0x70
 800ffbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	011a      	lsls	r2, r3, #4
 800ffcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ffce:	4413      	add	r3, r2
 800ffd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ffd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ffd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ffe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	895b      	ldrh	r3, [r3, #10]
 800ffec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	6959      	ldr	r1, [r3, #20]
 800fffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010000:	b29b      	uxth	r3, r3
 8010002:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010006:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801000a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801000e:	6800      	ldr	r0, [r0, #0]
 8010010:	f000 fecb 	bl	8010daa <USB_WritePMA>
 8010014:	e0c0      	b.n	8010198 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801001a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	785b      	ldrb	r3, [r3, #1]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d16d      	bne.n	8010102 <USB_EPStartXfer+0xc20>
 8010026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801002a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010040:	b29b      	uxth	r3, r3
 8010042:	461a      	mov	r2, r3
 8010044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010046:	4413      	add	r3, r2
 8010048:	67fb      	str	r3, [r7, #124]	; 0x7c
 801004a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801004e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	011a      	lsls	r2, r3, #4
 8010058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801005a:	4413      	add	r3, r2
 801005c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010060:	67bb      	str	r3, [r7, #120]	; 0x78
 8010062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010066:	2b00      	cmp	r3, #0
 8010068:	d112      	bne.n	8010090 <USB_EPStartXfer+0xbae>
 801006a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	b29b      	uxth	r3, r3
 8010070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010074:	b29a      	uxth	r2, r3
 8010076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010078:	801a      	strh	r2, [r3, #0]
 801007a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801007c:	881b      	ldrh	r3, [r3, #0]
 801007e:	b29b      	uxth	r3, r3
 8010080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010088:	b29a      	uxth	r2, r3
 801008a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801008c:	801a      	strh	r2, [r3, #0]
 801008e:	e069      	b.n	8010164 <USB_EPStartXfer+0xc82>
 8010090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010094:	2b3e      	cmp	r3, #62	; 0x3e
 8010096:	d817      	bhi.n	80100c8 <USB_EPStartXfer+0xbe6>
 8010098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801009c:	085b      	lsrs	r3, r3, #1
 801009e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80100a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100a6:	f003 0301 	and.w	r3, r3, #1
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d004      	beq.n	80100b8 <USB_EPStartXfer+0xbd6>
 80100ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80100b2:	3301      	adds	r3, #1
 80100b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80100b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80100bc:	b29b      	uxth	r3, r3
 80100be:	029b      	lsls	r3, r3, #10
 80100c0:	b29a      	uxth	r2, r3
 80100c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100c4:	801a      	strh	r2, [r3, #0]
 80100c6:	e04d      	b.n	8010164 <USB_EPStartXfer+0xc82>
 80100c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100cc:	095b      	lsrs	r3, r3, #5
 80100ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80100d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100d6:	f003 031f 	and.w	r3, r3, #31
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d104      	bne.n	80100e8 <USB_EPStartXfer+0xc06>
 80100de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80100e2:	3b01      	subs	r3, #1
 80100e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80100e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	029b      	lsls	r3, r3, #10
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100fe:	801a      	strh	r2, [r3, #0]
 8010100:	e030      	b.n	8010164 <USB_EPStartXfer+0xc82>
 8010102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	785b      	ldrb	r3, [r3, #1]
 801010e:	2b01      	cmp	r3, #1
 8010110:	d128      	bne.n	8010164 <USB_EPStartXfer+0xc82>
 8010112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801012e:	b29b      	uxth	r3, r3
 8010130:	461a      	mov	r2, r3
 8010132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010136:	4413      	add	r3, r2
 8010138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801013c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	011a      	lsls	r2, r3, #4
 801014a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801014e:	4413      	add	r3, r2
 8010150:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010154:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801015c:	b29a      	uxth	r2, r3
 801015e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010162:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	891b      	ldrh	r3, [r3, #8]
 8010170:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	6959      	ldr	r1, [r3, #20]
 8010180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010184:	b29b      	uxth	r3, r3
 8010186:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801018a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801018e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010192:	6800      	ldr	r0, [r0, #0]
 8010194:	f000 fe09 	bl	8010daa <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8010198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801019c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	009b      	lsls	r3, r3, #2
 80101b0:	4413      	add	r3, r2
 80101b2:	881b      	ldrh	r3, [r3, #0]
 80101b4:	b29b      	uxth	r3, r3
 80101b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80101ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101be:	817b      	strh	r3, [r7, #10]
 80101c0:	897b      	ldrh	r3, [r7, #10]
 80101c2:	f083 0310 	eor.w	r3, r3, #16
 80101c6:	817b      	strh	r3, [r7, #10]
 80101c8:	897b      	ldrh	r3, [r7, #10]
 80101ca:	f083 0320 	eor.w	r3, r3, #32
 80101ce:	817b      	strh	r3, [r7, #10]
 80101d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	441a      	add	r2, r3
 80101ea:	897b      	ldrh	r3, [r7, #10]
 80101ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	8013      	strh	r3, [r2, #0]
 8010200:	f000 bc9f 	b.w	8010b42 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8010204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	7b1b      	ldrb	r3, [r3, #12]
 8010210:	2b00      	cmp	r3, #0
 8010212:	f040 80ae 	bne.w	8010372 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801021a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	699a      	ldr	r2, [r3, #24]
 8010222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	691b      	ldr	r3, [r3, #16]
 801022e:	429a      	cmp	r2, r3
 8010230:	d917      	bls.n	8010262 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8010232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	691b      	ldr	r3, [r3, #16]
 801023e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8010242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	699a      	ldr	r2, [r3, #24]
 801024e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010252:	1ad2      	subs	r2, r2, r3
 8010254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	619a      	str	r2, [r3, #24]
 8010260:	e00e      	b.n	8010280 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8010262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	699b      	ldr	r3, [r3, #24]
 801026e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8010272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2200      	movs	r2, #0
 801027e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8010280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801028e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801029c:	b29b      	uxth	r3, r3
 801029e:	461a      	mov	r2, r3
 80102a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102a4:	4413      	add	r3, r2
 80102a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80102aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	011a      	lsls	r2, r3, #4
 80102b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102bc:	4413      	add	r3, r2
 80102be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80102c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80102c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d116      	bne.n	80102fc <USB_EPStartXfer+0xe1a>
 80102ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80102da:	b29a      	uxth	r2, r3
 80102dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102e0:	801a      	strh	r2, [r3, #0]
 80102e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80102ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102f8:	801a      	strh	r2, [r3, #0]
 80102fa:	e3e8      	b.n	8010ace <USB_EPStartXfer+0x15ec>
 80102fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010300:	2b3e      	cmp	r3, #62	; 0x3e
 8010302:	d818      	bhi.n	8010336 <USB_EPStartXfer+0xe54>
 8010304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010308:	085b      	lsrs	r3, r3, #1
 801030a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801030e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010312:	f003 0301 	and.w	r3, r3, #1
 8010316:	2b00      	cmp	r3, #0
 8010318:	d004      	beq.n	8010324 <USB_EPStartXfer+0xe42>
 801031a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801031e:	3301      	adds	r3, #1
 8010320:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010324:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010328:	b29b      	uxth	r3, r3
 801032a:	029b      	lsls	r3, r3, #10
 801032c:	b29a      	uxth	r2, r3
 801032e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010332:	801a      	strh	r2, [r3, #0]
 8010334:	e3cb      	b.n	8010ace <USB_EPStartXfer+0x15ec>
 8010336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801033a:	095b      	lsrs	r3, r3, #5
 801033c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010344:	f003 031f 	and.w	r3, r3, #31
 8010348:	2b00      	cmp	r3, #0
 801034a:	d104      	bne.n	8010356 <USB_EPStartXfer+0xe74>
 801034c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010350:	3b01      	subs	r3, #1
 8010352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010356:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801035a:	b29b      	uxth	r3, r3
 801035c:	029b      	lsls	r3, r3, #10
 801035e:	b29b      	uxth	r3, r3
 8010360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010368:	b29a      	uxth	r2, r3
 801036a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801036e:	801a      	strh	r2, [r3, #0]
 8010370:	e3ad      	b.n	8010ace <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8010372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	78db      	ldrb	r3, [r3, #3]
 801037e:	2b02      	cmp	r3, #2
 8010380:	f040 8200 	bne.w	8010784 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	785b      	ldrb	r3, [r3, #1]
 8010390:	2b00      	cmp	r3, #0
 8010392:	f040 8091 	bne.w	80104b8 <USB_EPStartXfer+0xfd6>
 8010396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801039a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80103a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	461a      	mov	r2, r3
 80103b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103ba:	4413      	add	r3, r2
 80103bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80103c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	011a      	lsls	r2, r3, #4
 80103ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103d2:	4413      	add	r3, r2
 80103d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80103d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80103dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	691b      	ldr	r3, [r3, #16]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d116      	bne.n	801041a <USB_EPStartXfer+0xf38>
 80103ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103f0:	881b      	ldrh	r3, [r3, #0]
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80103f8:	b29a      	uxth	r2, r3
 80103fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103fe:	801a      	strh	r2, [r3, #0]
 8010400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010404:	881b      	ldrh	r3, [r3, #0]
 8010406:	b29b      	uxth	r3, r3
 8010408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801040c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010410:	b29a      	uxth	r2, r3
 8010412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010416:	801a      	strh	r2, [r3, #0]
 8010418:	e083      	b.n	8010522 <USB_EPStartXfer+0x1040>
 801041a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801041e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	691b      	ldr	r3, [r3, #16]
 8010426:	2b3e      	cmp	r3, #62	; 0x3e
 8010428:	d820      	bhi.n	801046c <USB_EPStartXfer+0xf8a>
 801042a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801042e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	691b      	ldr	r3, [r3, #16]
 8010436:	085b      	lsrs	r3, r3, #1
 8010438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801043c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	691b      	ldr	r3, [r3, #16]
 8010448:	f003 0301 	and.w	r3, r3, #1
 801044c:	2b00      	cmp	r3, #0
 801044e:	d004      	beq.n	801045a <USB_EPStartXfer+0xf78>
 8010450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010454:	3301      	adds	r3, #1
 8010456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801045a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801045e:	b29b      	uxth	r3, r3
 8010460:	029b      	lsls	r3, r3, #10
 8010462:	b29a      	uxth	r2, r3
 8010464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010468:	801a      	strh	r2, [r3, #0]
 801046a:	e05a      	b.n	8010522 <USB_EPStartXfer+0x1040>
 801046c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	691b      	ldr	r3, [r3, #16]
 8010478:	095b      	lsrs	r3, r3, #5
 801047a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801047e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	691b      	ldr	r3, [r3, #16]
 801048a:	f003 031f 	and.w	r3, r3, #31
 801048e:	2b00      	cmp	r3, #0
 8010490:	d104      	bne.n	801049c <USB_EPStartXfer+0xfba>
 8010492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010496:	3b01      	subs	r3, #1
 8010498:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801049c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	029b      	lsls	r3, r3, #10
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80104aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80104b4:	801a      	strh	r2, [r3, #0]
 80104b6:	e034      	b.n	8010522 <USB_EPStartXfer+0x1040>
 80104b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	785b      	ldrb	r3, [r3, #1]
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d12c      	bne.n	8010522 <USB_EPStartXfer+0x1040>
 80104c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80104d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	461a      	mov	r2, r3
 80104e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80104ec:	4413      	add	r3, r2
 80104ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80104f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	011a      	lsls	r2, r3, #4
 8010500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010504:	4413      	add	r3, r2
 8010506:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801050a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801050e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	691b      	ldr	r3, [r3, #16]
 801051a:	b29a      	uxth	r2, r3
 801051c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010520:	801a      	strh	r2, [r3, #0]
 8010522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	785b      	ldrb	r3, [r3, #1]
 801053c:	2b00      	cmp	r3, #0
 801053e:	f040 8091 	bne.w	8010664 <USB_EPStartXfer+0x1182>
 8010542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801055e:	b29b      	uxth	r3, r3
 8010560:	461a      	mov	r2, r3
 8010562:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010566:	4413      	add	r3, r2
 8010568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801056c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	011a      	lsls	r2, r3, #4
 801057a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801057e:	4413      	add	r3, r2
 8010580:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801058c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	691b      	ldr	r3, [r3, #16]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d116      	bne.n	80105c6 <USB_EPStartXfer+0x10e4>
 8010598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801059c:	881b      	ldrh	r3, [r3, #0]
 801059e:	b29b      	uxth	r3, r3
 80105a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80105a4:	b29a      	uxth	r2, r3
 80105a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80105aa:	801a      	strh	r2, [r3, #0]
 80105ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80105b0:	881b      	ldrh	r3, [r3, #0]
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105bc:	b29a      	uxth	r2, r3
 80105be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80105c2:	801a      	strh	r2, [r3, #0]
 80105c4:	e07c      	b.n	80106c0 <USB_EPStartXfer+0x11de>
 80105c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	691b      	ldr	r3, [r3, #16]
 80105d2:	2b3e      	cmp	r3, #62	; 0x3e
 80105d4:	d820      	bhi.n	8010618 <USB_EPStartXfer+0x1136>
 80105d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	691b      	ldr	r3, [r3, #16]
 80105e2:	085b      	lsrs	r3, r3, #1
 80105e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80105e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	691b      	ldr	r3, [r3, #16]
 80105f4:	f003 0301 	and.w	r3, r3, #1
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d004      	beq.n	8010606 <USB_EPStartXfer+0x1124>
 80105fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010600:	3301      	adds	r3, #1
 8010602:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801060a:	b29b      	uxth	r3, r3
 801060c:	029b      	lsls	r3, r3, #10
 801060e:	b29a      	uxth	r2, r3
 8010610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010614:	801a      	strh	r2, [r3, #0]
 8010616:	e053      	b.n	80106c0 <USB_EPStartXfer+0x11de>
 8010618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801061c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	691b      	ldr	r3, [r3, #16]
 8010624:	095b      	lsrs	r3, r3, #5
 8010626:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801062a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801062e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	691b      	ldr	r3, [r3, #16]
 8010636:	f003 031f 	and.w	r3, r3, #31
 801063a:	2b00      	cmp	r3, #0
 801063c:	d104      	bne.n	8010648 <USB_EPStartXfer+0x1166>
 801063e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010642:	3b01      	subs	r3, #1
 8010644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801064c:	b29b      	uxth	r3, r3
 801064e:	029b      	lsls	r3, r3, #10
 8010650:	b29b      	uxth	r3, r3
 8010652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801065a:	b29a      	uxth	r2, r3
 801065c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010660:	801a      	strh	r2, [r3, #0]
 8010662:	e02d      	b.n	80106c0 <USB_EPStartXfer+0x11de>
 8010664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	785b      	ldrb	r3, [r3, #1]
 8010670:	2b01      	cmp	r3, #1
 8010672:	d125      	bne.n	80106c0 <USB_EPStartXfer+0x11de>
 8010674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010682:	b29b      	uxth	r3, r3
 8010684:	461a      	mov	r2, r3
 8010686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801068a:	4413      	add	r3, r2
 801068c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	011a      	lsls	r2, r3, #4
 801069e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80106a2:	4413      	add	r3, r2
 80106a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80106a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80106ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	691b      	ldr	r3, [r3, #16]
 80106b8:	b29a      	uxth	r2, r3
 80106ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80106be:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80106c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	69db      	ldr	r3, [r3, #28]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	f000 81fe 	beq.w	8010ace <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80106d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106da:	681a      	ldr	r2, [r3, #0]
 80106dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	009b      	lsls	r3, r3, #2
 80106ea:	4413      	add	r3, r2
 80106ec:	881b      	ldrh	r3, [r3, #0]
 80106ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80106f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80106f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d005      	beq.n	801070a <USB_EPStartXfer+0x1228>
 80106fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010706:	2b00      	cmp	r3, #0
 8010708:	d10d      	bne.n	8010726 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801070a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801070e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010712:	2b00      	cmp	r3, #0
 8010714:	f040 81db 	bne.w	8010ace <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010718:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801071c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010720:	2b00      	cmp	r3, #0
 8010722:	f040 81d4 	bne.w	8010ace <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8010726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801072a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	009b      	lsls	r3, r3, #2
 801073e:	4413      	add	r3, r2
 8010740:	881b      	ldrh	r3, [r3, #0]
 8010742:	b29b      	uxth	r3, r3
 8010744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801074c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8010750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801075e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	009b      	lsls	r3, r3, #2
 8010768:	441a      	add	r2, r3
 801076a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801076e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801077a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801077e:	b29b      	uxth	r3, r3
 8010780:	8013      	strh	r3, [r2, #0]
 8010782:	e1a4      	b.n	8010ace <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	78db      	ldrb	r3, [r3, #3]
 8010790:	2b01      	cmp	r3, #1
 8010792:	f040 819a 	bne.w	8010aca <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801079a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	699a      	ldr	r2, [r3, #24]
 80107a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	691b      	ldr	r3, [r3, #16]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d917      	bls.n	80107e2 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80107b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	691b      	ldr	r3, [r3, #16]
 80107be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80107c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	699a      	ldr	r2, [r3, #24]
 80107ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107d2:	1ad2      	subs	r2, r2, r3
 80107d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	619a      	str	r2, [r3, #24]
 80107e0:	e00e      	b.n	8010800 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80107e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	699b      	ldr	r3, [r3, #24]
 80107ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80107f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	2200      	movs	r2, #0
 80107fe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	785b      	ldrb	r3, [r3, #1]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d178      	bne.n	8010902 <USB_EPStartXfer+0x1420>
 8010810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801081e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801082c:	b29b      	uxth	r3, r3
 801082e:	461a      	mov	r2, r3
 8010830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010834:	4413      	add	r3, r2
 8010836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801083a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801083e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	011a      	lsls	r2, r3, #4
 8010848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801084c:	4413      	add	r3, r2
 801084e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801085a:	2b00      	cmp	r3, #0
 801085c:	d116      	bne.n	801088c <USB_EPStartXfer+0x13aa>
 801085e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010862:	881b      	ldrh	r3, [r3, #0]
 8010864:	b29b      	uxth	r3, r3
 8010866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801086a:	b29a      	uxth	r2, r3
 801086c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010870:	801a      	strh	r2, [r3, #0]
 8010872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010876:	881b      	ldrh	r3, [r3, #0]
 8010878:	b29b      	uxth	r3, r3
 801087a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801087e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010882:	b29a      	uxth	r2, r3
 8010884:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010888:	801a      	strh	r2, [r3, #0]
 801088a:	e06b      	b.n	8010964 <USB_EPStartXfer+0x1482>
 801088c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010890:	2b3e      	cmp	r3, #62	; 0x3e
 8010892:	d818      	bhi.n	80108c6 <USB_EPStartXfer+0x13e4>
 8010894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010898:	085b      	lsrs	r3, r3, #1
 801089a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801089e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108a2:	f003 0301 	and.w	r3, r3, #1
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d004      	beq.n	80108b4 <USB_EPStartXfer+0x13d2>
 80108aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108ae:	3301      	adds	r3, #1
 80108b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80108b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	029b      	lsls	r3, r3, #10
 80108bc:	b29a      	uxth	r2, r3
 80108be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80108c2:	801a      	strh	r2, [r3, #0]
 80108c4:	e04e      	b.n	8010964 <USB_EPStartXfer+0x1482>
 80108c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108ca:	095b      	lsrs	r3, r3, #5
 80108cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80108d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108d4:	f003 031f 	and.w	r3, r3, #31
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d104      	bne.n	80108e6 <USB_EPStartXfer+0x1404>
 80108dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108e0:	3b01      	subs	r3, #1
 80108e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80108e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	029b      	lsls	r3, r3, #10
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80108fe:	801a      	strh	r2, [r3, #0]
 8010900:	e030      	b.n	8010964 <USB_EPStartXfer+0x1482>
 8010902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	785b      	ldrb	r3, [r3, #1]
 801090e:	2b01      	cmp	r3, #1
 8010910:	d128      	bne.n	8010964 <USB_EPStartXfer+0x1482>
 8010912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801092e:	b29b      	uxth	r3, r3
 8010930:	461a      	mov	r2, r3
 8010932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010936:	4413      	add	r3, r2
 8010938:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801093c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	011a      	lsls	r2, r3, #4
 801094a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801094e:	4413      	add	r3, r2
 8010950:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801095c:	b29a      	uxth	r2, r3
 801095e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010962:	801a      	strh	r2, [r3, #0]
 8010964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010968:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	785b      	ldrb	r3, [r3, #1]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d178      	bne.n	8010a74 <USB_EPStartXfer+0x1592>
 8010982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801099e:	b29b      	uxth	r3, r3
 80109a0:	461a      	mov	r2, r3
 80109a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80109a6:	4413      	add	r3, r2
 80109a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80109ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	011a      	lsls	r2, r3, #4
 80109ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80109be:	4413      	add	r3, r2
 80109c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80109c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80109c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d116      	bne.n	80109fe <USB_EPStartXfer+0x151c>
 80109d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109d4:	881b      	ldrh	r3, [r3, #0]
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80109dc:	b29a      	uxth	r2, r3
 80109de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109e2:	801a      	strh	r2, [r3, #0]
 80109e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109e8:	881b      	ldrh	r3, [r3, #0]
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109f4:	b29a      	uxth	r2, r3
 80109f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109fa:	801a      	strh	r2, [r3, #0]
 80109fc:	e067      	b.n	8010ace <USB_EPStartXfer+0x15ec>
 80109fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a02:	2b3e      	cmp	r3, #62	; 0x3e
 8010a04:	d818      	bhi.n	8010a38 <USB_EPStartXfer+0x1556>
 8010a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a0a:	085b      	lsrs	r3, r3, #1
 8010a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a14:	f003 0301 	and.w	r3, r3, #1
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d004      	beq.n	8010a26 <USB_EPStartXfer+0x1544>
 8010a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010a20:	3301      	adds	r3, #1
 8010a22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	029b      	lsls	r3, r3, #10
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010a34:	801a      	strh	r2, [r3, #0]
 8010a36:	e04a      	b.n	8010ace <USB_EPStartXfer+0x15ec>
 8010a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a3c:	095b      	lsrs	r3, r3, #5
 8010a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a46:	f003 031f 	and.w	r3, r3, #31
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d104      	bne.n	8010a58 <USB_EPStartXfer+0x1576>
 8010a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010a52:	3b01      	subs	r3, #1
 8010a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	029b      	lsls	r3, r3, #10
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010a70:	801a      	strh	r2, [r3, #0]
 8010a72:	e02c      	b.n	8010ace <USB_EPStartXfer+0x15ec>
 8010a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	785b      	ldrb	r3, [r3, #1]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d124      	bne.n	8010ace <USB_EPStartXfer+0x15ec>
 8010a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	461a      	mov	r2, r3
 8010a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010a9a:	4413      	add	r3, r2
 8010a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	011a      	lsls	r2, r3, #4
 8010aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010ab2:	4413      	add	r3, r2
 8010ab4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010ac6:	801a      	strh	r2, [r3, #0]
 8010ac8:	e001      	b.n	8010ace <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8010aca:	2301      	movs	r3, #1
 8010acc:	e03a      	b.n	8010b44 <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	4413      	add	r3, r2
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010af4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010af8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010afc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010b00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010b04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010b08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010b0c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b18:	681a      	ldr	r2, [r3, #0]
 8010b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	441a      	add	r2, r3
 8010b2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010b42:	2300      	movs	r3, #0
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010b4e:	b480      	push	{r7}
 8010b50:	b085      	sub	sp, #20
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
 8010b56:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	785b      	ldrb	r3, [r3, #1]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d020      	beq.n	8010ba2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	4413      	add	r3, r2
 8010b6a:	881b      	ldrh	r3, [r3, #0]
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b76:	81bb      	strh	r3, [r7, #12]
 8010b78:	89bb      	ldrh	r3, [r7, #12]
 8010b7a:	f083 0310 	eor.w	r3, r3, #16
 8010b7e:	81bb      	strh	r3, [r7, #12]
 8010b80:	687a      	ldr	r2, [r7, #4]
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	441a      	add	r2, r3
 8010b8a:	89bb      	ldrh	r3, [r7, #12]
 8010b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	8013      	strh	r3, [r2, #0]
 8010ba0:	e01f      	b.n	8010be2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8010ba2:	687a      	ldr	r2, [r7, #4]
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	009b      	lsls	r3, r3, #2
 8010baa:	4413      	add	r3, r2
 8010bac:	881b      	ldrh	r3, [r3, #0]
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bb8:	81fb      	strh	r3, [r7, #14]
 8010bba:	89fb      	ldrh	r3, [r7, #14]
 8010bbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010bc0:	81fb      	strh	r3, [r7, #14]
 8010bc2:	687a      	ldr	r2, [r7, #4]
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	441a      	add	r2, r3
 8010bcc:	89fb      	ldrh	r3, [r7, #14]
 8010bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010be2:	2300      	movs	r3, #0
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3714      	adds	r7, #20
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr

08010bf0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b087      	sub	sp, #28
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	7b1b      	ldrb	r3, [r3, #12]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	f040 809d 	bne.w	8010d3e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	785b      	ldrb	r3, [r3, #1]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d04c      	beq.n	8010ca6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010c0c:	687a      	ldr	r2, [r7, #4]
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	4413      	add	r3, r2
 8010c16:	881b      	ldrh	r3, [r3, #0]
 8010c18:	823b      	strh	r3, [r7, #16]
 8010c1a:	8a3b      	ldrh	r3, [r7, #16]
 8010c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d01b      	beq.n	8010c5c <USB_EPClearStall+0x6c>
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	009b      	lsls	r3, r3, #2
 8010c2c:	4413      	add	r3, r2
 8010c2e:	881b      	ldrh	r3, [r3, #0]
 8010c30:	b29b      	uxth	r3, r3
 8010c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c3a:	81fb      	strh	r3, [r7, #14]
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	009b      	lsls	r3, r3, #2
 8010c44:	441a      	add	r2, r3
 8010c46:	89fb      	ldrh	r3, [r7, #14]
 8010c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	78db      	ldrb	r3, [r3, #3]
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	d06c      	beq.n	8010d3e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	009b      	lsls	r3, r3, #2
 8010c6c:	4413      	add	r3, r2
 8010c6e:	881b      	ldrh	r3, [r3, #0]
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c7a:	81bb      	strh	r3, [r7, #12]
 8010c7c:	89bb      	ldrh	r3, [r7, #12]
 8010c7e:	f083 0320 	eor.w	r3, r3, #32
 8010c82:	81bb      	strh	r3, [r7, #12]
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	441a      	add	r2, r3
 8010c8e:	89bb      	ldrh	r3, [r7, #12]
 8010c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ca0:	b29b      	uxth	r3, r3
 8010ca2:	8013      	strh	r3, [r2, #0]
 8010ca4:	e04b      	b.n	8010d3e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010ca6:	687a      	ldr	r2, [r7, #4]
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	4413      	add	r3, r2
 8010cb0:	881b      	ldrh	r3, [r3, #0]
 8010cb2:	82fb      	strh	r3, [r7, #22]
 8010cb4:	8afb      	ldrh	r3, [r7, #22]
 8010cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d01b      	beq.n	8010cf6 <USB_EPClearStall+0x106>
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	009b      	lsls	r3, r3, #2
 8010cc6:	4413      	add	r3, r2
 8010cc8:	881b      	ldrh	r3, [r3, #0]
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cd4:	82bb      	strh	r3, [r7, #20]
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	441a      	add	r2, r3
 8010ce0:	8abb      	ldrh	r3, [r7, #20]
 8010ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	781b      	ldrb	r3, [r3, #0]
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	4413      	add	r3, r2
 8010d00:	881b      	ldrh	r3, [r3, #0]
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d0c:	827b      	strh	r3, [r7, #18]
 8010d0e:	8a7b      	ldrh	r3, [r7, #18]
 8010d10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010d14:	827b      	strh	r3, [r7, #18]
 8010d16:	8a7b      	ldrh	r3, [r7, #18]
 8010d18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010d1c:	827b      	strh	r3, [r7, #18]
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	441a      	add	r2, r3
 8010d28:	8a7b      	ldrh	r3, [r7, #18]
 8010d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010d3e:	2300      	movs	r3, #0
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	371c      	adds	r7, #28
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr

08010d4c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	460b      	mov	r3, r1
 8010d56:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010d58:	78fb      	ldrb	r3, [r7, #3]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d103      	bne.n	8010d66 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2280      	movs	r2, #128	; 0x80
 8010d62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8010d66:	2300      	movs	r3, #0
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	370c      	adds	r7, #12
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d72:	4770      	bx	lr

08010d74 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b083      	sub	sp, #12
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8010d7c:	2300      	movs	r3, #0
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	370c      	adds	r7, #12
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr

08010d8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8010d8a:	b480      	push	{r7}
 8010d8c:	b085      	sub	sp, #20
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3714      	adds	r7, #20
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr

08010daa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010daa:	b480      	push	{r7}
 8010dac:	b08d      	sub	sp, #52	; 0x34
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	60f8      	str	r0, [r7, #12]
 8010db2:	60b9      	str	r1, [r7, #8]
 8010db4:	4611      	mov	r1, r2
 8010db6:	461a      	mov	r2, r3
 8010db8:	460b      	mov	r3, r1
 8010dba:	80fb      	strh	r3, [r7, #6]
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010dc0:	88bb      	ldrh	r3, [r7, #4]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	085b      	lsrs	r3, r3, #1
 8010dc6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010dd0:	88fb      	ldrh	r3, [r7, #6]
 8010dd2:	005a      	lsls	r2, r3, #1
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010ddc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8010dde:	6a3b      	ldr	r3, [r7, #32]
 8010de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010de2:	e01e      	b.n	8010e22 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8010dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dec:	3301      	adds	r3, #1
 8010dee:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	021b      	lsls	r3, r3, #8
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	461a      	mov	r2, r3
 8010dfc:	69bb      	ldr	r3, [r7, #24]
 8010dfe:	4313      	orrs	r3, r2
 8010e00:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e08:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0c:	3302      	adds	r3, #2
 8010e0e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8010e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e12:	3302      	adds	r3, #2
 8010e14:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8010e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e18:	3301      	adds	r3, #1
 8010e1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8010e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d1dd      	bne.n	8010de4 <USB_WritePMA+0x3a>
  }
}
 8010e28:	bf00      	nop
 8010e2a:	bf00      	nop
 8010e2c:	3734      	adds	r7, #52	; 0x34
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr

08010e36 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010e36:	b480      	push	{r7}
 8010e38:	b08b      	sub	sp, #44	; 0x2c
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	60f8      	str	r0, [r7, #12]
 8010e3e:	60b9      	str	r1, [r7, #8]
 8010e40:	4611      	mov	r1, r2
 8010e42:	461a      	mov	r2, r3
 8010e44:	460b      	mov	r3, r1
 8010e46:	80fb      	strh	r3, [r7, #6]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010e4c:	88bb      	ldrh	r3, [r7, #4]
 8010e4e:	085b      	lsrs	r3, r3, #1
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010e5c:	88fb      	ldrh	r3, [r7, #6]
 8010e5e:	005a      	lsls	r2, r3, #1
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	4413      	add	r3, r2
 8010e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e68:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8010e6a:	69bb      	ldr	r3, [r7, #24]
 8010e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8010e6e:	e01b      	b.n	8010ea8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8010e70:	6a3b      	ldr	r3, [r7, #32]
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010e78:	6a3b      	ldr	r3, [r7, #32]
 8010e7a:	3302      	adds	r3, #2
 8010e7c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	b2da      	uxtb	r2, r3
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	0a1b      	lsrs	r3, r3, #8
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	3301      	adds	r3, #1
 8010e9a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8010e9c:	6a3b      	ldr	r3, [r7, #32]
 8010e9e:	3302      	adds	r3, #2
 8010ea0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8010ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea4:	3b01      	subs	r3, #1
 8010ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8010ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d1e0      	bne.n	8010e70 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8010eae:	88bb      	ldrh	r3, [r7, #4]
 8010eb0:	f003 0301 	and.w	r3, r3, #1
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d007      	beq.n	8010eca <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8010eba:	6a3b      	ldr	r3, [r7, #32]
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	b2da      	uxtb	r2, r3
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	701a      	strb	r2, [r3, #0]
  }
}
 8010eca:	bf00      	nop
 8010ecc:	372c      	adds	r7, #44	; 0x2c
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr

08010ed6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b084      	sub	sp, #16
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
 8010ede:	460b      	mov	r3, r1
 8010ee0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	7c1b      	ldrb	r3, [r3, #16]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d115      	bne.n	8010f1a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ef2:	2202      	movs	r2, #2
 8010ef4:	2181      	movs	r1, #129	; 0x81
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f004 fc61 	bl	80157be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2201      	movs	r2, #1
 8010f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f06:	2202      	movs	r2, #2
 8010f08:	2101      	movs	r1, #1
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f004 fc57 	bl	80157be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2201      	movs	r2, #1
 8010f14:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8010f18:	e012      	b.n	8010f40 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010f1a:	2340      	movs	r3, #64	; 0x40
 8010f1c:	2202      	movs	r2, #2
 8010f1e:	2181      	movs	r1, #129	; 0x81
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f004 fc4c 	bl	80157be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010f2c:	2340      	movs	r3, #64	; 0x40
 8010f2e:	2202      	movs	r2, #2
 8010f30:	2101      	movs	r1, #1
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f004 fc43 	bl	80157be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010f40:	2308      	movs	r3, #8
 8010f42:	2203      	movs	r2, #3
 8010f44:	2182      	movs	r1, #130	; 0x82
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f004 fc39 	bl	80157be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2201      	movs	r2, #1
 8010f50:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010f52:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010f56:	f004 fd5b 	bl	8015a10 <USBD_static_malloc>
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d102      	bne.n	8010f72 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	73fb      	strb	r3, [r7, #15]
 8010f70:	e026      	b.n	8010fc0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f78:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	2200      	movs	r2, #0
 8010f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	7c1b      	ldrb	r3, [r3, #16]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d109      	bne.n	8010fb0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010fa6:	2101      	movs	r1, #1
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f004 fcfa 	bl	80159a2 <USBD_LL_PrepareReceive>
 8010fae:	e007      	b.n	8010fc0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010fb6:	2340      	movs	r3, #64	; 0x40
 8010fb8:	2101      	movs	r1, #1
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f004 fcf1 	bl	80159a2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8010fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
 8010fd2:	460b      	mov	r3, r1
 8010fd4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010fda:	2181      	movs	r1, #129	; 0x81
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f004 fc14 	bl	801580a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010fe8:	2101      	movs	r1, #1
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f004 fc0d 	bl	801580a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010ff8:	2182      	movs	r1, #130	; 0x82
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f004 fc05 	bl	801580a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2200      	movs	r2, #0
 8011004:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801100c:	2b00      	cmp	r3, #0
 801100e:	d00e      	beq.n	801102e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011020:	4618      	mov	r0, r3
 8011022:	f004 fd03 	bl	8015a2c <USBD_static_free>
    pdev->pClassData = NULL;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2200      	movs	r2, #0
 801102a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 801102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3710      	adds	r7, #16
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011048:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801104a:	2300      	movs	r3, #0
 801104c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801104e:	2300      	movs	r3, #0
 8011050:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8011052:	2300      	movs	r3, #0
 8011054:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801105e:	2b00      	cmp	r3, #0
 8011060:	d039      	beq.n	80110d6 <USBD_CDC_Setup+0x9e>
 8011062:	2b20      	cmp	r3, #32
 8011064:	d17f      	bne.n	8011166 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	88db      	ldrh	r3, [r3, #6]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d029      	beq.n	80110c2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	781b      	ldrb	r3, [r3, #0]
 8011072:	b25b      	sxtb	r3, r3
 8011074:	2b00      	cmp	r3, #0
 8011076:	da11      	bge.n	801109c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801107e:	689b      	ldr	r3, [r3, #8]
 8011080:	683a      	ldr	r2, [r7, #0]
 8011082:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8011084:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011086:	683a      	ldr	r2, [r7, #0]
 8011088:	88d2      	ldrh	r2, [r2, #6]
 801108a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801108c:	6939      	ldr	r1, [r7, #16]
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	88db      	ldrh	r3, [r3, #6]
 8011092:	461a      	mov	r2, r3
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f001 fa14 	bl	80124c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801109a:	e06b      	b.n	8011174 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	785a      	ldrb	r2, [r3, #1]
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	88db      	ldrh	r3, [r3, #6]
 80110aa:	b2da      	uxtb	r2, r3
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80110b2:	6939      	ldr	r1, [r7, #16]
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	88db      	ldrh	r3, [r3, #6]
 80110b8:	461a      	mov	r2, r3
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f001 fa2f 	bl	801251e <USBD_CtlPrepareRx>
      break;
 80110c0:	e058      	b.n	8011174 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	683a      	ldr	r2, [r7, #0]
 80110cc:	7850      	ldrb	r0, [r2, #1]
 80110ce:	2200      	movs	r2, #0
 80110d0:	6839      	ldr	r1, [r7, #0]
 80110d2:	4798      	blx	r3
      break;
 80110d4:	e04e      	b.n	8011174 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	785b      	ldrb	r3, [r3, #1]
 80110da:	2b0b      	cmp	r3, #11
 80110dc:	d02e      	beq.n	801113c <USBD_CDC_Setup+0x104>
 80110de:	2b0b      	cmp	r3, #11
 80110e0:	dc38      	bgt.n	8011154 <USBD_CDC_Setup+0x11c>
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d002      	beq.n	80110ec <USBD_CDC_Setup+0xb4>
 80110e6:	2b0a      	cmp	r3, #10
 80110e8:	d014      	beq.n	8011114 <USBD_CDC_Setup+0xdc>
 80110ea:	e033      	b.n	8011154 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110f2:	2b03      	cmp	r3, #3
 80110f4:	d107      	bne.n	8011106 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80110f6:	f107 030c 	add.w	r3, r7, #12
 80110fa:	2202      	movs	r2, #2
 80110fc:	4619      	mov	r1, r3
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f001 f9df 	bl	80124c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011104:	e02e      	b.n	8011164 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8011106:	6839      	ldr	r1, [r7, #0]
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f001 f96f 	bl	80123ec <USBD_CtlError>
            ret = USBD_FAIL;
 801110e:	2302      	movs	r3, #2
 8011110:	75fb      	strb	r3, [r7, #23]
          break;
 8011112:	e027      	b.n	8011164 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801111a:	2b03      	cmp	r3, #3
 801111c:	d107      	bne.n	801112e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801111e:	f107 030f 	add.w	r3, r7, #15
 8011122:	2201      	movs	r2, #1
 8011124:	4619      	mov	r1, r3
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f001 f9cb 	bl	80124c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801112c:	e01a      	b.n	8011164 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 801112e:	6839      	ldr	r1, [r7, #0]
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f001 f95b 	bl	80123ec <USBD_CtlError>
            ret = USBD_FAIL;
 8011136:	2302      	movs	r3, #2
 8011138:	75fb      	strb	r3, [r7, #23]
          break;
 801113a:	e013      	b.n	8011164 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011142:	2b03      	cmp	r3, #3
 8011144:	d00d      	beq.n	8011162 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8011146:	6839      	ldr	r1, [r7, #0]
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f001 f94f 	bl	80123ec <USBD_CtlError>
            ret = USBD_FAIL;
 801114e:	2302      	movs	r3, #2
 8011150:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011152:	e006      	b.n	8011162 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8011154:	6839      	ldr	r1, [r7, #0]
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f001 f948 	bl	80123ec <USBD_CtlError>
          ret = USBD_FAIL;
 801115c:	2302      	movs	r3, #2
 801115e:	75fb      	strb	r3, [r7, #23]
          break;
 8011160:	e000      	b.n	8011164 <USBD_CDC_Setup+0x12c>
          break;
 8011162:	bf00      	nop
      }
      break;
 8011164:	e006      	b.n	8011174 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f001 f93f 	bl	80123ec <USBD_CtlError>
      ret = USBD_FAIL;
 801116e:	2302      	movs	r3, #2
 8011170:	75fb      	strb	r3, [r7, #23]
      break;
 8011172:	bf00      	nop
  }

  return ret;
 8011174:	7dfb      	ldrb	r3, [r7, #23]
}
 8011176:	4618      	mov	r0, r3
 8011178:	3718      	adds	r7, #24
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}

0801117e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801117e:	b580      	push	{r7, lr}
 8011180:	b084      	sub	sp, #16
 8011182:	af00      	add	r7, sp, #0
 8011184:	6078      	str	r0, [r7, #4]
 8011186:	460b      	mov	r3, r1
 8011188:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011190:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011198:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d03a      	beq.n	801121a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80111a4:	78fa      	ldrb	r2, [r7, #3]
 80111a6:	6879      	ldr	r1, [r7, #4]
 80111a8:	4613      	mov	r3, r2
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	4413      	add	r3, r2
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	440b      	add	r3, r1
 80111b2:	331c      	adds	r3, #28
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d029      	beq.n	801120e <USBD_CDC_DataIn+0x90>
 80111ba:	78fa      	ldrb	r2, [r7, #3]
 80111bc:	6879      	ldr	r1, [r7, #4]
 80111be:	4613      	mov	r3, r2
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	4413      	add	r3, r2
 80111c4:	009b      	lsls	r3, r3, #2
 80111c6:	440b      	add	r3, r1
 80111c8:	331c      	adds	r3, #28
 80111ca:	681a      	ldr	r2, [r3, #0]
 80111cc:	78f9      	ldrb	r1, [r7, #3]
 80111ce:	68b8      	ldr	r0, [r7, #8]
 80111d0:	460b      	mov	r3, r1
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	440b      	add	r3, r1
 80111d6:	00db      	lsls	r3, r3, #3
 80111d8:	4403      	add	r3, r0
 80111da:	3338      	adds	r3, #56	; 0x38
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	fbb2 f1f3 	udiv	r1, r2, r3
 80111e2:	fb01 f303 	mul.w	r3, r1, r3
 80111e6:	1ad3      	subs	r3, r2, r3
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d110      	bne.n	801120e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80111ec:	78fa      	ldrb	r2, [r7, #3]
 80111ee:	6879      	ldr	r1, [r7, #4]
 80111f0:	4613      	mov	r3, r2
 80111f2:	009b      	lsls	r3, r3, #2
 80111f4:	4413      	add	r3, r2
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	440b      	add	r3, r1
 80111fa:	331c      	adds	r3, #28
 80111fc:	2200      	movs	r2, #0
 80111fe:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011200:	78f9      	ldrb	r1, [r7, #3]
 8011202:	2300      	movs	r3, #0
 8011204:	2200      	movs	r2, #0
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f004 fba8 	bl	801595c <USBD_LL_Transmit>
 801120c:	e003      	b.n	8011216 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2200      	movs	r2, #0
 8011212:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8011216:	2300      	movs	r3, #0
 8011218:	e000      	b.n	801121c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801121a:	2302      	movs	r3, #2
  }
}
 801121c:	4618      	mov	r0, r3
 801121e:	3710      	adds	r7, #16
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	460b      	mov	r3, r1
 801122e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011236:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011238:	78fb      	ldrb	r3, [r7, #3]
 801123a:	4619      	mov	r1, r3
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f004 fbd3 	bl	80159e8 <USBD_LL_GetRxDataSize>
 8011242:	4602      	mov	r2, r0
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00d      	beq.n	8011270 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	68fa      	ldr	r2, [r7, #12]
 801125e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011262:	68fa      	ldr	r2, [r7, #12]
 8011264:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011268:	4611      	mov	r1, r2
 801126a:	4798      	blx	r3

    return USBD_OK;
 801126c:	2300      	movs	r3, #0
 801126e:	e000      	b.n	8011272 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8011270:	2302      	movs	r3, #2
  }
}
 8011272:	4618      	mov	r0, r3
 8011274:	3710      	adds	r7, #16
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801127a:	b580      	push	{r7, lr}
 801127c:	b084      	sub	sp, #16
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011288:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011290:	2b00      	cmp	r3, #0
 8011292:	d015      	beq.n	80112c0 <USBD_CDC_EP0_RxReady+0x46>
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801129a:	2bff      	cmp	r3, #255	; 0xff
 801129c:	d010      	beq.n	80112c0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	68fa      	ldr	r2, [r7, #12]
 80112a8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80112ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80112ae:	68fa      	ldr	r2, [r7, #12]
 80112b0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80112b4:	b292      	uxth	r2, r2
 80112b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	22ff      	movs	r2, #255	; 0xff
 80112bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80112c0:	2300      	movs	r3, #0
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
	...

080112cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2243      	movs	r2, #67	; 0x43
 80112d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80112da:	4b03      	ldr	r3, [pc, #12]	; (80112e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80112dc:	4618      	mov	r0, r3
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr
 80112e8:	200000a4 	.word	0x200000a4

080112ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2243      	movs	r2, #67	; 0x43
 80112f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80112fa:	4b03      	ldr	r3, [pc, #12]	; (8011308 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	370c      	adds	r7, #12
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr
 8011308:	20000060 	.word	0x20000060

0801130c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2243      	movs	r2, #67	; 0x43
 8011318:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801131a:	4b03      	ldr	r3, [pc, #12]	; (8011328 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801131c:	4618      	mov	r0, r3
 801131e:	370c      	adds	r7, #12
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr
 8011328:	200000e8 	.word	0x200000e8

0801132c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801132c:	b480      	push	{r7}
 801132e:	b083      	sub	sp, #12
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	220a      	movs	r2, #10
 8011338:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801133a:	4b03      	ldr	r3, [pc, #12]	; (8011348 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801133c:	4618      	mov	r0, r3
 801133e:	370c      	adds	r7, #12
 8011340:	46bd      	mov	sp, r7
 8011342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011346:	4770      	bx	lr
 8011348:	2000001c 	.word	0x2000001c

0801134c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801134c:	b480      	push	{r7}
 801134e:	b085      	sub	sp, #20
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8011356:	2302      	movs	r3, #2
 8011358:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d005      	beq.n	801136c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	683a      	ldr	r2, [r7, #0]
 8011364:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8011368:	2300      	movs	r3, #0
 801136a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801136c:	7bfb      	ldrb	r3, [r7, #15]
}
 801136e:	4618      	mov	r0, r3
 8011370:	3714      	adds	r7, #20
 8011372:	46bd      	mov	sp, r7
 8011374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011378:	4770      	bx	lr

0801137a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801137a:	b480      	push	{r7}
 801137c:	b087      	sub	sp, #28
 801137e:	af00      	add	r7, sp, #0
 8011380:	60f8      	str	r0, [r7, #12]
 8011382:	60b9      	str	r1, [r7, #8]
 8011384:	4613      	mov	r3, r2
 8011386:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801138e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	68ba      	ldr	r2, [r7, #8]
 8011394:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011398:	88fa      	ldrh	r2, [r7, #6]
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80113a0:	2300      	movs	r3, #0
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	371c      	adds	r7, #28
 80113a6:	46bd      	mov	sp, r7
 80113a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ac:	4770      	bx	lr

080113ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80113ae:	b480      	push	{r7}
 80113b0:	b085      	sub	sp, #20
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	6078      	str	r0, [r7, #4]
 80113b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113be:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	683a      	ldr	r2, [r7, #0]
 80113c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80113c8:	2300      	movs	r3, #0
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3714      	adds	r7, #20
 80113ce:	46bd      	mov	sp, r7
 80113d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d4:	4770      	bx	lr

080113d6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80113d6:	b580      	push	{r7, lr}
 80113d8:	b084      	sub	sp, #16
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d01c      	beq.n	801142a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d115      	bne.n	8011426 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	2201      	movs	r2, #1
 80113fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8011418:	b29b      	uxth	r3, r3
 801141a:	2181      	movs	r1, #129	; 0x81
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f004 fa9d 	bl	801595c <USBD_LL_Transmit>

      return USBD_OK;
 8011422:	2300      	movs	r3, #0
 8011424:	e002      	b.n	801142c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8011426:	2301      	movs	r3, #1
 8011428:	e000      	b.n	801142c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 801142a:	2302      	movs	r3, #2
  }
}
 801142c:	4618      	mov	r0, r3
 801142e:	3710      	adds	r7, #16
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011442:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801144a:	2b00      	cmp	r3, #0
 801144c:	d017      	beq.n	801147e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	7c1b      	ldrb	r3, [r3, #16]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d109      	bne.n	801146a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801145c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011460:	2101      	movs	r1, #1
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f004 fa9d 	bl	80159a2 <USBD_LL_PrepareReceive>
 8011468:	e007      	b.n	801147a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011470:	2340      	movs	r3, #64	; 0x40
 8011472:	2101      	movs	r1, #1
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f004 fa94 	bl	80159a2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801147a:	2300      	movs	r3, #0
 801147c:	e000      	b.n	8011480 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 801147e:	2302      	movs	r3, #2
  }
}
 8011480:	4618      	mov	r0, r3
 8011482:	3710      	adds	r7, #16
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	60b9      	str	r1, [r7, #8]
 8011492:	4613      	mov	r3, r2
 8011494:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d101      	bne.n	80114a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801149c:	2302      	movs	r3, #2
 801149e:	e01a      	b.n	80114d6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d003      	beq.n	80114b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2200      	movs	r2, #0
 80114ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d003      	beq.n	80114c0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	68ba      	ldr	r2, [r7, #8]
 80114bc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	2201      	movs	r2, #1
 80114c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	79fa      	ldrb	r2, [r7, #7]
 80114cc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80114ce:	68f8      	ldr	r0, [r7, #12]
 80114d0:	f004 f900 	bl	80156d4 <USBD_LL_Init>

  return USBD_OK;
 80114d4:	2300      	movs	r3, #0
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3710      	adds	r7, #16
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}

080114de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80114de:	b480      	push	{r7}
 80114e0:	b085      	sub	sp, #20
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
 80114e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80114e8:	2300      	movs	r3, #0
 80114ea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d006      	beq.n	8011500 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	683a      	ldr	r2, [r7, #0]
 80114f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80114fa:	2300      	movs	r3, #0
 80114fc:	73fb      	strb	r3, [r7, #15]
 80114fe:	e001      	b.n	8011504 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8011500:	2302      	movs	r3, #2
 8011502:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011504:	7bfb      	ldrb	r3, [r7, #15]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3714      	adds	r7, #20
 801150a:	46bd      	mov	sp, r7
 801150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011510:	4770      	bx	lr

08011512 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011512:	b580      	push	{r7, lr}
 8011514:	b082      	sub	sp, #8
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f004 f934 	bl	8015788 <USBD_LL_Start>

  return USBD_OK;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3708      	adds	r7, #8
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}

0801152a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801152a:	b480      	push	{r7}
 801152c:	b083      	sub	sp, #12
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011532:	2300      	movs	r3, #0
}
 8011534:	4618      	mov	r0, r3
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr

08011540 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	460b      	mov	r3, r1
 801154a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801154c:	2302      	movs	r3, #2
 801154e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011556:	2b00      	cmp	r3, #0
 8011558:	d00c      	beq.n	8011574 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	78fa      	ldrb	r2, [r7, #3]
 8011564:	4611      	mov	r1, r2
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	4798      	blx	r3
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d101      	bne.n	8011574 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8011570:	2300      	movs	r3, #0
 8011572:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011574:	7bfb      	ldrb	r3, [r7, #15]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3710      	adds	r7, #16
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801157e:	b580      	push	{r7, lr}
 8011580:	b082      	sub	sp, #8
 8011582:	af00      	add	r7, sp, #0
 8011584:	6078      	str	r0, [r7, #4]
 8011586:	460b      	mov	r3, r1
 8011588:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	78fa      	ldrb	r2, [r7, #3]
 8011594:	4611      	mov	r1, r2
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	4798      	blx	r3

  return USBD_OK;
 801159a:	2300      	movs	r3, #0
}
 801159c:	4618      	mov	r0, r3
 801159e:	3708      	adds	r7, #8
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80115b4:	6839      	ldr	r1, [r7, #0]
 80115b6:	4618      	mov	r0, r3
 80115b8:	f000 fedb 	bl	8012372 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2201      	movs	r2, #1
 80115c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80115ca:	461a      	mov	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80115d8:	f003 031f 	and.w	r3, r3, #31
 80115dc:	2b02      	cmp	r3, #2
 80115de:	d016      	beq.n	801160e <USBD_LL_SetupStage+0x6a>
 80115e0:	2b02      	cmp	r3, #2
 80115e2:	d81c      	bhi.n	801161e <USBD_LL_SetupStage+0x7a>
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d002      	beq.n	80115ee <USBD_LL_SetupStage+0x4a>
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d008      	beq.n	80115fe <USBD_LL_SetupStage+0x5a>
 80115ec:	e017      	b.n	801161e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80115f4:	4619      	mov	r1, r3
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f000 f9ce 	bl	8011998 <USBD_StdDevReq>
      break;
 80115fc:	e01a      	b.n	8011634 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011604:	4619      	mov	r1, r3
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f000 fa30 	bl	8011a6c <USBD_StdItfReq>
      break;
 801160c:	e012      	b.n	8011634 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011614:	4619      	mov	r1, r3
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f000 fa70 	bl	8011afc <USBD_StdEPReq>
      break;
 801161c:	e00a      	b.n	8011634 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011624:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011628:	b2db      	uxtb	r3, r3
 801162a:	4619      	mov	r1, r3
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f004 f90b 	bl	8015848 <USBD_LL_StallEP>
      break;
 8011632:	bf00      	nop
  }

  return USBD_OK;
 8011634:	2300      	movs	r3, #0
}
 8011636:	4618      	mov	r0, r3
 8011638:	3708      	adds	r7, #8
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801163e:	b580      	push	{r7, lr}
 8011640:	b086      	sub	sp, #24
 8011642:	af00      	add	r7, sp, #0
 8011644:	60f8      	str	r0, [r7, #12]
 8011646:	460b      	mov	r3, r1
 8011648:	607a      	str	r2, [r7, #4]
 801164a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801164c:	7afb      	ldrb	r3, [r7, #11]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d14b      	bne.n	80116ea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011658:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011660:	2b03      	cmp	r3, #3
 8011662:	d134      	bne.n	80116ce <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	68da      	ldr	r2, [r3, #12]
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	429a      	cmp	r2, r3
 801166e:	d919      	bls.n	80116a4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	68da      	ldr	r2, [r3, #12]
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	1ad2      	subs	r2, r2, r3
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	68da      	ldr	r2, [r3, #12]
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011686:	429a      	cmp	r2, r3
 8011688:	d203      	bcs.n	8011692 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801168e:	b29b      	uxth	r3, r3
 8011690:	e002      	b.n	8011698 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011696:	b29b      	uxth	r3, r3
 8011698:	461a      	mov	r2, r3
 801169a:	6879      	ldr	r1, [r7, #4]
 801169c:	68f8      	ldr	r0, [r7, #12]
 801169e:	f000 ff5c 	bl	801255a <USBD_CtlContinueRx>
 80116a2:	e038      	b.n	8011716 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116aa:	691b      	ldr	r3, [r3, #16]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d00a      	beq.n	80116c6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80116b6:	2b03      	cmp	r3, #3
 80116b8:	d105      	bne.n	80116c6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116c0:	691b      	ldr	r3, [r3, #16]
 80116c2:	68f8      	ldr	r0, [r7, #12]
 80116c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80116c6:	68f8      	ldr	r0, [r7, #12]
 80116c8:	f000 ff59 	bl	801257e <USBD_CtlSendStatus>
 80116cc:	e023      	b.n	8011716 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80116d4:	2b05      	cmp	r3, #5
 80116d6:	d11e      	bne.n	8011716 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2200      	movs	r2, #0
 80116dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80116e0:	2100      	movs	r1, #0
 80116e2:	68f8      	ldr	r0, [r7, #12]
 80116e4:	f004 f8b0 	bl	8015848 <USBD_LL_StallEP>
 80116e8:	e015      	b.n	8011716 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116f0:	699b      	ldr	r3, [r3, #24]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00d      	beq.n	8011712 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80116fc:	2b03      	cmp	r3, #3
 80116fe:	d108      	bne.n	8011712 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011706:	699b      	ldr	r3, [r3, #24]
 8011708:	7afa      	ldrb	r2, [r7, #11]
 801170a:	4611      	mov	r1, r2
 801170c:	68f8      	ldr	r0, [r7, #12]
 801170e:	4798      	blx	r3
 8011710:	e001      	b.n	8011716 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011712:	2302      	movs	r3, #2
 8011714:	e000      	b.n	8011718 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011716:	2300      	movs	r3, #0
}
 8011718:	4618      	mov	r0, r3
 801171a:	3718      	adds	r7, #24
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}

08011720 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b086      	sub	sp, #24
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	460b      	mov	r3, r1
 801172a:	607a      	str	r2, [r7, #4]
 801172c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801172e:	7afb      	ldrb	r3, [r7, #11]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d17f      	bne.n	8011834 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	3314      	adds	r3, #20
 8011738:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011740:	2b02      	cmp	r3, #2
 8011742:	d15c      	bne.n	80117fe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	68da      	ldr	r2, [r3, #12]
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	429a      	cmp	r2, r3
 801174e:	d915      	bls.n	801177c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	68da      	ldr	r2, [r3, #12]
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	1ad2      	subs	r2, r2, r3
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	68db      	ldr	r3, [r3, #12]
 8011762:	b29b      	uxth	r3, r3
 8011764:	461a      	mov	r2, r3
 8011766:	6879      	ldr	r1, [r7, #4]
 8011768:	68f8      	ldr	r0, [r7, #12]
 801176a:	f000 fec6 	bl	80124fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801176e:	2300      	movs	r3, #0
 8011770:	2200      	movs	r2, #0
 8011772:	2100      	movs	r1, #0
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f004 f914 	bl	80159a2 <USBD_LL_PrepareReceive>
 801177a:	e04e      	b.n	801181a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	689b      	ldr	r3, [r3, #8]
 8011780:	697a      	ldr	r2, [r7, #20]
 8011782:	6912      	ldr	r2, [r2, #16]
 8011784:	fbb3 f1f2 	udiv	r1, r3, r2
 8011788:	fb01 f202 	mul.w	r2, r1, r2
 801178c:	1a9b      	subs	r3, r3, r2
 801178e:	2b00      	cmp	r3, #0
 8011790:	d11c      	bne.n	80117cc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	689a      	ldr	r2, [r3, #8]
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801179a:	429a      	cmp	r2, r3
 801179c:	d316      	bcc.n	80117cc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	689a      	ldr	r2, [r3, #8]
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d20f      	bcs.n	80117cc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80117ac:	2200      	movs	r2, #0
 80117ae:	2100      	movs	r1, #0
 80117b0:	68f8      	ldr	r0, [r7, #12]
 80117b2:	f000 fea2 	bl	80124fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2200      	movs	r2, #0
 80117ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80117be:	2300      	movs	r3, #0
 80117c0:	2200      	movs	r2, #0
 80117c2:	2100      	movs	r1, #0
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f004 f8ec 	bl	80159a2 <USBD_LL_PrepareReceive>
 80117ca:	e026      	b.n	801181a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d00a      	beq.n	80117ee <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80117de:	2b03      	cmp	r3, #3
 80117e0:	d105      	bne.n	80117ee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80117ee:	2180      	movs	r1, #128	; 0x80
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f004 f829 	bl	8015848 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	f000 fed4 	bl	80125a4 <USBD_CtlReceiveStatus>
 80117fc:	e00d      	b.n	801181a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011804:	2b04      	cmp	r3, #4
 8011806:	d004      	beq.n	8011812 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801180e:	2b00      	cmp	r3, #0
 8011810:	d103      	bne.n	801181a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8011812:	2180      	movs	r1, #128	; 0x80
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f004 f817 	bl	8015848 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011820:	2b01      	cmp	r3, #1
 8011822:	d11d      	bne.n	8011860 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8011824:	68f8      	ldr	r0, [r7, #12]
 8011826:	f7ff fe80 	bl	801152a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2200      	movs	r2, #0
 801182e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011832:	e015      	b.n	8011860 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801183a:	695b      	ldr	r3, [r3, #20]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d00d      	beq.n	801185c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011846:	2b03      	cmp	r3, #3
 8011848:	d108      	bne.n	801185c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011850:	695b      	ldr	r3, [r3, #20]
 8011852:	7afa      	ldrb	r2, [r7, #11]
 8011854:	4611      	mov	r1, r2
 8011856:	68f8      	ldr	r0, [r7, #12]
 8011858:	4798      	blx	r3
 801185a:	e001      	b.n	8011860 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801185c:	2302      	movs	r3, #2
 801185e:	e000      	b.n	8011862 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3718      	adds	r7, #24
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801186a:	b580      	push	{r7, lr}
 801186c:	b082      	sub	sp, #8
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011872:	2340      	movs	r3, #64	; 0x40
 8011874:	2200      	movs	r2, #0
 8011876:	2100      	movs	r1, #0
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f003 ffa0 	bl	80157be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2201      	movs	r2, #1
 8011882:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2240      	movs	r2, #64	; 0x40
 801188a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801188e:	2340      	movs	r3, #64	; 0x40
 8011890:	2200      	movs	r2, #0
 8011892:	2180      	movs	r1, #128	; 0x80
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f003 ff92 	bl	80157be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2201      	movs	r2, #1
 801189e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2240      	movs	r2, #64	; 0x40
 80118a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2201      	movs	r2, #1
 80118aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2200      	movs	r2, #0
 80118b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2200      	movs	r2, #0
 80118ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d009      	beq.n	80118e2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	687a      	ldr	r2, [r7, #4]
 80118d8:	6852      	ldr	r2, [r2, #4]
 80118da:	b2d2      	uxtb	r2, r2
 80118dc:	4611      	mov	r1, r2
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	4798      	blx	r3
  }

  return USBD_OK;
 80118e2:	2300      	movs	r3, #0
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3708      	adds	r7, #8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	460b      	mov	r3, r1
 80118f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	78fa      	ldrb	r2, [r7, #3]
 80118fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80118fe:	2300      	movs	r3, #0
}
 8011900:	4618      	mov	r0, r3
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2204      	movs	r2, #4
 8011924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011928:	2300      	movs	r3, #0
}
 801192a:	4618      	mov	r0, r3
 801192c:	370c      	adds	r7, #12
 801192e:	46bd      	mov	sp, r7
 8011930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011934:	4770      	bx	lr

08011936 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011936:	b480      	push	{r7}
 8011938:	b083      	sub	sp, #12
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011944:	2b04      	cmp	r3, #4
 8011946:	d105      	bne.n	8011954 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011954:	2300      	movs	r3, #0
}
 8011956:	4618      	mov	r0, r3
 8011958:	370c      	adds	r7, #12
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr

08011962 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011962:	b580      	push	{r7, lr}
 8011964:	b082      	sub	sp, #8
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011970:	2b03      	cmp	r3, #3
 8011972:	d10b      	bne.n	801198c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801197a:	69db      	ldr	r3, [r3, #28]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d005      	beq.n	801198c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011986:	69db      	ldr	r3, [r3, #28]
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801198c:	2300      	movs	r3, #0
}
 801198e:	4618      	mov	r0, r3
 8011990:	3708      	adds	r7, #8
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
	...

08011998 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b084      	sub	sp, #16
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80119a2:	2300      	movs	r3, #0
 80119a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80119ae:	2b40      	cmp	r3, #64	; 0x40
 80119b0:	d005      	beq.n	80119be <USBD_StdDevReq+0x26>
 80119b2:	2b40      	cmp	r3, #64	; 0x40
 80119b4:	d84f      	bhi.n	8011a56 <USBD_StdDevReq+0xbe>
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d009      	beq.n	80119ce <USBD_StdDevReq+0x36>
 80119ba:	2b20      	cmp	r3, #32
 80119bc:	d14b      	bne.n	8011a56 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119c4:	689b      	ldr	r3, [r3, #8]
 80119c6:	6839      	ldr	r1, [r7, #0]
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	4798      	blx	r3
      break;
 80119cc:	e048      	b.n	8011a60 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	785b      	ldrb	r3, [r3, #1]
 80119d2:	2b09      	cmp	r3, #9
 80119d4:	d839      	bhi.n	8011a4a <USBD_StdDevReq+0xb2>
 80119d6:	a201      	add	r2, pc, #4	; (adr r2, 80119dc <USBD_StdDevReq+0x44>)
 80119d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119dc:	08011a2d 	.word	0x08011a2d
 80119e0:	08011a41 	.word	0x08011a41
 80119e4:	08011a4b 	.word	0x08011a4b
 80119e8:	08011a37 	.word	0x08011a37
 80119ec:	08011a4b 	.word	0x08011a4b
 80119f0:	08011a0f 	.word	0x08011a0f
 80119f4:	08011a05 	.word	0x08011a05
 80119f8:	08011a4b 	.word	0x08011a4b
 80119fc:	08011a23 	.word	0x08011a23
 8011a00:	08011a19 	.word	0x08011a19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011a04:	6839      	ldr	r1, [r7, #0]
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f000 f9dc 	bl	8011dc4 <USBD_GetDescriptor>
          break;
 8011a0c:	e022      	b.n	8011a54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011a0e:	6839      	ldr	r1, [r7, #0]
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 fb3f 	bl	8012094 <USBD_SetAddress>
          break;
 8011a16:	e01d      	b.n	8011a54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8011a18:	6839      	ldr	r1, [r7, #0]
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f000 fb7e 	bl	801211c <USBD_SetConfig>
          break;
 8011a20:	e018      	b.n	8011a54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011a22:	6839      	ldr	r1, [r7, #0]
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f000 fc07 	bl	8012238 <USBD_GetConfig>
          break;
 8011a2a:	e013      	b.n	8011a54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011a2c:	6839      	ldr	r1, [r7, #0]
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f000 fc37 	bl	80122a2 <USBD_GetStatus>
          break;
 8011a34:	e00e      	b.n	8011a54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011a36:	6839      	ldr	r1, [r7, #0]
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 fc65 	bl	8012308 <USBD_SetFeature>
          break;
 8011a3e:	e009      	b.n	8011a54 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011a40:	6839      	ldr	r1, [r7, #0]
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 fc74 	bl	8012330 <USBD_ClrFeature>
          break;
 8011a48:	e004      	b.n	8011a54 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8011a4a:	6839      	ldr	r1, [r7, #0]
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f000 fccd 	bl	80123ec <USBD_CtlError>
          break;
 8011a52:	bf00      	nop
      }
      break;
 8011a54:	e004      	b.n	8011a60 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8011a56:	6839      	ldr	r1, [r7, #0]
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f000 fcc7 	bl	80123ec <USBD_CtlError>
      break;
 8011a5e:	bf00      	nop
  }

  return ret;
 8011a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop

08011a6c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a76:	2300      	movs	r3, #0
 8011a78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	781b      	ldrb	r3, [r3, #0]
 8011a7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a82:	2b40      	cmp	r3, #64	; 0x40
 8011a84:	d005      	beq.n	8011a92 <USBD_StdItfReq+0x26>
 8011a86:	2b40      	cmp	r3, #64	; 0x40
 8011a88:	d82e      	bhi.n	8011ae8 <USBD_StdItfReq+0x7c>
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d001      	beq.n	8011a92 <USBD_StdItfReq+0x26>
 8011a8e:	2b20      	cmp	r3, #32
 8011a90:	d12a      	bne.n	8011ae8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a98:	3b01      	subs	r3, #1
 8011a9a:	2b02      	cmp	r3, #2
 8011a9c:	d81d      	bhi.n	8011ada <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	889b      	ldrh	r3, [r3, #4]
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	2b01      	cmp	r3, #1
 8011aa6:	d813      	bhi.n	8011ad0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011aae:	689b      	ldr	r3, [r3, #8]
 8011ab0:	6839      	ldr	r1, [r7, #0]
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	4798      	blx	r3
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	88db      	ldrh	r3, [r3, #6]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d110      	bne.n	8011ae4 <USBD_StdItfReq+0x78>
 8011ac2:	7bfb      	ldrb	r3, [r7, #15]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d10d      	bne.n	8011ae4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 fd58 	bl	801257e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011ace:	e009      	b.n	8011ae4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8011ad0:	6839      	ldr	r1, [r7, #0]
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f000 fc8a 	bl	80123ec <USBD_CtlError>
          break;
 8011ad8:	e004      	b.n	8011ae4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8011ada:	6839      	ldr	r1, [r7, #0]
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f000 fc85 	bl	80123ec <USBD_CtlError>
          break;
 8011ae2:	e000      	b.n	8011ae6 <USBD_StdItfReq+0x7a>
          break;
 8011ae4:	bf00      	nop
      }
      break;
 8011ae6:	e004      	b.n	8011af2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8011ae8:	6839      	ldr	r1, [r7, #0]
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f000 fc7e 	bl	80123ec <USBD_CtlError>
      break;
 8011af0:	bf00      	nop
  }

  return USBD_OK;
 8011af2:	2300      	movs	r3, #0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3710      	adds	r7, #16
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b06:	2300      	movs	r3, #0
 8011b08:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	889b      	ldrh	r3, [r3, #4]
 8011b0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b18:	2b40      	cmp	r3, #64	; 0x40
 8011b1a:	d007      	beq.n	8011b2c <USBD_StdEPReq+0x30>
 8011b1c:	2b40      	cmp	r3, #64	; 0x40
 8011b1e:	f200 8146 	bhi.w	8011dae <USBD_StdEPReq+0x2b2>
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00a      	beq.n	8011b3c <USBD_StdEPReq+0x40>
 8011b26:	2b20      	cmp	r3, #32
 8011b28:	f040 8141 	bne.w	8011dae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	6839      	ldr	r1, [r7, #0]
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	4798      	blx	r3
      break;
 8011b3a:	e13d      	b.n	8011db8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b44:	2b20      	cmp	r3, #32
 8011b46:	d10a      	bne.n	8011b5e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b4e:	689b      	ldr	r3, [r3, #8]
 8011b50:	6839      	ldr	r1, [r7, #0]
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	4798      	blx	r3
 8011b56:	4603      	mov	r3, r0
 8011b58:	73fb      	strb	r3, [r7, #15]

        return ret;
 8011b5a:	7bfb      	ldrb	r3, [r7, #15]
 8011b5c:	e12d      	b.n	8011dba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	785b      	ldrb	r3, [r3, #1]
 8011b62:	2b03      	cmp	r3, #3
 8011b64:	d007      	beq.n	8011b76 <USBD_StdEPReq+0x7a>
 8011b66:	2b03      	cmp	r3, #3
 8011b68:	f300 811b 	bgt.w	8011da2 <USBD_StdEPReq+0x2a6>
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d072      	beq.n	8011c56 <USBD_StdEPReq+0x15a>
 8011b70:	2b01      	cmp	r3, #1
 8011b72:	d03a      	beq.n	8011bea <USBD_StdEPReq+0xee>
 8011b74:	e115      	b.n	8011da2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b7c:	2b02      	cmp	r3, #2
 8011b7e:	d002      	beq.n	8011b86 <USBD_StdEPReq+0x8a>
 8011b80:	2b03      	cmp	r3, #3
 8011b82:	d015      	beq.n	8011bb0 <USBD_StdEPReq+0xb4>
 8011b84:	e02b      	b.n	8011bde <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b86:	7bbb      	ldrb	r3, [r7, #14]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d00c      	beq.n	8011ba6 <USBD_StdEPReq+0xaa>
 8011b8c:	7bbb      	ldrb	r3, [r7, #14]
 8011b8e:	2b80      	cmp	r3, #128	; 0x80
 8011b90:	d009      	beq.n	8011ba6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8011b92:	7bbb      	ldrb	r3, [r7, #14]
 8011b94:	4619      	mov	r1, r3
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f003 fe56 	bl	8015848 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8011b9c:	2180      	movs	r1, #128	; 0x80
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f003 fe52 	bl	8015848 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011ba4:	e020      	b.n	8011be8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8011ba6:	6839      	ldr	r1, [r7, #0]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f000 fc1f 	bl	80123ec <USBD_CtlError>
              break;
 8011bae:	e01b      	b.n	8011be8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	885b      	ldrh	r3, [r3, #2]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d10e      	bne.n	8011bd6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8011bb8:	7bbb      	ldrb	r3, [r7, #14]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d00b      	beq.n	8011bd6 <USBD_StdEPReq+0xda>
 8011bbe:	7bbb      	ldrb	r3, [r7, #14]
 8011bc0:	2b80      	cmp	r3, #128	; 0x80
 8011bc2:	d008      	beq.n	8011bd6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	88db      	ldrh	r3, [r3, #6]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d104      	bne.n	8011bd6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8011bcc:	7bbb      	ldrb	r3, [r7, #14]
 8011bce:	4619      	mov	r1, r3
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f003 fe39 	bl	8015848 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f000 fcd1 	bl	801257e <USBD_CtlSendStatus>

              break;
 8011bdc:	e004      	b.n	8011be8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8011bde:	6839      	ldr	r1, [r7, #0]
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f000 fc03 	bl	80123ec <USBD_CtlError>
              break;
 8011be6:	bf00      	nop
          }
          break;
 8011be8:	e0e0      	b.n	8011dac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bf0:	2b02      	cmp	r3, #2
 8011bf2:	d002      	beq.n	8011bfa <USBD_StdEPReq+0xfe>
 8011bf4:	2b03      	cmp	r3, #3
 8011bf6:	d015      	beq.n	8011c24 <USBD_StdEPReq+0x128>
 8011bf8:	e026      	b.n	8011c48 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011bfa:	7bbb      	ldrb	r3, [r7, #14]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d00c      	beq.n	8011c1a <USBD_StdEPReq+0x11e>
 8011c00:	7bbb      	ldrb	r3, [r7, #14]
 8011c02:	2b80      	cmp	r3, #128	; 0x80
 8011c04:	d009      	beq.n	8011c1a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8011c06:	7bbb      	ldrb	r3, [r7, #14]
 8011c08:	4619      	mov	r1, r3
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f003 fe1c 	bl	8015848 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8011c10:	2180      	movs	r1, #128	; 0x80
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f003 fe18 	bl	8015848 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c18:	e01c      	b.n	8011c54 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8011c1a:	6839      	ldr	r1, [r7, #0]
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f000 fbe5 	bl	80123ec <USBD_CtlError>
              break;
 8011c22:	e017      	b.n	8011c54 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	885b      	ldrh	r3, [r3, #2]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d112      	bne.n	8011c52 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011c2c:	7bbb      	ldrb	r3, [r7, #14]
 8011c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d004      	beq.n	8011c40 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8011c36:	7bbb      	ldrb	r3, [r7, #14]
 8011c38:	4619      	mov	r1, r3
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f003 fe23 	bl	8015886 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f000 fc9c 	bl	801257e <USBD_CtlSendStatus>
              }
              break;
 8011c46:	e004      	b.n	8011c52 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8011c48:	6839      	ldr	r1, [r7, #0]
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f000 fbce 	bl	80123ec <USBD_CtlError>
              break;
 8011c50:	e000      	b.n	8011c54 <USBD_StdEPReq+0x158>
              break;
 8011c52:	bf00      	nop
          }
          break;
 8011c54:	e0aa      	b.n	8011dac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c5c:	2b02      	cmp	r3, #2
 8011c5e:	d002      	beq.n	8011c66 <USBD_StdEPReq+0x16a>
 8011c60:	2b03      	cmp	r3, #3
 8011c62:	d032      	beq.n	8011cca <USBD_StdEPReq+0x1ce>
 8011c64:	e097      	b.n	8011d96 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c66:	7bbb      	ldrb	r3, [r7, #14]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d007      	beq.n	8011c7c <USBD_StdEPReq+0x180>
 8011c6c:	7bbb      	ldrb	r3, [r7, #14]
 8011c6e:	2b80      	cmp	r3, #128	; 0x80
 8011c70:	d004      	beq.n	8011c7c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8011c72:	6839      	ldr	r1, [r7, #0]
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f000 fbb9 	bl	80123ec <USBD_CtlError>
                break;
 8011c7a:	e091      	b.n	8011da0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	da0b      	bge.n	8011c9c <USBD_StdEPReq+0x1a0>
 8011c84:	7bbb      	ldrb	r3, [r7, #14]
 8011c86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	4413      	add	r3, r2
 8011c90:	009b      	lsls	r3, r3, #2
 8011c92:	3310      	adds	r3, #16
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	4413      	add	r3, r2
 8011c98:	3304      	adds	r3, #4
 8011c9a:	e00b      	b.n	8011cb4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011c9c:	7bbb      	ldrb	r3, [r7, #14]
 8011c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ca2:	4613      	mov	r3, r2
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	4413      	add	r3, r2
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011cae:	687a      	ldr	r2, [r7, #4]
 8011cb0:	4413      	add	r3, r2
 8011cb2:	3304      	adds	r3, #4
 8011cb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	2202      	movs	r2, #2
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f000 fbfd 	bl	80124c2 <USBD_CtlSendData>
              break;
 8011cc8:	e06a      	b.n	8011da0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011cca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	da11      	bge.n	8011cf6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011cd2:	7bbb      	ldrb	r3, [r7, #14]
 8011cd4:	f003 020f 	and.w	r2, r3, #15
 8011cd8:	6879      	ldr	r1, [r7, #4]
 8011cda:	4613      	mov	r3, r2
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	4413      	add	r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	440b      	add	r3, r1
 8011ce4:	3318      	adds	r3, #24
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d117      	bne.n	8011d1c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8011cec:	6839      	ldr	r1, [r7, #0]
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f000 fb7c 	bl	80123ec <USBD_CtlError>
                  break;
 8011cf4:	e054      	b.n	8011da0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011cf6:	7bbb      	ldrb	r3, [r7, #14]
 8011cf8:	f003 020f 	and.w	r2, r3, #15
 8011cfc:	6879      	ldr	r1, [r7, #4]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	4413      	add	r3, r2
 8011d04:	009b      	lsls	r3, r3, #2
 8011d06:	440b      	add	r3, r1
 8011d08:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d104      	bne.n	8011d1c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8011d12:	6839      	ldr	r1, [r7, #0]
 8011d14:	6878      	ldr	r0, [r7, #4]
 8011d16:	f000 fb69 	bl	80123ec <USBD_CtlError>
                  break;
 8011d1a:	e041      	b.n	8011da0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	da0b      	bge.n	8011d3c <USBD_StdEPReq+0x240>
 8011d24:	7bbb      	ldrb	r3, [r7, #14]
 8011d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d2a:	4613      	mov	r3, r2
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	4413      	add	r3, r2
 8011d30:	009b      	lsls	r3, r3, #2
 8011d32:	3310      	adds	r3, #16
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	4413      	add	r3, r2
 8011d38:	3304      	adds	r3, #4
 8011d3a:	e00b      	b.n	8011d54 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011d3c:	7bbb      	ldrb	r3, [r7, #14]
 8011d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d42:	4613      	mov	r3, r2
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	4413      	add	r3, r2
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011d4e:	687a      	ldr	r2, [r7, #4]
 8011d50:	4413      	add	r3, r2
 8011d52:	3304      	adds	r3, #4
 8011d54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011d56:	7bbb      	ldrb	r3, [r7, #14]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d002      	beq.n	8011d62 <USBD_StdEPReq+0x266>
 8011d5c:	7bbb      	ldrb	r3, [r7, #14]
 8011d5e:	2b80      	cmp	r3, #128	; 0x80
 8011d60:	d103      	bne.n	8011d6a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	2200      	movs	r2, #0
 8011d66:	601a      	str	r2, [r3, #0]
 8011d68:	e00e      	b.n	8011d88 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8011d6a:	7bbb      	ldrb	r3, [r7, #14]
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f003 fda8 	bl	80158c4 <USBD_LL_IsStallEP>
 8011d74:	4603      	mov	r3, r0
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d003      	beq.n	8011d82 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	2201      	movs	r2, #1
 8011d7e:	601a      	str	r2, [r3, #0]
 8011d80:	e002      	b.n	8011d88 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	2200      	movs	r2, #0
 8011d86:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	2202      	movs	r2, #2
 8011d8c:	4619      	mov	r1, r3
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 fb97 	bl	80124c2 <USBD_CtlSendData>
              break;
 8011d94:	e004      	b.n	8011da0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8011d96:	6839      	ldr	r1, [r7, #0]
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 fb27 	bl	80123ec <USBD_CtlError>
              break;
 8011d9e:	bf00      	nop
          }
          break;
 8011da0:	e004      	b.n	8011dac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8011da2:	6839      	ldr	r1, [r7, #0]
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f000 fb21 	bl	80123ec <USBD_CtlError>
          break;
 8011daa:	bf00      	nop
      }
      break;
 8011dac:	e004      	b.n	8011db8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8011dae:	6839      	ldr	r1, [r7, #0]
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f000 fb1b 	bl	80123ec <USBD_CtlError>
      break;
 8011db6:	bf00      	nop
  }

  return ret;
 8011db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
	...

08011dc4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	885b      	ldrh	r3, [r3, #2]
 8011dde:	0a1b      	lsrs	r3, r3, #8
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	3b01      	subs	r3, #1
 8011de4:	2b06      	cmp	r3, #6
 8011de6:	f200 8128 	bhi.w	801203a <USBD_GetDescriptor+0x276>
 8011dea:	a201      	add	r2, pc, #4	; (adr r2, 8011df0 <USBD_GetDescriptor+0x2c>)
 8011dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011df0:	08011e0d 	.word	0x08011e0d
 8011df4:	08011e25 	.word	0x08011e25
 8011df8:	08011e65 	.word	0x08011e65
 8011dfc:	0801203b 	.word	0x0801203b
 8011e00:	0801203b 	.word	0x0801203b
 8011e04:	08011fdb 	.word	0x08011fdb
 8011e08:	08012007 	.word	0x08012007
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	7c12      	ldrb	r2, [r2, #16]
 8011e18:	f107 0108 	add.w	r1, r7, #8
 8011e1c:	4610      	mov	r0, r2
 8011e1e:	4798      	blx	r3
 8011e20:	60f8      	str	r0, [r7, #12]
      break;
 8011e22:	e112      	b.n	801204a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	7c1b      	ldrb	r3, [r3, #16]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d10d      	bne.n	8011e48 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e34:	f107 0208 	add.w	r2, r7, #8
 8011e38:	4610      	mov	r0, r2
 8011e3a:	4798      	blx	r3
 8011e3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	3301      	adds	r3, #1
 8011e42:	2202      	movs	r2, #2
 8011e44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011e46:	e100      	b.n	801204a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e50:	f107 0208 	add.w	r2, r7, #8
 8011e54:	4610      	mov	r0, r2
 8011e56:	4798      	blx	r3
 8011e58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	2202      	movs	r2, #2
 8011e60:	701a      	strb	r2, [r3, #0]
      break;
 8011e62:	e0f2      	b.n	801204a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	885b      	ldrh	r3, [r3, #2]
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	2b05      	cmp	r3, #5
 8011e6c:	f200 80ac 	bhi.w	8011fc8 <USBD_GetDescriptor+0x204>
 8011e70:	a201      	add	r2, pc, #4	; (adr r2, 8011e78 <USBD_GetDescriptor+0xb4>)
 8011e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e76:	bf00      	nop
 8011e78:	08011e91 	.word	0x08011e91
 8011e7c:	08011ec5 	.word	0x08011ec5
 8011e80:	08011ef9 	.word	0x08011ef9
 8011e84:	08011f2d 	.word	0x08011f2d
 8011e88:	08011f61 	.word	0x08011f61
 8011e8c:	08011f95 	.word	0x08011f95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00b      	beq.n	8011eb4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	7c12      	ldrb	r2, [r2, #16]
 8011ea8:	f107 0108 	add.w	r1, r7, #8
 8011eac:	4610      	mov	r0, r2
 8011eae:	4798      	blx	r3
 8011eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011eb2:	e091      	b.n	8011fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011eb4:	6839      	ldr	r1, [r7, #0]
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f000 fa98 	bl	80123ec <USBD_CtlError>
            err++;
 8011ebc:	7afb      	ldrb	r3, [r7, #11]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8011ec2:	e089      	b.n	8011fd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011eca:	689b      	ldr	r3, [r3, #8]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d00b      	beq.n	8011ee8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011ed6:	689b      	ldr	r3, [r3, #8]
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	7c12      	ldrb	r2, [r2, #16]
 8011edc:	f107 0108 	add.w	r1, r7, #8
 8011ee0:	4610      	mov	r0, r2
 8011ee2:	4798      	blx	r3
 8011ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ee6:	e077      	b.n	8011fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011ee8:	6839      	ldr	r1, [r7, #0]
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 fa7e 	bl	80123ec <USBD_CtlError>
            err++;
 8011ef0:	7afb      	ldrb	r3, [r7, #11]
 8011ef2:	3301      	adds	r3, #1
 8011ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8011ef6:	e06f      	b.n	8011fd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011efe:	68db      	ldr	r3, [r3, #12]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d00b      	beq.n	8011f1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	7c12      	ldrb	r2, [r2, #16]
 8011f10:	f107 0108 	add.w	r1, r7, #8
 8011f14:	4610      	mov	r0, r2
 8011f16:	4798      	blx	r3
 8011f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f1a:	e05d      	b.n	8011fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f1c:	6839      	ldr	r1, [r7, #0]
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f000 fa64 	bl	80123ec <USBD_CtlError>
            err++;
 8011f24:	7afb      	ldrb	r3, [r7, #11]
 8011f26:	3301      	adds	r3, #1
 8011f28:	72fb      	strb	r3, [r7, #11]
          break;
 8011f2a:	e055      	b.n	8011fd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011f32:	691b      	ldr	r3, [r3, #16]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00b      	beq.n	8011f50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011f3e:	691b      	ldr	r3, [r3, #16]
 8011f40:	687a      	ldr	r2, [r7, #4]
 8011f42:	7c12      	ldrb	r2, [r2, #16]
 8011f44:	f107 0108 	add.w	r1, r7, #8
 8011f48:	4610      	mov	r0, r2
 8011f4a:	4798      	blx	r3
 8011f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f4e:	e043      	b.n	8011fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f50:	6839      	ldr	r1, [r7, #0]
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f000 fa4a 	bl	80123ec <USBD_CtlError>
            err++;
 8011f58:	7afb      	ldrb	r3, [r7, #11]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8011f5e:	e03b      	b.n	8011fd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011f66:	695b      	ldr	r3, [r3, #20]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d00b      	beq.n	8011f84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011f72:	695b      	ldr	r3, [r3, #20]
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	7c12      	ldrb	r2, [r2, #16]
 8011f78:	f107 0108 	add.w	r1, r7, #8
 8011f7c:	4610      	mov	r0, r2
 8011f7e:	4798      	blx	r3
 8011f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f82:	e029      	b.n	8011fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f84:	6839      	ldr	r1, [r7, #0]
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 fa30 	bl	80123ec <USBD_CtlError>
            err++;
 8011f8c:	7afb      	ldrb	r3, [r7, #11]
 8011f8e:	3301      	adds	r3, #1
 8011f90:	72fb      	strb	r3, [r7, #11]
          break;
 8011f92:	e021      	b.n	8011fd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011f9a:	699b      	ldr	r3, [r3, #24]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d00b      	beq.n	8011fb8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011fa6:	699b      	ldr	r3, [r3, #24]
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	7c12      	ldrb	r2, [r2, #16]
 8011fac:	f107 0108 	add.w	r1, r7, #8
 8011fb0:	4610      	mov	r0, r2
 8011fb2:	4798      	blx	r3
 8011fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011fb6:	e00f      	b.n	8011fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011fb8:	6839      	ldr	r1, [r7, #0]
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 fa16 	bl	80123ec <USBD_CtlError>
            err++;
 8011fc0:	7afb      	ldrb	r3, [r7, #11]
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8011fc6:	e007      	b.n	8011fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8011fc8:	6839      	ldr	r1, [r7, #0]
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 fa0e 	bl	80123ec <USBD_CtlError>
          err++;
 8011fd0:	7afb      	ldrb	r3, [r7, #11]
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8011fd6:	e038      	b.n	801204a <USBD_GetDescriptor+0x286>
 8011fd8:	e037      	b.n	801204a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	7c1b      	ldrb	r3, [r3, #16]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d109      	bne.n	8011ff6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fea:	f107 0208 	add.w	r2, r7, #8
 8011fee:	4610      	mov	r0, r2
 8011ff0:	4798      	blx	r3
 8011ff2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ff4:	e029      	b.n	801204a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011ff6:	6839      	ldr	r1, [r7, #0]
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f000 f9f7 	bl	80123ec <USBD_CtlError>
        err++;
 8011ffe:	7afb      	ldrb	r3, [r7, #11]
 8012000:	3301      	adds	r3, #1
 8012002:	72fb      	strb	r3, [r7, #11]
      break;
 8012004:	e021      	b.n	801204a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	7c1b      	ldrb	r3, [r3, #16]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d10d      	bne.n	801202a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012016:	f107 0208 	add.w	r2, r7, #8
 801201a:	4610      	mov	r0, r2
 801201c:	4798      	blx	r3
 801201e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	3301      	adds	r3, #1
 8012024:	2207      	movs	r2, #7
 8012026:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012028:	e00f      	b.n	801204a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801202a:	6839      	ldr	r1, [r7, #0]
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f000 f9dd 	bl	80123ec <USBD_CtlError>
        err++;
 8012032:	7afb      	ldrb	r3, [r7, #11]
 8012034:	3301      	adds	r3, #1
 8012036:	72fb      	strb	r3, [r7, #11]
      break;
 8012038:	e007      	b.n	801204a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801203a:	6839      	ldr	r1, [r7, #0]
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f000 f9d5 	bl	80123ec <USBD_CtlError>
      err++;
 8012042:	7afb      	ldrb	r3, [r7, #11]
 8012044:	3301      	adds	r3, #1
 8012046:	72fb      	strb	r3, [r7, #11]
      break;
 8012048:	bf00      	nop
  }

  if (err != 0U)
 801204a:	7afb      	ldrb	r3, [r7, #11]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d11c      	bne.n	801208a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8012050:	893b      	ldrh	r3, [r7, #8]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d011      	beq.n	801207a <USBD_GetDescriptor+0x2b6>
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	88db      	ldrh	r3, [r3, #6]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d00d      	beq.n	801207a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	88da      	ldrh	r2, [r3, #6]
 8012062:	893b      	ldrh	r3, [r7, #8]
 8012064:	4293      	cmp	r3, r2
 8012066:	bf28      	it	cs
 8012068:	4613      	movcs	r3, r2
 801206a:	b29b      	uxth	r3, r3
 801206c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801206e:	893b      	ldrh	r3, [r7, #8]
 8012070:	461a      	mov	r2, r3
 8012072:	68f9      	ldr	r1, [r7, #12]
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f000 fa24 	bl	80124c2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	88db      	ldrh	r3, [r3, #6]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d104      	bne.n	801208c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 fa7b 	bl	801257e <USBD_CtlSendStatus>
 8012088:	e000      	b.n	801208c <USBD_GetDescriptor+0x2c8>
    return;
 801208a:	bf00      	nop
    }
  }
}
 801208c:	3710      	adds	r7, #16
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop

08012094 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	889b      	ldrh	r3, [r3, #4]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d130      	bne.n	8012108 <USBD_SetAddress+0x74>
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	88db      	ldrh	r3, [r3, #6]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d12c      	bne.n	8012108 <USBD_SetAddress+0x74>
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	885b      	ldrh	r3, [r3, #2]
 80120b2:	2b7f      	cmp	r3, #127	; 0x7f
 80120b4:	d828      	bhi.n	8012108 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	885b      	ldrh	r3, [r3, #2]
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120c8:	2b03      	cmp	r3, #3
 80120ca:	d104      	bne.n	80120d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80120cc:	6839      	ldr	r1, [r7, #0]
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 f98c 	bl	80123ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120d4:	e01d      	b.n	8012112 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	7bfa      	ldrb	r2, [r7, #15]
 80120da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80120de:	7bfb      	ldrb	r3, [r7, #15]
 80120e0:	4619      	mov	r1, r3
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f003 fc1b 	bl	801591e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 fa48 	bl	801257e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80120ee:	7bfb      	ldrb	r3, [r7, #15]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d004      	beq.n	80120fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2202      	movs	r2, #2
 80120f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120fc:	e009      	b.n	8012112 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2201      	movs	r2, #1
 8012102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012106:	e004      	b.n	8012112 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012108:	6839      	ldr	r1, [r7, #0]
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f000 f96e 	bl	80123ec <USBD_CtlError>
  }
}
 8012110:	bf00      	nop
 8012112:	bf00      	nop
 8012114:	3710      	adds	r7, #16
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
	...

0801211c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	885b      	ldrh	r3, [r3, #2]
 801212a:	b2da      	uxtb	r2, r3
 801212c:	4b41      	ldr	r3, [pc, #260]	; (8012234 <USBD_SetConfig+0x118>)
 801212e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012130:	4b40      	ldr	r3, [pc, #256]	; (8012234 <USBD_SetConfig+0x118>)
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	2b01      	cmp	r3, #1
 8012136:	d904      	bls.n	8012142 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8012138:	6839      	ldr	r1, [r7, #0]
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f000 f956 	bl	80123ec <USBD_CtlError>
 8012140:	e075      	b.n	801222e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012148:	2b02      	cmp	r3, #2
 801214a:	d002      	beq.n	8012152 <USBD_SetConfig+0x36>
 801214c:	2b03      	cmp	r3, #3
 801214e:	d023      	beq.n	8012198 <USBD_SetConfig+0x7c>
 8012150:	e062      	b.n	8012218 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8012152:	4b38      	ldr	r3, [pc, #224]	; (8012234 <USBD_SetConfig+0x118>)
 8012154:	781b      	ldrb	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d01a      	beq.n	8012190 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801215a:	4b36      	ldr	r3, [pc, #216]	; (8012234 <USBD_SetConfig+0x118>)
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	461a      	mov	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2203      	movs	r2, #3
 8012168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801216c:	4b31      	ldr	r3, [pc, #196]	; (8012234 <USBD_SetConfig+0x118>)
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	4619      	mov	r1, r3
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f7ff f9e4 	bl	8011540 <USBD_SetClassConfig>
 8012178:	4603      	mov	r3, r0
 801217a:	2b02      	cmp	r3, #2
 801217c:	d104      	bne.n	8012188 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801217e:	6839      	ldr	r1, [r7, #0]
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f000 f933 	bl	80123ec <USBD_CtlError>
            return;
 8012186:	e052      	b.n	801222e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 f9f8 	bl	801257e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801218e:	e04e      	b.n	801222e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 f9f4 	bl	801257e <USBD_CtlSendStatus>
        break;
 8012196:	e04a      	b.n	801222e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8012198:	4b26      	ldr	r3, [pc, #152]	; (8012234 <USBD_SetConfig+0x118>)
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d112      	bne.n	80121c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2202      	movs	r2, #2
 80121a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80121a8:	4b22      	ldr	r3, [pc, #136]	; (8012234 <USBD_SetConfig+0x118>)
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	461a      	mov	r2, r3
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80121b2:	4b20      	ldr	r3, [pc, #128]	; (8012234 <USBD_SetConfig+0x118>)
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	4619      	mov	r1, r3
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f7ff f9e0 	bl	801157e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f000 f9dd 	bl	801257e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80121c4:	e033      	b.n	801222e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80121c6:	4b1b      	ldr	r3, [pc, #108]	; (8012234 <USBD_SetConfig+0x118>)
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	461a      	mov	r2, r3
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d01d      	beq.n	8012210 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	685b      	ldr	r3, [r3, #4]
 80121d8:	b2db      	uxtb	r3, r3
 80121da:	4619      	mov	r1, r3
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f7ff f9ce 	bl	801157e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80121e2:	4b14      	ldr	r3, [pc, #80]	; (8012234 <USBD_SetConfig+0x118>)
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	461a      	mov	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80121ec:	4b11      	ldr	r3, [pc, #68]	; (8012234 <USBD_SetConfig+0x118>)
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	4619      	mov	r1, r3
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f7ff f9a4 	bl	8011540 <USBD_SetClassConfig>
 80121f8:	4603      	mov	r3, r0
 80121fa:	2b02      	cmp	r3, #2
 80121fc:	d104      	bne.n	8012208 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80121fe:	6839      	ldr	r1, [r7, #0]
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f000 f8f3 	bl	80123ec <USBD_CtlError>
            return;
 8012206:	e012      	b.n	801222e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f000 f9b8 	bl	801257e <USBD_CtlSendStatus>
        break;
 801220e:	e00e      	b.n	801222e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f000 f9b4 	bl	801257e <USBD_CtlSendStatus>
        break;
 8012216:	e00a      	b.n	801222e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8012218:	6839      	ldr	r1, [r7, #0]
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 f8e6 	bl	80123ec <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8012220:	4b04      	ldr	r3, [pc, #16]	; (8012234 <USBD_SetConfig+0x118>)
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	4619      	mov	r1, r3
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f7ff f9a9 	bl	801157e <USBD_ClrClassConfig>
        break;
 801222c:	bf00      	nop
    }
  }
}
 801222e:	3708      	adds	r7, #8
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	200026a4 	.word	0x200026a4

08012238 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b082      	sub	sp, #8
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	88db      	ldrh	r3, [r3, #6]
 8012246:	2b01      	cmp	r3, #1
 8012248:	d004      	beq.n	8012254 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801224a:	6839      	ldr	r1, [r7, #0]
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f000 f8cd 	bl	80123ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012252:	e022      	b.n	801229a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801225a:	2b02      	cmp	r3, #2
 801225c:	dc02      	bgt.n	8012264 <USBD_GetConfig+0x2c>
 801225e:	2b00      	cmp	r3, #0
 8012260:	dc03      	bgt.n	801226a <USBD_GetConfig+0x32>
 8012262:	e015      	b.n	8012290 <USBD_GetConfig+0x58>
 8012264:	2b03      	cmp	r3, #3
 8012266:	d00b      	beq.n	8012280 <USBD_GetConfig+0x48>
 8012268:	e012      	b.n	8012290 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2200      	movs	r2, #0
 801226e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	3308      	adds	r3, #8
 8012274:	2201      	movs	r2, #1
 8012276:	4619      	mov	r1, r3
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f000 f922 	bl	80124c2 <USBD_CtlSendData>
        break;
 801227e:	e00c      	b.n	801229a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	3304      	adds	r3, #4
 8012284:	2201      	movs	r2, #1
 8012286:	4619      	mov	r1, r3
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 f91a 	bl	80124c2 <USBD_CtlSendData>
        break;
 801228e:	e004      	b.n	801229a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8012290:	6839      	ldr	r1, [r7, #0]
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f000 f8aa 	bl	80123ec <USBD_CtlError>
        break;
 8012298:	bf00      	nop
}
 801229a:	bf00      	nop
 801229c:	3708      	adds	r7, #8
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122a2:	b580      	push	{r7, lr}
 80122a4:	b082      	sub	sp, #8
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
 80122aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122b2:	3b01      	subs	r3, #1
 80122b4:	2b02      	cmp	r3, #2
 80122b6:	d81e      	bhi.n	80122f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	88db      	ldrh	r3, [r3, #6]
 80122bc:	2b02      	cmp	r3, #2
 80122be:	d004      	beq.n	80122ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80122c0:	6839      	ldr	r1, [r7, #0]
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f000 f892 	bl	80123ec <USBD_CtlError>
        break;
 80122c8:	e01a      	b.n	8012300 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2201      	movs	r2, #1
 80122ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d005      	beq.n	80122e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	68db      	ldr	r3, [r3, #12]
 80122de:	f043 0202 	orr.w	r2, r3, #2
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	330c      	adds	r3, #12
 80122ea:	2202      	movs	r2, #2
 80122ec:	4619      	mov	r1, r3
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f000 f8e7 	bl	80124c2 <USBD_CtlSendData>
      break;
 80122f4:	e004      	b.n	8012300 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80122f6:	6839      	ldr	r1, [r7, #0]
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f000 f877 	bl	80123ec <USBD_CtlError>
      break;
 80122fe:	bf00      	nop
  }
}
 8012300:	bf00      	nop
 8012302:	3708      	adds	r7, #8
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	885b      	ldrh	r3, [r3, #2]
 8012316:	2b01      	cmp	r3, #1
 8012318:	d106      	bne.n	8012328 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2201      	movs	r2, #1
 801231e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f000 f92b 	bl	801257e <USBD_CtlSendStatus>
  }
}
 8012328:	bf00      	nop
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012340:	3b01      	subs	r3, #1
 8012342:	2b02      	cmp	r3, #2
 8012344:	d80b      	bhi.n	801235e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	885b      	ldrh	r3, [r3, #2]
 801234a:	2b01      	cmp	r3, #1
 801234c:	d10c      	bne.n	8012368 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2200      	movs	r2, #0
 8012352:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f000 f911 	bl	801257e <USBD_CtlSendStatus>
      }
      break;
 801235c:	e004      	b.n	8012368 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801235e:	6839      	ldr	r1, [r7, #0]
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f000 f843 	bl	80123ec <USBD_CtlError>
      break;
 8012366:	e000      	b.n	801236a <USBD_ClrFeature+0x3a>
      break;
 8012368:	bf00      	nop
  }
}
 801236a:	bf00      	nop
 801236c:	3708      	adds	r7, #8
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}

08012372 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012372:	b480      	push	{r7}
 8012374:	b083      	sub	sp, #12
 8012376:	af00      	add	r7, sp, #0
 8012378:	6078      	str	r0, [r7, #4]
 801237a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	781a      	ldrb	r2, [r3, #0]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	785a      	ldrb	r2, [r3, #1]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	3302      	adds	r3, #2
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	b29a      	uxth	r2, r3
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	3303      	adds	r3, #3
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	b29b      	uxth	r3, r3
 801239c:	021b      	lsls	r3, r3, #8
 801239e:	b29b      	uxth	r3, r3
 80123a0:	4413      	add	r3, r2
 80123a2:	b29a      	uxth	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	3304      	adds	r3, #4
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	b29a      	uxth	r2, r3
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	3305      	adds	r3, #5
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	b29b      	uxth	r3, r3
 80123b8:	021b      	lsls	r3, r3, #8
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	4413      	add	r3, r2
 80123be:	b29a      	uxth	r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	3306      	adds	r3, #6
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	3307      	adds	r3, #7
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	021b      	lsls	r3, r3, #8
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	4413      	add	r3, r2
 80123da:	b29a      	uxth	r2, r3
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	80da      	strh	r2, [r3, #6]

}
 80123e0:	bf00      	nop
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80123f6:	2180      	movs	r1, #128	; 0x80
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f003 fa25 	bl	8015848 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80123fe:	2100      	movs	r1, #0
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f003 fa21 	bl	8015848 <USBD_LL_StallEP>
}
 8012406:	bf00      	nop
 8012408:	3708      	adds	r7, #8
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}

0801240e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801240e:	b580      	push	{r7, lr}
 8012410:	b086      	sub	sp, #24
 8012412:	af00      	add	r7, sp, #0
 8012414:	60f8      	str	r0, [r7, #12]
 8012416:	60b9      	str	r1, [r7, #8]
 8012418:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801241a:	2300      	movs	r3, #0
 801241c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d032      	beq.n	801248a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8012424:	68f8      	ldr	r0, [r7, #12]
 8012426:	f000 f834 	bl	8012492 <USBD_GetLen>
 801242a:	4603      	mov	r3, r0
 801242c:	3301      	adds	r3, #1
 801242e:	b29b      	uxth	r3, r3
 8012430:	005b      	lsls	r3, r3, #1
 8012432:	b29a      	uxth	r2, r3
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8012438:	7dfb      	ldrb	r3, [r7, #23]
 801243a:	1c5a      	adds	r2, r3, #1
 801243c:	75fa      	strb	r2, [r7, #23]
 801243e:	461a      	mov	r2, r3
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	4413      	add	r3, r2
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	7812      	ldrb	r2, [r2, #0]
 8012448:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801244a:	7dfb      	ldrb	r3, [r7, #23]
 801244c:	1c5a      	adds	r2, r3, #1
 801244e:	75fa      	strb	r2, [r7, #23]
 8012450:	461a      	mov	r2, r3
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	4413      	add	r3, r2
 8012456:	2203      	movs	r2, #3
 8012458:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801245a:	e012      	b.n	8012482 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	1c5a      	adds	r2, r3, #1
 8012460:	60fa      	str	r2, [r7, #12]
 8012462:	7dfa      	ldrb	r2, [r7, #23]
 8012464:	1c51      	adds	r1, r2, #1
 8012466:	75f9      	strb	r1, [r7, #23]
 8012468:	4611      	mov	r1, r2
 801246a:	68ba      	ldr	r2, [r7, #8]
 801246c:	440a      	add	r2, r1
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8012472:	7dfb      	ldrb	r3, [r7, #23]
 8012474:	1c5a      	adds	r2, r3, #1
 8012476:	75fa      	strb	r2, [r7, #23]
 8012478:	461a      	mov	r2, r3
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	4413      	add	r3, r2
 801247e:	2200      	movs	r2, #0
 8012480:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d1e8      	bne.n	801245c <USBD_GetString+0x4e>
    }
  }
}
 801248a:	bf00      	nop
 801248c:	3718      	adds	r7, #24
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012492:	b480      	push	{r7}
 8012494:	b085      	sub	sp, #20
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801249a:	2300      	movs	r3, #0
 801249c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801249e:	e005      	b.n	80124ac <USBD_GetLen+0x1a>
  {
    len++;
 80124a0:	7bfb      	ldrb	r3, [r7, #15]
 80124a2:	3301      	adds	r3, #1
 80124a4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	3301      	adds	r3, #1
 80124aa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d1f5      	bne.n	80124a0 <USBD_GetLen+0xe>
  }

  return len;
 80124b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3714      	adds	r7, #20
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b084      	sub	sp, #16
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	60f8      	str	r0, [r7, #12]
 80124ca:	60b9      	str	r1, [r7, #8]
 80124cc:	4613      	mov	r3, r2
 80124ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2202      	movs	r2, #2
 80124d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80124d8:	88fa      	ldrh	r2, [r7, #6]
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80124de:	88fa      	ldrh	r2, [r7, #6]
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80124e4:	88fb      	ldrh	r3, [r7, #6]
 80124e6:	68ba      	ldr	r2, [r7, #8]
 80124e8:	2100      	movs	r1, #0
 80124ea:	68f8      	ldr	r0, [r7, #12]
 80124ec:	f003 fa36 	bl	801595c <USBD_LL_Transmit>

  return USBD_OK;
 80124f0:	2300      	movs	r3, #0
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3710      	adds	r7, #16
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}

080124fa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80124fa:	b580      	push	{r7, lr}
 80124fc:	b084      	sub	sp, #16
 80124fe:	af00      	add	r7, sp, #0
 8012500:	60f8      	str	r0, [r7, #12]
 8012502:	60b9      	str	r1, [r7, #8]
 8012504:	4613      	mov	r3, r2
 8012506:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012508:	88fb      	ldrh	r3, [r7, #6]
 801250a:	68ba      	ldr	r2, [r7, #8]
 801250c:	2100      	movs	r1, #0
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f003 fa24 	bl	801595c <USBD_LL_Transmit>

  return USBD_OK;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	3710      	adds	r7, #16
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}

0801251e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801251e:	b580      	push	{r7, lr}
 8012520:	b084      	sub	sp, #16
 8012522:	af00      	add	r7, sp, #0
 8012524:	60f8      	str	r0, [r7, #12]
 8012526:	60b9      	str	r1, [r7, #8]
 8012528:	4613      	mov	r3, r2
 801252a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2203      	movs	r2, #3
 8012530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012534:	88fa      	ldrh	r2, [r7, #6]
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801253c:	88fa      	ldrh	r2, [r7, #6]
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012544:	88fb      	ldrh	r3, [r7, #6]
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	2100      	movs	r1, #0
 801254a:	68f8      	ldr	r0, [r7, #12]
 801254c:	f003 fa29 	bl	80159a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012550:	2300      	movs	r3, #0
}
 8012552:	4618      	mov	r0, r3
 8012554:	3710      	adds	r7, #16
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}

0801255a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801255a:	b580      	push	{r7, lr}
 801255c:	b084      	sub	sp, #16
 801255e:	af00      	add	r7, sp, #0
 8012560:	60f8      	str	r0, [r7, #12]
 8012562:	60b9      	str	r1, [r7, #8]
 8012564:	4613      	mov	r3, r2
 8012566:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012568:	88fb      	ldrh	r3, [r7, #6]
 801256a:	68ba      	ldr	r2, [r7, #8]
 801256c:	2100      	movs	r1, #0
 801256e:	68f8      	ldr	r0, [r7, #12]
 8012570:	f003 fa17 	bl	80159a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012574:	2300      	movs	r3, #0
}
 8012576:	4618      	mov	r0, r3
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801257e:	b580      	push	{r7, lr}
 8012580:	b082      	sub	sp, #8
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2204      	movs	r2, #4
 801258a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801258e:	2300      	movs	r3, #0
 8012590:	2200      	movs	r2, #0
 8012592:	2100      	movs	r1, #0
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f003 f9e1 	bl	801595c <USBD_LL_Transmit>

  return USBD_OK;
 801259a:	2300      	movs	r3, #0
}
 801259c:	4618      	mov	r0, r3
 801259e:	3708      	adds	r7, #8
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}

080125a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2205      	movs	r2, #5
 80125b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80125b4:	2300      	movs	r3, #0
 80125b6:	2200      	movs	r2, #0
 80125b8:	2100      	movs	r1, #0
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f003 f9f1 	bl	80159a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125c0:	2300      	movs	r3, #0
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	3708      	adds	r7, #8
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
	...

080125cc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80125cc:	b480      	push	{r7}
 80125ce:	b085      	sub	sp, #20
 80125d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125d2:	f3ef 8305 	mrs	r3, IPSR
 80125d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80125d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d10f      	bne.n	80125fe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125de:	f3ef 8310 	mrs	r3, PRIMASK
 80125e2:	607b      	str	r3, [r7, #4]
  return(result);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d109      	bne.n	80125fe <osKernelInitialize+0x32>
 80125ea:	4b11      	ldr	r3, [pc, #68]	; (8012630 <osKernelInitialize+0x64>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2b02      	cmp	r3, #2
 80125f0:	d109      	bne.n	8012606 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80125f2:	f3ef 8311 	mrs	r3, BASEPRI
 80125f6:	603b      	str	r3, [r7, #0]
  return(result);
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d003      	beq.n	8012606 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80125fe:	f06f 0305 	mvn.w	r3, #5
 8012602:	60fb      	str	r3, [r7, #12]
 8012604:	e00c      	b.n	8012620 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012606:	4b0a      	ldr	r3, [pc, #40]	; (8012630 <osKernelInitialize+0x64>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d105      	bne.n	801261a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 801260e:	4b08      	ldr	r3, [pc, #32]	; (8012630 <osKernelInitialize+0x64>)
 8012610:	2201      	movs	r2, #1
 8012612:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012614:	2300      	movs	r3, #0
 8012616:	60fb      	str	r3, [r7, #12]
 8012618:	e002      	b.n	8012620 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801261a:	f04f 33ff 	mov.w	r3, #4294967295
 801261e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012620:	68fb      	ldr	r3, [r7, #12]
}
 8012622:	4618      	mov	r0, r3
 8012624:	3714      	adds	r7, #20
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop
 8012630:	200026a8 	.word	0x200026a8

08012634 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801263a:	f3ef 8305 	mrs	r3, IPSR
 801263e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012640:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012642:	2b00      	cmp	r3, #0
 8012644:	d10f      	bne.n	8012666 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012646:	f3ef 8310 	mrs	r3, PRIMASK
 801264a:	607b      	str	r3, [r7, #4]
  return(result);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d109      	bne.n	8012666 <osKernelStart+0x32>
 8012652:	4b11      	ldr	r3, [pc, #68]	; (8012698 <osKernelStart+0x64>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	2b02      	cmp	r3, #2
 8012658:	d109      	bne.n	801266e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801265a:	f3ef 8311 	mrs	r3, BASEPRI
 801265e:	603b      	str	r3, [r7, #0]
  return(result);
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d003      	beq.n	801266e <osKernelStart+0x3a>
    stat = osErrorISR;
 8012666:	f06f 0305 	mvn.w	r3, #5
 801266a:	60fb      	str	r3, [r7, #12]
 801266c:	e00e      	b.n	801268c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 801266e:	4b0a      	ldr	r3, [pc, #40]	; (8012698 <osKernelStart+0x64>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2b01      	cmp	r3, #1
 8012674:	d107      	bne.n	8012686 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8012676:	4b08      	ldr	r3, [pc, #32]	; (8012698 <osKernelStart+0x64>)
 8012678:	2202      	movs	r2, #2
 801267a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 801267c:	f001 fb1a 	bl	8013cb4 <vTaskStartScheduler>
      stat = osOK;
 8012680:	2300      	movs	r3, #0
 8012682:	60fb      	str	r3, [r7, #12]
 8012684:	e002      	b.n	801268c <osKernelStart+0x58>
    } else {
      stat = osError;
 8012686:	f04f 33ff 	mov.w	r3, #4294967295
 801268a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801268c:	68fb      	ldr	r3, [r7, #12]
}
 801268e:	4618      	mov	r0, r3
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	200026a8 	.word	0x200026a8

0801269c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801269c:	b580      	push	{r7, lr}
 801269e:	b092      	sub	sp, #72	; 0x48
 80126a0:	af04      	add	r7, sp, #16
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80126a8:	2300      	movs	r3, #0
 80126aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126ac:	f3ef 8305 	mrs	r3, IPSR
 80126b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80126b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f040 8094 	bne.w	80127e2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126ba:	f3ef 8310 	mrs	r3, PRIMASK
 80126be:	623b      	str	r3, [r7, #32]
  return(result);
 80126c0:	6a3b      	ldr	r3, [r7, #32]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	f040 808d 	bne.w	80127e2 <osThreadNew+0x146>
 80126c8:	4b48      	ldr	r3, [pc, #288]	; (80127ec <osThreadNew+0x150>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b02      	cmp	r3, #2
 80126ce:	d106      	bne.n	80126de <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80126d0:	f3ef 8311 	mrs	r3, BASEPRI
 80126d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80126d6:	69fb      	ldr	r3, [r7, #28]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f040 8082 	bne.w	80127e2 <osThreadNew+0x146>
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d07e      	beq.n	80127e2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80126e4:	2380      	movs	r3, #128	; 0x80
 80126e6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80126e8:	2318      	movs	r3, #24
 80126ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80126ec:	2300      	movs	r3, #0
 80126ee:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80126f0:	f107 031b 	add.w	r3, r7, #27
 80126f4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80126f6:	f04f 33ff 	mov.w	r3, #4294967295
 80126fa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d045      	beq.n	801278e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d002      	beq.n	8012710 <osThreadNew+0x74>
        name = attr->name;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	699b      	ldr	r3, [r3, #24]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d002      	beq.n	801271e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	699b      	ldr	r3, [r3, #24]
 801271c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012720:	2b00      	cmp	r3, #0
 8012722:	d008      	beq.n	8012736 <osThreadNew+0x9a>
 8012724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012726:	2b38      	cmp	r3, #56	; 0x38
 8012728:	d805      	bhi.n	8012736 <osThreadNew+0x9a>
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	f003 0301 	and.w	r3, r3, #1
 8012732:	2b00      	cmp	r3, #0
 8012734:	d001      	beq.n	801273a <osThreadNew+0x9e>
        return (NULL);
 8012736:	2300      	movs	r3, #0
 8012738:	e054      	b.n	80127e4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	695b      	ldr	r3, [r3, #20]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d003      	beq.n	801274a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	695b      	ldr	r3, [r3, #20]
 8012746:	089b      	lsrs	r3, r3, #2
 8012748:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	689b      	ldr	r3, [r3, #8]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d00e      	beq.n	8012770 <osThreadNew+0xd4>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	68db      	ldr	r3, [r3, #12]
 8012756:	2b5f      	cmp	r3, #95	; 0x5f
 8012758:	d90a      	bls.n	8012770 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801275e:	2b00      	cmp	r3, #0
 8012760:	d006      	beq.n	8012770 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	695b      	ldr	r3, [r3, #20]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d002      	beq.n	8012770 <osThreadNew+0xd4>
        mem = 1;
 801276a:	2301      	movs	r3, #1
 801276c:	62bb      	str	r3, [r7, #40]	; 0x28
 801276e:	e010      	b.n	8012792 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	689b      	ldr	r3, [r3, #8]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d10c      	bne.n	8012792 <osThreadNew+0xf6>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d108      	bne.n	8012792 <osThreadNew+0xf6>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	691b      	ldr	r3, [r3, #16]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d104      	bne.n	8012792 <osThreadNew+0xf6>
          mem = 0;
 8012788:	2300      	movs	r3, #0
 801278a:	62bb      	str	r3, [r7, #40]	; 0x28
 801278c:	e001      	b.n	8012792 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 801278e:	2300      	movs	r3, #0
 8012790:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8012792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012794:	2b01      	cmp	r3, #1
 8012796:	d110      	bne.n	80127ba <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801279c:	687a      	ldr	r2, [r7, #4]
 801279e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80127a0:	9202      	str	r2, [sp, #8]
 80127a2:	9301      	str	r3, [sp, #4]
 80127a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a6:	9300      	str	r3, [sp, #0]
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80127ae:	68f8      	ldr	r0, [r7, #12]
 80127b0:	f001 f8b0 	bl	8013914 <xTaskCreateStatic>
 80127b4:	4603      	mov	r3, r0
 80127b6:	617b      	str	r3, [r7, #20]
 80127b8:	e013      	b.n	80127e2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80127ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d110      	bne.n	80127e2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80127c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c2:	b29a      	uxth	r2, r3
 80127c4:	f107 0314 	add.w	r3, r7, #20
 80127c8:	9301      	str	r3, [sp, #4]
 80127ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127cc:	9300      	str	r3, [sp, #0]
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80127d2:	68f8      	ldr	r0, [r7, #12]
 80127d4:	f001 f8fa 	bl	80139cc <xTaskCreate>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b01      	cmp	r3, #1
 80127dc:	d001      	beq.n	80127e2 <osThreadNew+0x146>
          hTask = NULL;
 80127de:	2300      	movs	r3, #0
 80127e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80127e2:	697b      	ldr	r3, [r7, #20]
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3738      	adds	r7, #56	; 0x38
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	200026a8 	.word	0x200026a8

080127f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b086      	sub	sp, #24
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127f8:	f3ef 8305 	mrs	r3, IPSR
 80127fc:	613b      	str	r3, [r7, #16]
  return(result);
 80127fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012800:	2b00      	cmp	r3, #0
 8012802:	d10f      	bne.n	8012824 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012804:	f3ef 8310 	mrs	r3, PRIMASK
 8012808:	60fb      	str	r3, [r7, #12]
  return(result);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d109      	bne.n	8012824 <osDelay+0x34>
 8012810:	4b0d      	ldr	r3, [pc, #52]	; (8012848 <osDelay+0x58>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	2b02      	cmp	r3, #2
 8012816:	d109      	bne.n	801282c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012818:	f3ef 8311 	mrs	r3, BASEPRI
 801281c:	60bb      	str	r3, [r7, #8]
  return(result);
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d003      	beq.n	801282c <osDelay+0x3c>
    stat = osErrorISR;
 8012824:	f06f 0305 	mvn.w	r3, #5
 8012828:	617b      	str	r3, [r7, #20]
 801282a:	e007      	b.n	801283c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801282c:	2300      	movs	r3, #0
 801282e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d002      	beq.n	801283c <osDelay+0x4c>
      vTaskDelay(ticks);
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f001 fa08 	bl	8013c4c <vTaskDelay>
    }
  }

  return (stat);
 801283c:	697b      	ldr	r3, [r7, #20]
}
 801283e:	4618      	mov	r0, r3
 8012840:	3718      	adds	r7, #24
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	200026a8 	.word	0x200026a8

0801284c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801284c:	b580      	push	{r7, lr}
 801284e:	b08c      	sub	sp, #48	; 0x30
 8012850:	af02      	add	r7, sp, #8
 8012852:	60f8      	str	r0, [r7, #12]
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012858:	2300      	movs	r3, #0
 801285a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801285c:	f3ef 8305 	mrs	r3, IPSR
 8012860:	61bb      	str	r3, [r7, #24]
  return(result);
 8012862:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012864:	2b00      	cmp	r3, #0
 8012866:	d16f      	bne.n	8012948 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012868:	f3ef 8310 	mrs	r3, PRIMASK
 801286c:	617b      	str	r3, [r7, #20]
  return(result);
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d169      	bne.n	8012948 <osMessageQueueNew+0xfc>
 8012874:	4b37      	ldr	r3, [pc, #220]	; (8012954 <osMessageQueueNew+0x108>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b02      	cmp	r3, #2
 801287a:	d105      	bne.n	8012888 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801287c:	f3ef 8311 	mrs	r3, BASEPRI
 8012880:	613b      	str	r3, [r7, #16]
  return(result);
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d15f      	bne.n	8012948 <osMessageQueueNew+0xfc>
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d05c      	beq.n	8012948 <osMessageQueueNew+0xfc>
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d059      	beq.n	8012948 <osMessageQueueNew+0xfc>
    mem = -1;
 8012894:	f04f 33ff 	mov.w	r3, #4294967295
 8012898:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d029      	beq.n	80128f4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	689b      	ldr	r3, [r3, #8]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d012      	beq.n	80128ce <osMessageQueueNew+0x82>
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	68db      	ldr	r3, [r3, #12]
 80128ac:	2b4f      	cmp	r3, #79	; 0x4f
 80128ae:	d90e      	bls.n	80128ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d00a      	beq.n	80128ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	695a      	ldr	r2, [r3, #20]
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	68b9      	ldr	r1, [r7, #8]
 80128c0:	fb01 f303 	mul.w	r3, r1, r3
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d302      	bcc.n	80128ce <osMessageQueueNew+0x82>
        mem = 1;
 80128c8:	2301      	movs	r3, #1
 80128ca:	623b      	str	r3, [r7, #32]
 80128cc:	e014      	b.n	80128f8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	689b      	ldr	r3, [r3, #8]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d110      	bne.n	80128f8 <osMessageQueueNew+0xac>
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d10c      	bne.n	80128f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d108      	bne.n	80128f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	695b      	ldr	r3, [r3, #20]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d104      	bne.n	80128f8 <osMessageQueueNew+0xac>
          mem = 0;
 80128ee:	2300      	movs	r3, #0
 80128f0:	623b      	str	r3, [r7, #32]
 80128f2:	e001      	b.n	80128f8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80128f4:	2300      	movs	r3, #0
 80128f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80128f8:	6a3b      	ldr	r3, [r7, #32]
 80128fa:	2b01      	cmp	r3, #1
 80128fc:	d10b      	bne.n	8012916 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	691a      	ldr	r2, [r3, #16]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	689b      	ldr	r3, [r3, #8]
 8012906:	2100      	movs	r1, #0
 8012908:	9100      	str	r1, [sp, #0]
 801290a:	68b9      	ldr	r1, [r7, #8]
 801290c:	68f8      	ldr	r0, [r7, #12]
 801290e:	f000 fa8b 	bl	8012e28 <xQueueGenericCreateStatic>
 8012912:	6278      	str	r0, [r7, #36]	; 0x24
 8012914:	e008      	b.n	8012928 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8012916:	6a3b      	ldr	r3, [r7, #32]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d105      	bne.n	8012928 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 801291c:	2200      	movs	r2, #0
 801291e:	68b9      	ldr	r1, [r7, #8]
 8012920:	68f8      	ldr	r0, [r7, #12]
 8012922:	f000 faf8 	bl	8012f16 <xQueueGenericCreate>
 8012926:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292a:	2b00      	cmp	r3, #0
 801292c:	d00c      	beq.n	8012948 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d003      	beq.n	801293c <osMessageQueueNew+0xf0>
        name = attr->name;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	61fb      	str	r3, [r7, #28]
 801293a:	e001      	b.n	8012940 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 801293c:	2300      	movs	r3, #0
 801293e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8012940:	69f9      	ldr	r1, [r7, #28]
 8012942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012944:	f000 ff88 	bl	8013858 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801294a:	4618      	mov	r0, r3
 801294c:	3728      	adds	r7, #40	; 0x28
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	bf00      	nop
 8012954:	200026a8 	.word	0x200026a8

08012958 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012958:	b580      	push	{r7, lr}
 801295a:	b08a      	sub	sp, #40	; 0x28
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	603b      	str	r3, [r7, #0]
 8012964:	4613      	mov	r3, r2
 8012966:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801296c:	2300      	movs	r3, #0
 801296e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012970:	f3ef 8305 	mrs	r3, IPSR
 8012974:	61fb      	str	r3, [r7, #28]
  return(result);
 8012976:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012978:	2b00      	cmp	r3, #0
 801297a:	d10f      	bne.n	801299c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801297c:	f3ef 8310 	mrs	r3, PRIMASK
 8012980:	61bb      	str	r3, [r7, #24]
  return(result);
 8012982:	69bb      	ldr	r3, [r7, #24]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d109      	bne.n	801299c <osMessageQueuePut+0x44>
 8012988:	4b2b      	ldr	r3, [pc, #172]	; (8012a38 <osMessageQueuePut+0xe0>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	2b02      	cmp	r3, #2
 801298e:	d12e      	bne.n	80129ee <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012990:	f3ef 8311 	mrs	r3, BASEPRI
 8012994:	617b      	str	r3, [r7, #20]
  return(result);
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d028      	beq.n	80129ee <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801299c:	6a3b      	ldr	r3, [r7, #32]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d005      	beq.n	80129ae <osMessageQueuePut+0x56>
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d002      	beq.n	80129ae <osMessageQueuePut+0x56>
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d003      	beq.n	80129b6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80129ae:	f06f 0303 	mvn.w	r3, #3
 80129b2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80129b4:	e039      	b.n	8012a2a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80129b6:	2300      	movs	r3, #0
 80129b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80129ba:	f107 0210 	add.w	r2, r7, #16
 80129be:	2300      	movs	r3, #0
 80129c0:	68b9      	ldr	r1, [r7, #8]
 80129c2:	6a38      	ldr	r0, [r7, #32]
 80129c4:	f000 fc06 	bl	80131d4 <xQueueGenericSendFromISR>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d003      	beq.n	80129d6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80129ce:	f06f 0302 	mvn.w	r3, #2
 80129d2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80129d4:	e029      	b.n	8012a2a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d026      	beq.n	8012a2a <osMessageQueuePut+0xd2>
 80129dc:	4b17      	ldr	r3, [pc, #92]	; (8012a3c <osMessageQueuePut+0xe4>)
 80129de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129e2:	601a      	str	r2, [r3, #0]
 80129e4:	f3bf 8f4f 	dsb	sy
 80129e8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80129ec:	e01d      	b.n	8012a2a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80129ee:	6a3b      	ldr	r3, [r7, #32]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d002      	beq.n	80129fa <osMessageQueuePut+0xa2>
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d103      	bne.n	8012a02 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80129fa:	f06f 0303 	mvn.w	r3, #3
 80129fe:	627b      	str	r3, [r7, #36]	; 0x24
 8012a00:	e014      	b.n	8012a2c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012a02:	2300      	movs	r3, #0
 8012a04:	683a      	ldr	r2, [r7, #0]
 8012a06:	68b9      	ldr	r1, [r7, #8]
 8012a08:	6a38      	ldr	r0, [r7, #32]
 8012a0a:	f000 fae5 	bl	8012fd8 <xQueueGenericSend>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d00b      	beq.n	8012a2c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d003      	beq.n	8012a22 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012a1a:	f06f 0301 	mvn.w	r3, #1
 8012a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8012a20:	e004      	b.n	8012a2c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8012a22:	f06f 0302 	mvn.w	r3, #2
 8012a26:	627b      	str	r3, [r7, #36]	; 0x24
 8012a28:	e000      	b.n	8012a2c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012a2a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	3728      	adds	r7, #40	; 0x28
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}
 8012a36:	bf00      	nop
 8012a38:	200026a8 	.word	0x200026a8
 8012a3c:	e000ed04 	.word	0xe000ed04

08012a40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b08a      	sub	sp, #40	; 0x28
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	60f8      	str	r0, [r7, #12]
 8012a48:	60b9      	str	r1, [r7, #8]
 8012a4a:	607a      	str	r2, [r7, #4]
 8012a4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012a52:	2300      	movs	r3, #0
 8012a54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a56:	f3ef 8305 	mrs	r3, IPSR
 8012a5a:	61fb      	str	r3, [r7, #28]
  return(result);
 8012a5c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d10f      	bne.n	8012a82 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a62:	f3ef 8310 	mrs	r3, PRIMASK
 8012a66:	61bb      	str	r3, [r7, #24]
  return(result);
 8012a68:	69bb      	ldr	r3, [r7, #24]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d109      	bne.n	8012a82 <osMessageQueueGet+0x42>
 8012a6e:	4b2b      	ldr	r3, [pc, #172]	; (8012b1c <osMessageQueueGet+0xdc>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2b02      	cmp	r3, #2
 8012a74:	d12e      	bne.n	8012ad4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012a76:	f3ef 8311 	mrs	r3, BASEPRI
 8012a7a:	617b      	str	r3, [r7, #20]
  return(result);
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d028      	beq.n	8012ad4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012a82:	6a3b      	ldr	r3, [r7, #32]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d005      	beq.n	8012a94 <osMessageQueueGet+0x54>
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d002      	beq.n	8012a94 <osMessageQueueGet+0x54>
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d003      	beq.n	8012a9c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012a94:	f06f 0303 	mvn.w	r3, #3
 8012a98:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012a9a:	e038      	b.n	8012b0e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012aa0:	f107 0310 	add.w	r3, r7, #16
 8012aa4:	461a      	mov	r2, r3
 8012aa6:	68b9      	ldr	r1, [r7, #8]
 8012aa8:	6a38      	ldr	r0, [r7, #32]
 8012aaa:	f000 fd0b 	bl	80134c4 <xQueueReceiveFromISR>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b01      	cmp	r3, #1
 8012ab2:	d003      	beq.n	8012abc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012ab4:	f06f 0302 	mvn.w	r3, #2
 8012ab8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012aba:	e028      	b.n	8012b0e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012abc:	693b      	ldr	r3, [r7, #16]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d025      	beq.n	8012b0e <osMessageQueueGet+0xce>
 8012ac2:	4b17      	ldr	r3, [pc, #92]	; (8012b20 <osMessageQueueGet+0xe0>)
 8012ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ac8:	601a      	str	r2, [r3, #0]
 8012aca:	f3bf 8f4f 	dsb	sy
 8012ace:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012ad2:	e01c      	b.n	8012b0e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012ad4:	6a3b      	ldr	r3, [r7, #32]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d002      	beq.n	8012ae0 <osMessageQueueGet+0xa0>
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d103      	bne.n	8012ae8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012ae0:	f06f 0303 	mvn.w	r3, #3
 8012ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8012ae6:	e013      	b.n	8012b10 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012ae8:	683a      	ldr	r2, [r7, #0]
 8012aea:	68b9      	ldr	r1, [r7, #8]
 8012aec:	6a38      	ldr	r0, [r7, #32]
 8012aee:	f000 fc09 	bl	8013304 <xQueueReceive>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d00b      	beq.n	8012b10 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d003      	beq.n	8012b06 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8012afe:	f06f 0301 	mvn.w	r3, #1
 8012b02:	627b      	str	r3, [r7, #36]	; 0x24
 8012b04:	e004      	b.n	8012b10 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8012b06:	f06f 0302 	mvn.w	r3, #2
 8012b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8012b0c:	e000      	b.n	8012b10 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012b0e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3728      	adds	r7, #40	; 0x28
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	200026a8 	.word	0x200026a8
 8012b20:	e000ed04 	.word	0xe000ed04

08012b24 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b088      	sub	sp, #32
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8012b30:	69bb      	ldr	r3, [r7, #24]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d102      	bne.n	8012b3c <osMessageQueueGetCount+0x18>
    count = 0U;
 8012b36:	2300      	movs	r3, #0
 8012b38:	61fb      	str	r3, [r7, #28]
 8012b3a:	e01e      	b.n	8012b7a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b3c:	f3ef 8305 	mrs	r3, IPSR
 8012b40:	617b      	str	r3, [r7, #20]
  return(result);
 8012b42:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d10f      	bne.n	8012b68 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b48:	f3ef 8310 	mrs	r3, PRIMASK
 8012b4c:	613b      	str	r3, [r7, #16]
  return(result);
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d109      	bne.n	8012b68 <osMessageQueueGetCount+0x44>
 8012b54:	4b0b      	ldr	r3, [pc, #44]	; (8012b84 <osMessageQueueGetCount+0x60>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	2b02      	cmp	r3, #2
 8012b5a:	d10a      	bne.n	8012b72 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8012b60:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d004      	beq.n	8012b72 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8012b68:	69b8      	ldr	r0, [r7, #24]
 8012b6a:	f000 fd49 	bl	8013600 <uxQueueMessagesWaitingFromISR>
 8012b6e:	61f8      	str	r0, [r7, #28]
 8012b70:	e003      	b.n	8012b7a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8012b72:	69b8      	ldr	r0, [r7, #24]
 8012b74:	f000 fd26 	bl	80135c4 <uxQueueMessagesWaiting>
 8012b78:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8012b7a:	69fb      	ldr	r3, [r7, #28]
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3720      	adds	r7, #32
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	200026a8 	.word	0x200026a8

08012b88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012b88:	b480      	push	{r7}
 8012b8a:	b085      	sub	sp, #20
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	60f8      	str	r0, [r7, #12]
 8012b90:	60b9      	str	r1, [r7, #8]
 8012b92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	4a07      	ldr	r2, [pc, #28]	; (8012bb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8012b98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012b9a:	68bb      	ldr	r3, [r7, #8]
 8012b9c:	4a06      	ldr	r2, [pc, #24]	; (8012bb8 <vApplicationGetIdleTaskMemory+0x30>)
 8012b9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2280      	movs	r2, #128	; 0x80
 8012ba4:	601a      	str	r2, [r3, #0]
}
 8012ba6:	bf00      	nop
 8012ba8:	3714      	adds	r7, #20
 8012baa:	46bd      	mov	sp, r7
 8012bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb0:	4770      	bx	lr
 8012bb2:	bf00      	nop
 8012bb4:	200026ac 	.word	0x200026ac
 8012bb8:	2000270c 	.word	0x2000270c

08012bbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012bbc:	b480      	push	{r7}
 8012bbe:	b085      	sub	sp, #20
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	60f8      	str	r0, [r7, #12]
 8012bc4:	60b9      	str	r1, [r7, #8]
 8012bc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	4a07      	ldr	r2, [pc, #28]	; (8012be8 <vApplicationGetTimerTaskMemory+0x2c>)
 8012bcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	4a06      	ldr	r2, [pc, #24]	; (8012bec <vApplicationGetTimerTaskMemory+0x30>)
 8012bd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012bda:	601a      	str	r2, [r3, #0]
}
 8012bdc:	bf00      	nop
 8012bde:	3714      	adds	r7, #20
 8012be0:	46bd      	mov	sp, r7
 8012be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be6:	4770      	bx	lr
 8012be8:	2000290c 	.word	0x2000290c
 8012bec:	2000296c 	.word	0x2000296c

08012bf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	b083      	sub	sp, #12
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f103 0208 	add.w	r2, r3, #8
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f04f 32ff 	mov.w	r2, #4294967295
 8012c08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f103 0208 	add.w	r2, r3, #8
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f103 0208 	add.w	r2, r3, #8
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2200      	movs	r2, #0
 8012c22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012c24:	bf00      	nop
 8012c26:	370c      	adds	r7, #12
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr

08012c30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012c30:	b480      	push	{r7}
 8012c32:	b083      	sub	sp, #12
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012c3e:	bf00      	nop
 8012c40:	370c      	adds	r7, #12
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr

08012c4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012c4a:	b480      	push	{r7}
 8012c4c:	b085      	sub	sp, #20
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
 8012c52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	68fa      	ldr	r2, [r7, #12]
 8012c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	689a      	ldr	r2, [r3, #8]
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	689b      	ldr	r3, [r3, #8]
 8012c6c:	683a      	ldr	r2, [r7, #0]
 8012c6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	683a      	ldr	r2, [r7, #0]
 8012c74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	1c5a      	adds	r2, r3, #1
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	601a      	str	r2, [r3, #0]
}
 8012c86:	bf00      	nop
 8012c88:	3714      	adds	r7, #20
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c90:	4770      	bx	lr

08012c92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012c92:	b480      	push	{r7}
 8012c94:	b085      	sub	sp, #20
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	6078      	str	r0, [r7, #4]
 8012c9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ca8:	d103      	bne.n	8012cb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	691b      	ldr	r3, [r3, #16]
 8012cae:	60fb      	str	r3, [r7, #12]
 8012cb0:	e00c      	b.n	8012ccc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	3308      	adds	r3, #8
 8012cb6:	60fb      	str	r3, [r7, #12]
 8012cb8:	e002      	b.n	8012cc0 <vListInsert+0x2e>
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	685b      	ldr	r3, [r3, #4]
 8012cbe:	60fb      	str	r3, [r7, #12]
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	68ba      	ldr	r2, [r7, #8]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d2f6      	bcs.n	8012cba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	685a      	ldr	r2, [r3, #4]
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	685b      	ldr	r3, [r3, #4]
 8012cd8:	683a      	ldr	r2, [r7, #0]
 8012cda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	68fa      	ldr	r2, [r7, #12]
 8012ce0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	683a      	ldr	r2, [r7, #0]
 8012ce6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	1c5a      	adds	r2, r3, #1
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	601a      	str	r2, [r3, #0]
}
 8012cf8:	bf00      	nop
 8012cfa:	3714      	adds	r7, #20
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d02:	4770      	bx	lr

08012d04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012d04:	b480      	push	{r7}
 8012d06:	b085      	sub	sp, #20
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	691b      	ldr	r3, [r3, #16]
 8012d10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	687a      	ldr	r2, [r7, #4]
 8012d18:	6892      	ldr	r2, [r2, #8]
 8012d1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	689b      	ldr	r3, [r3, #8]
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	6852      	ldr	r2, [r2, #4]
 8012d24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	687a      	ldr	r2, [r7, #4]
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d103      	bne.n	8012d38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	689a      	ldr	r2, [r3, #8]
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	1e5a      	subs	r2, r3, #1
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	681b      	ldr	r3, [r3, #0]
}
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3714      	adds	r7, #20
 8012d50:	46bd      	mov	sp, r7
 8012d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d56:	4770      	bx	lr

08012d58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b084      	sub	sp, #16
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d10a      	bne.n	8012d82 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d70:	f383 8811 	msr	BASEPRI, r3
 8012d74:	f3bf 8f6f 	isb	sy
 8012d78:	f3bf 8f4f 	dsb	sy
 8012d7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012d7e:	bf00      	nop
 8012d80:	e7fe      	b.n	8012d80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012d82:	f002 f927 	bl	8014fd4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681a      	ldr	r2, [r3, #0]
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d8e:	68f9      	ldr	r1, [r7, #12]
 8012d90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d92:	fb01 f303 	mul.w	r3, r1, r3
 8012d96:	441a      	add	r2, r3
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	681a      	ldr	r2, [r3, #0]
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012db2:	3b01      	subs	r3, #1
 8012db4:	68f9      	ldr	r1, [r7, #12]
 8012db6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012db8:	fb01 f303 	mul.w	r3, r1, r3
 8012dbc:	441a      	add	r2, r3
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	22ff      	movs	r2, #255	; 0xff
 8012dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	22ff      	movs	r2, #255	; 0xff
 8012dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d114      	bne.n	8012e02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	691b      	ldr	r3, [r3, #16]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d01a      	beq.n	8012e16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	3310      	adds	r3, #16
 8012de4:	4618      	mov	r0, r3
 8012de6:	f001 fa0f 	bl	8014208 <xTaskRemoveFromEventList>
 8012dea:	4603      	mov	r3, r0
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d012      	beq.n	8012e16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012df0:	4b0c      	ldr	r3, [pc, #48]	; (8012e24 <xQueueGenericReset+0xcc>)
 8012df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012df6:	601a      	str	r2, [r3, #0]
 8012df8:	f3bf 8f4f 	dsb	sy
 8012dfc:	f3bf 8f6f 	isb	sy
 8012e00:	e009      	b.n	8012e16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	3310      	adds	r3, #16
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7ff fef2 	bl	8012bf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	3324      	adds	r3, #36	; 0x24
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7ff feed 	bl	8012bf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012e16:	f002 f90d 	bl	8015034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012e1a:	2301      	movs	r3, #1
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3710      	adds	r7, #16
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}
 8012e24:	e000ed04 	.word	0xe000ed04

08012e28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b08e      	sub	sp, #56	; 0x38
 8012e2c:	af02      	add	r7, sp, #8
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	60b9      	str	r1, [r7, #8]
 8012e32:	607a      	str	r2, [r7, #4]
 8012e34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d10a      	bne.n	8012e52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e40:	f383 8811 	msr	BASEPRI, r3
 8012e44:	f3bf 8f6f 	isb	sy
 8012e48:	f3bf 8f4f 	dsb	sy
 8012e4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012e4e:	bf00      	nop
 8012e50:	e7fe      	b.n	8012e50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d10a      	bne.n	8012e6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5c:	f383 8811 	msr	BASEPRI, r3
 8012e60:	f3bf 8f6f 	isb	sy
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012e6a:	bf00      	nop
 8012e6c:	e7fe      	b.n	8012e6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d002      	beq.n	8012e7a <xQueueGenericCreateStatic+0x52>
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d001      	beq.n	8012e7e <xQueueGenericCreateStatic+0x56>
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	e000      	b.n	8012e80 <xQueueGenericCreateStatic+0x58>
 8012e7e:	2300      	movs	r3, #0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d10a      	bne.n	8012e9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e88:	f383 8811 	msr	BASEPRI, r3
 8012e8c:	f3bf 8f6f 	isb	sy
 8012e90:	f3bf 8f4f 	dsb	sy
 8012e94:	623b      	str	r3, [r7, #32]
}
 8012e96:	bf00      	nop
 8012e98:	e7fe      	b.n	8012e98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d102      	bne.n	8012ea6 <xQueueGenericCreateStatic+0x7e>
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d101      	bne.n	8012eaa <xQueueGenericCreateStatic+0x82>
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e000      	b.n	8012eac <xQueueGenericCreateStatic+0x84>
 8012eaa:	2300      	movs	r3, #0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d10a      	bne.n	8012ec6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb4:	f383 8811 	msr	BASEPRI, r3
 8012eb8:	f3bf 8f6f 	isb	sy
 8012ebc:	f3bf 8f4f 	dsb	sy
 8012ec0:	61fb      	str	r3, [r7, #28]
}
 8012ec2:	bf00      	nop
 8012ec4:	e7fe      	b.n	8012ec4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012ec6:	2350      	movs	r3, #80	; 0x50
 8012ec8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	2b50      	cmp	r3, #80	; 0x50
 8012ece:	d00a      	beq.n	8012ee6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed4:	f383 8811 	msr	BASEPRI, r3
 8012ed8:	f3bf 8f6f 	isb	sy
 8012edc:	f3bf 8f4f 	dsb	sy
 8012ee0:	61bb      	str	r3, [r7, #24]
}
 8012ee2:	bf00      	nop
 8012ee4:	e7fe      	b.n	8012ee4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d00d      	beq.n	8012f0c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012ef8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efe:	9300      	str	r3, [sp, #0]
 8012f00:	4613      	mov	r3, r2
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	68b9      	ldr	r1, [r7, #8]
 8012f06:	68f8      	ldr	r0, [r7, #12]
 8012f08:	f000 f843 	bl	8012f92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3730      	adds	r7, #48	; 0x30
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}

08012f16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012f16:	b580      	push	{r7, lr}
 8012f18:	b08a      	sub	sp, #40	; 0x28
 8012f1a:	af02      	add	r7, sp, #8
 8012f1c:	60f8      	str	r0, [r7, #12]
 8012f1e:	60b9      	str	r1, [r7, #8]
 8012f20:	4613      	mov	r3, r2
 8012f22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d10a      	bne.n	8012f40 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f2e:	f383 8811 	msr	BASEPRI, r3
 8012f32:	f3bf 8f6f 	isb	sy
 8012f36:	f3bf 8f4f 	dsb	sy
 8012f3a:	613b      	str	r3, [r7, #16]
}
 8012f3c:	bf00      	nop
 8012f3e:	e7fe      	b.n	8012f3e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d102      	bne.n	8012f4c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012f46:	2300      	movs	r3, #0
 8012f48:	61fb      	str	r3, [r7, #28]
 8012f4a:	e004      	b.n	8012f56 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	68ba      	ldr	r2, [r7, #8]
 8012f50:	fb02 f303 	mul.w	r3, r2, r3
 8012f54:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	3350      	adds	r3, #80	; 0x50
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f002 f95c 	bl	8015218 <pvPortMalloc>
 8012f60:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012f62:	69bb      	ldr	r3, [r7, #24]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d00f      	beq.n	8012f88 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8012f68:	69bb      	ldr	r3, [r7, #24]
 8012f6a:	3350      	adds	r3, #80	; 0x50
 8012f6c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012f6e:	69bb      	ldr	r3, [r7, #24]
 8012f70:	2200      	movs	r2, #0
 8012f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f76:	79fa      	ldrb	r2, [r7, #7]
 8012f78:	69bb      	ldr	r3, [r7, #24]
 8012f7a:	9300      	str	r3, [sp, #0]
 8012f7c:	4613      	mov	r3, r2
 8012f7e:	697a      	ldr	r2, [r7, #20]
 8012f80:	68b9      	ldr	r1, [r7, #8]
 8012f82:	68f8      	ldr	r0, [r7, #12]
 8012f84:	f000 f805 	bl	8012f92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012f88:	69bb      	ldr	r3, [r7, #24]
	}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3720      	adds	r7, #32
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}

08012f92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b084      	sub	sp, #16
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	60f8      	str	r0, [r7, #12]
 8012f9a:	60b9      	str	r1, [r7, #8]
 8012f9c:	607a      	str	r2, [r7, #4]
 8012f9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d103      	bne.n	8012fae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	69ba      	ldr	r2, [r7, #24]
 8012faa:	601a      	str	r2, [r3, #0]
 8012fac:	e002      	b.n	8012fb4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012fae:	69bb      	ldr	r3, [r7, #24]
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012fb4:	69bb      	ldr	r3, [r7, #24]
 8012fb6:	68fa      	ldr	r2, [r7, #12]
 8012fb8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012fba:	69bb      	ldr	r3, [r7, #24]
 8012fbc:	68ba      	ldr	r2, [r7, #8]
 8012fbe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012fc0:	2101      	movs	r1, #1
 8012fc2:	69b8      	ldr	r0, [r7, #24]
 8012fc4:	f7ff fec8 	bl	8012d58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012fc8:	69bb      	ldr	r3, [r7, #24]
 8012fca:	78fa      	ldrb	r2, [r7, #3]
 8012fcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012fd0:	bf00      	nop
 8012fd2:	3710      	adds	r7, #16
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b08e      	sub	sp, #56	; 0x38
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	60b9      	str	r1, [r7, #8]
 8012fe2:	607a      	str	r2, [r7, #4]
 8012fe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d10a      	bne.n	801300a <xQueueGenericSend+0x32>
	__asm volatile
 8012ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff8:	f383 8811 	msr	BASEPRI, r3
 8012ffc:	f3bf 8f6f 	isb	sy
 8013000:	f3bf 8f4f 	dsb	sy
 8013004:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013006:	bf00      	nop
 8013008:	e7fe      	b.n	8013008 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d103      	bne.n	8013018 <xQueueGenericSend+0x40>
 8013010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013014:	2b00      	cmp	r3, #0
 8013016:	d101      	bne.n	801301c <xQueueGenericSend+0x44>
 8013018:	2301      	movs	r3, #1
 801301a:	e000      	b.n	801301e <xQueueGenericSend+0x46>
 801301c:	2300      	movs	r3, #0
 801301e:	2b00      	cmp	r3, #0
 8013020:	d10a      	bne.n	8013038 <xQueueGenericSend+0x60>
	__asm volatile
 8013022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013026:	f383 8811 	msr	BASEPRI, r3
 801302a:	f3bf 8f6f 	isb	sy
 801302e:	f3bf 8f4f 	dsb	sy
 8013032:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013034:	bf00      	nop
 8013036:	e7fe      	b.n	8013036 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	2b02      	cmp	r3, #2
 801303c:	d103      	bne.n	8013046 <xQueueGenericSend+0x6e>
 801303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013042:	2b01      	cmp	r3, #1
 8013044:	d101      	bne.n	801304a <xQueueGenericSend+0x72>
 8013046:	2301      	movs	r3, #1
 8013048:	e000      	b.n	801304c <xQueueGenericSend+0x74>
 801304a:	2300      	movs	r3, #0
 801304c:	2b00      	cmp	r3, #0
 801304e:	d10a      	bne.n	8013066 <xQueueGenericSend+0x8e>
	__asm volatile
 8013050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013054:	f383 8811 	msr	BASEPRI, r3
 8013058:	f3bf 8f6f 	isb	sy
 801305c:	f3bf 8f4f 	dsb	sy
 8013060:	623b      	str	r3, [r7, #32]
}
 8013062:	bf00      	nop
 8013064:	e7fe      	b.n	8013064 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013066:	f001 fa93 	bl	8014590 <xTaskGetSchedulerState>
 801306a:	4603      	mov	r3, r0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d102      	bne.n	8013076 <xQueueGenericSend+0x9e>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d101      	bne.n	801307a <xQueueGenericSend+0xa2>
 8013076:	2301      	movs	r3, #1
 8013078:	e000      	b.n	801307c <xQueueGenericSend+0xa4>
 801307a:	2300      	movs	r3, #0
 801307c:	2b00      	cmp	r3, #0
 801307e:	d10a      	bne.n	8013096 <xQueueGenericSend+0xbe>
	__asm volatile
 8013080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013084:	f383 8811 	msr	BASEPRI, r3
 8013088:	f3bf 8f6f 	isb	sy
 801308c:	f3bf 8f4f 	dsb	sy
 8013090:	61fb      	str	r3, [r7, #28]
}
 8013092:	bf00      	nop
 8013094:	e7fe      	b.n	8013094 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013096:	f001 ff9d 	bl	8014fd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d302      	bcc.n	80130ac <xQueueGenericSend+0xd4>
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	2b02      	cmp	r3, #2
 80130aa:	d129      	bne.n	8013100 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80130ac:	683a      	ldr	r2, [r7, #0]
 80130ae:	68b9      	ldr	r1, [r7, #8]
 80130b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130b2:	f000 fac1 	bl	8013638 <prvCopyDataToQueue>
 80130b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d010      	beq.n	80130e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80130c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c2:	3324      	adds	r3, #36	; 0x24
 80130c4:	4618      	mov	r0, r3
 80130c6:	f001 f89f 	bl	8014208 <xTaskRemoveFromEventList>
 80130ca:	4603      	mov	r3, r0
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d013      	beq.n	80130f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80130d0:	4b3f      	ldr	r3, [pc, #252]	; (80131d0 <xQueueGenericSend+0x1f8>)
 80130d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130d6:	601a      	str	r2, [r3, #0]
 80130d8:	f3bf 8f4f 	dsb	sy
 80130dc:	f3bf 8f6f 	isb	sy
 80130e0:	e00a      	b.n	80130f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80130e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d007      	beq.n	80130f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80130e8:	4b39      	ldr	r3, [pc, #228]	; (80131d0 <xQueueGenericSend+0x1f8>)
 80130ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130ee:	601a      	str	r2, [r3, #0]
 80130f0:	f3bf 8f4f 	dsb	sy
 80130f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80130f8:	f001 ff9c 	bl	8015034 <vPortExitCritical>
				return pdPASS;
 80130fc:	2301      	movs	r3, #1
 80130fe:	e063      	b.n	80131c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d103      	bne.n	801310e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013106:	f001 ff95 	bl	8015034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801310a:	2300      	movs	r3, #0
 801310c:	e05c      	b.n	80131c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801310e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013110:	2b00      	cmp	r3, #0
 8013112:	d106      	bne.n	8013122 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013114:	f107 0314 	add.w	r3, r7, #20
 8013118:	4618      	mov	r0, r3
 801311a:	f001 f8d9 	bl	80142d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801311e:	2301      	movs	r3, #1
 8013120:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013122:	f001 ff87 	bl	8015034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013126:	f000 fe2d 	bl	8013d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801312a:	f001 ff53 	bl	8014fd4 <vPortEnterCritical>
 801312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013134:	b25b      	sxtb	r3, r3
 8013136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801313a:	d103      	bne.n	8013144 <xQueueGenericSend+0x16c>
 801313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313e:	2200      	movs	r2, #0
 8013140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801314a:	b25b      	sxtb	r3, r3
 801314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013150:	d103      	bne.n	801315a <xQueueGenericSend+0x182>
 8013152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013154:	2200      	movs	r2, #0
 8013156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801315a:	f001 ff6b 	bl	8015034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801315e:	1d3a      	adds	r2, r7, #4
 8013160:	f107 0314 	add.w	r3, r7, #20
 8013164:	4611      	mov	r1, r2
 8013166:	4618      	mov	r0, r3
 8013168:	f001 f8c8 	bl	80142fc <xTaskCheckForTimeOut>
 801316c:	4603      	mov	r3, r0
 801316e:	2b00      	cmp	r3, #0
 8013170:	d124      	bne.n	80131bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013174:	f000 fb58 	bl	8013828 <prvIsQueueFull>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d018      	beq.n	80131b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013180:	3310      	adds	r3, #16
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	4611      	mov	r1, r2
 8013186:	4618      	mov	r0, r3
 8013188:	f000 ffee 	bl	8014168 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801318c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801318e:	f000 fae3 	bl	8013758 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013192:	f000 fe05 	bl	8013da0 <xTaskResumeAll>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	f47f af7c 	bne.w	8013096 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801319e:	4b0c      	ldr	r3, [pc, #48]	; (80131d0 <xQueueGenericSend+0x1f8>)
 80131a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131a4:	601a      	str	r2, [r3, #0]
 80131a6:	f3bf 8f4f 	dsb	sy
 80131aa:	f3bf 8f6f 	isb	sy
 80131ae:	e772      	b.n	8013096 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80131b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131b2:	f000 fad1 	bl	8013758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80131b6:	f000 fdf3 	bl	8013da0 <xTaskResumeAll>
 80131ba:	e76c      	b.n	8013096 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80131bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131be:	f000 facb 	bl	8013758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80131c2:	f000 fded 	bl	8013da0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80131c6:	2300      	movs	r3, #0
		}
	}
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3738      	adds	r7, #56	; 0x38
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	e000ed04 	.word	0xe000ed04

080131d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b08e      	sub	sp, #56	; 0x38
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	607a      	str	r2, [r7, #4]
 80131e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80131e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d10a      	bne.n	8013202 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80131ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f0:	f383 8811 	msr	BASEPRI, r3
 80131f4:	f3bf 8f6f 	isb	sy
 80131f8:	f3bf 8f4f 	dsb	sy
 80131fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80131fe:	bf00      	nop
 8013200:	e7fe      	b.n	8013200 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d103      	bne.n	8013210 <xQueueGenericSendFromISR+0x3c>
 8013208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801320c:	2b00      	cmp	r3, #0
 801320e:	d101      	bne.n	8013214 <xQueueGenericSendFromISR+0x40>
 8013210:	2301      	movs	r3, #1
 8013212:	e000      	b.n	8013216 <xQueueGenericSendFromISR+0x42>
 8013214:	2300      	movs	r3, #0
 8013216:	2b00      	cmp	r3, #0
 8013218:	d10a      	bne.n	8013230 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801321e:	f383 8811 	msr	BASEPRI, r3
 8013222:	f3bf 8f6f 	isb	sy
 8013226:	f3bf 8f4f 	dsb	sy
 801322a:	623b      	str	r3, [r7, #32]
}
 801322c:	bf00      	nop
 801322e:	e7fe      	b.n	801322e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	2b02      	cmp	r3, #2
 8013234:	d103      	bne.n	801323e <xQueueGenericSendFromISR+0x6a>
 8013236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801323a:	2b01      	cmp	r3, #1
 801323c:	d101      	bne.n	8013242 <xQueueGenericSendFromISR+0x6e>
 801323e:	2301      	movs	r3, #1
 8013240:	e000      	b.n	8013244 <xQueueGenericSendFromISR+0x70>
 8013242:	2300      	movs	r3, #0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d10a      	bne.n	801325e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801324c:	f383 8811 	msr	BASEPRI, r3
 8013250:	f3bf 8f6f 	isb	sy
 8013254:	f3bf 8f4f 	dsb	sy
 8013258:	61fb      	str	r3, [r7, #28]
}
 801325a:	bf00      	nop
 801325c:	e7fe      	b.n	801325c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801325e:	f001 ff9b 	bl	8015198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013262:	f3ef 8211 	mrs	r2, BASEPRI
 8013266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801326a:	f383 8811 	msr	BASEPRI, r3
 801326e:	f3bf 8f6f 	isb	sy
 8013272:	f3bf 8f4f 	dsb	sy
 8013276:	61ba      	str	r2, [r7, #24]
 8013278:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801327a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801327c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013286:	429a      	cmp	r2, r3
 8013288:	d302      	bcc.n	8013290 <xQueueGenericSendFromISR+0xbc>
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	2b02      	cmp	r3, #2
 801328e:	d12c      	bne.n	80132ea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801329a:	683a      	ldr	r2, [r7, #0]
 801329c:	68b9      	ldr	r1, [r7, #8]
 801329e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132a0:	f000 f9ca 	bl	8013638 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80132a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80132a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ac:	d112      	bne.n	80132d4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d016      	beq.n	80132e4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b8:	3324      	adds	r3, #36	; 0x24
 80132ba:	4618      	mov	r0, r3
 80132bc:	f000 ffa4 	bl	8014208 <xTaskRemoveFromEventList>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d00e      	beq.n	80132e4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00b      	beq.n	80132e4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2201      	movs	r2, #1
 80132d0:	601a      	str	r2, [r3, #0]
 80132d2:	e007      	b.n	80132e4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80132d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80132d8:	3301      	adds	r3, #1
 80132da:	b2db      	uxtb	r3, r3
 80132dc:	b25a      	sxtb	r2, r3
 80132de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80132e4:	2301      	movs	r3, #1
 80132e6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80132e8:	e001      	b.n	80132ee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80132ea:	2300      	movs	r3, #0
 80132ec:	637b      	str	r3, [r7, #52]	; 0x34
 80132ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80132f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80132fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3738      	adds	r7, #56	; 0x38
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}

08013304 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b08c      	sub	sp, #48	; 0x30
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013310:	2300      	movs	r3, #0
 8013312:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331a:	2b00      	cmp	r3, #0
 801331c:	d10a      	bne.n	8013334 <xQueueReceive+0x30>
	__asm volatile
 801331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013322:	f383 8811 	msr	BASEPRI, r3
 8013326:	f3bf 8f6f 	isb	sy
 801332a:	f3bf 8f4f 	dsb	sy
 801332e:	623b      	str	r3, [r7, #32]
}
 8013330:	bf00      	nop
 8013332:	e7fe      	b.n	8013332 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d103      	bne.n	8013342 <xQueueReceive+0x3e>
 801333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801333e:	2b00      	cmp	r3, #0
 8013340:	d101      	bne.n	8013346 <xQueueReceive+0x42>
 8013342:	2301      	movs	r3, #1
 8013344:	e000      	b.n	8013348 <xQueueReceive+0x44>
 8013346:	2300      	movs	r3, #0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d10a      	bne.n	8013362 <xQueueReceive+0x5e>
	__asm volatile
 801334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013350:	f383 8811 	msr	BASEPRI, r3
 8013354:	f3bf 8f6f 	isb	sy
 8013358:	f3bf 8f4f 	dsb	sy
 801335c:	61fb      	str	r3, [r7, #28]
}
 801335e:	bf00      	nop
 8013360:	e7fe      	b.n	8013360 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013362:	f001 f915 	bl	8014590 <xTaskGetSchedulerState>
 8013366:	4603      	mov	r3, r0
 8013368:	2b00      	cmp	r3, #0
 801336a:	d102      	bne.n	8013372 <xQueueReceive+0x6e>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d101      	bne.n	8013376 <xQueueReceive+0x72>
 8013372:	2301      	movs	r3, #1
 8013374:	e000      	b.n	8013378 <xQueueReceive+0x74>
 8013376:	2300      	movs	r3, #0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d10a      	bne.n	8013392 <xQueueReceive+0x8e>
	__asm volatile
 801337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	61bb      	str	r3, [r7, #24]
}
 801338e:	bf00      	nop
 8013390:	e7fe      	b.n	8013390 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8013392:	f001 fe1f 	bl	8014fd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801339a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d01f      	beq.n	80133e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133a2:	68b9      	ldr	r1, [r7, #8]
 80133a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a6:	f000 f9b1 	bl	801370c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ac:	1e5a      	subs	r2, r3, #1
 80133ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b4:	691b      	ldr	r3, [r3, #16]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d00f      	beq.n	80133da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133bc:	3310      	adds	r3, #16
 80133be:	4618      	mov	r0, r3
 80133c0:	f000 ff22 	bl	8014208 <xTaskRemoveFromEventList>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d007      	beq.n	80133da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80133ca:	4b3d      	ldr	r3, [pc, #244]	; (80134c0 <xQueueReceive+0x1bc>)
 80133cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133d0:	601a      	str	r2, [r3, #0]
 80133d2:	f3bf 8f4f 	dsb	sy
 80133d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80133da:	f001 fe2b 	bl	8015034 <vPortExitCritical>
				return pdPASS;
 80133de:	2301      	movs	r3, #1
 80133e0:	e069      	b.n	80134b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d103      	bne.n	80133f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133e8:	f001 fe24 	bl	8015034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80133ec:	2300      	movs	r3, #0
 80133ee:	e062      	b.n	80134b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d106      	bne.n	8013404 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133f6:	f107 0310 	add.w	r3, r7, #16
 80133fa:	4618      	mov	r0, r3
 80133fc:	f000 ff68 	bl	80142d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013400:	2301      	movs	r3, #1
 8013402:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013404:	f001 fe16 	bl	8015034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013408:	f000 fcbc 	bl	8013d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801340c:	f001 fde2 	bl	8014fd4 <vPortEnterCritical>
 8013410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013416:	b25b      	sxtb	r3, r3
 8013418:	f1b3 3fff 	cmp.w	r3, #4294967295
 801341c:	d103      	bne.n	8013426 <xQueueReceive+0x122>
 801341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013420:	2200      	movs	r2, #0
 8013422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801342c:	b25b      	sxtb	r3, r3
 801342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013432:	d103      	bne.n	801343c <xQueueReceive+0x138>
 8013434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013436:	2200      	movs	r2, #0
 8013438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801343c:	f001 fdfa 	bl	8015034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013440:	1d3a      	adds	r2, r7, #4
 8013442:	f107 0310 	add.w	r3, r7, #16
 8013446:	4611      	mov	r1, r2
 8013448:	4618      	mov	r0, r3
 801344a:	f000 ff57 	bl	80142fc <xTaskCheckForTimeOut>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d123      	bne.n	801349c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013456:	f000 f9d1 	bl	80137fc <prvIsQueueEmpty>
 801345a:	4603      	mov	r3, r0
 801345c:	2b00      	cmp	r3, #0
 801345e:	d017      	beq.n	8013490 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013462:	3324      	adds	r3, #36	; 0x24
 8013464:	687a      	ldr	r2, [r7, #4]
 8013466:	4611      	mov	r1, r2
 8013468:	4618      	mov	r0, r3
 801346a:	f000 fe7d 	bl	8014168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801346e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013470:	f000 f972 	bl	8013758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013474:	f000 fc94 	bl	8013da0 <xTaskResumeAll>
 8013478:	4603      	mov	r3, r0
 801347a:	2b00      	cmp	r3, #0
 801347c:	d189      	bne.n	8013392 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801347e:	4b10      	ldr	r3, [pc, #64]	; (80134c0 <xQueueReceive+0x1bc>)
 8013480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013484:	601a      	str	r2, [r3, #0]
 8013486:	f3bf 8f4f 	dsb	sy
 801348a:	f3bf 8f6f 	isb	sy
 801348e:	e780      	b.n	8013392 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013492:	f000 f961 	bl	8013758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013496:	f000 fc83 	bl	8013da0 <xTaskResumeAll>
 801349a:	e77a      	b.n	8013392 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801349c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801349e:	f000 f95b 	bl	8013758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134a2:	f000 fc7d 	bl	8013da0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134a8:	f000 f9a8 	bl	80137fc <prvIsQueueEmpty>
 80134ac:	4603      	mov	r3, r0
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	f43f af6f 	beq.w	8013392 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80134b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3730      	adds	r7, #48	; 0x30
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
 80134be:	bf00      	nop
 80134c0:	e000ed04 	.word	0xe000ed04

080134c4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b08e      	sub	sp, #56	; 0x38
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80134d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d10a      	bne.n	80134f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80134da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134de:	f383 8811 	msr	BASEPRI, r3
 80134e2:	f3bf 8f6f 	isb	sy
 80134e6:	f3bf 8f4f 	dsb	sy
 80134ea:	623b      	str	r3, [r7, #32]
}
 80134ec:	bf00      	nop
 80134ee:	e7fe      	b.n	80134ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d103      	bne.n	80134fe <xQueueReceiveFromISR+0x3a>
 80134f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d101      	bne.n	8013502 <xQueueReceiveFromISR+0x3e>
 80134fe:	2301      	movs	r3, #1
 8013500:	e000      	b.n	8013504 <xQueueReceiveFromISR+0x40>
 8013502:	2300      	movs	r3, #0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d10a      	bne.n	801351e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350c:	f383 8811 	msr	BASEPRI, r3
 8013510:	f3bf 8f6f 	isb	sy
 8013514:	f3bf 8f4f 	dsb	sy
 8013518:	61fb      	str	r3, [r7, #28]
}
 801351a:	bf00      	nop
 801351c:	e7fe      	b.n	801351c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801351e:	f001 fe3b 	bl	8015198 <vPortValidateInterruptPriority>
	__asm volatile
 8013522:	f3ef 8211 	mrs	r2, BASEPRI
 8013526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801352a:	f383 8811 	msr	BASEPRI, r3
 801352e:	f3bf 8f6f 	isb	sy
 8013532:	f3bf 8f4f 	dsb	sy
 8013536:	61ba      	str	r2, [r7, #24]
 8013538:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801353a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801353c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013542:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013546:	2b00      	cmp	r3, #0
 8013548:	d02f      	beq.n	80135aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801354c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013554:	68b9      	ldr	r1, [r7, #8]
 8013556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013558:	f000 f8d8 	bl	801370c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801355e:	1e5a      	subs	r2, r3, #1
 8013560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013562:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801356c:	d112      	bne.n	8013594 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013570:	691b      	ldr	r3, [r3, #16]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d016      	beq.n	80135a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013578:	3310      	adds	r3, #16
 801357a:	4618      	mov	r0, r3
 801357c:	f000 fe44 	bl	8014208 <xTaskRemoveFromEventList>
 8013580:	4603      	mov	r3, r0
 8013582:	2b00      	cmp	r3, #0
 8013584:	d00e      	beq.n	80135a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00b      	beq.n	80135a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2201      	movs	r2, #1
 8013590:	601a      	str	r2, [r3, #0]
 8013592:	e007      	b.n	80135a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013598:	3301      	adds	r3, #1
 801359a:	b2db      	uxtb	r3, r3
 801359c:	b25a      	sxtb	r2, r3
 801359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80135a4:	2301      	movs	r3, #1
 80135a6:	637b      	str	r3, [r7, #52]	; 0x34
 80135a8:	e001      	b.n	80135ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80135aa:	2300      	movs	r3, #0
 80135ac:	637b      	str	r3, [r7, #52]	; 0x34
 80135ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	f383 8811 	msr	BASEPRI, r3
}
 80135b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80135ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3738      	adds	r7, #56	; 0x38
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b084      	sub	sp, #16
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d10a      	bne.n	80135e8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80135d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d6:	f383 8811 	msr	BASEPRI, r3
 80135da:	f3bf 8f6f 	isb	sy
 80135de:	f3bf 8f4f 	dsb	sy
 80135e2:	60bb      	str	r3, [r7, #8]
}
 80135e4:	bf00      	nop
 80135e6:	e7fe      	b.n	80135e6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80135e8:	f001 fcf4 	bl	8014fd4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135f0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80135f2:	f001 fd1f 	bl	8015034 <vPortExitCritical>

	return uxReturn;
 80135f6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80135f8:	4618      	mov	r0, r3
 80135fa:	3710      	adds	r7, #16
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}

08013600 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8013600:	b480      	push	{r7}
 8013602:	b085      	sub	sp, #20
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d10a      	bne.n	8013624 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 801360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013612:	f383 8811 	msr	BASEPRI, r3
 8013616:	f3bf 8f6f 	isb	sy
 801361a:	f3bf 8f4f 	dsb	sy
 801361e:	60bb      	str	r3, [r7, #8]
}
 8013620:	bf00      	nop
 8013622:	e7fe      	b.n	8013622 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013628:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 801362a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801362c:	4618      	mov	r0, r3
 801362e:	3714      	adds	r7, #20
 8013630:	46bd      	mov	sp, r7
 8013632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013636:	4770      	bx	lr

08013638 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b086      	sub	sp, #24
 801363c:	af00      	add	r7, sp, #0
 801363e:	60f8      	str	r0, [r7, #12]
 8013640:	60b9      	str	r1, [r7, #8]
 8013642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013644:	2300      	movs	r3, #0
 8013646:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801364c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013652:	2b00      	cmp	r3, #0
 8013654:	d10d      	bne.n	8013672 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d14d      	bne.n	80136fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	4618      	mov	r0, r3
 8013664:	f000 ffb2 	bl	80145cc <xTaskPriorityDisinherit>
 8013668:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	2200      	movs	r2, #0
 801366e:	605a      	str	r2, [r3, #4]
 8013670:	e043      	b.n	80136fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d119      	bne.n	80136ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	6898      	ldr	r0, [r3, #8]
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013680:	461a      	mov	r2, r3
 8013682:	68b9      	ldr	r1, [r7, #8]
 8013684:	f002 fa3e 	bl	8015b04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	689a      	ldr	r2, [r3, #8]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013690:	441a      	add	r2, r3
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	689a      	ldr	r2, [r3, #8]
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	429a      	cmp	r2, r3
 80136a0:	d32b      	bcc.n	80136fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	681a      	ldr	r2, [r3, #0]
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	609a      	str	r2, [r3, #8]
 80136aa:	e026      	b.n	80136fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	68d8      	ldr	r0, [r3, #12]
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136b4:	461a      	mov	r2, r3
 80136b6:	68b9      	ldr	r1, [r7, #8]
 80136b8:	f002 fa24 	bl	8015b04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	68da      	ldr	r2, [r3, #12]
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136c4:	425b      	negs	r3, r3
 80136c6:	441a      	add	r2, r3
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	68da      	ldr	r2, [r3, #12]
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d207      	bcs.n	80136e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	685a      	ldr	r2, [r3, #4]
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136e0:	425b      	negs	r3, r3
 80136e2:	441a      	add	r2, r3
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2b02      	cmp	r3, #2
 80136ec:	d105      	bne.n	80136fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d002      	beq.n	80136fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80136f4:	693b      	ldr	r3, [r7, #16]
 80136f6:	3b01      	subs	r3, #1
 80136f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80136fa:	693b      	ldr	r3, [r7, #16]
 80136fc:	1c5a      	adds	r2, r3, #1
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013702:	697b      	ldr	r3, [r7, #20]
}
 8013704:	4618      	mov	r0, r3
 8013706:	3718      	adds	r7, #24
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}

0801370c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b082      	sub	sp, #8
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801371a:	2b00      	cmp	r3, #0
 801371c:	d018      	beq.n	8013750 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	68da      	ldr	r2, [r3, #12]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013726:	441a      	add	r2, r3
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	68da      	ldr	r2, [r3, #12]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	429a      	cmp	r2, r3
 8013736:	d303      	bcc.n	8013740 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681a      	ldr	r2, [r3, #0]
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	68d9      	ldr	r1, [r3, #12]
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013748:	461a      	mov	r2, r3
 801374a:	6838      	ldr	r0, [r7, #0]
 801374c:	f002 f9da 	bl	8015b04 <memcpy>
	}
}
 8013750:	bf00      	nop
 8013752:	3708      	adds	r7, #8
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b084      	sub	sp, #16
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013760:	f001 fc38 	bl	8014fd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801376a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801376c:	e011      	b.n	8013792 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013772:	2b00      	cmp	r3, #0
 8013774:	d012      	beq.n	801379c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	3324      	adds	r3, #36	; 0x24
 801377a:	4618      	mov	r0, r3
 801377c:	f000 fd44 	bl	8014208 <xTaskRemoveFromEventList>
 8013780:	4603      	mov	r3, r0
 8013782:	2b00      	cmp	r3, #0
 8013784:	d001      	beq.n	801378a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013786:	f000 fe1b 	bl	80143c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801378a:	7bfb      	ldrb	r3, [r7, #15]
 801378c:	3b01      	subs	r3, #1
 801378e:	b2db      	uxtb	r3, r3
 8013790:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013796:	2b00      	cmp	r3, #0
 8013798:	dce9      	bgt.n	801376e <prvUnlockQueue+0x16>
 801379a:	e000      	b.n	801379e <prvUnlockQueue+0x46>
					break;
 801379c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	22ff      	movs	r2, #255	; 0xff
 80137a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80137a6:	f001 fc45 	bl	8015034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80137aa:	f001 fc13 	bl	8014fd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80137b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80137b6:	e011      	b.n	80137dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	691b      	ldr	r3, [r3, #16]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d012      	beq.n	80137e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	3310      	adds	r3, #16
 80137c4:	4618      	mov	r0, r3
 80137c6:	f000 fd1f 	bl	8014208 <xTaskRemoveFromEventList>
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d001      	beq.n	80137d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80137d0:	f000 fdf6 	bl	80143c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80137d4:	7bbb      	ldrb	r3, [r7, #14]
 80137d6:	3b01      	subs	r3, #1
 80137d8:	b2db      	uxtb	r3, r3
 80137da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80137dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	dce9      	bgt.n	80137b8 <prvUnlockQueue+0x60>
 80137e4:	e000      	b.n	80137e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80137e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	22ff      	movs	r2, #255	; 0xff
 80137ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80137f0:	f001 fc20 	bl	8015034 <vPortExitCritical>
}
 80137f4:	bf00      	nop
 80137f6:	3710      	adds	r7, #16
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}

080137fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b084      	sub	sp, #16
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013804:	f001 fbe6 	bl	8014fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801380c:	2b00      	cmp	r3, #0
 801380e:	d102      	bne.n	8013816 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013810:	2301      	movs	r3, #1
 8013812:	60fb      	str	r3, [r7, #12]
 8013814:	e001      	b.n	801381a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013816:	2300      	movs	r3, #0
 8013818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801381a:	f001 fc0b 	bl	8015034 <vPortExitCritical>

	return xReturn;
 801381e:	68fb      	ldr	r3, [r7, #12]
}
 8013820:	4618      	mov	r0, r3
 8013822:	3710      	adds	r7, #16
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}

08013828 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b084      	sub	sp, #16
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013830:	f001 fbd0 	bl	8014fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801383c:	429a      	cmp	r2, r3
 801383e:	d102      	bne.n	8013846 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013840:	2301      	movs	r3, #1
 8013842:	60fb      	str	r3, [r7, #12]
 8013844:	e001      	b.n	801384a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013846:	2300      	movs	r3, #0
 8013848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801384a:	f001 fbf3 	bl	8015034 <vPortExitCritical>

	return xReturn;
 801384e:	68fb      	ldr	r3, [r7, #12]
}
 8013850:	4618      	mov	r0, r3
 8013852:	3710      	adds	r7, #16
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013858:	b480      	push	{r7}
 801385a:	b085      	sub	sp, #20
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013862:	2300      	movs	r3, #0
 8013864:	60fb      	str	r3, [r7, #12]
 8013866:	e014      	b.n	8013892 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013868:	4a0f      	ldr	r2, [pc, #60]	; (80138a8 <vQueueAddToRegistry+0x50>)
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d10b      	bne.n	801388c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013874:	490c      	ldr	r1, [pc, #48]	; (80138a8 <vQueueAddToRegistry+0x50>)
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	683a      	ldr	r2, [r7, #0]
 801387a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801387e:	4a0a      	ldr	r2, [pc, #40]	; (80138a8 <vQueueAddToRegistry+0x50>)
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	00db      	lsls	r3, r3, #3
 8013884:	4413      	add	r3, r2
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801388a:	e006      	b.n	801389a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	3301      	adds	r3, #1
 8013890:	60fb      	str	r3, [r7, #12]
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	2b07      	cmp	r3, #7
 8013896:	d9e7      	bls.n	8013868 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013898:	bf00      	nop
 801389a:	bf00      	nop
 801389c:	3714      	adds	r7, #20
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr
 80138a6:	bf00      	nop
 80138a8:	20002d6c 	.word	0x20002d6c

080138ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b086      	sub	sp, #24
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	60f8      	str	r0, [r7, #12]
 80138b4:	60b9      	str	r1, [r7, #8]
 80138b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80138bc:	f001 fb8a 	bl	8014fd4 <vPortEnterCritical>
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80138c6:	b25b      	sxtb	r3, r3
 80138c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138cc:	d103      	bne.n	80138d6 <vQueueWaitForMessageRestricted+0x2a>
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	2200      	movs	r2, #0
 80138d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80138dc:	b25b      	sxtb	r3, r3
 80138de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138e2:	d103      	bne.n	80138ec <vQueueWaitForMessageRestricted+0x40>
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	2200      	movs	r2, #0
 80138e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80138ec:	f001 fba2 	bl	8015034 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d106      	bne.n	8013906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80138f8:	697b      	ldr	r3, [r7, #20]
 80138fa:	3324      	adds	r3, #36	; 0x24
 80138fc:	687a      	ldr	r2, [r7, #4]
 80138fe:	68b9      	ldr	r1, [r7, #8]
 8013900:	4618      	mov	r0, r3
 8013902:	f000 fc55 	bl	80141b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013906:	6978      	ldr	r0, [r7, #20]
 8013908:	f7ff ff26 	bl	8013758 <prvUnlockQueue>
	}
 801390c:	bf00      	nop
 801390e:	3718      	adds	r7, #24
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}

08013914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013914:	b580      	push	{r7, lr}
 8013916:	b08e      	sub	sp, #56	; 0x38
 8013918:	af04      	add	r7, sp, #16
 801391a:	60f8      	str	r0, [r7, #12]
 801391c:	60b9      	str	r1, [r7, #8]
 801391e:	607a      	str	r2, [r7, #4]
 8013920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013924:	2b00      	cmp	r3, #0
 8013926:	d10a      	bne.n	801393e <xTaskCreateStatic+0x2a>
	__asm volatile
 8013928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801392c:	f383 8811 	msr	BASEPRI, r3
 8013930:	f3bf 8f6f 	isb	sy
 8013934:	f3bf 8f4f 	dsb	sy
 8013938:	623b      	str	r3, [r7, #32]
}
 801393a:	bf00      	nop
 801393c:	e7fe      	b.n	801393c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013940:	2b00      	cmp	r3, #0
 8013942:	d10a      	bne.n	801395a <xTaskCreateStatic+0x46>
	__asm volatile
 8013944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013948:	f383 8811 	msr	BASEPRI, r3
 801394c:	f3bf 8f6f 	isb	sy
 8013950:	f3bf 8f4f 	dsb	sy
 8013954:	61fb      	str	r3, [r7, #28]
}
 8013956:	bf00      	nop
 8013958:	e7fe      	b.n	8013958 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801395a:	2360      	movs	r3, #96	; 0x60
 801395c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	2b60      	cmp	r3, #96	; 0x60
 8013962:	d00a      	beq.n	801397a <xTaskCreateStatic+0x66>
	__asm volatile
 8013964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013968:	f383 8811 	msr	BASEPRI, r3
 801396c:	f3bf 8f6f 	isb	sy
 8013970:	f3bf 8f4f 	dsb	sy
 8013974:	61bb      	str	r3, [r7, #24]
}
 8013976:	bf00      	nop
 8013978:	e7fe      	b.n	8013978 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397c:	2b00      	cmp	r3, #0
 801397e:	d01e      	beq.n	80139be <xTaskCreateStatic+0xaa>
 8013980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013982:	2b00      	cmp	r3, #0
 8013984:	d01b      	beq.n	80139be <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013988:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801398e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013992:	2202      	movs	r2, #2
 8013994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013998:	2300      	movs	r3, #0
 801399a:	9303      	str	r3, [sp, #12]
 801399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801399e:	9302      	str	r3, [sp, #8]
 80139a0:	f107 0314 	add.w	r3, r7, #20
 80139a4:	9301      	str	r3, [sp, #4]
 80139a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a8:	9300      	str	r3, [sp, #0]
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	687a      	ldr	r2, [r7, #4]
 80139ae:	68b9      	ldr	r1, [r7, #8]
 80139b0:	68f8      	ldr	r0, [r7, #12]
 80139b2:	f000 f850 	bl	8013a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80139b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139b8:	f000 f8d8 	bl	8013b6c <prvAddNewTaskToReadyList>
 80139bc:	e001      	b.n	80139c2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80139be:	2300      	movs	r3, #0
 80139c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80139c2:	697b      	ldr	r3, [r7, #20]
	}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3728      	adds	r7, #40	; 0x28
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b08c      	sub	sp, #48	; 0x30
 80139d0:	af04      	add	r7, sp, #16
 80139d2:	60f8      	str	r0, [r7, #12]
 80139d4:	60b9      	str	r1, [r7, #8]
 80139d6:	603b      	str	r3, [r7, #0]
 80139d8:	4613      	mov	r3, r2
 80139da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139dc:	88fb      	ldrh	r3, [r7, #6]
 80139de:	009b      	lsls	r3, r3, #2
 80139e0:	4618      	mov	r0, r3
 80139e2:	f001 fc19 	bl	8015218 <pvPortMalloc>
 80139e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d00e      	beq.n	8013a0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80139ee:	2060      	movs	r0, #96	; 0x60
 80139f0:	f001 fc12 	bl	8015218 <pvPortMalloc>
 80139f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80139f6:	69fb      	ldr	r3, [r7, #28]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d003      	beq.n	8013a04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	697a      	ldr	r2, [r7, #20]
 8013a00:	631a      	str	r2, [r3, #48]	; 0x30
 8013a02:	e005      	b.n	8013a10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013a04:	6978      	ldr	r0, [r7, #20]
 8013a06:	f001 fc4d 	bl	80152a4 <vPortFree>
 8013a0a:	e001      	b.n	8013a10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d017      	beq.n	8013a46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013a1e:	88fa      	ldrh	r2, [r7, #6]
 8013a20:	2300      	movs	r3, #0
 8013a22:	9303      	str	r3, [sp, #12]
 8013a24:	69fb      	ldr	r3, [r7, #28]
 8013a26:	9302      	str	r3, [sp, #8]
 8013a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a2a:	9301      	str	r3, [sp, #4]
 8013a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2e:	9300      	str	r3, [sp, #0]
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	68b9      	ldr	r1, [r7, #8]
 8013a34:	68f8      	ldr	r0, [r7, #12]
 8013a36:	f000 f80e 	bl	8013a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013a3a:	69f8      	ldr	r0, [r7, #28]
 8013a3c:	f000 f896 	bl	8013b6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013a40:	2301      	movs	r3, #1
 8013a42:	61bb      	str	r3, [r7, #24]
 8013a44:	e002      	b.n	8013a4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013a46:	f04f 33ff 	mov.w	r3, #4294967295
 8013a4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013a4c:	69bb      	ldr	r3, [r7, #24]
	}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3720      	adds	r7, #32
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}

08013a56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013a56:	b580      	push	{r7, lr}
 8013a58:	b088      	sub	sp, #32
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	60f8      	str	r0, [r7, #12]
 8013a5e:	60b9      	str	r1, [r7, #8]
 8013a60:	607a      	str	r2, [r7, #4]
 8013a62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	461a      	mov	r2, r3
 8013a6e:	21a5      	movs	r1, #165	; 0xa5
 8013a70:	f002 f856 	bl	8015b20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013a7e:	3b01      	subs	r3, #1
 8013a80:	009b      	lsls	r3, r3, #2
 8013a82:	4413      	add	r3, r2
 8013a84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	f023 0307 	bic.w	r3, r3, #7
 8013a8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013a8e:	69bb      	ldr	r3, [r7, #24]
 8013a90:	f003 0307 	and.w	r3, r3, #7
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d00a      	beq.n	8013aae <prvInitialiseNewTask+0x58>
	__asm volatile
 8013a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9c:	f383 8811 	msr	BASEPRI, r3
 8013aa0:	f3bf 8f6f 	isb	sy
 8013aa4:	f3bf 8f4f 	dsb	sy
 8013aa8:	617b      	str	r3, [r7, #20]
}
 8013aaa:	bf00      	nop
 8013aac:	e7fe      	b.n	8013aac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013aae:	2300      	movs	r3, #0
 8013ab0:	61fb      	str	r3, [r7, #28]
 8013ab2:	e012      	b.n	8013ada <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013ab4:	68ba      	ldr	r2, [r7, #8]
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	4413      	add	r3, r2
 8013aba:	7819      	ldrb	r1, [r3, #0]
 8013abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013abe:	69fb      	ldr	r3, [r7, #28]
 8013ac0:	4413      	add	r3, r2
 8013ac2:	3334      	adds	r3, #52	; 0x34
 8013ac4:	460a      	mov	r2, r1
 8013ac6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8013ac8:	68ba      	ldr	r2, [r7, #8]
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	4413      	add	r3, r2
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d006      	beq.n	8013ae2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013ad4:	69fb      	ldr	r3, [r7, #28]
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	61fb      	str	r3, [r7, #28]
 8013ada:	69fb      	ldr	r3, [r7, #28]
 8013adc:	2b0f      	cmp	r3, #15
 8013ade:	d9e9      	bls.n	8013ab4 <prvInitialiseNewTask+0x5e>
 8013ae0:	e000      	b.n	8013ae4 <prvInitialiseNewTask+0x8e>
		{
			break;
 8013ae2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aee:	2b37      	cmp	r3, #55	; 0x37
 8013af0:	d901      	bls.n	8013af6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013af2:	2337      	movs	r3, #55	; 0x37
 8013af4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013afa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b04:	2200      	movs	r2, #0
 8013b06:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0a:	3304      	adds	r3, #4
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7ff f88f 	bl	8012c30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b14:	3318      	adds	r3, #24
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7ff f88a 	bl	8012c30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b34:	2200      	movs	r2, #0
 8013b36:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b40:	2200      	movs	r2, #0
 8013b42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013b46:	683a      	ldr	r2, [r7, #0]
 8013b48:	68f9      	ldr	r1, [r7, #12]
 8013b4a:	69b8      	ldr	r0, [r7, #24]
 8013b4c:	f001 f912 	bl	8014d74 <pxPortInitialiseStack>
 8013b50:	4602      	mov	r2, r0
 8013b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b54:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8013b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d002      	beq.n	8013b62 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b62:	bf00      	nop
 8013b64:	3720      	adds	r7, #32
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}
	...

08013b6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b082      	sub	sp, #8
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013b74:	f001 fa2e 	bl	8014fd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013b78:	4b2d      	ldr	r3, [pc, #180]	; (8013c30 <prvAddNewTaskToReadyList+0xc4>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	3301      	adds	r3, #1
 8013b7e:	4a2c      	ldr	r2, [pc, #176]	; (8013c30 <prvAddNewTaskToReadyList+0xc4>)
 8013b80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013b82:	4b2c      	ldr	r3, [pc, #176]	; (8013c34 <prvAddNewTaskToReadyList+0xc8>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d109      	bne.n	8013b9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013b8a:	4a2a      	ldr	r2, [pc, #168]	; (8013c34 <prvAddNewTaskToReadyList+0xc8>)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013b90:	4b27      	ldr	r3, [pc, #156]	; (8013c30 <prvAddNewTaskToReadyList+0xc4>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	d110      	bne.n	8013bba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013b98:	f000 fc36 	bl	8014408 <prvInitialiseTaskLists>
 8013b9c:	e00d      	b.n	8013bba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013b9e:	4b26      	ldr	r3, [pc, #152]	; (8013c38 <prvAddNewTaskToReadyList+0xcc>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d109      	bne.n	8013bba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013ba6:	4b23      	ldr	r3, [pc, #140]	; (8013c34 <prvAddNewTaskToReadyList+0xc8>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	d802      	bhi.n	8013bba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013bb4:	4a1f      	ldr	r2, [pc, #124]	; (8013c34 <prvAddNewTaskToReadyList+0xc8>)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013bba:	4b20      	ldr	r3, [pc, #128]	; (8013c3c <prvAddNewTaskToReadyList+0xd0>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	4a1e      	ldr	r2, [pc, #120]	; (8013c3c <prvAddNewTaskToReadyList+0xd0>)
 8013bc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013bc4:	4b1d      	ldr	r3, [pc, #116]	; (8013c3c <prvAddNewTaskToReadyList+0xd0>)
 8013bc6:	681a      	ldr	r2, [r3, #0]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bd0:	4b1b      	ldr	r3, [pc, #108]	; (8013c40 <prvAddNewTaskToReadyList+0xd4>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d903      	bls.n	8013be0 <prvAddNewTaskToReadyList+0x74>
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bdc:	4a18      	ldr	r2, [pc, #96]	; (8013c40 <prvAddNewTaskToReadyList+0xd4>)
 8013bde:	6013      	str	r3, [r2, #0]
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013be4:	4613      	mov	r3, r2
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	4413      	add	r3, r2
 8013bea:	009b      	lsls	r3, r3, #2
 8013bec:	4a15      	ldr	r2, [pc, #84]	; (8013c44 <prvAddNewTaskToReadyList+0xd8>)
 8013bee:	441a      	add	r2, r3
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	3304      	adds	r3, #4
 8013bf4:	4619      	mov	r1, r3
 8013bf6:	4610      	mov	r0, r2
 8013bf8:	f7ff f827 	bl	8012c4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013bfc:	f001 fa1a 	bl	8015034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013c00:	4b0d      	ldr	r3, [pc, #52]	; (8013c38 <prvAddNewTaskToReadyList+0xcc>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d00e      	beq.n	8013c26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013c08:	4b0a      	ldr	r3, [pc, #40]	; (8013c34 <prvAddNewTaskToReadyList+0xc8>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c12:	429a      	cmp	r2, r3
 8013c14:	d207      	bcs.n	8013c26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013c16:	4b0c      	ldr	r3, [pc, #48]	; (8013c48 <prvAddNewTaskToReadyList+0xdc>)
 8013c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c1c:	601a      	str	r2, [r3, #0]
 8013c1e:	f3bf 8f4f 	dsb	sy
 8013c22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c26:	bf00      	nop
 8013c28:	3708      	adds	r7, #8
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	20003280 	.word	0x20003280
 8013c34:	20002dac 	.word	0x20002dac
 8013c38:	2000328c 	.word	0x2000328c
 8013c3c:	2000329c 	.word	0x2000329c
 8013c40:	20003288 	.word	0x20003288
 8013c44:	20002db0 	.word	0x20002db0
 8013c48:	e000ed04 	.word	0xe000ed04

08013c4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013c54:	2300      	movs	r3, #0
 8013c56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d017      	beq.n	8013c8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013c5e:	4b13      	ldr	r3, [pc, #76]	; (8013cac <vTaskDelay+0x60>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d00a      	beq.n	8013c7c <vTaskDelay+0x30>
	__asm volatile
 8013c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c6a:	f383 8811 	msr	BASEPRI, r3
 8013c6e:	f3bf 8f6f 	isb	sy
 8013c72:	f3bf 8f4f 	dsb	sy
 8013c76:	60bb      	str	r3, [r7, #8]
}
 8013c78:	bf00      	nop
 8013c7a:	e7fe      	b.n	8013c7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013c7c:	f000 f882 	bl	8013d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013c80:	2100      	movs	r1, #0
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f000 fd10 	bl	80146a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013c88:	f000 f88a 	bl	8013da0 <xTaskResumeAll>
 8013c8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d107      	bne.n	8013ca4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013c94:	4b06      	ldr	r3, [pc, #24]	; (8013cb0 <vTaskDelay+0x64>)
 8013c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c9a:	601a      	str	r2, [r3, #0]
 8013c9c:	f3bf 8f4f 	dsb	sy
 8013ca0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ca4:	bf00      	nop
 8013ca6:	3710      	adds	r7, #16
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	200032a8 	.word	0x200032a8
 8013cb0:	e000ed04 	.word	0xe000ed04

08013cb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b08a      	sub	sp, #40	; 0x28
 8013cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013cc2:	463a      	mov	r2, r7
 8013cc4:	1d39      	adds	r1, r7, #4
 8013cc6:	f107 0308 	add.w	r3, r7, #8
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7fe ff5c 	bl	8012b88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013cd0:	6839      	ldr	r1, [r7, #0]
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	68ba      	ldr	r2, [r7, #8]
 8013cd6:	9202      	str	r2, [sp, #8]
 8013cd8:	9301      	str	r3, [sp, #4]
 8013cda:	2300      	movs	r3, #0
 8013cdc:	9300      	str	r3, [sp, #0]
 8013cde:	2300      	movs	r3, #0
 8013ce0:	460a      	mov	r2, r1
 8013ce2:	4922      	ldr	r1, [pc, #136]	; (8013d6c <vTaskStartScheduler+0xb8>)
 8013ce4:	4822      	ldr	r0, [pc, #136]	; (8013d70 <vTaskStartScheduler+0xbc>)
 8013ce6:	f7ff fe15 	bl	8013914 <xTaskCreateStatic>
 8013cea:	4603      	mov	r3, r0
 8013cec:	4a21      	ldr	r2, [pc, #132]	; (8013d74 <vTaskStartScheduler+0xc0>)
 8013cee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013cf0:	4b20      	ldr	r3, [pc, #128]	; (8013d74 <vTaskStartScheduler+0xc0>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d002      	beq.n	8013cfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	617b      	str	r3, [r7, #20]
 8013cfc:	e001      	b.n	8013d02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	d102      	bne.n	8013d0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013d08:	f000 fd22 	bl	8014750 <xTimerCreateTimerTask>
 8013d0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	2b01      	cmp	r3, #1
 8013d12:	d118      	bne.n	8013d46 <vTaskStartScheduler+0x92>
	__asm volatile
 8013d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d18:	f383 8811 	msr	BASEPRI, r3
 8013d1c:	f3bf 8f6f 	isb	sy
 8013d20:	f3bf 8f4f 	dsb	sy
 8013d24:	613b      	str	r3, [r7, #16]
}
 8013d26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013d28:	4b13      	ldr	r3, [pc, #76]	; (8013d78 <vTaskStartScheduler+0xc4>)
 8013d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013d30:	4b12      	ldr	r3, [pc, #72]	; (8013d7c <vTaskStartScheduler+0xc8>)
 8013d32:	2201      	movs	r2, #1
 8013d34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013d36:	4b12      	ldr	r3, [pc, #72]	; (8013d80 <vTaskStartScheduler+0xcc>)
 8013d38:	2200      	movs	r2, #0
 8013d3a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013d3c:	f7ef fd10 	bl	8003760 <ConfigureRunTimeCounter>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013d40:	f001 f8a6 	bl	8014e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013d44:	e00e      	b.n	8013d64 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013d46:	697b      	ldr	r3, [r7, #20]
 8013d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d4c:	d10a      	bne.n	8013d64 <vTaskStartScheduler+0xb0>
	__asm volatile
 8013d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d52:	f383 8811 	msr	BASEPRI, r3
 8013d56:	f3bf 8f6f 	isb	sy
 8013d5a:	f3bf 8f4f 	dsb	sy
 8013d5e:	60fb      	str	r3, [r7, #12]
}
 8013d60:	bf00      	nop
 8013d62:	e7fe      	b.n	8013d62 <vTaskStartScheduler+0xae>
}
 8013d64:	bf00      	nop
 8013d66:	3718      	adds	r7, #24
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	08016654 	.word	0x08016654
 8013d70:	080143d9 	.word	0x080143d9
 8013d74:	200032a4 	.word	0x200032a4
 8013d78:	200032a0 	.word	0x200032a0
 8013d7c:	2000328c 	.word	0x2000328c
 8013d80:	20003284 	.word	0x20003284

08013d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013d84:	b480      	push	{r7}
 8013d86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013d88:	4b04      	ldr	r3, [pc, #16]	; (8013d9c <vTaskSuspendAll+0x18>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	4a03      	ldr	r2, [pc, #12]	; (8013d9c <vTaskSuspendAll+0x18>)
 8013d90:	6013      	str	r3, [r2, #0]
}
 8013d92:	bf00      	nop
 8013d94:	46bd      	mov	sp, r7
 8013d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9a:	4770      	bx	lr
 8013d9c:	200032a8 	.word	0x200032a8

08013da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b084      	sub	sp, #16
 8013da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013da6:	2300      	movs	r3, #0
 8013da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013daa:	2300      	movs	r3, #0
 8013dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013dae:	4b42      	ldr	r3, [pc, #264]	; (8013eb8 <xTaskResumeAll+0x118>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d10a      	bne.n	8013dcc <xTaskResumeAll+0x2c>
	__asm volatile
 8013db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dba:	f383 8811 	msr	BASEPRI, r3
 8013dbe:	f3bf 8f6f 	isb	sy
 8013dc2:	f3bf 8f4f 	dsb	sy
 8013dc6:	603b      	str	r3, [r7, #0]
}
 8013dc8:	bf00      	nop
 8013dca:	e7fe      	b.n	8013dca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013dcc:	f001 f902 	bl	8014fd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013dd0:	4b39      	ldr	r3, [pc, #228]	; (8013eb8 <xTaskResumeAll+0x118>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	3b01      	subs	r3, #1
 8013dd6:	4a38      	ldr	r2, [pc, #224]	; (8013eb8 <xTaskResumeAll+0x118>)
 8013dd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013dda:	4b37      	ldr	r3, [pc, #220]	; (8013eb8 <xTaskResumeAll+0x118>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d162      	bne.n	8013ea8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013de2:	4b36      	ldr	r3, [pc, #216]	; (8013ebc <xTaskResumeAll+0x11c>)
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d05e      	beq.n	8013ea8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013dea:	e02f      	b.n	8013e4c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8013dec:	4b34      	ldr	r3, [pc, #208]	; (8013ec0 <xTaskResumeAll+0x120>)
 8013dee:	68db      	ldr	r3, [r3, #12]
 8013df0:	68db      	ldr	r3, [r3, #12]
 8013df2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	3318      	adds	r3, #24
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7fe ff83 	bl	8012d04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	3304      	adds	r3, #4
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fe ff7e 	bl	8012d04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e0c:	4b2d      	ldr	r3, [pc, #180]	; (8013ec4 <xTaskResumeAll+0x124>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d903      	bls.n	8013e1c <xTaskResumeAll+0x7c>
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e18:	4a2a      	ldr	r2, [pc, #168]	; (8013ec4 <xTaskResumeAll+0x124>)
 8013e1a:	6013      	str	r3, [r2, #0]
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e20:	4613      	mov	r3, r2
 8013e22:	009b      	lsls	r3, r3, #2
 8013e24:	4413      	add	r3, r2
 8013e26:	009b      	lsls	r3, r3, #2
 8013e28:	4a27      	ldr	r2, [pc, #156]	; (8013ec8 <xTaskResumeAll+0x128>)
 8013e2a:	441a      	add	r2, r3
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	3304      	adds	r3, #4
 8013e30:	4619      	mov	r1, r3
 8013e32:	4610      	mov	r0, r2
 8013e34:	f7fe ff09 	bl	8012c4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e3c:	4b23      	ldr	r3, [pc, #140]	; (8013ecc <xTaskResumeAll+0x12c>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d302      	bcc.n	8013e4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013e46:	4b22      	ldr	r3, [pc, #136]	; (8013ed0 <xTaskResumeAll+0x130>)
 8013e48:	2201      	movs	r2, #1
 8013e4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013e4c:	4b1c      	ldr	r3, [pc, #112]	; (8013ec0 <xTaskResumeAll+0x120>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d1cb      	bne.n	8013dec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d001      	beq.n	8013e5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013e5a:	f000 fb73 	bl	8014544 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013e5e:	4b1d      	ldr	r3, [pc, #116]	; (8013ed4 <xTaskResumeAll+0x134>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d010      	beq.n	8013e8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013e6a:	f000 f847 	bl	8013efc <xTaskIncrementTick>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d002      	beq.n	8013e7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013e74:	4b16      	ldr	r3, [pc, #88]	; (8013ed0 <xTaskResumeAll+0x130>)
 8013e76:	2201      	movs	r2, #1
 8013e78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	3b01      	subs	r3, #1
 8013e7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d1f1      	bne.n	8013e6a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8013e86:	4b13      	ldr	r3, [pc, #76]	; (8013ed4 <xTaskResumeAll+0x134>)
 8013e88:	2200      	movs	r2, #0
 8013e8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013e8c:	4b10      	ldr	r3, [pc, #64]	; (8013ed0 <xTaskResumeAll+0x130>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d009      	beq.n	8013ea8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013e94:	2301      	movs	r3, #1
 8013e96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013e98:	4b0f      	ldr	r3, [pc, #60]	; (8013ed8 <xTaskResumeAll+0x138>)
 8013e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e9e:	601a      	str	r2, [r3, #0]
 8013ea0:	f3bf 8f4f 	dsb	sy
 8013ea4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013ea8:	f001 f8c4 	bl	8015034 <vPortExitCritical>

	return xAlreadyYielded;
 8013eac:	68bb      	ldr	r3, [r7, #8]
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3710      	adds	r7, #16
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	200032a8 	.word	0x200032a8
 8013ebc:	20003280 	.word	0x20003280
 8013ec0:	20003240 	.word	0x20003240
 8013ec4:	20003288 	.word	0x20003288
 8013ec8:	20002db0 	.word	0x20002db0
 8013ecc:	20002dac 	.word	0x20002dac
 8013ed0:	20003294 	.word	0x20003294
 8013ed4:	20003290 	.word	0x20003290
 8013ed8:	e000ed04 	.word	0xe000ed04

08013edc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013edc:	b480      	push	{r7}
 8013ede:	b083      	sub	sp, #12
 8013ee0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013ee2:	4b05      	ldr	r3, [pc, #20]	; (8013ef8 <xTaskGetTickCount+0x1c>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013ee8:	687b      	ldr	r3, [r7, #4]
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	370c      	adds	r7, #12
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef4:	4770      	bx	lr
 8013ef6:	bf00      	nop
 8013ef8:	20003284 	.word	0x20003284

08013efc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b086      	sub	sp, #24
 8013f00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013f02:	2300      	movs	r3, #0
 8013f04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f06:	4b51      	ldr	r3, [pc, #324]	; (801404c <xTaskIncrementTick+0x150>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	f040 808e 	bne.w	801402c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013f10:	4b4f      	ldr	r3, [pc, #316]	; (8014050 <xTaskIncrementTick+0x154>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	3301      	adds	r3, #1
 8013f16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013f18:	4a4d      	ldr	r2, [pc, #308]	; (8014050 <xTaskIncrementTick+0x154>)
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d120      	bne.n	8013f66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013f24:	4b4b      	ldr	r3, [pc, #300]	; (8014054 <xTaskIncrementTick+0x158>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d00a      	beq.n	8013f44 <xTaskIncrementTick+0x48>
	__asm volatile
 8013f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f32:	f383 8811 	msr	BASEPRI, r3
 8013f36:	f3bf 8f6f 	isb	sy
 8013f3a:	f3bf 8f4f 	dsb	sy
 8013f3e:	603b      	str	r3, [r7, #0]
}
 8013f40:	bf00      	nop
 8013f42:	e7fe      	b.n	8013f42 <xTaskIncrementTick+0x46>
 8013f44:	4b43      	ldr	r3, [pc, #268]	; (8014054 <xTaskIncrementTick+0x158>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	60fb      	str	r3, [r7, #12]
 8013f4a:	4b43      	ldr	r3, [pc, #268]	; (8014058 <xTaskIncrementTick+0x15c>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	4a41      	ldr	r2, [pc, #260]	; (8014054 <xTaskIncrementTick+0x158>)
 8013f50:	6013      	str	r3, [r2, #0]
 8013f52:	4a41      	ldr	r2, [pc, #260]	; (8014058 <xTaskIncrementTick+0x15c>)
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	6013      	str	r3, [r2, #0]
 8013f58:	4b40      	ldr	r3, [pc, #256]	; (801405c <xTaskIncrementTick+0x160>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	4a3f      	ldr	r2, [pc, #252]	; (801405c <xTaskIncrementTick+0x160>)
 8013f60:	6013      	str	r3, [r2, #0]
 8013f62:	f000 faef 	bl	8014544 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013f66:	4b3e      	ldr	r3, [pc, #248]	; (8014060 <xTaskIncrementTick+0x164>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	693a      	ldr	r2, [r7, #16]
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d34e      	bcc.n	801400e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f70:	4b38      	ldr	r3, [pc, #224]	; (8014054 <xTaskIncrementTick+0x158>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d101      	bne.n	8013f7e <xTaskIncrementTick+0x82>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	e000      	b.n	8013f80 <xTaskIncrementTick+0x84>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d004      	beq.n	8013f8e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f84:	4b36      	ldr	r3, [pc, #216]	; (8014060 <xTaskIncrementTick+0x164>)
 8013f86:	f04f 32ff 	mov.w	r2, #4294967295
 8013f8a:	601a      	str	r2, [r3, #0]
					break;
 8013f8c:	e03f      	b.n	801400e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013f8e:	4b31      	ldr	r3, [pc, #196]	; (8014054 <xTaskIncrementTick+0x158>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	68db      	ldr	r3, [r3, #12]
 8013f94:	68db      	ldr	r3, [r3, #12]
 8013f96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	685b      	ldr	r3, [r3, #4]
 8013f9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013f9e:	693a      	ldr	r2, [r7, #16]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	429a      	cmp	r2, r3
 8013fa4:	d203      	bcs.n	8013fae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013fa6:	4a2e      	ldr	r2, [pc, #184]	; (8014060 <xTaskIncrementTick+0x164>)
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	6013      	str	r3, [r2, #0]
						break;
 8013fac:	e02f      	b.n	801400e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	3304      	adds	r3, #4
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7fe fea6 	bl	8012d04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d004      	beq.n	8013fca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	3318      	adds	r3, #24
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7fe fe9d 	bl	8012d04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fce:	4b25      	ldr	r3, [pc, #148]	; (8014064 <xTaskIncrementTick+0x168>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	d903      	bls.n	8013fde <xTaskIncrementTick+0xe2>
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fda:	4a22      	ldr	r2, [pc, #136]	; (8014064 <xTaskIncrementTick+0x168>)
 8013fdc:	6013      	str	r3, [r2, #0]
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fe2:	4613      	mov	r3, r2
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	4413      	add	r3, r2
 8013fe8:	009b      	lsls	r3, r3, #2
 8013fea:	4a1f      	ldr	r2, [pc, #124]	; (8014068 <xTaskIncrementTick+0x16c>)
 8013fec:	441a      	add	r2, r3
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	3304      	adds	r3, #4
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	4610      	mov	r0, r2
 8013ff6:	f7fe fe28 	bl	8012c4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ffe:	4b1b      	ldr	r3, [pc, #108]	; (801406c <xTaskIncrementTick+0x170>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014004:	429a      	cmp	r2, r3
 8014006:	d3b3      	bcc.n	8013f70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014008:	2301      	movs	r3, #1
 801400a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801400c:	e7b0      	b.n	8013f70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801400e:	4b17      	ldr	r3, [pc, #92]	; (801406c <xTaskIncrementTick+0x170>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014014:	4914      	ldr	r1, [pc, #80]	; (8014068 <xTaskIncrementTick+0x16c>)
 8014016:	4613      	mov	r3, r2
 8014018:	009b      	lsls	r3, r3, #2
 801401a:	4413      	add	r3, r2
 801401c:	009b      	lsls	r3, r3, #2
 801401e:	440b      	add	r3, r1
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	2b01      	cmp	r3, #1
 8014024:	d907      	bls.n	8014036 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8014026:	2301      	movs	r3, #1
 8014028:	617b      	str	r3, [r7, #20]
 801402a:	e004      	b.n	8014036 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801402c:	4b10      	ldr	r3, [pc, #64]	; (8014070 <xTaskIncrementTick+0x174>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	3301      	adds	r3, #1
 8014032:	4a0f      	ldr	r2, [pc, #60]	; (8014070 <xTaskIncrementTick+0x174>)
 8014034:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014036:	4b0f      	ldr	r3, [pc, #60]	; (8014074 <xTaskIncrementTick+0x178>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d001      	beq.n	8014042 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 801403e:	2301      	movs	r3, #1
 8014040:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014042:	697b      	ldr	r3, [r7, #20]
}
 8014044:	4618      	mov	r0, r3
 8014046:	3718      	adds	r7, #24
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	200032a8 	.word	0x200032a8
 8014050:	20003284 	.word	0x20003284
 8014054:	20003238 	.word	0x20003238
 8014058:	2000323c 	.word	0x2000323c
 801405c:	20003298 	.word	0x20003298
 8014060:	200032a0 	.word	0x200032a0
 8014064:	20003288 	.word	0x20003288
 8014068:	20002db0 	.word	0x20002db0
 801406c:	20002dac 	.word	0x20002dac
 8014070:	20003290 	.word	0x20003290
 8014074:	20003294 	.word	0x20003294

08014078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801407e:	4b33      	ldr	r3, [pc, #204]	; (801414c <vTaskSwitchContext+0xd4>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d003      	beq.n	801408e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014086:	4b32      	ldr	r3, [pc, #200]	; (8014150 <vTaskSwitchContext+0xd8>)
 8014088:	2201      	movs	r2, #1
 801408a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801408c:	e05a      	b.n	8014144 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 801408e:	4b30      	ldr	r3, [pc, #192]	; (8014150 <vTaskSwitchContext+0xd8>)
 8014090:	2200      	movs	r2, #0
 8014092:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8014094:	f7ef fb70 	bl	8003778 <GetRunTimeCounter>
 8014098:	4603      	mov	r3, r0
 801409a:	4a2e      	ldr	r2, [pc, #184]	; (8014154 <vTaskSwitchContext+0xdc>)
 801409c:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 801409e:	4b2d      	ldr	r3, [pc, #180]	; (8014154 <vTaskSwitchContext+0xdc>)
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	4b2d      	ldr	r3, [pc, #180]	; (8014158 <vTaskSwitchContext+0xe0>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	429a      	cmp	r2, r3
 80140a8:	d909      	bls.n	80140be <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80140aa:	4b2c      	ldr	r3, [pc, #176]	; (801415c <vTaskSwitchContext+0xe4>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80140b0:	4a28      	ldr	r2, [pc, #160]	; (8014154 <vTaskSwitchContext+0xdc>)
 80140b2:	6810      	ldr	r0, [r2, #0]
 80140b4:	4a28      	ldr	r2, [pc, #160]	; (8014158 <vTaskSwitchContext+0xe0>)
 80140b6:	6812      	ldr	r2, [r2, #0]
 80140b8:	1a82      	subs	r2, r0, r2
 80140ba:	440a      	add	r2, r1
 80140bc:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 80140be:	4b25      	ldr	r3, [pc, #148]	; (8014154 <vTaskSwitchContext+0xdc>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	4a25      	ldr	r2, [pc, #148]	; (8014158 <vTaskSwitchContext+0xe0>)
 80140c4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80140c6:	4b26      	ldr	r3, [pc, #152]	; (8014160 <vTaskSwitchContext+0xe8>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	60fb      	str	r3, [r7, #12]
 80140cc:	e010      	b.n	80140f0 <vTaskSwitchContext+0x78>
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d10a      	bne.n	80140ea <vTaskSwitchContext+0x72>
	__asm volatile
 80140d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d8:	f383 8811 	msr	BASEPRI, r3
 80140dc:	f3bf 8f6f 	isb	sy
 80140e0:	f3bf 8f4f 	dsb	sy
 80140e4:	607b      	str	r3, [r7, #4]
}
 80140e6:	bf00      	nop
 80140e8:	e7fe      	b.n	80140e8 <vTaskSwitchContext+0x70>
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	3b01      	subs	r3, #1
 80140ee:	60fb      	str	r3, [r7, #12]
 80140f0:	491c      	ldr	r1, [pc, #112]	; (8014164 <vTaskSwitchContext+0xec>)
 80140f2:	68fa      	ldr	r2, [r7, #12]
 80140f4:	4613      	mov	r3, r2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	4413      	add	r3, r2
 80140fa:	009b      	lsls	r3, r3, #2
 80140fc:	440b      	add	r3, r1
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d0e4      	beq.n	80140ce <vTaskSwitchContext+0x56>
 8014104:	68fa      	ldr	r2, [r7, #12]
 8014106:	4613      	mov	r3, r2
 8014108:	009b      	lsls	r3, r3, #2
 801410a:	4413      	add	r3, r2
 801410c:	009b      	lsls	r3, r3, #2
 801410e:	4a15      	ldr	r2, [pc, #84]	; (8014164 <vTaskSwitchContext+0xec>)
 8014110:	4413      	add	r3, r2
 8014112:	60bb      	str	r3, [r7, #8]
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	685a      	ldr	r2, [r3, #4]
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	605a      	str	r2, [r3, #4]
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	685a      	ldr	r2, [r3, #4]
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	3308      	adds	r3, #8
 8014126:	429a      	cmp	r2, r3
 8014128:	d104      	bne.n	8014134 <vTaskSwitchContext+0xbc>
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	685b      	ldr	r3, [r3, #4]
 801412e:	685a      	ldr	r2, [r3, #4]
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	605a      	str	r2, [r3, #4]
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	685b      	ldr	r3, [r3, #4]
 8014138:	68db      	ldr	r3, [r3, #12]
 801413a:	4a08      	ldr	r2, [pc, #32]	; (801415c <vTaskSwitchContext+0xe4>)
 801413c:	6013      	str	r3, [r2, #0]
 801413e:	4a08      	ldr	r2, [pc, #32]	; (8014160 <vTaskSwitchContext+0xe8>)
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	6013      	str	r3, [r2, #0]
}
 8014144:	bf00      	nop
 8014146:	3710      	adds	r7, #16
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}
 801414c:	200032a8 	.word	0x200032a8
 8014150:	20003294 	.word	0x20003294
 8014154:	200032b0 	.word	0x200032b0
 8014158:	200032ac 	.word	0x200032ac
 801415c:	20002dac 	.word	0x20002dac
 8014160:	20003288 	.word	0x20003288
 8014164:	20002db0 	.word	0x20002db0

08014168 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b084      	sub	sp, #16
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d10a      	bne.n	801418e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801417c:	f383 8811 	msr	BASEPRI, r3
 8014180:	f3bf 8f6f 	isb	sy
 8014184:	f3bf 8f4f 	dsb	sy
 8014188:	60fb      	str	r3, [r7, #12]
}
 801418a:	bf00      	nop
 801418c:	e7fe      	b.n	801418c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801418e:	4b07      	ldr	r3, [pc, #28]	; (80141ac <vTaskPlaceOnEventList+0x44>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	3318      	adds	r3, #24
 8014194:	4619      	mov	r1, r3
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f7fe fd7b 	bl	8012c92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801419c:	2101      	movs	r1, #1
 801419e:	6838      	ldr	r0, [r7, #0]
 80141a0:	f000 fa82 	bl	80146a8 <prvAddCurrentTaskToDelayedList>
}
 80141a4:	bf00      	nop
 80141a6:	3710      	adds	r7, #16
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	20002dac 	.word	0x20002dac

080141b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b086      	sub	sp, #24
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d10a      	bne.n	80141d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80141c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c6:	f383 8811 	msr	BASEPRI, r3
 80141ca:	f3bf 8f6f 	isb	sy
 80141ce:	f3bf 8f4f 	dsb	sy
 80141d2:	617b      	str	r3, [r7, #20]
}
 80141d4:	bf00      	nop
 80141d6:	e7fe      	b.n	80141d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80141d8:	4b0a      	ldr	r3, [pc, #40]	; (8014204 <vTaskPlaceOnEventListRestricted+0x54>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	3318      	adds	r3, #24
 80141de:	4619      	mov	r1, r3
 80141e0:	68f8      	ldr	r0, [r7, #12]
 80141e2:	f7fe fd32 	bl	8012c4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d002      	beq.n	80141f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80141ec:	f04f 33ff 	mov.w	r3, #4294967295
 80141f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80141f2:	6879      	ldr	r1, [r7, #4]
 80141f4:	68b8      	ldr	r0, [r7, #8]
 80141f6:	f000 fa57 	bl	80146a8 <prvAddCurrentTaskToDelayedList>
	}
 80141fa:	bf00      	nop
 80141fc:	3718      	adds	r7, #24
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
 8014202:	bf00      	nop
 8014204:	20002dac 	.word	0x20002dac

08014208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b086      	sub	sp, #24
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	68db      	ldr	r3, [r3, #12]
 8014214:	68db      	ldr	r3, [r3, #12]
 8014216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d10a      	bne.n	8014234 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014222:	f383 8811 	msr	BASEPRI, r3
 8014226:	f3bf 8f6f 	isb	sy
 801422a:	f3bf 8f4f 	dsb	sy
 801422e:	60fb      	str	r3, [r7, #12]
}
 8014230:	bf00      	nop
 8014232:	e7fe      	b.n	8014232 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014234:	693b      	ldr	r3, [r7, #16]
 8014236:	3318      	adds	r3, #24
 8014238:	4618      	mov	r0, r3
 801423a:	f7fe fd63 	bl	8012d04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801423e:	4b1e      	ldr	r3, [pc, #120]	; (80142b8 <xTaskRemoveFromEventList+0xb0>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d11d      	bne.n	8014282 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014246:	693b      	ldr	r3, [r7, #16]
 8014248:	3304      	adds	r3, #4
 801424a:	4618      	mov	r0, r3
 801424c:	f7fe fd5a 	bl	8012d04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014254:	4b19      	ldr	r3, [pc, #100]	; (80142bc <xTaskRemoveFromEventList+0xb4>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	429a      	cmp	r2, r3
 801425a:	d903      	bls.n	8014264 <xTaskRemoveFromEventList+0x5c>
 801425c:	693b      	ldr	r3, [r7, #16]
 801425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014260:	4a16      	ldr	r2, [pc, #88]	; (80142bc <xTaskRemoveFromEventList+0xb4>)
 8014262:	6013      	str	r3, [r2, #0]
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014268:	4613      	mov	r3, r2
 801426a:	009b      	lsls	r3, r3, #2
 801426c:	4413      	add	r3, r2
 801426e:	009b      	lsls	r3, r3, #2
 8014270:	4a13      	ldr	r2, [pc, #76]	; (80142c0 <xTaskRemoveFromEventList+0xb8>)
 8014272:	441a      	add	r2, r3
 8014274:	693b      	ldr	r3, [r7, #16]
 8014276:	3304      	adds	r3, #4
 8014278:	4619      	mov	r1, r3
 801427a:	4610      	mov	r0, r2
 801427c:	f7fe fce5 	bl	8012c4a <vListInsertEnd>
 8014280:	e005      	b.n	801428e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	3318      	adds	r3, #24
 8014286:	4619      	mov	r1, r3
 8014288:	480e      	ldr	r0, [pc, #56]	; (80142c4 <xTaskRemoveFromEventList+0xbc>)
 801428a:	f7fe fcde 	bl	8012c4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014292:	4b0d      	ldr	r3, [pc, #52]	; (80142c8 <xTaskRemoveFromEventList+0xc0>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014298:	429a      	cmp	r2, r3
 801429a:	d905      	bls.n	80142a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801429c:	2301      	movs	r3, #1
 801429e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80142a0:	4b0a      	ldr	r3, [pc, #40]	; (80142cc <xTaskRemoveFromEventList+0xc4>)
 80142a2:	2201      	movs	r2, #1
 80142a4:	601a      	str	r2, [r3, #0]
 80142a6:	e001      	b.n	80142ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80142a8:	2300      	movs	r3, #0
 80142aa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80142ac:	697b      	ldr	r3, [r7, #20]
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3718      	adds	r7, #24
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	200032a8 	.word	0x200032a8
 80142bc:	20003288 	.word	0x20003288
 80142c0:	20002db0 	.word	0x20002db0
 80142c4:	20003240 	.word	0x20003240
 80142c8:	20002dac 	.word	0x20002dac
 80142cc:	20003294 	.word	0x20003294

080142d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80142d8:	4b06      	ldr	r3, [pc, #24]	; (80142f4 <vTaskInternalSetTimeOutState+0x24>)
 80142da:	681a      	ldr	r2, [r3, #0]
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80142e0:	4b05      	ldr	r3, [pc, #20]	; (80142f8 <vTaskInternalSetTimeOutState+0x28>)
 80142e2:	681a      	ldr	r2, [r3, #0]
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	605a      	str	r2, [r3, #4]
}
 80142e8:	bf00      	nop
 80142ea:	370c      	adds	r7, #12
 80142ec:	46bd      	mov	sp, r7
 80142ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f2:	4770      	bx	lr
 80142f4:	20003298 	.word	0x20003298
 80142f8:	20003284 	.word	0x20003284

080142fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b088      	sub	sp, #32
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d10a      	bne.n	8014322 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014310:	f383 8811 	msr	BASEPRI, r3
 8014314:	f3bf 8f6f 	isb	sy
 8014318:	f3bf 8f4f 	dsb	sy
 801431c:	613b      	str	r3, [r7, #16]
}
 801431e:	bf00      	nop
 8014320:	e7fe      	b.n	8014320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d10a      	bne.n	801433e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801432c:	f383 8811 	msr	BASEPRI, r3
 8014330:	f3bf 8f6f 	isb	sy
 8014334:	f3bf 8f4f 	dsb	sy
 8014338:	60fb      	str	r3, [r7, #12]
}
 801433a:	bf00      	nop
 801433c:	e7fe      	b.n	801433c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801433e:	f000 fe49 	bl	8014fd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014342:	4b1d      	ldr	r3, [pc, #116]	; (80143b8 <xTaskCheckForTimeOut+0xbc>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	69ba      	ldr	r2, [r7, #24]
 801434e:	1ad3      	subs	r3, r2, r3
 8014350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801435a:	d102      	bne.n	8014362 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801435c:	2300      	movs	r3, #0
 801435e:	61fb      	str	r3, [r7, #28]
 8014360:	e023      	b.n	80143aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681a      	ldr	r2, [r3, #0]
 8014366:	4b15      	ldr	r3, [pc, #84]	; (80143bc <xTaskCheckForTimeOut+0xc0>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	429a      	cmp	r2, r3
 801436c:	d007      	beq.n	801437e <xTaskCheckForTimeOut+0x82>
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	69ba      	ldr	r2, [r7, #24]
 8014374:	429a      	cmp	r2, r3
 8014376:	d302      	bcc.n	801437e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014378:	2301      	movs	r3, #1
 801437a:	61fb      	str	r3, [r7, #28]
 801437c:	e015      	b.n	80143aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	697a      	ldr	r2, [r7, #20]
 8014384:	429a      	cmp	r2, r3
 8014386:	d20b      	bcs.n	80143a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	681a      	ldr	r2, [r3, #0]
 801438c:	697b      	ldr	r3, [r7, #20]
 801438e:	1ad2      	subs	r2, r2, r3
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f7ff ff9b 	bl	80142d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801439a:	2300      	movs	r3, #0
 801439c:	61fb      	str	r3, [r7, #28]
 801439e:	e004      	b.n	80143aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	2200      	movs	r2, #0
 80143a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80143a6:	2301      	movs	r3, #1
 80143a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80143aa:	f000 fe43 	bl	8015034 <vPortExitCritical>

	return xReturn;
 80143ae:	69fb      	ldr	r3, [r7, #28]
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3720      	adds	r7, #32
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}
 80143b8:	20003284 	.word	0x20003284
 80143bc:	20003298 	.word	0x20003298

080143c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80143c0:	b480      	push	{r7}
 80143c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80143c4:	4b03      	ldr	r3, [pc, #12]	; (80143d4 <vTaskMissedYield+0x14>)
 80143c6:	2201      	movs	r2, #1
 80143c8:	601a      	str	r2, [r3, #0]
}
 80143ca:	bf00      	nop
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr
 80143d4:	20003294 	.word	0x20003294

080143d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80143e0:	f000 f852 	bl	8014488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80143e4:	4b06      	ldr	r3, [pc, #24]	; (8014400 <prvIdleTask+0x28>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	2b01      	cmp	r3, #1
 80143ea:	d9f9      	bls.n	80143e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80143ec:	4b05      	ldr	r3, [pc, #20]	; (8014404 <prvIdleTask+0x2c>)
 80143ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143f2:	601a      	str	r2, [r3, #0]
 80143f4:	f3bf 8f4f 	dsb	sy
 80143f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80143fc:	e7f0      	b.n	80143e0 <prvIdleTask+0x8>
 80143fe:	bf00      	nop
 8014400:	20002db0 	.word	0x20002db0
 8014404:	e000ed04 	.word	0xe000ed04

08014408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b082      	sub	sp, #8
 801440c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801440e:	2300      	movs	r3, #0
 8014410:	607b      	str	r3, [r7, #4]
 8014412:	e00c      	b.n	801442e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	4613      	mov	r3, r2
 8014418:	009b      	lsls	r3, r3, #2
 801441a:	4413      	add	r3, r2
 801441c:	009b      	lsls	r3, r3, #2
 801441e:	4a12      	ldr	r2, [pc, #72]	; (8014468 <prvInitialiseTaskLists+0x60>)
 8014420:	4413      	add	r3, r2
 8014422:	4618      	mov	r0, r3
 8014424:	f7fe fbe4 	bl	8012bf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	3301      	adds	r3, #1
 801442c:	607b      	str	r3, [r7, #4]
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2b37      	cmp	r3, #55	; 0x37
 8014432:	d9ef      	bls.n	8014414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014434:	480d      	ldr	r0, [pc, #52]	; (801446c <prvInitialiseTaskLists+0x64>)
 8014436:	f7fe fbdb 	bl	8012bf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801443a:	480d      	ldr	r0, [pc, #52]	; (8014470 <prvInitialiseTaskLists+0x68>)
 801443c:	f7fe fbd8 	bl	8012bf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014440:	480c      	ldr	r0, [pc, #48]	; (8014474 <prvInitialiseTaskLists+0x6c>)
 8014442:	f7fe fbd5 	bl	8012bf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014446:	480c      	ldr	r0, [pc, #48]	; (8014478 <prvInitialiseTaskLists+0x70>)
 8014448:	f7fe fbd2 	bl	8012bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801444c:	480b      	ldr	r0, [pc, #44]	; (801447c <prvInitialiseTaskLists+0x74>)
 801444e:	f7fe fbcf 	bl	8012bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014452:	4b0b      	ldr	r3, [pc, #44]	; (8014480 <prvInitialiseTaskLists+0x78>)
 8014454:	4a05      	ldr	r2, [pc, #20]	; (801446c <prvInitialiseTaskLists+0x64>)
 8014456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014458:	4b0a      	ldr	r3, [pc, #40]	; (8014484 <prvInitialiseTaskLists+0x7c>)
 801445a:	4a05      	ldr	r2, [pc, #20]	; (8014470 <prvInitialiseTaskLists+0x68>)
 801445c:	601a      	str	r2, [r3, #0]
}
 801445e:	bf00      	nop
 8014460:	3708      	adds	r7, #8
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}
 8014466:	bf00      	nop
 8014468:	20002db0 	.word	0x20002db0
 801446c:	20003210 	.word	0x20003210
 8014470:	20003224 	.word	0x20003224
 8014474:	20003240 	.word	0x20003240
 8014478:	20003254 	.word	0x20003254
 801447c:	2000326c 	.word	0x2000326c
 8014480:	20003238 	.word	0x20003238
 8014484:	2000323c 	.word	0x2000323c

08014488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801448e:	e019      	b.n	80144c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014490:	f000 fda0 	bl	8014fd4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8014494:	4b10      	ldr	r3, [pc, #64]	; (80144d8 <prvCheckTasksWaitingTermination+0x50>)
 8014496:	68db      	ldr	r3, [r3, #12]
 8014498:	68db      	ldr	r3, [r3, #12]
 801449a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	3304      	adds	r3, #4
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7fe fc2f 	bl	8012d04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80144a6:	4b0d      	ldr	r3, [pc, #52]	; (80144dc <prvCheckTasksWaitingTermination+0x54>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	3b01      	subs	r3, #1
 80144ac:	4a0b      	ldr	r2, [pc, #44]	; (80144dc <prvCheckTasksWaitingTermination+0x54>)
 80144ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80144b0:	4b0b      	ldr	r3, [pc, #44]	; (80144e0 <prvCheckTasksWaitingTermination+0x58>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	3b01      	subs	r3, #1
 80144b6:	4a0a      	ldr	r2, [pc, #40]	; (80144e0 <prvCheckTasksWaitingTermination+0x58>)
 80144b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80144ba:	f000 fdbb 	bl	8015034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f000 f810 	bl	80144e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80144c4:	4b06      	ldr	r3, [pc, #24]	; (80144e0 <prvCheckTasksWaitingTermination+0x58>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d1e1      	bne.n	8014490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80144cc:	bf00      	nop
 80144ce:	bf00      	nop
 80144d0:	3708      	adds	r7, #8
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
 80144d6:	bf00      	nop
 80144d8:	20003254 	.word	0x20003254
 80144dc:	20003280 	.word	0x20003280
 80144e0:	20003268 	.word	0x20003268

080144e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b084      	sub	sp, #16
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d108      	bne.n	8014508 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144fa:	4618      	mov	r0, r3
 80144fc:	f000 fed2 	bl	80152a4 <vPortFree>
				vPortFree( pxTCB );
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	f000 fecf 	bl	80152a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014506:	e018      	b.n	801453a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801450e:	2b01      	cmp	r3, #1
 8014510:	d103      	bne.n	801451a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 fec6 	bl	80152a4 <vPortFree>
	}
 8014518:	e00f      	b.n	801453a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014520:	2b02      	cmp	r3, #2
 8014522:	d00a      	beq.n	801453a <prvDeleteTCB+0x56>
	__asm volatile
 8014524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014528:	f383 8811 	msr	BASEPRI, r3
 801452c:	f3bf 8f6f 	isb	sy
 8014530:	f3bf 8f4f 	dsb	sy
 8014534:	60fb      	str	r3, [r7, #12]
}
 8014536:	bf00      	nop
 8014538:	e7fe      	b.n	8014538 <prvDeleteTCB+0x54>
	}
 801453a:	bf00      	nop
 801453c:	3710      	adds	r7, #16
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
	...

08014544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014544:	b480      	push	{r7}
 8014546:	b083      	sub	sp, #12
 8014548:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801454a:	4b0f      	ldr	r3, [pc, #60]	; (8014588 <prvResetNextTaskUnblockTime+0x44>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d101      	bne.n	8014558 <prvResetNextTaskUnblockTime+0x14>
 8014554:	2301      	movs	r3, #1
 8014556:	e000      	b.n	801455a <prvResetNextTaskUnblockTime+0x16>
 8014558:	2300      	movs	r3, #0
 801455a:	2b00      	cmp	r3, #0
 801455c:	d004      	beq.n	8014568 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801455e:	4b0b      	ldr	r3, [pc, #44]	; (801458c <prvResetNextTaskUnblockTime+0x48>)
 8014560:	f04f 32ff 	mov.w	r2, #4294967295
 8014564:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014566:	e008      	b.n	801457a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014568:	4b07      	ldr	r3, [pc, #28]	; (8014588 <prvResetNextTaskUnblockTime+0x44>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	68db      	ldr	r3, [r3, #12]
 8014570:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	4a05      	ldr	r2, [pc, #20]	; (801458c <prvResetNextTaskUnblockTime+0x48>)
 8014578:	6013      	str	r3, [r2, #0]
}
 801457a:	bf00      	nop
 801457c:	370c      	adds	r7, #12
 801457e:	46bd      	mov	sp, r7
 8014580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014584:	4770      	bx	lr
 8014586:	bf00      	nop
 8014588:	20003238 	.word	0x20003238
 801458c:	200032a0 	.word	0x200032a0

08014590 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014590:	b480      	push	{r7}
 8014592:	b083      	sub	sp, #12
 8014594:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014596:	4b0b      	ldr	r3, [pc, #44]	; (80145c4 <xTaskGetSchedulerState+0x34>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d102      	bne.n	80145a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801459e:	2301      	movs	r3, #1
 80145a0:	607b      	str	r3, [r7, #4]
 80145a2:	e008      	b.n	80145b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145a4:	4b08      	ldr	r3, [pc, #32]	; (80145c8 <xTaskGetSchedulerState+0x38>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d102      	bne.n	80145b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80145ac:	2302      	movs	r3, #2
 80145ae:	607b      	str	r3, [r7, #4]
 80145b0:	e001      	b.n	80145b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80145b2:	2300      	movs	r3, #0
 80145b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80145b6:	687b      	ldr	r3, [r7, #4]
	}
 80145b8:	4618      	mov	r0, r3
 80145ba:	370c      	adds	r7, #12
 80145bc:	46bd      	mov	sp, r7
 80145be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c2:	4770      	bx	lr
 80145c4:	2000328c 	.word	0x2000328c
 80145c8:	200032a8 	.word	0x200032a8

080145cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b086      	sub	sp, #24
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80145d8:	2300      	movs	r3, #0
 80145da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d056      	beq.n	8014690 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80145e2:	4b2e      	ldr	r3, [pc, #184]	; (801469c <xTaskPriorityDisinherit+0xd0>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	693a      	ldr	r2, [r7, #16]
 80145e8:	429a      	cmp	r2, r3
 80145ea:	d00a      	beq.n	8014602 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80145ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145f0:	f383 8811 	msr	BASEPRI, r3
 80145f4:	f3bf 8f6f 	isb	sy
 80145f8:	f3bf 8f4f 	dsb	sy
 80145fc:	60fb      	str	r3, [r7, #12]
}
 80145fe:	bf00      	nop
 8014600:	e7fe      	b.n	8014600 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014606:	2b00      	cmp	r3, #0
 8014608:	d10a      	bne.n	8014620 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801460e:	f383 8811 	msr	BASEPRI, r3
 8014612:	f3bf 8f6f 	isb	sy
 8014616:	f3bf 8f4f 	dsb	sy
 801461a:	60bb      	str	r3, [r7, #8]
}
 801461c:	bf00      	nop
 801461e:	e7fe      	b.n	801461e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014624:	1e5a      	subs	r2, r3, #1
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014632:	429a      	cmp	r2, r3
 8014634:	d02c      	beq.n	8014690 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801463a:	2b00      	cmp	r3, #0
 801463c:	d128      	bne.n	8014690 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801463e:	693b      	ldr	r3, [r7, #16]
 8014640:	3304      	adds	r3, #4
 8014642:	4618      	mov	r0, r3
 8014644:	f7fe fb5e 	bl	8012d04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014648:	693b      	ldr	r3, [r7, #16]
 801464a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014650:	693b      	ldr	r3, [r7, #16]
 8014652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014654:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014658:	693b      	ldr	r3, [r7, #16]
 801465a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014660:	4b0f      	ldr	r3, [pc, #60]	; (80146a0 <xTaskPriorityDisinherit+0xd4>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	429a      	cmp	r2, r3
 8014666:	d903      	bls.n	8014670 <xTaskPriorityDisinherit+0xa4>
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801466c:	4a0c      	ldr	r2, [pc, #48]	; (80146a0 <xTaskPriorityDisinherit+0xd4>)
 801466e:	6013      	str	r3, [r2, #0]
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014674:	4613      	mov	r3, r2
 8014676:	009b      	lsls	r3, r3, #2
 8014678:	4413      	add	r3, r2
 801467a:	009b      	lsls	r3, r3, #2
 801467c:	4a09      	ldr	r2, [pc, #36]	; (80146a4 <xTaskPriorityDisinherit+0xd8>)
 801467e:	441a      	add	r2, r3
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	3304      	adds	r3, #4
 8014684:	4619      	mov	r1, r3
 8014686:	4610      	mov	r0, r2
 8014688:	f7fe fadf 	bl	8012c4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801468c:	2301      	movs	r3, #1
 801468e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014690:	697b      	ldr	r3, [r7, #20]
	}
 8014692:	4618      	mov	r0, r3
 8014694:	3718      	adds	r7, #24
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}
 801469a:	bf00      	nop
 801469c:	20002dac 	.word	0x20002dac
 80146a0:	20003288 	.word	0x20003288
 80146a4:	20002db0 	.word	0x20002db0

080146a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b084      	sub	sp, #16
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80146b2:	4b21      	ldr	r3, [pc, #132]	; (8014738 <prvAddCurrentTaskToDelayedList+0x90>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146b8:	4b20      	ldr	r3, [pc, #128]	; (801473c <prvAddCurrentTaskToDelayedList+0x94>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	3304      	adds	r3, #4
 80146be:	4618      	mov	r0, r3
 80146c0:	f7fe fb20 	bl	8012d04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146ca:	d10a      	bne.n	80146e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d007      	beq.n	80146e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146d2:	4b1a      	ldr	r3, [pc, #104]	; (801473c <prvAddCurrentTaskToDelayedList+0x94>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	3304      	adds	r3, #4
 80146d8:	4619      	mov	r1, r3
 80146da:	4819      	ldr	r0, [pc, #100]	; (8014740 <prvAddCurrentTaskToDelayedList+0x98>)
 80146dc:	f7fe fab5 	bl	8012c4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80146e0:	e026      	b.n	8014730 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80146e2:	68fa      	ldr	r2, [r7, #12]
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	4413      	add	r3, r2
 80146e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80146ea:	4b14      	ldr	r3, [pc, #80]	; (801473c <prvAddCurrentTaskToDelayedList+0x94>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	68ba      	ldr	r2, [r7, #8]
 80146f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80146f2:	68ba      	ldr	r2, [r7, #8]
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d209      	bcs.n	801470e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146fa:	4b12      	ldr	r3, [pc, #72]	; (8014744 <prvAddCurrentTaskToDelayedList+0x9c>)
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	4b0f      	ldr	r3, [pc, #60]	; (801473c <prvAddCurrentTaskToDelayedList+0x94>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	3304      	adds	r3, #4
 8014704:	4619      	mov	r1, r3
 8014706:	4610      	mov	r0, r2
 8014708:	f7fe fac3 	bl	8012c92 <vListInsert>
}
 801470c:	e010      	b.n	8014730 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801470e:	4b0e      	ldr	r3, [pc, #56]	; (8014748 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014710:	681a      	ldr	r2, [r3, #0]
 8014712:	4b0a      	ldr	r3, [pc, #40]	; (801473c <prvAddCurrentTaskToDelayedList+0x94>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	3304      	adds	r3, #4
 8014718:	4619      	mov	r1, r3
 801471a:	4610      	mov	r0, r2
 801471c:	f7fe fab9 	bl	8012c92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014720:	4b0a      	ldr	r3, [pc, #40]	; (801474c <prvAddCurrentTaskToDelayedList+0xa4>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	68ba      	ldr	r2, [r7, #8]
 8014726:	429a      	cmp	r2, r3
 8014728:	d202      	bcs.n	8014730 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801472a:	4a08      	ldr	r2, [pc, #32]	; (801474c <prvAddCurrentTaskToDelayedList+0xa4>)
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	6013      	str	r3, [r2, #0]
}
 8014730:	bf00      	nop
 8014732:	3710      	adds	r7, #16
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}
 8014738:	20003284 	.word	0x20003284
 801473c:	20002dac 	.word	0x20002dac
 8014740:	2000326c 	.word	0x2000326c
 8014744:	2000323c 	.word	0x2000323c
 8014748:	20003238 	.word	0x20003238
 801474c:	200032a0 	.word	0x200032a0

08014750 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b08a      	sub	sp, #40	; 0x28
 8014754:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014756:	2300      	movs	r3, #0
 8014758:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801475a:	f000 facb 	bl	8014cf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801475e:	4b1c      	ldr	r3, [pc, #112]	; (80147d0 <xTimerCreateTimerTask+0x80>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d021      	beq.n	80147aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014766:	2300      	movs	r3, #0
 8014768:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801476a:	2300      	movs	r3, #0
 801476c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801476e:	1d3a      	adds	r2, r7, #4
 8014770:	f107 0108 	add.w	r1, r7, #8
 8014774:	f107 030c 	add.w	r3, r7, #12
 8014778:	4618      	mov	r0, r3
 801477a:	f7fe fa1f 	bl	8012bbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801477e:	6879      	ldr	r1, [r7, #4]
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	68fa      	ldr	r2, [r7, #12]
 8014784:	9202      	str	r2, [sp, #8]
 8014786:	9301      	str	r3, [sp, #4]
 8014788:	2302      	movs	r3, #2
 801478a:	9300      	str	r3, [sp, #0]
 801478c:	2300      	movs	r3, #0
 801478e:	460a      	mov	r2, r1
 8014790:	4910      	ldr	r1, [pc, #64]	; (80147d4 <xTimerCreateTimerTask+0x84>)
 8014792:	4811      	ldr	r0, [pc, #68]	; (80147d8 <xTimerCreateTimerTask+0x88>)
 8014794:	f7ff f8be 	bl	8013914 <xTaskCreateStatic>
 8014798:	4603      	mov	r3, r0
 801479a:	4a10      	ldr	r2, [pc, #64]	; (80147dc <xTimerCreateTimerTask+0x8c>)
 801479c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801479e:	4b0f      	ldr	r3, [pc, #60]	; (80147dc <xTimerCreateTimerTask+0x8c>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d001      	beq.n	80147aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80147a6:	2301      	movs	r3, #1
 80147a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d10a      	bne.n	80147c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80147b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b4:	f383 8811 	msr	BASEPRI, r3
 80147b8:	f3bf 8f6f 	isb	sy
 80147bc:	f3bf 8f4f 	dsb	sy
 80147c0:	613b      	str	r3, [r7, #16]
}
 80147c2:	bf00      	nop
 80147c4:	e7fe      	b.n	80147c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80147c6:	697b      	ldr	r3, [r7, #20]
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	3718      	adds	r7, #24
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}
 80147d0:	200032e4 	.word	0x200032e4
 80147d4:	0801665c 	.word	0x0801665c
 80147d8:	080148fd 	.word	0x080148fd
 80147dc:	200032e8 	.word	0x200032e8

080147e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b08a      	sub	sp, #40	; 0x28
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	60f8      	str	r0, [r7, #12]
 80147e8:	60b9      	str	r1, [r7, #8]
 80147ea:	607a      	str	r2, [r7, #4]
 80147ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80147ee:	2300      	movs	r3, #0
 80147f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d10a      	bne.n	801480e <xTimerGenericCommand+0x2e>
	__asm volatile
 80147f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fc:	f383 8811 	msr	BASEPRI, r3
 8014800:	f3bf 8f6f 	isb	sy
 8014804:	f3bf 8f4f 	dsb	sy
 8014808:	623b      	str	r3, [r7, #32]
}
 801480a:	bf00      	nop
 801480c:	e7fe      	b.n	801480c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801480e:	4b1a      	ldr	r3, [pc, #104]	; (8014878 <xTimerGenericCommand+0x98>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d02a      	beq.n	801486c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	2b05      	cmp	r3, #5
 8014826:	dc18      	bgt.n	801485a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014828:	f7ff feb2 	bl	8014590 <xTaskGetSchedulerState>
 801482c:	4603      	mov	r3, r0
 801482e:	2b02      	cmp	r3, #2
 8014830:	d109      	bne.n	8014846 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014832:	4b11      	ldr	r3, [pc, #68]	; (8014878 <xTimerGenericCommand+0x98>)
 8014834:	6818      	ldr	r0, [r3, #0]
 8014836:	f107 0110 	add.w	r1, r7, #16
 801483a:	2300      	movs	r3, #0
 801483c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801483e:	f7fe fbcb 	bl	8012fd8 <xQueueGenericSend>
 8014842:	6278      	str	r0, [r7, #36]	; 0x24
 8014844:	e012      	b.n	801486c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014846:	4b0c      	ldr	r3, [pc, #48]	; (8014878 <xTimerGenericCommand+0x98>)
 8014848:	6818      	ldr	r0, [r3, #0]
 801484a:	f107 0110 	add.w	r1, r7, #16
 801484e:	2300      	movs	r3, #0
 8014850:	2200      	movs	r2, #0
 8014852:	f7fe fbc1 	bl	8012fd8 <xQueueGenericSend>
 8014856:	6278      	str	r0, [r7, #36]	; 0x24
 8014858:	e008      	b.n	801486c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801485a:	4b07      	ldr	r3, [pc, #28]	; (8014878 <xTimerGenericCommand+0x98>)
 801485c:	6818      	ldr	r0, [r3, #0]
 801485e:	f107 0110 	add.w	r1, r7, #16
 8014862:	2300      	movs	r3, #0
 8014864:	683a      	ldr	r2, [r7, #0]
 8014866:	f7fe fcb5 	bl	80131d4 <xQueueGenericSendFromISR>
 801486a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801486e:	4618      	mov	r0, r3
 8014870:	3728      	adds	r7, #40	; 0x28
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}
 8014876:	bf00      	nop
 8014878:	200032e4 	.word	0x200032e4

0801487c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b088      	sub	sp, #32
 8014880:	af02      	add	r7, sp, #8
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014886:	4b1c      	ldr	r3, [pc, #112]	; (80148f8 <prvProcessExpiredTimer+0x7c>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	3304      	adds	r3, #4
 8014894:	4618      	mov	r0, r3
 8014896:	f7fe fa35 	bl	8012d04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801489a:	697b      	ldr	r3, [r7, #20]
 801489c:	69db      	ldr	r3, [r3, #28]
 801489e:	2b01      	cmp	r3, #1
 80148a0:	d122      	bne.n	80148e8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	699a      	ldr	r2, [r3, #24]
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	18d1      	adds	r1, r2, r3
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	683a      	ldr	r2, [r7, #0]
 80148ae:	6978      	ldr	r0, [r7, #20]
 80148b0:	f000 f8c8 	bl	8014a44 <prvInsertTimerInActiveList>
 80148b4:	4603      	mov	r3, r0
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d016      	beq.n	80148e8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80148ba:	2300      	movs	r3, #0
 80148bc:	9300      	str	r3, [sp, #0]
 80148be:	2300      	movs	r3, #0
 80148c0:	687a      	ldr	r2, [r7, #4]
 80148c2:	2100      	movs	r1, #0
 80148c4:	6978      	ldr	r0, [r7, #20]
 80148c6:	f7ff ff8b 	bl	80147e0 <xTimerGenericCommand>
 80148ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80148cc:	693b      	ldr	r3, [r7, #16]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d10a      	bne.n	80148e8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80148d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148d6:	f383 8811 	msr	BASEPRI, r3
 80148da:	f3bf 8f6f 	isb	sy
 80148de:	f3bf 8f4f 	dsb	sy
 80148e2:	60fb      	str	r3, [r7, #12]
}
 80148e4:	bf00      	nop
 80148e6:	e7fe      	b.n	80148e6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80148e8:	697b      	ldr	r3, [r7, #20]
 80148ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ec:	6978      	ldr	r0, [r7, #20]
 80148ee:	4798      	blx	r3
}
 80148f0:	bf00      	nop
 80148f2:	3718      	adds	r7, #24
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	200032dc 	.word	0x200032dc

080148fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b084      	sub	sp, #16
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014904:	f107 0308 	add.w	r3, r7, #8
 8014908:	4618      	mov	r0, r3
 801490a:	f000 f857 	bl	80149bc <prvGetNextExpireTime>
 801490e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	4619      	mov	r1, r3
 8014914:	68f8      	ldr	r0, [r7, #12]
 8014916:	f000 f803 	bl	8014920 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801491a:	f000 f8d5 	bl	8014ac8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801491e:	e7f1      	b.n	8014904 <prvTimerTask+0x8>

08014920 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b084      	sub	sp, #16
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801492a:	f7ff fa2b 	bl	8013d84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801492e:	f107 0308 	add.w	r3, r7, #8
 8014932:	4618      	mov	r0, r3
 8014934:	f000 f866 	bl	8014a04 <prvSampleTimeNow>
 8014938:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d130      	bne.n	80149a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d10a      	bne.n	801495c <prvProcessTimerOrBlockTask+0x3c>
 8014946:	687a      	ldr	r2, [r7, #4]
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	429a      	cmp	r2, r3
 801494c:	d806      	bhi.n	801495c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801494e:	f7ff fa27 	bl	8013da0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014952:	68f9      	ldr	r1, [r7, #12]
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f7ff ff91 	bl	801487c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801495a:	e024      	b.n	80149a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d008      	beq.n	8014974 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014962:	4b13      	ldr	r3, [pc, #76]	; (80149b0 <prvProcessTimerOrBlockTask+0x90>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	2b00      	cmp	r3, #0
 801496a:	bf0c      	ite	eq
 801496c:	2301      	moveq	r3, #1
 801496e:	2300      	movne	r3, #0
 8014970:	b2db      	uxtb	r3, r3
 8014972:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014974:	4b0f      	ldr	r3, [pc, #60]	; (80149b4 <prvProcessTimerOrBlockTask+0x94>)
 8014976:	6818      	ldr	r0, [r3, #0]
 8014978:	687a      	ldr	r2, [r7, #4]
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	1ad3      	subs	r3, r2, r3
 801497e:	683a      	ldr	r2, [r7, #0]
 8014980:	4619      	mov	r1, r3
 8014982:	f7fe ff93 	bl	80138ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014986:	f7ff fa0b 	bl	8013da0 <xTaskResumeAll>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d10a      	bne.n	80149a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014990:	4b09      	ldr	r3, [pc, #36]	; (80149b8 <prvProcessTimerOrBlockTask+0x98>)
 8014992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014996:	601a      	str	r2, [r3, #0]
 8014998:	f3bf 8f4f 	dsb	sy
 801499c:	f3bf 8f6f 	isb	sy
}
 80149a0:	e001      	b.n	80149a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80149a2:	f7ff f9fd 	bl	8013da0 <xTaskResumeAll>
}
 80149a6:	bf00      	nop
 80149a8:	3710      	adds	r7, #16
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}
 80149ae:	bf00      	nop
 80149b0:	200032e0 	.word	0x200032e0
 80149b4:	200032e4 	.word	0x200032e4
 80149b8:	e000ed04 	.word	0xe000ed04

080149bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80149bc:	b480      	push	{r7}
 80149be:	b085      	sub	sp, #20
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80149c4:	4b0e      	ldr	r3, [pc, #56]	; (8014a00 <prvGetNextExpireTime+0x44>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	bf0c      	ite	eq
 80149ce:	2301      	moveq	r3, #1
 80149d0:	2300      	movne	r3, #0
 80149d2:	b2db      	uxtb	r3, r3
 80149d4:	461a      	mov	r2, r3
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d105      	bne.n	80149ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80149e2:	4b07      	ldr	r3, [pc, #28]	; (8014a00 <prvGetNextExpireTime+0x44>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	68db      	ldr	r3, [r3, #12]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	60fb      	str	r3, [r7, #12]
 80149ec:	e001      	b.n	80149f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80149ee:	2300      	movs	r3, #0
 80149f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80149f2:	68fb      	ldr	r3, [r7, #12]
}
 80149f4:	4618      	mov	r0, r3
 80149f6:	3714      	adds	r7, #20
 80149f8:	46bd      	mov	sp, r7
 80149fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fe:	4770      	bx	lr
 8014a00:	200032dc 	.word	0x200032dc

08014a04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014a0c:	f7ff fa66 	bl	8013edc <xTaskGetTickCount>
 8014a10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014a12:	4b0b      	ldr	r3, [pc, #44]	; (8014a40 <prvSampleTimeNow+0x3c>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	68fa      	ldr	r2, [r7, #12]
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d205      	bcs.n	8014a28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014a1c:	f000 f908 	bl	8014c30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2201      	movs	r2, #1
 8014a24:	601a      	str	r2, [r3, #0]
 8014a26:	e002      	b.n	8014a2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014a2e:	4a04      	ldr	r2, [pc, #16]	; (8014a40 <prvSampleTimeNow+0x3c>)
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014a34:	68fb      	ldr	r3, [r7, #12]
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3710      	adds	r7, #16
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
 8014a3e:	bf00      	nop
 8014a40:	200032ec 	.word	0x200032ec

08014a44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b086      	sub	sp, #24
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	60f8      	str	r0, [r7, #12]
 8014a4c:	60b9      	str	r1, [r7, #8]
 8014a4e:	607a      	str	r2, [r7, #4]
 8014a50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014a52:	2300      	movs	r3, #0
 8014a54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	68ba      	ldr	r2, [r7, #8]
 8014a5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	68fa      	ldr	r2, [r7, #12]
 8014a60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014a62:	68ba      	ldr	r2, [r7, #8]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d812      	bhi.n	8014a90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	1ad2      	subs	r2, r2, r3
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	699b      	ldr	r3, [r3, #24]
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d302      	bcc.n	8014a7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014a78:	2301      	movs	r3, #1
 8014a7a:	617b      	str	r3, [r7, #20]
 8014a7c:	e01b      	b.n	8014ab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014a7e:	4b10      	ldr	r3, [pc, #64]	; (8014ac0 <prvInsertTimerInActiveList+0x7c>)
 8014a80:	681a      	ldr	r2, [r3, #0]
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	3304      	adds	r3, #4
 8014a86:	4619      	mov	r1, r3
 8014a88:	4610      	mov	r0, r2
 8014a8a:	f7fe f902 	bl	8012c92 <vListInsert>
 8014a8e:	e012      	b.n	8014ab6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014a90:	687a      	ldr	r2, [r7, #4]
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d206      	bcs.n	8014aa6 <prvInsertTimerInActiveList+0x62>
 8014a98:	68ba      	ldr	r2, [r7, #8]
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d302      	bcc.n	8014aa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	617b      	str	r3, [r7, #20]
 8014aa4:	e007      	b.n	8014ab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014aa6:	4b07      	ldr	r3, [pc, #28]	; (8014ac4 <prvInsertTimerInActiveList+0x80>)
 8014aa8:	681a      	ldr	r2, [r3, #0]
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	3304      	adds	r3, #4
 8014aae:	4619      	mov	r1, r3
 8014ab0:	4610      	mov	r0, r2
 8014ab2:	f7fe f8ee 	bl	8012c92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014ab6:	697b      	ldr	r3, [r7, #20]
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	3718      	adds	r7, #24
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	200032e0 	.word	0x200032e0
 8014ac4:	200032dc 	.word	0x200032dc

08014ac8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b08e      	sub	sp, #56	; 0x38
 8014acc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014ace:	e09d      	b.n	8014c0c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	da18      	bge.n	8014b08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014ad6:	1d3b      	adds	r3, r7, #4
 8014ad8:	3304      	adds	r3, #4
 8014ada:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d10a      	bne.n	8014af8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ae6:	f383 8811 	msr	BASEPRI, r3
 8014aea:	f3bf 8f6f 	isb	sy
 8014aee:	f3bf 8f4f 	dsb	sy
 8014af2:	61fb      	str	r3, [r7, #28]
}
 8014af4:	bf00      	nop
 8014af6:	e7fe      	b.n	8014af6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014afe:	6850      	ldr	r0, [r2, #4]
 8014b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b02:	6892      	ldr	r2, [r2, #8]
 8014b04:	4611      	mov	r1, r2
 8014b06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	db7d      	blt.n	8014c0a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b14:	695b      	ldr	r3, [r3, #20]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d004      	beq.n	8014b24 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b1c:	3304      	adds	r3, #4
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7fe f8f0 	bl	8012d04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014b24:	463b      	mov	r3, r7
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7ff ff6c 	bl	8014a04 <prvSampleTimeNow>
 8014b2c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	2b09      	cmp	r3, #9
 8014b32:	d86b      	bhi.n	8014c0c <prvProcessReceivedCommands+0x144>
 8014b34:	a201      	add	r2, pc, #4	; (adr r2, 8014b3c <prvProcessReceivedCommands+0x74>)
 8014b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b3a:	bf00      	nop
 8014b3c:	08014b65 	.word	0x08014b65
 8014b40:	08014b65 	.word	0x08014b65
 8014b44:	08014b65 	.word	0x08014b65
 8014b48:	08014c0d 	.word	0x08014c0d
 8014b4c:	08014bc1 	.word	0x08014bc1
 8014b50:	08014bf9 	.word	0x08014bf9
 8014b54:	08014b65 	.word	0x08014b65
 8014b58:	08014b65 	.word	0x08014b65
 8014b5c:	08014c0d 	.word	0x08014c0d
 8014b60:	08014bc1 	.word	0x08014bc1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014b64:	68ba      	ldr	r2, [r7, #8]
 8014b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b68:	699b      	ldr	r3, [r3, #24]
 8014b6a:	18d1      	adds	r1, r2, r3
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b72:	f7ff ff67 	bl	8014a44 <prvInsertTimerInActiveList>
 8014b76:	4603      	mov	r3, r0
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d047      	beq.n	8014c0c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b82:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b86:	69db      	ldr	r3, [r3, #28]
 8014b88:	2b01      	cmp	r3, #1
 8014b8a:	d13f      	bne.n	8014c0c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014b8c:	68ba      	ldr	r2, [r7, #8]
 8014b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b90:	699b      	ldr	r3, [r3, #24]
 8014b92:	441a      	add	r2, r3
 8014b94:	2300      	movs	r3, #0
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	2300      	movs	r3, #0
 8014b9a:	2100      	movs	r1, #0
 8014b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b9e:	f7ff fe1f 	bl	80147e0 <xTimerGenericCommand>
 8014ba2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014ba4:	6a3b      	ldr	r3, [r7, #32]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d130      	bne.n	8014c0c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8014baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bae:	f383 8811 	msr	BASEPRI, r3
 8014bb2:	f3bf 8f6f 	isb	sy
 8014bb6:	f3bf 8f4f 	dsb	sy
 8014bba:	61bb      	str	r3, [r7, #24]
}
 8014bbc:	bf00      	nop
 8014bbe:	e7fe      	b.n	8014bbe <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014bc0:	68ba      	ldr	r2, [r7, #8]
 8014bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc8:	699b      	ldr	r3, [r3, #24]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d10a      	bne.n	8014be4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8014bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd2:	f383 8811 	msr	BASEPRI, r3
 8014bd6:	f3bf 8f6f 	isb	sy
 8014bda:	f3bf 8f4f 	dsb	sy
 8014bde:	617b      	str	r3, [r7, #20]
}
 8014be0:	bf00      	nop
 8014be2:	e7fe      	b.n	8014be2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014be6:	699a      	ldr	r2, [r3, #24]
 8014be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bea:	18d1      	adds	r1, r2, r3
 8014bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bf2:	f7ff ff27 	bl	8014a44 <prvInsertTimerInActiveList>
					break;
 8014bf6:	e009      	b.n	8014c0c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d104      	bne.n	8014c0c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8014c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c04:	f000 fb4e 	bl	80152a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014c08:	e000      	b.n	8014c0c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014c0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014c0c:	4b07      	ldr	r3, [pc, #28]	; (8014c2c <prvProcessReceivedCommands+0x164>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	1d39      	adds	r1, r7, #4
 8014c12:	2200      	movs	r2, #0
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7fe fb75 	bl	8013304 <xQueueReceive>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	f47f af57 	bne.w	8014ad0 <prvProcessReceivedCommands+0x8>
	}
}
 8014c22:	bf00      	nop
 8014c24:	bf00      	nop
 8014c26:	3730      	adds	r7, #48	; 0x30
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	200032e4 	.word	0x200032e4

08014c30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b088      	sub	sp, #32
 8014c34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014c36:	e045      	b.n	8014cc4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014c38:	4b2c      	ldr	r3, [pc, #176]	; (8014cec <prvSwitchTimerLists+0xbc>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	68db      	ldr	r3, [r3, #12]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014c42:	4b2a      	ldr	r3, [pc, #168]	; (8014cec <prvSwitchTimerLists+0xbc>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	68db      	ldr	r3, [r3, #12]
 8014c48:	68db      	ldr	r3, [r3, #12]
 8014c4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	3304      	adds	r3, #4
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7fe f857 	bl	8012d04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c5a:	68f8      	ldr	r0, [r7, #12]
 8014c5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	69db      	ldr	r3, [r3, #28]
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	d12e      	bne.n	8014cc4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	699b      	ldr	r3, [r3, #24]
 8014c6a:	693a      	ldr	r2, [r7, #16]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014c70:	68ba      	ldr	r2, [r7, #8]
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	429a      	cmp	r2, r3
 8014c76:	d90e      	bls.n	8014c96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	68ba      	ldr	r2, [r7, #8]
 8014c7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	68fa      	ldr	r2, [r7, #12]
 8014c82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014c84:	4b19      	ldr	r3, [pc, #100]	; (8014cec <prvSwitchTimerLists+0xbc>)
 8014c86:	681a      	ldr	r2, [r3, #0]
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	3304      	adds	r3, #4
 8014c8c:	4619      	mov	r1, r3
 8014c8e:	4610      	mov	r0, r2
 8014c90:	f7fd ffff 	bl	8012c92 <vListInsert>
 8014c94:	e016      	b.n	8014cc4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014c96:	2300      	movs	r3, #0
 8014c98:	9300      	str	r3, [sp, #0]
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	693a      	ldr	r2, [r7, #16]
 8014c9e:	2100      	movs	r1, #0
 8014ca0:	68f8      	ldr	r0, [r7, #12]
 8014ca2:	f7ff fd9d 	bl	80147e0 <xTimerGenericCommand>
 8014ca6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d10a      	bne.n	8014cc4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8014cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cb2:	f383 8811 	msr	BASEPRI, r3
 8014cb6:	f3bf 8f6f 	isb	sy
 8014cba:	f3bf 8f4f 	dsb	sy
 8014cbe:	603b      	str	r3, [r7, #0]
}
 8014cc0:	bf00      	nop
 8014cc2:	e7fe      	b.n	8014cc2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014cc4:	4b09      	ldr	r3, [pc, #36]	; (8014cec <prvSwitchTimerLists+0xbc>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d1b4      	bne.n	8014c38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014cce:	4b07      	ldr	r3, [pc, #28]	; (8014cec <prvSwitchTimerLists+0xbc>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014cd4:	4b06      	ldr	r3, [pc, #24]	; (8014cf0 <prvSwitchTimerLists+0xc0>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	4a04      	ldr	r2, [pc, #16]	; (8014cec <prvSwitchTimerLists+0xbc>)
 8014cda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014cdc:	4a04      	ldr	r2, [pc, #16]	; (8014cf0 <prvSwitchTimerLists+0xc0>)
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	6013      	str	r3, [r2, #0]
}
 8014ce2:	bf00      	nop
 8014ce4:	3718      	adds	r7, #24
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
 8014cea:	bf00      	nop
 8014cec:	200032dc 	.word	0x200032dc
 8014cf0:	200032e0 	.word	0x200032e0

08014cf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014cfa:	f000 f96b 	bl	8014fd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014cfe:	4b15      	ldr	r3, [pc, #84]	; (8014d54 <prvCheckForValidListAndQueue+0x60>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d120      	bne.n	8014d48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014d06:	4814      	ldr	r0, [pc, #80]	; (8014d58 <prvCheckForValidListAndQueue+0x64>)
 8014d08:	f7fd ff72 	bl	8012bf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014d0c:	4813      	ldr	r0, [pc, #76]	; (8014d5c <prvCheckForValidListAndQueue+0x68>)
 8014d0e:	f7fd ff6f 	bl	8012bf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014d12:	4b13      	ldr	r3, [pc, #76]	; (8014d60 <prvCheckForValidListAndQueue+0x6c>)
 8014d14:	4a10      	ldr	r2, [pc, #64]	; (8014d58 <prvCheckForValidListAndQueue+0x64>)
 8014d16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014d18:	4b12      	ldr	r3, [pc, #72]	; (8014d64 <prvCheckForValidListAndQueue+0x70>)
 8014d1a:	4a10      	ldr	r2, [pc, #64]	; (8014d5c <prvCheckForValidListAndQueue+0x68>)
 8014d1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014d1e:	2300      	movs	r3, #0
 8014d20:	9300      	str	r3, [sp, #0]
 8014d22:	4b11      	ldr	r3, [pc, #68]	; (8014d68 <prvCheckForValidListAndQueue+0x74>)
 8014d24:	4a11      	ldr	r2, [pc, #68]	; (8014d6c <prvCheckForValidListAndQueue+0x78>)
 8014d26:	2110      	movs	r1, #16
 8014d28:	200a      	movs	r0, #10
 8014d2a:	f7fe f87d 	bl	8012e28 <xQueueGenericCreateStatic>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	4a08      	ldr	r2, [pc, #32]	; (8014d54 <prvCheckForValidListAndQueue+0x60>)
 8014d32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014d34:	4b07      	ldr	r3, [pc, #28]	; (8014d54 <prvCheckForValidListAndQueue+0x60>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d005      	beq.n	8014d48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014d3c:	4b05      	ldr	r3, [pc, #20]	; (8014d54 <prvCheckForValidListAndQueue+0x60>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	490b      	ldr	r1, [pc, #44]	; (8014d70 <prvCheckForValidListAndQueue+0x7c>)
 8014d42:	4618      	mov	r0, r3
 8014d44:	f7fe fd88 	bl	8013858 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014d48:	f000 f974 	bl	8015034 <vPortExitCritical>
}
 8014d4c:	bf00      	nop
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	bf00      	nop
 8014d54:	200032e4 	.word	0x200032e4
 8014d58:	200032b4 	.word	0x200032b4
 8014d5c:	200032c8 	.word	0x200032c8
 8014d60:	200032dc 	.word	0x200032dc
 8014d64:	200032e0 	.word	0x200032e0
 8014d68:	20003390 	.word	0x20003390
 8014d6c:	200032f0 	.word	0x200032f0
 8014d70:	08016664 	.word	0x08016664

08014d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014d74:	b480      	push	{r7}
 8014d76:	b085      	sub	sp, #20
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	3b04      	subs	r3, #4
 8014d84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	3b04      	subs	r3, #4
 8014d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014d94:	68bb      	ldr	r3, [r7, #8]
 8014d96:	f023 0201 	bic.w	r2, r3, #1
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	3b04      	subs	r3, #4
 8014da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014da4:	4a0c      	ldr	r2, [pc, #48]	; (8014dd8 <pxPortInitialiseStack+0x64>)
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	3b14      	subs	r3, #20
 8014dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014db0:	687a      	ldr	r2, [r7, #4]
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	3b04      	subs	r3, #4
 8014dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f06f 0202 	mvn.w	r2, #2
 8014dc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	3b20      	subs	r3, #32
 8014dc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014dca:	68fb      	ldr	r3, [r7, #12]
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3714      	adds	r7, #20
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr
 8014dd8:	08014ddd 	.word	0x08014ddd

08014ddc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014ddc:	b480      	push	{r7}
 8014dde:	b085      	sub	sp, #20
 8014de0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014de2:	2300      	movs	r3, #0
 8014de4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014de6:	4b12      	ldr	r3, [pc, #72]	; (8014e30 <prvTaskExitError+0x54>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dee:	d00a      	beq.n	8014e06 <prvTaskExitError+0x2a>
	__asm volatile
 8014df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014df4:	f383 8811 	msr	BASEPRI, r3
 8014df8:	f3bf 8f6f 	isb	sy
 8014dfc:	f3bf 8f4f 	dsb	sy
 8014e00:	60fb      	str	r3, [r7, #12]
}
 8014e02:	bf00      	nop
 8014e04:	e7fe      	b.n	8014e04 <prvTaskExitError+0x28>
	__asm volatile
 8014e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e0a:	f383 8811 	msr	BASEPRI, r3
 8014e0e:	f3bf 8f6f 	isb	sy
 8014e12:	f3bf 8f4f 	dsb	sy
 8014e16:	60bb      	str	r3, [r7, #8]
}
 8014e18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014e1a:	bf00      	nop
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d0fc      	beq.n	8014e1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014e22:	bf00      	nop
 8014e24:	bf00      	nop
 8014e26:	3714      	adds	r7, #20
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2e:	4770      	bx	lr
 8014e30:	2000012c 	.word	0x2000012c
	...

08014e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014e40:	4b07      	ldr	r3, [pc, #28]	; (8014e60 <pxCurrentTCBConst2>)
 8014e42:	6819      	ldr	r1, [r3, #0]
 8014e44:	6808      	ldr	r0, [r1, #0]
 8014e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e4a:	f380 8809 	msr	PSP, r0
 8014e4e:	f3bf 8f6f 	isb	sy
 8014e52:	f04f 0000 	mov.w	r0, #0
 8014e56:	f380 8811 	msr	BASEPRI, r0
 8014e5a:	4770      	bx	lr
 8014e5c:	f3af 8000 	nop.w

08014e60 <pxCurrentTCBConst2>:
 8014e60:	20002dac 	.word	0x20002dac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014e64:	bf00      	nop
 8014e66:	bf00      	nop

08014e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014e68:	4808      	ldr	r0, [pc, #32]	; (8014e8c <prvPortStartFirstTask+0x24>)
 8014e6a:	6800      	ldr	r0, [r0, #0]
 8014e6c:	6800      	ldr	r0, [r0, #0]
 8014e6e:	f380 8808 	msr	MSP, r0
 8014e72:	f04f 0000 	mov.w	r0, #0
 8014e76:	f380 8814 	msr	CONTROL, r0
 8014e7a:	b662      	cpsie	i
 8014e7c:	b661      	cpsie	f
 8014e7e:	f3bf 8f4f 	dsb	sy
 8014e82:	f3bf 8f6f 	isb	sy
 8014e86:	df00      	svc	0
 8014e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014e8a:	bf00      	nop
 8014e8c:	e000ed08 	.word	0xe000ed08

08014e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b086      	sub	sp, #24
 8014e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014e96:	4b46      	ldr	r3, [pc, #280]	; (8014fb0 <xPortStartScheduler+0x120>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	4a46      	ldr	r2, [pc, #280]	; (8014fb4 <xPortStartScheduler+0x124>)
 8014e9c:	4293      	cmp	r3, r2
 8014e9e:	d10a      	bne.n	8014eb6 <xPortStartScheduler+0x26>
	__asm volatile
 8014ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea4:	f383 8811 	msr	BASEPRI, r3
 8014ea8:	f3bf 8f6f 	isb	sy
 8014eac:	f3bf 8f4f 	dsb	sy
 8014eb0:	613b      	str	r3, [r7, #16]
}
 8014eb2:	bf00      	nop
 8014eb4:	e7fe      	b.n	8014eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014eb6:	4b3e      	ldr	r3, [pc, #248]	; (8014fb0 <xPortStartScheduler+0x120>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	4a3f      	ldr	r2, [pc, #252]	; (8014fb8 <xPortStartScheduler+0x128>)
 8014ebc:	4293      	cmp	r3, r2
 8014ebe:	d10a      	bne.n	8014ed6 <xPortStartScheduler+0x46>
	__asm volatile
 8014ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec4:	f383 8811 	msr	BASEPRI, r3
 8014ec8:	f3bf 8f6f 	isb	sy
 8014ecc:	f3bf 8f4f 	dsb	sy
 8014ed0:	60fb      	str	r3, [r7, #12]
}
 8014ed2:	bf00      	nop
 8014ed4:	e7fe      	b.n	8014ed4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014ed6:	4b39      	ldr	r3, [pc, #228]	; (8014fbc <xPortStartScheduler+0x12c>)
 8014ed8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	781b      	ldrb	r3, [r3, #0]
 8014ede:	b2db      	uxtb	r3, r3
 8014ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	22ff      	movs	r2, #255	; 0xff
 8014ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	781b      	ldrb	r3, [r3, #0]
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014ef0:	78fb      	ldrb	r3, [r7, #3]
 8014ef2:	b2db      	uxtb	r3, r3
 8014ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014ef8:	b2da      	uxtb	r2, r3
 8014efa:	4b31      	ldr	r3, [pc, #196]	; (8014fc0 <xPortStartScheduler+0x130>)
 8014efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014efe:	4b31      	ldr	r3, [pc, #196]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f00:	2207      	movs	r2, #7
 8014f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f04:	e009      	b.n	8014f1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014f06:	4b2f      	ldr	r3, [pc, #188]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	3b01      	subs	r3, #1
 8014f0c:	4a2d      	ldr	r2, [pc, #180]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014f10:	78fb      	ldrb	r3, [r7, #3]
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	005b      	lsls	r3, r3, #1
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f1a:	78fb      	ldrb	r3, [r7, #3]
 8014f1c:	b2db      	uxtb	r3, r3
 8014f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f22:	2b80      	cmp	r3, #128	; 0x80
 8014f24:	d0ef      	beq.n	8014f06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014f26:	4b27      	ldr	r3, [pc, #156]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	f1c3 0307 	rsb	r3, r3, #7
 8014f2e:	2b04      	cmp	r3, #4
 8014f30:	d00a      	beq.n	8014f48 <xPortStartScheduler+0xb8>
	__asm volatile
 8014f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f36:	f383 8811 	msr	BASEPRI, r3
 8014f3a:	f3bf 8f6f 	isb	sy
 8014f3e:	f3bf 8f4f 	dsb	sy
 8014f42:	60bb      	str	r3, [r7, #8]
}
 8014f44:	bf00      	nop
 8014f46:	e7fe      	b.n	8014f46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014f48:	4b1e      	ldr	r3, [pc, #120]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	021b      	lsls	r3, r3, #8
 8014f4e:	4a1d      	ldr	r2, [pc, #116]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014f52:	4b1c      	ldr	r3, [pc, #112]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014f5a:	4a1a      	ldr	r2, [pc, #104]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	b2da      	uxtb	r2, r3
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014f66:	4b18      	ldr	r3, [pc, #96]	; (8014fc8 <xPortStartScheduler+0x138>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	4a17      	ldr	r2, [pc, #92]	; (8014fc8 <xPortStartScheduler+0x138>)
 8014f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014f72:	4b15      	ldr	r3, [pc, #84]	; (8014fc8 <xPortStartScheduler+0x138>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	4a14      	ldr	r2, [pc, #80]	; (8014fc8 <xPortStartScheduler+0x138>)
 8014f78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014f7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014f7e:	f000 f8dd 	bl	801513c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014f82:	4b12      	ldr	r3, [pc, #72]	; (8014fcc <xPortStartScheduler+0x13c>)
 8014f84:	2200      	movs	r2, #0
 8014f86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014f88:	f000 f8fc 	bl	8015184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014f8c:	4b10      	ldr	r3, [pc, #64]	; (8014fd0 <xPortStartScheduler+0x140>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	4a0f      	ldr	r2, [pc, #60]	; (8014fd0 <xPortStartScheduler+0x140>)
 8014f92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014f96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014f98:	f7ff ff66 	bl	8014e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014f9c:	f7ff f86c 	bl	8014078 <vTaskSwitchContext>
	prvTaskExitError();
 8014fa0:	f7ff ff1c 	bl	8014ddc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014fa4:	2300      	movs	r3, #0
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3718      	adds	r7, #24
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	e000ed00 	.word	0xe000ed00
 8014fb4:	410fc271 	.word	0x410fc271
 8014fb8:	410fc270 	.word	0x410fc270
 8014fbc:	e000e400 	.word	0xe000e400
 8014fc0:	200033e0 	.word	0x200033e0
 8014fc4:	200033e4 	.word	0x200033e4
 8014fc8:	e000ed20 	.word	0xe000ed20
 8014fcc:	2000012c 	.word	0x2000012c
 8014fd0:	e000ef34 	.word	0xe000ef34

08014fd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
	__asm volatile
 8014fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fde:	f383 8811 	msr	BASEPRI, r3
 8014fe2:	f3bf 8f6f 	isb	sy
 8014fe6:	f3bf 8f4f 	dsb	sy
 8014fea:	607b      	str	r3, [r7, #4]
}
 8014fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014fee:	4b0f      	ldr	r3, [pc, #60]	; (801502c <vPortEnterCritical+0x58>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	4a0d      	ldr	r2, [pc, #52]	; (801502c <vPortEnterCritical+0x58>)
 8014ff6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014ff8:	4b0c      	ldr	r3, [pc, #48]	; (801502c <vPortEnterCritical+0x58>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d10f      	bne.n	8015020 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015000:	4b0b      	ldr	r3, [pc, #44]	; (8015030 <vPortEnterCritical+0x5c>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	b2db      	uxtb	r3, r3
 8015006:	2b00      	cmp	r3, #0
 8015008:	d00a      	beq.n	8015020 <vPortEnterCritical+0x4c>
	__asm volatile
 801500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801500e:	f383 8811 	msr	BASEPRI, r3
 8015012:	f3bf 8f6f 	isb	sy
 8015016:	f3bf 8f4f 	dsb	sy
 801501a:	603b      	str	r3, [r7, #0]
}
 801501c:	bf00      	nop
 801501e:	e7fe      	b.n	801501e <vPortEnterCritical+0x4a>
	}
}
 8015020:	bf00      	nop
 8015022:	370c      	adds	r7, #12
 8015024:	46bd      	mov	sp, r7
 8015026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502a:	4770      	bx	lr
 801502c:	2000012c 	.word	0x2000012c
 8015030:	e000ed04 	.word	0xe000ed04

08015034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015034:	b480      	push	{r7}
 8015036:	b083      	sub	sp, #12
 8015038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801503a:	4b12      	ldr	r3, [pc, #72]	; (8015084 <vPortExitCritical+0x50>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d10a      	bne.n	8015058 <vPortExitCritical+0x24>
	__asm volatile
 8015042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015046:	f383 8811 	msr	BASEPRI, r3
 801504a:	f3bf 8f6f 	isb	sy
 801504e:	f3bf 8f4f 	dsb	sy
 8015052:	607b      	str	r3, [r7, #4]
}
 8015054:	bf00      	nop
 8015056:	e7fe      	b.n	8015056 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015058:	4b0a      	ldr	r3, [pc, #40]	; (8015084 <vPortExitCritical+0x50>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	3b01      	subs	r3, #1
 801505e:	4a09      	ldr	r2, [pc, #36]	; (8015084 <vPortExitCritical+0x50>)
 8015060:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015062:	4b08      	ldr	r3, [pc, #32]	; (8015084 <vPortExitCritical+0x50>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d105      	bne.n	8015076 <vPortExitCritical+0x42>
 801506a:	2300      	movs	r3, #0
 801506c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	f383 8811 	msr	BASEPRI, r3
}
 8015074:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015076:	bf00      	nop
 8015078:	370c      	adds	r7, #12
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr
 8015082:	bf00      	nop
 8015084:	2000012c 	.word	0x2000012c
	...

08015090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015090:	f3ef 8009 	mrs	r0, PSP
 8015094:	f3bf 8f6f 	isb	sy
 8015098:	4b15      	ldr	r3, [pc, #84]	; (80150f0 <pxCurrentTCBConst>)
 801509a:	681a      	ldr	r2, [r3, #0]
 801509c:	f01e 0f10 	tst.w	lr, #16
 80150a0:	bf08      	it	eq
 80150a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80150a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150aa:	6010      	str	r0, [r2, #0]
 80150ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80150b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80150b4:	f380 8811 	msr	BASEPRI, r0
 80150b8:	f3bf 8f4f 	dsb	sy
 80150bc:	f3bf 8f6f 	isb	sy
 80150c0:	f7fe ffda 	bl	8014078 <vTaskSwitchContext>
 80150c4:	f04f 0000 	mov.w	r0, #0
 80150c8:	f380 8811 	msr	BASEPRI, r0
 80150cc:	bc09      	pop	{r0, r3}
 80150ce:	6819      	ldr	r1, [r3, #0]
 80150d0:	6808      	ldr	r0, [r1, #0]
 80150d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d6:	f01e 0f10 	tst.w	lr, #16
 80150da:	bf08      	it	eq
 80150dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80150e0:	f380 8809 	msr	PSP, r0
 80150e4:	f3bf 8f6f 	isb	sy
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop
 80150ec:	f3af 8000 	nop.w

080150f0 <pxCurrentTCBConst>:
 80150f0:	20002dac 	.word	0x20002dac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80150f4:	bf00      	nop
 80150f6:	bf00      	nop

080150f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
	__asm volatile
 80150fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015102:	f383 8811 	msr	BASEPRI, r3
 8015106:	f3bf 8f6f 	isb	sy
 801510a:	f3bf 8f4f 	dsb	sy
 801510e:	607b      	str	r3, [r7, #4]
}
 8015110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015112:	f7fe fef3 	bl	8013efc <xTaskIncrementTick>
 8015116:	4603      	mov	r3, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	d003      	beq.n	8015124 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801511c:	4b06      	ldr	r3, [pc, #24]	; (8015138 <SysTick_Handler+0x40>)
 801511e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015122:	601a      	str	r2, [r3, #0]
 8015124:	2300      	movs	r3, #0
 8015126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	f383 8811 	msr	BASEPRI, r3
}
 801512e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015130:	bf00      	nop
 8015132:	3708      	adds	r7, #8
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}
 8015138:	e000ed04 	.word	0xe000ed04

0801513c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801513c:	b480      	push	{r7}
 801513e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015140:	4b0b      	ldr	r3, [pc, #44]	; (8015170 <vPortSetupTimerInterrupt+0x34>)
 8015142:	2200      	movs	r2, #0
 8015144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015146:	4b0b      	ldr	r3, [pc, #44]	; (8015174 <vPortSetupTimerInterrupt+0x38>)
 8015148:	2200      	movs	r2, #0
 801514a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801514c:	4b0a      	ldr	r3, [pc, #40]	; (8015178 <vPortSetupTimerInterrupt+0x3c>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	4a0a      	ldr	r2, [pc, #40]	; (801517c <vPortSetupTimerInterrupt+0x40>)
 8015152:	fba2 2303 	umull	r2, r3, r2, r3
 8015156:	099b      	lsrs	r3, r3, #6
 8015158:	4a09      	ldr	r2, [pc, #36]	; (8015180 <vPortSetupTimerInterrupt+0x44>)
 801515a:	3b01      	subs	r3, #1
 801515c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801515e:	4b04      	ldr	r3, [pc, #16]	; (8015170 <vPortSetupTimerInterrupt+0x34>)
 8015160:	2207      	movs	r2, #7
 8015162:	601a      	str	r2, [r3, #0]
}
 8015164:	bf00      	nop
 8015166:	46bd      	mov	sp, r7
 8015168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516c:	4770      	bx	lr
 801516e:	bf00      	nop
 8015170:	e000e010 	.word	0xe000e010
 8015174:	e000e018 	.word	0xe000e018
 8015178:	20000010 	.word	0x20000010
 801517c:	10624dd3 	.word	0x10624dd3
 8015180:	e000e014 	.word	0xe000e014

08015184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015194 <vPortEnableVFP+0x10>
 8015188:	6801      	ldr	r1, [r0, #0]
 801518a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801518e:	6001      	str	r1, [r0, #0]
 8015190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015192:	bf00      	nop
 8015194:	e000ed88 	.word	0xe000ed88

08015198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015198:	b480      	push	{r7}
 801519a:	b085      	sub	sp, #20
 801519c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801519e:	f3ef 8305 	mrs	r3, IPSR
 80151a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	2b0f      	cmp	r3, #15
 80151a8:	d914      	bls.n	80151d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80151aa:	4a17      	ldr	r2, [pc, #92]	; (8015208 <vPortValidateInterruptPriority+0x70>)
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	4413      	add	r3, r2
 80151b0:	781b      	ldrb	r3, [r3, #0]
 80151b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80151b4:	4b15      	ldr	r3, [pc, #84]	; (801520c <vPortValidateInterruptPriority+0x74>)
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	7afa      	ldrb	r2, [r7, #11]
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d20a      	bcs.n	80151d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80151be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151c2:	f383 8811 	msr	BASEPRI, r3
 80151c6:	f3bf 8f6f 	isb	sy
 80151ca:	f3bf 8f4f 	dsb	sy
 80151ce:	607b      	str	r3, [r7, #4]
}
 80151d0:	bf00      	nop
 80151d2:	e7fe      	b.n	80151d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80151d4:	4b0e      	ldr	r3, [pc, #56]	; (8015210 <vPortValidateInterruptPriority+0x78>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80151dc:	4b0d      	ldr	r3, [pc, #52]	; (8015214 <vPortValidateInterruptPriority+0x7c>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d90a      	bls.n	80151fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80151e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e8:	f383 8811 	msr	BASEPRI, r3
 80151ec:	f3bf 8f6f 	isb	sy
 80151f0:	f3bf 8f4f 	dsb	sy
 80151f4:	603b      	str	r3, [r7, #0]
}
 80151f6:	bf00      	nop
 80151f8:	e7fe      	b.n	80151f8 <vPortValidateInterruptPriority+0x60>
	}
 80151fa:	bf00      	nop
 80151fc:	3714      	adds	r7, #20
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr
 8015206:	bf00      	nop
 8015208:	e000e3f0 	.word	0xe000e3f0
 801520c:	200033e0 	.word	0x200033e0
 8015210:	e000ed0c 	.word	0xe000ed0c
 8015214:	200033e4 	.word	0x200033e4

08015218 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b084      	sub	sp, #16
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8015220:	2300      	movs	r3, #0
 8015222:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f003 0307 	and.w	r3, r3, #7
 801522a:	2b00      	cmp	r3, #0
 801522c:	d004      	beq.n	8015238 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	f023 0307 	bic.w	r3, r3, #7
 8015234:	3308      	adds	r3, #8
 8015236:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8015238:	f7fe fda4 	bl	8013d84 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 801523c:	4b16      	ldr	r3, [pc, #88]	; (8015298 <pvPortMalloc+0x80>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d105      	bne.n	8015250 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8015244:	4b15      	ldr	r3, [pc, #84]	; (801529c <pvPortMalloc+0x84>)
 8015246:	f023 0307 	bic.w	r3, r3, #7
 801524a:	461a      	mov	r2, r3
 801524c:	4b12      	ldr	r3, [pc, #72]	; (8015298 <pvPortMalloc+0x80>)
 801524e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8015250:	4b13      	ldr	r3, [pc, #76]	; (80152a0 <pvPortMalloc+0x88>)
 8015252:	681a      	ldr	r2, [r3, #0]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	4413      	add	r3, r2
 8015258:	f241 72f7 	movw	r2, #6135	; 0x17f7
 801525c:	4293      	cmp	r3, r2
 801525e:	d813      	bhi.n	8015288 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8015260:	4b0f      	ldr	r3, [pc, #60]	; (80152a0 <pvPortMalloc+0x88>)
 8015262:	681a      	ldr	r2, [r3, #0]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	441a      	add	r2, r3
 8015268:	4b0d      	ldr	r3, [pc, #52]	; (80152a0 <pvPortMalloc+0x88>)
 801526a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 801526c:	429a      	cmp	r2, r3
 801526e:	d90b      	bls.n	8015288 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8015270:	4b09      	ldr	r3, [pc, #36]	; (8015298 <pvPortMalloc+0x80>)
 8015272:	681a      	ldr	r2, [r3, #0]
 8015274:	4b0a      	ldr	r3, [pc, #40]	; (80152a0 <pvPortMalloc+0x88>)
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	4413      	add	r3, r2
 801527a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 801527c:	4b08      	ldr	r3, [pc, #32]	; (80152a0 <pvPortMalloc+0x88>)
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	4413      	add	r3, r2
 8015284:	4a06      	ldr	r2, [pc, #24]	; (80152a0 <pvPortMalloc+0x88>)
 8015286:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015288:	f7fe fd8a 	bl	8013da0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 801528c:	68fb      	ldr	r3, [r7, #12]
}
 801528e:	4618      	mov	r0, r3
 8015290:	3710      	adds	r7, #16
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
 8015296:	bf00      	nop
 8015298:	20004bec 	.word	0x20004bec
 801529c:	200033f0 	.word	0x200033f0
 80152a0:	20004be8 	.word	0x20004be8

080152a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80152a4:	b480      	push	{r7}
 80152a6:	b085      	sub	sp, #20
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d00a      	beq.n	80152c8 <vPortFree+0x24>
	__asm volatile
 80152b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152b6:	f383 8811 	msr	BASEPRI, r3
 80152ba:	f3bf 8f6f 	isb	sy
 80152be:	f3bf 8f4f 	dsb	sy
 80152c2:	60fb      	str	r3, [r7, #12]
}
 80152c4:	bf00      	nop
 80152c6:	e7fe      	b.n	80152c6 <vPortFree+0x22>
}
 80152c8:	bf00      	nop
 80152ca:	3714      	adds	r7, #20
 80152cc:	46bd      	mov	sp, r7
 80152ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d2:	4770      	bx	lr

080152d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b083      	sub	sp, #12
 80152d8:	af00      	add	r7, sp, #0
 80152da:	4603      	mov	r3, r0
 80152dc:	6039      	str	r1, [r7, #0]
 80152de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	2212      	movs	r2, #18
 80152e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80152e6:	4b03      	ldr	r3, [pc, #12]	; (80152f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	370c      	adds	r7, #12
 80152ec:	46bd      	mov	sp, r7
 80152ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f2:	4770      	bx	lr
 80152f4:	2000014c 	.word	0x2000014c

080152f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152f8:	b480      	push	{r7}
 80152fa:	b083      	sub	sp, #12
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	4603      	mov	r3, r0
 8015300:	6039      	str	r1, [r7, #0]
 8015302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	2204      	movs	r2, #4
 8015308:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801530a:	4b03      	ldr	r3, [pc, #12]	; (8015318 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801530c:	4618      	mov	r0, r3
 801530e:	370c      	adds	r7, #12
 8015310:	46bd      	mov	sp, r7
 8015312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015316:	4770      	bx	lr
 8015318:	20000160 	.word	0x20000160

0801531c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	4603      	mov	r3, r0
 8015324:	6039      	str	r1, [r7, #0]
 8015326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015328:	79fb      	ldrb	r3, [r7, #7]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d105      	bne.n	801533a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801532e:	683a      	ldr	r2, [r7, #0]
 8015330:	4907      	ldr	r1, [pc, #28]	; (8015350 <USBD_FS_ProductStrDescriptor+0x34>)
 8015332:	4808      	ldr	r0, [pc, #32]	; (8015354 <USBD_FS_ProductStrDescriptor+0x38>)
 8015334:	f7fd f86b 	bl	801240e <USBD_GetString>
 8015338:	e004      	b.n	8015344 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801533a:	683a      	ldr	r2, [r7, #0]
 801533c:	4904      	ldr	r1, [pc, #16]	; (8015350 <USBD_FS_ProductStrDescriptor+0x34>)
 801533e:	4805      	ldr	r0, [pc, #20]	; (8015354 <USBD_FS_ProductStrDescriptor+0x38>)
 8015340:	f7fd f865 	bl	801240e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015344:	4b02      	ldr	r3, [pc, #8]	; (8015350 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015346:	4618      	mov	r0, r3
 8015348:	3708      	adds	r7, #8
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}
 801534e:	bf00      	nop
 8015350:	20004bf0 	.word	0x20004bf0
 8015354:	0801666c 	.word	0x0801666c

08015358 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b082      	sub	sp, #8
 801535c:	af00      	add	r7, sp, #0
 801535e:	4603      	mov	r3, r0
 8015360:	6039      	str	r1, [r7, #0]
 8015362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015364:	683a      	ldr	r2, [r7, #0]
 8015366:	4904      	ldr	r1, [pc, #16]	; (8015378 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015368:	4804      	ldr	r0, [pc, #16]	; (801537c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801536a:	f7fd f850 	bl	801240e <USBD_GetString>
  return USBD_StrDesc;
 801536e:	4b02      	ldr	r3, [pc, #8]	; (8015378 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015370:	4618      	mov	r0, r3
 8015372:	3708      	adds	r7, #8
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}
 8015378:	20004bf0 	.word	0x20004bf0
 801537c:	08016684 	.word	0x08016684

08015380 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	4603      	mov	r3, r0
 8015388:	6039      	str	r1, [r7, #0]
 801538a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	221a      	movs	r2, #26
 8015390:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015392:	f000 f843 	bl	801541c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015396:	4b02      	ldr	r3, [pc, #8]	; (80153a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015398:	4618      	mov	r0, r3
 801539a:	3708      	adds	r7, #8
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}
 80153a0:	20000164 	.word	0x20000164

080153a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b082      	sub	sp, #8
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	4603      	mov	r3, r0
 80153ac:	6039      	str	r1, [r7, #0]
 80153ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80153b0:	79fb      	ldrb	r3, [r7, #7]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d105      	bne.n	80153c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80153b6:	683a      	ldr	r2, [r7, #0]
 80153b8:	4907      	ldr	r1, [pc, #28]	; (80153d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80153ba:	4808      	ldr	r0, [pc, #32]	; (80153dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80153bc:	f7fd f827 	bl	801240e <USBD_GetString>
 80153c0:	e004      	b.n	80153cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80153c2:	683a      	ldr	r2, [r7, #0]
 80153c4:	4904      	ldr	r1, [pc, #16]	; (80153d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80153c6:	4805      	ldr	r0, [pc, #20]	; (80153dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80153c8:	f7fd f821 	bl	801240e <USBD_GetString>
  }
  return USBD_StrDesc;
 80153cc:	4b02      	ldr	r3, [pc, #8]	; (80153d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	20004bf0 	.word	0x20004bf0
 80153dc:	08016698 	.word	0x08016698

080153e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b082      	sub	sp, #8
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	4603      	mov	r3, r0
 80153e8:	6039      	str	r1, [r7, #0]
 80153ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153ec:	79fb      	ldrb	r3, [r7, #7]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d105      	bne.n	80153fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153f2:	683a      	ldr	r2, [r7, #0]
 80153f4:	4907      	ldr	r1, [pc, #28]	; (8015414 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153f6:	4808      	ldr	r0, [pc, #32]	; (8015418 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153f8:	f7fd f809 	bl	801240e <USBD_GetString>
 80153fc:	e004      	b.n	8015408 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153fe:	683a      	ldr	r2, [r7, #0]
 8015400:	4904      	ldr	r1, [pc, #16]	; (8015414 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015402:	4805      	ldr	r0, [pc, #20]	; (8015418 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015404:	f7fd f803 	bl	801240e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015408:	4b02      	ldr	r3, [pc, #8]	; (8015414 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801540a:	4618      	mov	r0, r3
 801540c:	3708      	adds	r7, #8
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	20004bf0 	.word	0x20004bf0
 8015418:	080166a4 	.word	0x080166a4

0801541c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b084      	sub	sp, #16
 8015420:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015422:	4b0f      	ldr	r3, [pc, #60]	; (8015460 <Get_SerialNum+0x44>)
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015428:	4b0e      	ldr	r3, [pc, #56]	; (8015464 <Get_SerialNum+0x48>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801542e:	4b0e      	ldr	r3, [pc, #56]	; (8015468 <Get_SerialNum+0x4c>)
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015434:	68fa      	ldr	r2, [r7, #12]
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	4413      	add	r3, r2
 801543a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d009      	beq.n	8015456 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015442:	2208      	movs	r2, #8
 8015444:	4909      	ldr	r1, [pc, #36]	; (801546c <Get_SerialNum+0x50>)
 8015446:	68f8      	ldr	r0, [r7, #12]
 8015448:	f000 f814 	bl	8015474 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801544c:	2204      	movs	r2, #4
 801544e:	4908      	ldr	r1, [pc, #32]	; (8015470 <Get_SerialNum+0x54>)
 8015450:	68b8      	ldr	r0, [r7, #8]
 8015452:	f000 f80f 	bl	8015474 <IntToUnicode>
  }
}
 8015456:	bf00      	nop
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	1ffff7ac 	.word	0x1ffff7ac
 8015464:	1ffff7b0 	.word	0x1ffff7b0
 8015468:	1ffff7b4 	.word	0x1ffff7b4
 801546c:	20000166 	.word	0x20000166
 8015470:	20000176 	.word	0x20000176

08015474 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015474:	b480      	push	{r7}
 8015476:	b087      	sub	sp, #28
 8015478:	af00      	add	r7, sp, #0
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	60b9      	str	r1, [r7, #8]
 801547e:	4613      	mov	r3, r2
 8015480:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015482:	2300      	movs	r3, #0
 8015484:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015486:	2300      	movs	r3, #0
 8015488:	75fb      	strb	r3, [r7, #23]
 801548a:	e027      	b.n	80154dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	0f1b      	lsrs	r3, r3, #28
 8015490:	2b09      	cmp	r3, #9
 8015492:	d80b      	bhi.n	80154ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	0f1b      	lsrs	r3, r3, #28
 8015498:	b2da      	uxtb	r2, r3
 801549a:	7dfb      	ldrb	r3, [r7, #23]
 801549c:	005b      	lsls	r3, r3, #1
 801549e:	4619      	mov	r1, r3
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	440b      	add	r3, r1
 80154a4:	3230      	adds	r2, #48	; 0x30
 80154a6:	b2d2      	uxtb	r2, r2
 80154a8:	701a      	strb	r2, [r3, #0]
 80154aa:	e00a      	b.n	80154c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	0f1b      	lsrs	r3, r3, #28
 80154b0:	b2da      	uxtb	r2, r3
 80154b2:	7dfb      	ldrb	r3, [r7, #23]
 80154b4:	005b      	lsls	r3, r3, #1
 80154b6:	4619      	mov	r1, r3
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	440b      	add	r3, r1
 80154bc:	3237      	adds	r2, #55	; 0x37
 80154be:	b2d2      	uxtb	r2, r2
 80154c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	011b      	lsls	r3, r3, #4
 80154c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80154c8:	7dfb      	ldrb	r3, [r7, #23]
 80154ca:	005b      	lsls	r3, r3, #1
 80154cc:	3301      	adds	r3, #1
 80154ce:	68ba      	ldr	r2, [r7, #8]
 80154d0:	4413      	add	r3, r2
 80154d2:	2200      	movs	r2, #0
 80154d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80154d6:	7dfb      	ldrb	r3, [r7, #23]
 80154d8:	3301      	adds	r3, #1
 80154da:	75fb      	strb	r3, [r7, #23]
 80154dc:	7dfa      	ldrb	r2, [r7, #23]
 80154de:	79fb      	ldrb	r3, [r7, #7]
 80154e0:	429a      	cmp	r2, r3
 80154e2:	d3d3      	bcc.n	801548c <IntToUnicode+0x18>
  }
}
 80154e4:	bf00      	nop
 80154e6:	bf00      	nop
 80154e8:	371c      	adds	r7, #28
 80154ea:	46bd      	mov	sp, r7
 80154ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f0:	4770      	bx	lr
	...

080154f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b08a      	sub	sp, #40	; 0x28
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80154fc:	f107 0314 	add.w	r3, r7, #20
 8015500:	2200      	movs	r2, #0
 8015502:	601a      	str	r2, [r3, #0]
 8015504:	605a      	str	r2, [r3, #4]
 8015506:	609a      	str	r2, [r3, #8]
 8015508:	60da      	str	r2, [r3, #12]
 801550a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	4a1f      	ldr	r2, [pc, #124]	; (8015590 <HAL_PCD_MspInit+0x9c>)
 8015512:	4293      	cmp	r3, r2
 8015514:	d137      	bne.n	8015586 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015516:	4b1f      	ldr	r3, [pc, #124]	; (8015594 <HAL_PCD_MspInit+0xa0>)
 8015518:	695b      	ldr	r3, [r3, #20]
 801551a:	4a1e      	ldr	r2, [pc, #120]	; (8015594 <HAL_PCD_MspInit+0xa0>)
 801551c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015520:	6153      	str	r3, [r2, #20]
 8015522:	4b1c      	ldr	r3, [pc, #112]	; (8015594 <HAL_PCD_MspInit+0xa0>)
 8015524:	695b      	ldr	r3, [r3, #20]
 8015526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801552a:	613b      	str	r3, [r7, #16]
 801552c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801552e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015534:	2302      	movs	r3, #2
 8015536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015538:	2300      	movs	r3, #0
 801553a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801553c:	2303      	movs	r3, #3
 801553e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8015540:	230e      	movs	r3, #14
 8015542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015544:	f107 0314 	add.w	r3, r7, #20
 8015548:	4619      	mov	r1, r3
 801554a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801554e:	f7f4 fd55 	bl	8009ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015552:	4b10      	ldr	r3, [pc, #64]	; (8015594 <HAL_PCD_MspInit+0xa0>)
 8015554:	69db      	ldr	r3, [r3, #28]
 8015556:	4a0f      	ldr	r2, [pc, #60]	; (8015594 <HAL_PCD_MspInit+0xa0>)
 8015558:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801555c:	61d3      	str	r3, [r2, #28]
 801555e:	4b0d      	ldr	r3, [pc, #52]	; (8015594 <HAL_PCD_MspInit+0xa0>)
 8015560:	69db      	ldr	r3, [r3, #28]
 8015562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015566:	60fb      	str	r3, [r7, #12]
 8015568:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 801556a:	4b0b      	ldr	r3, [pc, #44]	; (8015598 <HAL_PCD_MspInit+0xa4>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	4a0a      	ldr	r2, [pc, #40]	; (8015598 <HAL_PCD_MspInit+0xa4>)
 8015570:	f043 0320 	orr.w	r3, r3, #32
 8015574:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8015576:	2200      	movs	r2, #0
 8015578:	2105      	movs	r1, #5
 801557a:	204b      	movs	r0, #75	; 0x4b
 801557c:	f7f4 fa76 	bl	8009a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015580:	204b      	movs	r0, #75	; 0x4b
 8015582:	f7f4 fa8f 	bl	8009aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015586:	bf00      	nop
 8015588:	3728      	adds	r7, #40	; 0x28
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}
 801558e:	bf00      	nop
 8015590:	40005c00 	.word	0x40005c00
 8015594:	40021000 	.word	0x40021000
 8015598:	40010000 	.word	0x40010000

0801559c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b082      	sub	sp, #8
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80155b0:	4619      	mov	r1, r3
 80155b2:	4610      	mov	r0, r2
 80155b4:	f7fb fff6 	bl	80115a4 <USBD_LL_SetupStage>
}
 80155b8:	bf00      	nop
 80155ba:	3708      	adds	r7, #8
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b082      	sub	sp, #8
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
 80155c8:	460b      	mov	r3, r1
 80155ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80155d2:	78fa      	ldrb	r2, [r7, #3]
 80155d4:	6879      	ldr	r1, [r7, #4]
 80155d6:	4613      	mov	r3, r2
 80155d8:	009b      	lsls	r3, r3, #2
 80155da:	4413      	add	r3, r2
 80155dc:	00db      	lsls	r3, r3, #3
 80155de:	440b      	add	r3, r1
 80155e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80155e4:	681a      	ldr	r2, [r3, #0]
 80155e6:	78fb      	ldrb	r3, [r7, #3]
 80155e8:	4619      	mov	r1, r3
 80155ea:	f7fc f828 	bl	801163e <USBD_LL_DataOutStage>
}
 80155ee:	bf00      	nop
 80155f0:	3708      	adds	r7, #8
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}

080155f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155f6:	b580      	push	{r7, lr}
 80155f8:	b082      	sub	sp, #8
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	6078      	str	r0, [r7, #4]
 80155fe:	460b      	mov	r3, r1
 8015600:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8015608:	78fa      	ldrb	r2, [r7, #3]
 801560a:	6879      	ldr	r1, [r7, #4]
 801560c:	4613      	mov	r3, r2
 801560e:	009b      	lsls	r3, r3, #2
 8015610:	4413      	add	r3, r2
 8015612:	00db      	lsls	r3, r3, #3
 8015614:	440b      	add	r3, r1
 8015616:	333c      	adds	r3, #60	; 0x3c
 8015618:	681a      	ldr	r2, [r3, #0]
 801561a:	78fb      	ldrb	r3, [r7, #3]
 801561c:	4619      	mov	r1, r3
 801561e:	f7fc f87f 	bl	8011720 <USBD_LL_DataInStage>
}
 8015622:	bf00      	nop
 8015624:	3708      	adds	r7, #8
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b082      	sub	sp, #8
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015638:	4618      	mov	r0, r3
 801563a:	f7fc f992 	bl	8011962 <USBD_LL_SOF>
}
 801563e:	bf00      	nop
 8015640:	3708      	adds	r7, #8
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}

08015646 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015646:	b580      	push	{r7, lr}
 8015648:	b084      	sub	sp, #16
 801564a:	af00      	add	r7, sp, #0
 801564c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801564e:	2301      	movs	r3, #1
 8015650:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	689b      	ldr	r3, [r3, #8]
 8015656:	2b02      	cmp	r3, #2
 8015658:	d001      	beq.n	801565e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801565a:	f7ee f8fd 	bl	8003858 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015664:	7bfa      	ldrb	r2, [r7, #15]
 8015666:	4611      	mov	r1, r2
 8015668:	4618      	mov	r0, r3
 801566a:	f7fc f93f 	bl	80118ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015674:	4618      	mov	r0, r3
 8015676:	f7fc f8f8 	bl	801186a <USBD_LL_Reset>
}
 801567a:	bf00      	nop
 801567c:	3710      	adds	r7, #16
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}
	...

08015684 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015692:	4618      	mov	r0, r3
 8015694:	f7fc f93a 	bl	801190c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	699b      	ldr	r3, [r3, #24]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d005      	beq.n	80156ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156a0:	4b04      	ldr	r3, [pc, #16]	; (80156b4 <HAL_PCD_SuspendCallback+0x30>)
 80156a2:	691b      	ldr	r3, [r3, #16]
 80156a4:	4a03      	ldr	r2, [pc, #12]	; (80156b4 <HAL_PCD_SuspendCallback+0x30>)
 80156a6:	f043 0306 	orr.w	r3, r3, #6
 80156aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80156ac:	bf00      	nop
 80156ae:	3708      	adds	r7, #8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	e000ed00 	.word	0xe000ed00

080156b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7fc f935 	bl	8011936 <USBD_LL_Resume>
}
 80156cc:	bf00      	nop
 80156ce:	3708      	adds	r7, #8
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b082      	sub	sp, #8
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80156dc:	4a28      	ldr	r2, [pc, #160]	; (8015780 <USBD_LL_Init+0xac>)
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	4a26      	ldr	r2, [pc, #152]	; (8015780 <USBD_LL_Init+0xac>)
 80156e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80156ec:	4b24      	ldr	r3, [pc, #144]	; (8015780 <USBD_LL_Init+0xac>)
 80156ee:	4a25      	ldr	r2, [pc, #148]	; (8015784 <USBD_LL_Init+0xb0>)
 80156f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80156f2:	4b23      	ldr	r3, [pc, #140]	; (8015780 <USBD_LL_Init+0xac>)
 80156f4:	2208      	movs	r2, #8
 80156f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80156f8:	4b21      	ldr	r3, [pc, #132]	; (8015780 <USBD_LL_Init+0xac>)
 80156fa:	2202      	movs	r2, #2
 80156fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80156fe:	4b20      	ldr	r3, [pc, #128]	; (8015780 <USBD_LL_Init+0xac>)
 8015700:	2202      	movs	r2, #2
 8015702:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015704:	4b1e      	ldr	r3, [pc, #120]	; (8015780 <USBD_LL_Init+0xac>)
 8015706:	2200      	movs	r2, #0
 8015708:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801570a:	4b1d      	ldr	r3, [pc, #116]	; (8015780 <USBD_LL_Init+0xac>)
 801570c:	2200      	movs	r2, #0
 801570e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015710:	481b      	ldr	r0, [pc, #108]	; (8015780 <USBD_LL_Init+0xac>)
 8015712:	f7f5 fb20 	bl	800ad56 <HAL_PCD_Init>
 8015716:	4603      	mov	r3, r0
 8015718:	2b00      	cmp	r3, #0
 801571a:	d001      	beq.n	8015720 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 801571c:	f7ee f89c 	bl	8003858 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015726:	2318      	movs	r3, #24
 8015728:	2200      	movs	r2, #0
 801572a:	2100      	movs	r1, #0
 801572c:	f7f6 ffbb 	bl	800c6a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015736:	2358      	movs	r3, #88	; 0x58
 8015738:	2200      	movs	r2, #0
 801573a:	2180      	movs	r1, #128	; 0x80
 801573c:	f7f6 ffb3 	bl	800c6a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015746:	23c0      	movs	r3, #192	; 0xc0
 8015748:	2200      	movs	r2, #0
 801574a:	2181      	movs	r1, #129	; 0x81
 801574c:	f7f6 ffab 	bl	800c6a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015756:	f44f 7388 	mov.w	r3, #272	; 0x110
 801575a:	2200      	movs	r2, #0
 801575c:	2101      	movs	r1, #1
 801575e:	f7f6 ffa2 	bl	800c6a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015768:	f44f 7380 	mov.w	r3, #256	; 0x100
 801576c:	2200      	movs	r2, #0
 801576e:	2182      	movs	r1, #130	; 0x82
 8015770:	f7f6 ff99 	bl	800c6a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015774:	2300      	movs	r3, #0
}
 8015776:	4618      	mov	r0, r3
 8015778:	3708      	adds	r7, #8
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}
 801577e:	bf00      	nop
 8015780:	20004df0 	.word	0x20004df0
 8015784:	40005c00 	.word	0x40005c00

08015788 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015790:	2300      	movs	r3, #0
 8015792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015794:	2300      	movs	r3, #0
 8015796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801579e:	4618      	mov	r0, r3
 80157a0:	f7f5 fbb7 	bl	800af12 <HAL_PCD_Start>
 80157a4:	4603      	mov	r3, r0
 80157a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157a8:	7bfb      	ldrb	r3, [r7, #15]
 80157aa:	4618      	mov	r0, r3
 80157ac:	f000 f954 	bl	8015a58 <USBD_Get_USB_Status>
 80157b0:	4603      	mov	r3, r0
 80157b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3710      	adds	r7, #16
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}

080157be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80157be:	b580      	push	{r7, lr}
 80157c0:	b084      	sub	sp, #16
 80157c2:	af00      	add	r7, sp, #0
 80157c4:	6078      	str	r0, [r7, #4]
 80157c6:	4608      	mov	r0, r1
 80157c8:	4611      	mov	r1, r2
 80157ca:	461a      	mov	r2, r3
 80157cc:	4603      	mov	r3, r0
 80157ce:	70fb      	strb	r3, [r7, #3]
 80157d0:	460b      	mov	r3, r1
 80157d2:	70bb      	strb	r3, [r7, #2]
 80157d4:	4613      	mov	r3, r2
 80157d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157d8:	2300      	movs	r3, #0
 80157da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157dc:	2300      	movs	r3, #0
 80157de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80157e6:	78bb      	ldrb	r3, [r7, #2]
 80157e8:	883a      	ldrh	r2, [r7, #0]
 80157ea:	78f9      	ldrb	r1, [r7, #3]
 80157ec:	f7f5 fcd3 	bl	800b196 <HAL_PCD_EP_Open>
 80157f0:	4603      	mov	r3, r0
 80157f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157f4:	7bfb      	ldrb	r3, [r7, #15]
 80157f6:	4618      	mov	r0, r3
 80157f8:	f000 f92e 	bl	8015a58 <USBD_Get_USB_Status>
 80157fc:	4603      	mov	r3, r0
 80157fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015800:	7bbb      	ldrb	r3, [r7, #14]
}
 8015802:	4618      	mov	r0, r3
 8015804:	3710      	adds	r7, #16
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}

0801580a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801580a:	b580      	push	{r7, lr}
 801580c:	b084      	sub	sp, #16
 801580e:	af00      	add	r7, sp, #0
 8015810:	6078      	str	r0, [r7, #4]
 8015812:	460b      	mov	r3, r1
 8015814:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015816:	2300      	movs	r3, #0
 8015818:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801581a:	2300      	movs	r3, #0
 801581c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015824:	78fa      	ldrb	r2, [r7, #3]
 8015826:	4611      	mov	r1, r2
 8015828:	4618      	mov	r0, r3
 801582a:	f7f5 fd1a 	bl	800b262 <HAL_PCD_EP_Close>
 801582e:	4603      	mov	r3, r0
 8015830:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015832:	7bfb      	ldrb	r3, [r7, #15]
 8015834:	4618      	mov	r0, r3
 8015836:	f000 f90f 	bl	8015a58 <USBD_Get_USB_Status>
 801583a:	4603      	mov	r3, r0
 801583c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801583e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015840:	4618      	mov	r0, r3
 8015842:	3710      	adds	r7, #16
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b084      	sub	sp, #16
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	460b      	mov	r3, r1
 8015852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015854:	2300      	movs	r3, #0
 8015856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015858:	2300      	movs	r3, #0
 801585a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015862:	78fa      	ldrb	r2, [r7, #3]
 8015864:	4611      	mov	r1, r2
 8015866:	4618      	mov	r0, r3
 8015868:	f7f5 fddb 	bl	800b422 <HAL_PCD_EP_SetStall>
 801586c:	4603      	mov	r3, r0
 801586e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015870:	7bfb      	ldrb	r3, [r7, #15]
 8015872:	4618      	mov	r0, r3
 8015874:	f000 f8f0 	bl	8015a58 <USBD_Get_USB_Status>
 8015878:	4603      	mov	r3, r0
 801587a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801587c:	7bbb      	ldrb	r3, [r7, #14]
}
 801587e:	4618      	mov	r0, r3
 8015880:	3710      	adds	r7, #16
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}

08015886 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015886:	b580      	push	{r7, lr}
 8015888:	b084      	sub	sp, #16
 801588a:	af00      	add	r7, sp, #0
 801588c:	6078      	str	r0, [r7, #4]
 801588e:	460b      	mov	r3, r1
 8015890:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015892:	2300      	movs	r3, #0
 8015894:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015896:	2300      	movs	r3, #0
 8015898:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80158a0:	78fa      	ldrb	r2, [r7, #3]
 80158a2:	4611      	mov	r1, r2
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7f5 fe0e 	bl	800b4c6 <HAL_PCD_EP_ClrStall>
 80158aa:	4603      	mov	r3, r0
 80158ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158ae:	7bfb      	ldrb	r3, [r7, #15]
 80158b0:	4618      	mov	r0, r3
 80158b2:	f000 f8d1 	bl	8015a58 <USBD_Get_USB_Status>
 80158b6:	4603      	mov	r3, r0
 80158b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3710      	adds	r7, #16
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158c4:	b480      	push	{r7}
 80158c6:	b085      	sub	sp, #20
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	460b      	mov	r3, r1
 80158ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80158d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80158d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	da0c      	bge.n	80158fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80158e0:	78fb      	ldrb	r3, [r7, #3]
 80158e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158e6:	68f9      	ldr	r1, [r7, #12]
 80158e8:	1c5a      	adds	r2, r3, #1
 80158ea:	4613      	mov	r3, r2
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	4413      	add	r3, r2
 80158f0:	00db      	lsls	r3, r3, #3
 80158f2:	440b      	add	r3, r1
 80158f4:	3302      	adds	r3, #2
 80158f6:	781b      	ldrb	r3, [r3, #0]
 80158f8:	e00b      	b.n	8015912 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80158fa:	78fb      	ldrb	r3, [r7, #3]
 80158fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015900:	68f9      	ldr	r1, [r7, #12]
 8015902:	4613      	mov	r3, r2
 8015904:	009b      	lsls	r3, r3, #2
 8015906:	4413      	add	r3, r2
 8015908:	00db      	lsls	r3, r3, #3
 801590a:	440b      	add	r3, r1
 801590c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8015910:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015912:	4618      	mov	r0, r3
 8015914:	3714      	adds	r7, #20
 8015916:	46bd      	mov	sp, r7
 8015918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591c:	4770      	bx	lr

0801591e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801591e:	b580      	push	{r7, lr}
 8015920:	b084      	sub	sp, #16
 8015922:	af00      	add	r7, sp, #0
 8015924:	6078      	str	r0, [r7, #4]
 8015926:	460b      	mov	r3, r1
 8015928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801592a:	2300      	movs	r3, #0
 801592c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801592e:	2300      	movs	r3, #0
 8015930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015938:	78fa      	ldrb	r2, [r7, #3]
 801593a:	4611      	mov	r1, r2
 801593c:	4618      	mov	r0, r3
 801593e:	f7f5 fc05 	bl	800b14c <HAL_PCD_SetAddress>
 8015942:	4603      	mov	r3, r0
 8015944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015946:	7bfb      	ldrb	r3, [r7, #15]
 8015948:	4618      	mov	r0, r3
 801594a:	f000 f885 	bl	8015a58 <USBD_Get_USB_Status>
 801594e:	4603      	mov	r3, r0
 8015950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015952:	7bbb      	ldrb	r3, [r7, #14]
}
 8015954:	4618      	mov	r0, r3
 8015956:	3710      	adds	r7, #16
 8015958:	46bd      	mov	sp, r7
 801595a:	bd80      	pop	{r7, pc}

0801595c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b086      	sub	sp, #24
 8015960:	af00      	add	r7, sp, #0
 8015962:	60f8      	str	r0, [r7, #12]
 8015964:	607a      	str	r2, [r7, #4]
 8015966:	461a      	mov	r2, r3
 8015968:	460b      	mov	r3, r1
 801596a:	72fb      	strb	r3, [r7, #11]
 801596c:	4613      	mov	r3, r2
 801596e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015970:	2300      	movs	r3, #0
 8015972:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015974:	2300      	movs	r3, #0
 8015976:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801597e:	893b      	ldrh	r3, [r7, #8]
 8015980:	7af9      	ldrb	r1, [r7, #11]
 8015982:	687a      	ldr	r2, [r7, #4]
 8015984:	f7f5 fd0a 	bl	800b39c <HAL_PCD_EP_Transmit>
 8015988:	4603      	mov	r3, r0
 801598a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801598c:	7dfb      	ldrb	r3, [r7, #23]
 801598e:	4618      	mov	r0, r3
 8015990:	f000 f862 	bl	8015a58 <USBD_Get_USB_Status>
 8015994:	4603      	mov	r3, r0
 8015996:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015998:	7dbb      	ldrb	r3, [r7, #22]
}
 801599a:	4618      	mov	r0, r3
 801599c:	3718      	adds	r7, #24
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}

080159a2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80159a2:	b580      	push	{r7, lr}
 80159a4:	b086      	sub	sp, #24
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	60f8      	str	r0, [r7, #12]
 80159aa:	607a      	str	r2, [r7, #4]
 80159ac:	461a      	mov	r2, r3
 80159ae:	460b      	mov	r3, r1
 80159b0:	72fb      	strb	r3, [r7, #11]
 80159b2:	4613      	mov	r3, r2
 80159b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159b6:	2300      	movs	r3, #0
 80159b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159ba:	2300      	movs	r3, #0
 80159bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80159c4:	893b      	ldrh	r3, [r7, #8]
 80159c6:	7af9      	ldrb	r1, [r7, #11]
 80159c8:	687a      	ldr	r2, [r7, #4]
 80159ca:	f7f5 fc92 	bl	800b2f2 <HAL_PCD_EP_Receive>
 80159ce:	4603      	mov	r3, r0
 80159d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159d2:	7dfb      	ldrb	r3, [r7, #23]
 80159d4:	4618      	mov	r0, r3
 80159d6:	f000 f83f 	bl	8015a58 <USBD_Get_USB_Status>
 80159da:	4603      	mov	r3, r0
 80159dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80159de:	7dbb      	ldrb	r3, [r7, #22]
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3718      	adds	r7, #24
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b082      	sub	sp, #8
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
 80159f0:	460b      	mov	r3, r1
 80159f2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80159fa:	78fa      	ldrb	r2, [r7, #3]
 80159fc:	4611      	mov	r1, r2
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7f5 fcb4 	bl	800b36c <HAL_PCD_EP_GetRxCount>
 8015a04:	4603      	mov	r3, r0
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	3708      	adds	r7, #8
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd80      	pop	{r7, pc}
	...

08015a10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015a10:	b480      	push	{r7}
 8015a12:	b083      	sub	sp, #12
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015a18:	4b03      	ldr	r3, [pc, #12]	; (8015a28 <USBD_static_malloc+0x18>)
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	370c      	adds	r7, #12
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a24:	4770      	bx	lr
 8015a26:	bf00      	nop
 8015a28:	200050dc 	.word	0x200050dc

08015a2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]

}
 8015a34:	bf00      	nop
 8015a36:	370c      	adds	r7, #12
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3e:	4770      	bx	lr

08015a40 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a40:	b480      	push	{r7}
 8015a42:	b083      	sub	sp, #12
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	460b      	mov	r3, r1
 8015a4a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8015a4c:	bf00      	nop
 8015a4e:	370c      	adds	r7, #12
 8015a50:	46bd      	mov	sp, r7
 8015a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a56:	4770      	bx	lr

08015a58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b085      	sub	sp, #20
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	4603      	mov	r3, r0
 8015a60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a62:	2300      	movs	r3, #0
 8015a64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015a66:	79fb      	ldrb	r3, [r7, #7]
 8015a68:	2b03      	cmp	r3, #3
 8015a6a:	d817      	bhi.n	8015a9c <USBD_Get_USB_Status+0x44>
 8015a6c:	a201      	add	r2, pc, #4	; (adr r2, 8015a74 <USBD_Get_USB_Status+0x1c>)
 8015a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a72:	bf00      	nop
 8015a74:	08015a85 	.word	0x08015a85
 8015a78:	08015a8b 	.word	0x08015a8b
 8015a7c:	08015a91 	.word	0x08015a91
 8015a80:	08015a97 	.word	0x08015a97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015a84:	2300      	movs	r3, #0
 8015a86:	73fb      	strb	r3, [r7, #15]
    break;
 8015a88:	e00b      	b.n	8015aa2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015a8a:	2302      	movs	r3, #2
 8015a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8015a8e:	e008      	b.n	8015aa2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015a90:	2301      	movs	r3, #1
 8015a92:	73fb      	strb	r3, [r7, #15]
    break;
 8015a94:	e005      	b.n	8015aa2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015a96:	2302      	movs	r3, #2
 8015a98:	73fb      	strb	r3, [r7, #15]
    break;
 8015a9a:	e002      	b.n	8015aa2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015a9c:	2302      	movs	r3, #2
 8015a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8015aa0:	bf00      	nop
  }
  return usb_status;
 8015aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	3714      	adds	r7, #20
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr

08015ab0 <__errno>:
 8015ab0:	4b01      	ldr	r3, [pc, #4]	; (8015ab8 <__errno+0x8>)
 8015ab2:	6818      	ldr	r0, [r3, #0]
 8015ab4:	4770      	bx	lr
 8015ab6:	bf00      	nop
 8015ab8:	20000180 	.word	0x20000180

08015abc <__libc_init_array>:
 8015abc:	b570      	push	{r4, r5, r6, lr}
 8015abe:	4d0d      	ldr	r5, [pc, #52]	; (8015af4 <__libc_init_array+0x38>)
 8015ac0:	4c0d      	ldr	r4, [pc, #52]	; (8015af8 <__libc_init_array+0x3c>)
 8015ac2:	1b64      	subs	r4, r4, r5
 8015ac4:	10a4      	asrs	r4, r4, #2
 8015ac6:	2600      	movs	r6, #0
 8015ac8:	42a6      	cmp	r6, r4
 8015aca:	d109      	bne.n	8015ae0 <__libc_init_array+0x24>
 8015acc:	4d0b      	ldr	r5, [pc, #44]	; (8015afc <__libc_init_array+0x40>)
 8015ace:	4c0c      	ldr	r4, [pc, #48]	; (8015b00 <__libc_init_array+0x44>)
 8015ad0:	f000 fd2c 	bl	801652c <_init>
 8015ad4:	1b64      	subs	r4, r4, r5
 8015ad6:	10a4      	asrs	r4, r4, #2
 8015ad8:	2600      	movs	r6, #0
 8015ada:	42a6      	cmp	r6, r4
 8015adc:	d105      	bne.n	8015aea <__libc_init_array+0x2e>
 8015ade:	bd70      	pop	{r4, r5, r6, pc}
 8015ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ae4:	4798      	blx	r3
 8015ae6:	3601      	adds	r6, #1
 8015ae8:	e7ee      	b.n	8015ac8 <__libc_init_array+0xc>
 8015aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8015aee:	4798      	blx	r3
 8015af0:	3601      	adds	r6, #1
 8015af2:	e7f2      	b.n	8015ada <__libc_init_array+0x1e>
 8015af4:	08016cf8 	.word	0x08016cf8
 8015af8:	08016cf8 	.word	0x08016cf8
 8015afc:	08016cf8 	.word	0x08016cf8
 8015b00:	08016cfc 	.word	0x08016cfc

08015b04 <memcpy>:
 8015b04:	440a      	add	r2, r1
 8015b06:	4291      	cmp	r1, r2
 8015b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8015b0c:	d100      	bne.n	8015b10 <memcpy+0xc>
 8015b0e:	4770      	bx	lr
 8015b10:	b510      	push	{r4, lr}
 8015b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b1a:	4291      	cmp	r1, r2
 8015b1c:	d1f9      	bne.n	8015b12 <memcpy+0xe>
 8015b1e:	bd10      	pop	{r4, pc}

08015b20 <memset>:
 8015b20:	4402      	add	r2, r0
 8015b22:	4603      	mov	r3, r0
 8015b24:	4293      	cmp	r3, r2
 8015b26:	d100      	bne.n	8015b2a <memset+0xa>
 8015b28:	4770      	bx	lr
 8015b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8015b2e:	e7f9      	b.n	8015b24 <memset+0x4>

08015b30 <_puts_r>:
 8015b30:	b570      	push	{r4, r5, r6, lr}
 8015b32:	460e      	mov	r6, r1
 8015b34:	4605      	mov	r5, r0
 8015b36:	b118      	cbz	r0, 8015b40 <_puts_r+0x10>
 8015b38:	6983      	ldr	r3, [r0, #24]
 8015b3a:	b90b      	cbnz	r3, 8015b40 <_puts_r+0x10>
 8015b3c:	f000 fa48 	bl	8015fd0 <__sinit>
 8015b40:	69ab      	ldr	r3, [r5, #24]
 8015b42:	68ac      	ldr	r4, [r5, #8]
 8015b44:	b913      	cbnz	r3, 8015b4c <_puts_r+0x1c>
 8015b46:	4628      	mov	r0, r5
 8015b48:	f000 fa42 	bl	8015fd0 <__sinit>
 8015b4c:	4b2c      	ldr	r3, [pc, #176]	; (8015c00 <_puts_r+0xd0>)
 8015b4e:	429c      	cmp	r4, r3
 8015b50:	d120      	bne.n	8015b94 <_puts_r+0x64>
 8015b52:	686c      	ldr	r4, [r5, #4]
 8015b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b56:	07db      	lsls	r3, r3, #31
 8015b58:	d405      	bmi.n	8015b66 <_puts_r+0x36>
 8015b5a:	89a3      	ldrh	r3, [r4, #12]
 8015b5c:	0598      	lsls	r0, r3, #22
 8015b5e:	d402      	bmi.n	8015b66 <_puts_r+0x36>
 8015b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b62:	f000 fad3 	bl	801610c <__retarget_lock_acquire_recursive>
 8015b66:	89a3      	ldrh	r3, [r4, #12]
 8015b68:	0719      	lsls	r1, r3, #28
 8015b6a:	d51d      	bpl.n	8015ba8 <_puts_r+0x78>
 8015b6c:	6923      	ldr	r3, [r4, #16]
 8015b6e:	b1db      	cbz	r3, 8015ba8 <_puts_r+0x78>
 8015b70:	3e01      	subs	r6, #1
 8015b72:	68a3      	ldr	r3, [r4, #8]
 8015b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015b78:	3b01      	subs	r3, #1
 8015b7a:	60a3      	str	r3, [r4, #8]
 8015b7c:	bb39      	cbnz	r1, 8015bce <_puts_r+0x9e>
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	da38      	bge.n	8015bf4 <_puts_r+0xc4>
 8015b82:	4622      	mov	r2, r4
 8015b84:	210a      	movs	r1, #10
 8015b86:	4628      	mov	r0, r5
 8015b88:	f000 f848 	bl	8015c1c <__swbuf_r>
 8015b8c:	3001      	adds	r0, #1
 8015b8e:	d011      	beq.n	8015bb4 <_puts_r+0x84>
 8015b90:	250a      	movs	r5, #10
 8015b92:	e011      	b.n	8015bb8 <_puts_r+0x88>
 8015b94:	4b1b      	ldr	r3, [pc, #108]	; (8015c04 <_puts_r+0xd4>)
 8015b96:	429c      	cmp	r4, r3
 8015b98:	d101      	bne.n	8015b9e <_puts_r+0x6e>
 8015b9a:	68ac      	ldr	r4, [r5, #8]
 8015b9c:	e7da      	b.n	8015b54 <_puts_r+0x24>
 8015b9e:	4b1a      	ldr	r3, [pc, #104]	; (8015c08 <_puts_r+0xd8>)
 8015ba0:	429c      	cmp	r4, r3
 8015ba2:	bf08      	it	eq
 8015ba4:	68ec      	ldreq	r4, [r5, #12]
 8015ba6:	e7d5      	b.n	8015b54 <_puts_r+0x24>
 8015ba8:	4621      	mov	r1, r4
 8015baa:	4628      	mov	r0, r5
 8015bac:	f000 f888 	bl	8015cc0 <__swsetup_r>
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	d0dd      	beq.n	8015b70 <_puts_r+0x40>
 8015bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8015bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015bba:	07da      	lsls	r2, r3, #31
 8015bbc:	d405      	bmi.n	8015bca <_puts_r+0x9a>
 8015bbe:	89a3      	ldrh	r3, [r4, #12]
 8015bc0:	059b      	lsls	r3, r3, #22
 8015bc2:	d402      	bmi.n	8015bca <_puts_r+0x9a>
 8015bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bc6:	f000 faa2 	bl	801610e <__retarget_lock_release_recursive>
 8015bca:	4628      	mov	r0, r5
 8015bcc:	bd70      	pop	{r4, r5, r6, pc}
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	da04      	bge.n	8015bdc <_puts_r+0xac>
 8015bd2:	69a2      	ldr	r2, [r4, #24]
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	dc06      	bgt.n	8015be6 <_puts_r+0xb6>
 8015bd8:	290a      	cmp	r1, #10
 8015bda:	d004      	beq.n	8015be6 <_puts_r+0xb6>
 8015bdc:	6823      	ldr	r3, [r4, #0]
 8015bde:	1c5a      	adds	r2, r3, #1
 8015be0:	6022      	str	r2, [r4, #0]
 8015be2:	7019      	strb	r1, [r3, #0]
 8015be4:	e7c5      	b.n	8015b72 <_puts_r+0x42>
 8015be6:	4622      	mov	r2, r4
 8015be8:	4628      	mov	r0, r5
 8015bea:	f000 f817 	bl	8015c1c <__swbuf_r>
 8015bee:	3001      	adds	r0, #1
 8015bf0:	d1bf      	bne.n	8015b72 <_puts_r+0x42>
 8015bf2:	e7df      	b.n	8015bb4 <_puts_r+0x84>
 8015bf4:	6823      	ldr	r3, [r4, #0]
 8015bf6:	250a      	movs	r5, #10
 8015bf8:	1c5a      	adds	r2, r3, #1
 8015bfa:	6022      	str	r2, [r4, #0]
 8015bfc:	701d      	strb	r5, [r3, #0]
 8015bfe:	e7db      	b.n	8015bb8 <_puts_r+0x88>
 8015c00:	08016cb8 	.word	0x08016cb8
 8015c04:	08016cd8 	.word	0x08016cd8
 8015c08:	08016c98 	.word	0x08016c98

08015c0c <puts>:
 8015c0c:	4b02      	ldr	r3, [pc, #8]	; (8015c18 <puts+0xc>)
 8015c0e:	4601      	mov	r1, r0
 8015c10:	6818      	ldr	r0, [r3, #0]
 8015c12:	f7ff bf8d 	b.w	8015b30 <_puts_r>
 8015c16:	bf00      	nop
 8015c18:	20000180 	.word	0x20000180

08015c1c <__swbuf_r>:
 8015c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c1e:	460e      	mov	r6, r1
 8015c20:	4614      	mov	r4, r2
 8015c22:	4605      	mov	r5, r0
 8015c24:	b118      	cbz	r0, 8015c2e <__swbuf_r+0x12>
 8015c26:	6983      	ldr	r3, [r0, #24]
 8015c28:	b90b      	cbnz	r3, 8015c2e <__swbuf_r+0x12>
 8015c2a:	f000 f9d1 	bl	8015fd0 <__sinit>
 8015c2e:	4b21      	ldr	r3, [pc, #132]	; (8015cb4 <__swbuf_r+0x98>)
 8015c30:	429c      	cmp	r4, r3
 8015c32:	d12b      	bne.n	8015c8c <__swbuf_r+0x70>
 8015c34:	686c      	ldr	r4, [r5, #4]
 8015c36:	69a3      	ldr	r3, [r4, #24]
 8015c38:	60a3      	str	r3, [r4, #8]
 8015c3a:	89a3      	ldrh	r3, [r4, #12]
 8015c3c:	071a      	lsls	r2, r3, #28
 8015c3e:	d52f      	bpl.n	8015ca0 <__swbuf_r+0x84>
 8015c40:	6923      	ldr	r3, [r4, #16]
 8015c42:	b36b      	cbz	r3, 8015ca0 <__swbuf_r+0x84>
 8015c44:	6923      	ldr	r3, [r4, #16]
 8015c46:	6820      	ldr	r0, [r4, #0]
 8015c48:	1ac0      	subs	r0, r0, r3
 8015c4a:	6963      	ldr	r3, [r4, #20]
 8015c4c:	b2f6      	uxtb	r6, r6
 8015c4e:	4283      	cmp	r3, r0
 8015c50:	4637      	mov	r7, r6
 8015c52:	dc04      	bgt.n	8015c5e <__swbuf_r+0x42>
 8015c54:	4621      	mov	r1, r4
 8015c56:	4628      	mov	r0, r5
 8015c58:	f000 f926 	bl	8015ea8 <_fflush_r>
 8015c5c:	bb30      	cbnz	r0, 8015cac <__swbuf_r+0x90>
 8015c5e:	68a3      	ldr	r3, [r4, #8]
 8015c60:	3b01      	subs	r3, #1
 8015c62:	60a3      	str	r3, [r4, #8]
 8015c64:	6823      	ldr	r3, [r4, #0]
 8015c66:	1c5a      	adds	r2, r3, #1
 8015c68:	6022      	str	r2, [r4, #0]
 8015c6a:	701e      	strb	r6, [r3, #0]
 8015c6c:	6963      	ldr	r3, [r4, #20]
 8015c6e:	3001      	adds	r0, #1
 8015c70:	4283      	cmp	r3, r0
 8015c72:	d004      	beq.n	8015c7e <__swbuf_r+0x62>
 8015c74:	89a3      	ldrh	r3, [r4, #12]
 8015c76:	07db      	lsls	r3, r3, #31
 8015c78:	d506      	bpl.n	8015c88 <__swbuf_r+0x6c>
 8015c7a:	2e0a      	cmp	r6, #10
 8015c7c:	d104      	bne.n	8015c88 <__swbuf_r+0x6c>
 8015c7e:	4621      	mov	r1, r4
 8015c80:	4628      	mov	r0, r5
 8015c82:	f000 f911 	bl	8015ea8 <_fflush_r>
 8015c86:	b988      	cbnz	r0, 8015cac <__swbuf_r+0x90>
 8015c88:	4638      	mov	r0, r7
 8015c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c8c:	4b0a      	ldr	r3, [pc, #40]	; (8015cb8 <__swbuf_r+0x9c>)
 8015c8e:	429c      	cmp	r4, r3
 8015c90:	d101      	bne.n	8015c96 <__swbuf_r+0x7a>
 8015c92:	68ac      	ldr	r4, [r5, #8]
 8015c94:	e7cf      	b.n	8015c36 <__swbuf_r+0x1a>
 8015c96:	4b09      	ldr	r3, [pc, #36]	; (8015cbc <__swbuf_r+0xa0>)
 8015c98:	429c      	cmp	r4, r3
 8015c9a:	bf08      	it	eq
 8015c9c:	68ec      	ldreq	r4, [r5, #12]
 8015c9e:	e7ca      	b.n	8015c36 <__swbuf_r+0x1a>
 8015ca0:	4621      	mov	r1, r4
 8015ca2:	4628      	mov	r0, r5
 8015ca4:	f000 f80c 	bl	8015cc0 <__swsetup_r>
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	d0cb      	beq.n	8015c44 <__swbuf_r+0x28>
 8015cac:	f04f 37ff 	mov.w	r7, #4294967295
 8015cb0:	e7ea      	b.n	8015c88 <__swbuf_r+0x6c>
 8015cb2:	bf00      	nop
 8015cb4:	08016cb8 	.word	0x08016cb8
 8015cb8:	08016cd8 	.word	0x08016cd8
 8015cbc:	08016c98 	.word	0x08016c98

08015cc0 <__swsetup_r>:
 8015cc0:	4b32      	ldr	r3, [pc, #200]	; (8015d8c <__swsetup_r+0xcc>)
 8015cc2:	b570      	push	{r4, r5, r6, lr}
 8015cc4:	681d      	ldr	r5, [r3, #0]
 8015cc6:	4606      	mov	r6, r0
 8015cc8:	460c      	mov	r4, r1
 8015cca:	b125      	cbz	r5, 8015cd6 <__swsetup_r+0x16>
 8015ccc:	69ab      	ldr	r3, [r5, #24]
 8015cce:	b913      	cbnz	r3, 8015cd6 <__swsetup_r+0x16>
 8015cd0:	4628      	mov	r0, r5
 8015cd2:	f000 f97d 	bl	8015fd0 <__sinit>
 8015cd6:	4b2e      	ldr	r3, [pc, #184]	; (8015d90 <__swsetup_r+0xd0>)
 8015cd8:	429c      	cmp	r4, r3
 8015cda:	d10f      	bne.n	8015cfc <__swsetup_r+0x3c>
 8015cdc:	686c      	ldr	r4, [r5, #4]
 8015cde:	89a3      	ldrh	r3, [r4, #12]
 8015ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015ce4:	0719      	lsls	r1, r3, #28
 8015ce6:	d42c      	bmi.n	8015d42 <__swsetup_r+0x82>
 8015ce8:	06dd      	lsls	r5, r3, #27
 8015cea:	d411      	bmi.n	8015d10 <__swsetup_r+0x50>
 8015cec:	2309      	movs	r3, #9
 8015cee:	6033      	str	r3, [r6, #0]
 8015cf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015cf4:	81a3      	strh	r3, [r4, #12]
 8015cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8015cfa:	e03e      	b.n	8015d7a <__swsetup_r+0xba>
 8015cfc:	4b25      	ldr	r3, [pc, #148]	; (8015d94 <__swsetup_r+0xd4>)
 8015cfe:	429c      	cmp	r4, r3
 8015d00:	d101      	bne.n	8015d06 <__swsetup_r+0x46>
 8015d02:	68ac      	ldr	r4, [r5, #8]
 8015d04:	e7eb      	b.n	8015cde <__swsetup_r+0x1e>
 8015d06:	4b24      	ldr	r3, [pc, #144]	; (8015d98 <__swsetup_r+0xd8>)
 8015d08:	429c      	cmp	r4, r3
 8015d0a:	bf08      	it	eq
 8015d0c:	68ec      	ldreq	r4, [r5, #12]
 8015d0e:	e7e6      	b.n	8015cde <__swsetup_r+0x1e>
 8015d10:	0758      	lsls	r0, r3, #29
 8015d12:	d512      	bpl.n	8015d3a <__swsetup_r+0x7a>
 8015d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d16:	b141      	cbz	r1, 8015d2a <__swsetup_r+0x6a>
 8015d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d1c:	4299      	cmp	r1, r3
 8015d1e:	d002      	beq.n	8015d26 <__swsetup_r+0x66>
 8015d20:	4630      	mov	r0, r6
 8015d22:	f000 fa5b 	bl	80161dc <_free_r>
 8015d26:	2300      	movs	r3, #0
 8015d28:	6363      	str	r3, [r4, #52]	; 0x34
 8015d2a:	89a3      	ldrh	r3, [r4, #12]
 8015d2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015d30:	81a3      	strh	r3, [r4, #12]
 8015d32:	2300      	movs	r3, #0
 8015d34:	6063      	str	r3, [r4, #4]
 8015d36:	6923      	ldr	r3, [r4, #16]
 8015d38:	6023      	str	r3, [r4, #0]
 8015d3a:	89a3      	ldrh	r3, [r4, #12]
 8015d3c:	f043 0308 	orr.w	r3, r3, #8
 8015d40:	81a3      	strh	r3, [r4, #12]
 8015d42:	6923      	ldr	r3, [r4, #16]
 8015d44:	b94b      	cbnz	r3, 8015d5a <__swsetup_r+0x9a>
 8015d46:	89a3      	ldrh	r3, [r4, #12]
 8015d48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d50:	d003      	beq.n	8015d5a <__swsetup_r+0x9a>
 8015d52:	4621      	mov	r1, r4
 8015d54:	4630      	mov	r0, r6
 8015d56:	f000 fa01 	bl	801615c <__smakebuf_r>
 8015d5a:	89a0      	ldrh	r0, [r4, #12]
 8015d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d60:	f010 0301 	ands.w	r3, r0, #1
 8015d64:	d00a      	beq.n	8015d7c <__swsetup_r+0xbc>
 8015d66:	2300      	movs	r3, #0
 8015d68:	60a3      	str	r3, [r4, #8]
 8015d6a:	6963      	ldr	r3, [r4, #20]
 8015d6c:	425b      	negs	r3, r3
 8015d6e:	61a3      	str	r3, [r4, #24]
 8015d70:	6923      	ldr	r3, [r4, #16]
 8015d72:	b943      	cbnz	r3, 8015d86 <__swsetup_r+0xc6>
 8015d74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015d78:	d1ba      	bne.n	8015cf0 <__swsetup_r+0x30>
 8015d7a:	bd70      	pop	{r4, r5, r6, pc}
 8015d7c:	0781      	lsls	r1, r0, #30
 8015d7e:	bf58      	it	pl
 8015d80:	6963      	ldrpl	r3, [r4, #20]
 8015d82:	60a3      	str	r3, [r4, #8]
 8015d84:	e7f4      	b.n	8015d70 <__swsetup_r+0xb0>
 8015d86:	2000      	movs	r0, #0
 8015d88:	e7f7      	b.n	8015d7a <__swsetup_r+0xba>
 8015d8a:	bf00      	nop
 8015d8c:	20000180 	.word	0x20000180
 8015d90:	08016cb8 	.word	0x08016cb8
 8015d94:	08016cd8 	.word	0x08016cd8
 8015d98:	08016c98 	.word	0x08016c98

08015d9c <__sflush_r>:
 8015d9c:	898a      	ldrh	r2, [r1, #12]
 8015d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015da2:	4605      	mov	r5, r0
 8015da4:	0710      	lsls	r0, r2, #28
 8015da6:	460c      	mov	r4, r1
 8015da8:	d458      	bmi.n	8015e5c <__sflush_r+0xc0>
 8015daa:	684b      	ldr	r3, [r1, #4]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	dc05      	bgt.n	8015dbc <__sflush_r+0x20>
 8015db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	dc02      	bgt.n	8015dbc <__sflush_r+0x20>
 8015db6:	2000      	movs	r0, #0
 8015db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dbe:	2e00      	cmp	r6, #0
 8015dc0:	d0f9      	beq.n	8015db6 <__sflush_r+0x1a>
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015dc8:	682f      	ldr	r7, [r5, #0]
 8015dca:	602b      	str	r3, [r5, #0]
 8015dcc:	d032      	beq.n	8015e34 <__sflush_r+0x98>
 8015dce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015dd0:	89a3      	ldrh	r3, [r4, #12]
 8015dd2:	075a      	lsls	r2, r3, #29
 8015dd4:	d505      	bpl.n	8015de2 <__sflush_r+0x46>
 8015dd6:	6863      	ldr	r3, [r4, #4]
 8015dd8:	1ac0      	subs	r0, r0, r3
 8015dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ddc:	b10b      	cbz	r3, 8015de2 <__sflush_r+0x46>
 8015dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015de0:	1ac0      	subs	r0, r0, r3
 8015de2:	2300      	movs	r3, #0
 8015de4:	4602      	mov	r2, r0
 8015de6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015de8:	6a21      	ldr	r1, [r4, #32]
 8015dea:	4628      	mov	r0, r5
 8015dec:	47b0      	blx	r6
 8015dee:	1c43      	adds	r3, r0, #1
 8015df0:	89a3      	ldrh	r3, [r4, #12]
 8015df2:	d106      	bne.n	8015e02 <__sflush_r+0x66>
 8015df4:	6829      	ldr	r1, [r5, #0]
 8015df6:	291d      	cmp	r1, #29
 8015df8:	d82c      	bhi.n	8015e54 <__sflush_r+0xb8>
 8015dfa:	4a2a      	ldr	r2, [pc, #168]	; (8015ea4 <__sflush_r+0x108>)
 8015dfc:	40ca      	lsrs	r2, r1
 8015dfe:	07d6      	lsls	r6, r2, #31
 8015e00:	d528      	bpl.n	8015e54 <__sflush_r+0xb8>
 8015e02:	2200      	movs	r2, #0
 8015e04:	6062      	str	r2, [r4, #4]
 8015e06:	04d9      	lsls	r1, r3, #19
 8015e08:	6922      	ldr	r2, [r4, #16]
 8015e0a:	6022      	str	r2, [r4, #0]
 8015e0c:	d504      	bpl.n	8015e18 <__sflush_r+0x7c>
 8015e0e:	1c42      	adds	r2, r0, #1
 8015e10:	d101      	bne.n	8015e16 <__sflush_r+0x7a>
 8015e12:	682b      	ldr	r3, [r5, #0]
 8015e14:	b903      	cbnz	r3, 8015e18 <__sflush_r+0x7c>
 8015e16:	6560      	str	r0, [r4, #84]	; 0x54
 8015e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e1a:	602f      	str	r7, [r5, #0]
 8015e1c:	2900      	cmp	r1, #0
 8015e1e:	d0ca      	beq.n	8015db6 <__sflush_r+0x1a>
 8015e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e24:	4299      	cmp	r1, r3
 8015e26:	d002      	beq.n	8015e2e <__sflush_r+0x92>
 8015e28:	4628      	mov	r0, r5
 8015e2a:	f000 f9d7 	bl	80161dc <_free_r>
 8015e2e:	2000      	movs	r0, #0
 8015e30:	6360      	str	r0, [r4, #52]	; 0x34
 8015e32:	e7c1      	b.n	8015db8 <__sflush_r+0x1c>
 8015e34:	6a21      	ldr	r1, [r4, #32]
 8015e36:	2301      	movs	r3, #1
 8015e38:	4628      	mov	r0, r5
 8015e3a:	47b0      	blx	r6
 8015e3c:	1c41      	adds	r1, r0, #1
 8015e3e:	d1c7      	bne.n	8015dd0 <__sflush_r+0x34>
 8015e40:	682b      	ldr	r3, [r5, #0]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d0c4      	beq.n	8015dd0 <__sflush_r+0x34>
 8015e46:	2b1d      	cmp	r3, #29
 8015e48:	d001      	beq.n	8015e4e <__sflush_r+0xb2>
 8015e4a:	2b16      	cmp	r3, #22
 8015e4c:	d101      	bne.n	8015e52 <__sflush_r+0xb6>
 8015e4e:	602f      	str	r7, [r5, #0]
 8015e50:	e7b1      	b.n	8015db6 <__sflush_r+0x1a>
 8015e52:	89a3      	ldrh	r3, [r4, #12]
 8015e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e58:	81a3      	strh	r3, [r4, #12]
 8015e5a:	e7ad      	b.n	8015db8 <__sflush_r+0x1c>
 8015e5c:	690f      	ldr	r7, [r1, #16]
 8015e5e:	2f00      	cmp	r7, #0
 8015e60:	d0a9      	beq.n	8015db6 <__sflush_r+0x1a>
 8015e62:	0793      	lsls	r3, r2, #30
 8015e64:	680e      	ldr	r6, [r1, #0]
 8015e66:	bf08      	it	eq
 8015e68:	694b      	ldreq	r3, [r1, #20]
 8015e6a:	600f      	str	r7, [r1, #0]
 8015e6c:	bf18      	it	ne
 8015e6e:	2300      	movne	r3, #0
 8015e70:	eba6 0807 	sub.w	r8, r6, r7
 8015e74:	608b      	str	r3, [r1, #8]
 8015e76:	f1b8 0f00 	cmp.w	r8, #0
 8015e7a:	dd9c      	ble.n	8015db6 <__sflush_r+0x1a>
 8015e7c:	6a21      	ldr	r1, [r4, #32]
 8015e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e80:	4643      	mov	r3, r8
 8015e82:	463a      	mov	r2, r7
 8015e84:	4628      	mov	r0, r5
 8015e86:	47b0      	blx	r6
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	dc06      	bgt.n	8015e9a <__sflush_r+0xfe>
 8015e8c:	89a3      	ldrh	r3, [r4, #12]
 8015e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e92:	81a3      	strh	r3, [r4, #12]
 8015e94:	f04f 30ff 	mov.w	r0, #4294967295
 8015e98:	e78e      	b.n	8015db8 <__sflush_r+0x1c>
 8015e9a:	4407      	add	r7, r0
 8015e9c:	eba8 0800 	sub.w	r8, r8, r0
 8015ea0:	e7e9      	b.n	8015e76 <__sflush_r+0xda>
 8015ea2:	bf00      	nop
 8015ea4:	20400001 	.word	0x20400001

08015ea8 <_fflush_r>:
 8015ea8:	b538      	push	{r3, r4, r5, lr}
 8015eaa:	690b      	ldr	r3, [r1, #16]
 8015eac:	4605      	mov	r5, r0
 8015eae:	460c      	mov	r4, r1
 8015eb0:	b913      	cbnz	r3, 8015eb8 <_fflush_r+0x10>
 8015eb2:	2500      	movs	r5, #0
 8015eb4:	4628      	mov	r0, r5
 8015eb6:	bd38      	pop	{r3, r4, r5, pc}
 8015eb8:	b118      	cbz	r0, 8015ec2 <_fflush_r+0x1a>
 8015eba:	6983      	ldr	r3, [r0, #24]
 8015ebc:	b90b      	cbnz	r3, 8015ec2 <_fflush_r+0x1a>
 8015ebe:	f000 f887 	bl	8015fd0 <__sinit>
 8015ec2:	4b14      	ldr	r3, [pc, #80]	; (8015f14 <_fflush_r+0x6c>)
 8015ec4:	429c      	cmp	r4, r3
 8015ec6:	d11b      	bne.n	8015f00 <_fflush_r+0x58>
 8015ec8:	686c      	ldr	r4, [r5, #4]
 8015eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d0ef      	beq.n	8015eb2 <_fflush_r+0xa>
 8015ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ed4:	07d0      	lsls	r0, r2, #31
 8015ed6:	d404      	bmi.n	8015ee2 <_fflush_r+0x3a>
 8015ed8:	0599      	lsls	r1, r3, #22
 8015eda:	d402      	bmi.n	8015ee2 <_fflush_r+0x3a>
 8015edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ede:	f000 f915 	bl	801610c <__retarget_lock_acquire_recursive>
 8015ee2:	4628      	mov	r0, r5
 8015ee4:	4621      	mov	r1, r4
 8015ee6:	f7ff ff59 	bl	8015d9c <__sflush_r>
 8015eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015eec:	07da      	lsls	r2, r3, #31
 8015eee:	4605      	mov	r5, r0
 8015ef0:	d4e0      	bmi.n	8015eb4 <_fflush_r+0xc>
 8015ef2:	89a3      	ldrh	r3, [r4, #12]
 8015ef4:	059b      	lsls	r3, r3, #22
 8015ef6:	d4dd      	bmi.n	8015eb4 <_fflush_r+0xc>
 8015ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015efa:	f000 f908 	bl	801610e <__retarget_lock_release_recursive>
 8015efe:	e7d9      	b.n	8015eb4 <_fflush_r+0xc>
 8015f00:	4b05      	ldr	r3, [pc, #20]	; (8015f18 <_fflush_r+0x70>)
 8015f02:	429c      	cmp	r4, r3
 8015f04:	d101      	bne.n	8015f0a <_fflush_r+0x62>
 8015f06:	68ac      	ldr	r4, [r5, #8]
 8015f08:	e7df      	b.n	8015eca <_fflush_r+0x22>
 8015f0a:	4b04      	ldr	r3, [pc, #16]	; (8015f1c <_fflush_r+0x74>)
 8015f0c:	429c      	cmp	r4, r3
 8015f0e:	bf08      	it	eq
 8015f10:	68ec      	ldreq	r4, [r5, #12]
 8015f12:	e7da      	b.n	8015eca <_fflush_r+0x22>
 8015f14:	08016cb8 	.word	0x08016cb8
 8015f18:	08016cd8 	.word	0x08016cd8
 8015f1c:	08016c98 	.word	0x08016c98

08015f20 <std>:
 8015f20:	2300      	movs	r3, #0
 8015f22:	b510      	push	{r4, lr}
 8015f24:	4604      	mov	r4, r0
 8015f26:	e9c0 3300 	strd	r3, r3, [r0]
 8015f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f2e:	6083      	str	r3, [r0, #8]
 8015f30:	8181      	strh	r1, [r0, #12]
 8015f32:	6643      	str	r3, [r0, #100]	; 0x64
 8015f34:	81c2      	strh	r2, [r0, #14]
 8015f36:	6183      	str	r3, [r0, #24]
 8015f38:	4619      	mov	r1, r3
 8015f3a:	2208      	movs	r2, #8
 8015f3c:	305c      	adds	r0, #92	; 0x5c
 8015f3e:	f7ff fdef 	bl	8015b20 <memset>
 8015f42:	4b05      	ldr	r3, [pc, #20]	; (8015f58 <std+0x38>)
 8015f44:	6263      	str	r3, [r4, #36]	; 0x24
 8015f46:	4b05      	ldr	r3, [pc, #20]	; (8015f5c <std+0x3c>)
 8015f48:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f4a:	4b05      	ldr	r3, [pc, #20]	; (8015f60 <std+0x40>)
 8015f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f4e:	4b05      	ldr	r3, [pc, #20]	; (8015f64 <std+0x44>)
 8015f50:	6224      	str	r4, [r4, #32]
 8015f52:	6323      	str	r3, [r4, #48]	; 0x30
 8015f54:	bd10      	pop	{r4, pc}
 8015f56:	bf00      	nop
 8015f58:	080163bd 	.word	0x080163bd
 8015f5c:	080163df 	.word	0x080163df
 8015f60:	08016417 	.word	0x08016417
 8015f64:	0801643b 	.word	0x0801643b

08015f68 <_cleanup_r>:
 8015f68:	4901      	ldr	r1, [pc, #4]	; (8015f70 <_cleanup_r+0x8>)
 8015f6a:	f000 b8af 	b.w	80160cc <_fwalk_reent>
 8015f6e:	bf00      	nop
 8015f70:	08015ea9 	.word	0x08015ea9

08015f74 <__sfmoreglue>:
 8015f74:	b570      	push	{r4, r5, r6, lr}
 8015f76:	2268      	movs	r2, #104	; 0x68
 8015f78:	1e4d      	subs	r5, r1, #1
 8015f7a:	4355      	muls	r5, r2
 8015f7c:	460e      	mov	r6, r1
 8015f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f82:	f000 f997 	bl	80162b4 <_malloc_r>
 8015f86:	4604      	mov	r4, r0
 8015f88:	b140      	cbz	r0, 8015f9c <__sfmoreglue+0x28>
 8015f8a:	2100      	movs	r1, #0
 8015f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8015f90:	300c      	adds	r0, #12
 8015f92:	60a0      	str	r0, [r4, #8]
 8015f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f98:	f7ff fdc2 	bl	8015b20 <memset>
 8015f9c:	4620      	mov	r0, r4
 8015f9e:	bd70      	pop	{r4, r5, r6, pc}

08015fa0 <__sfp_lock_acquire>:
 8015fa0:	4801      	ldr	r0, [pc, #4]	; (8015fa8 <__sfp_lock_acquire+0x8>)
 8015fa2:	f000 b8b3 	b.w	801610c <__retarget_lock_acquire_recursive>
 8015fa6:	bf00      	nop
 8015fa8:	200052fd 	.word	0x200052fd

08015fac <__sfp_lock_release>:
 8015fac:	4801      	ldr	r0, [pc, #4]	; (8015fb4 <__sfp_lock_release+0x8>)
 8015fae:	f000 b8ae 	b.w	801610e <__retarget_lock_release_recursive>
 8015fb2:	bf00      	nop
 8015fb4:	200052fd 	.word	0x200052fd

08015fb8 <__sinit_lock_acquire>:
 8015fb8:	4801      	ldr	r0, [pc, #4]	; (8015fc0 <__sinit_lock_acquire+0x8>)
 8015fba:	f000 b8a7 	b.w	801610c <__retarget_lock_acquire_recursive>
 8015fbe:	bf00      	nop
 8015fc0:	200052fe 	.word	0x200052fe

08015fc4 <__sinit_lock_release>:
 8015fc4:	4801      	ldr	r0, [pc, #4]	; (8015fcc <__sinit_lock_release+0x8>)
 8015fc6:	f000 b8a2 	b.w	801610e <__retarget_lock_release_recursive>
 8015fca:	bf00      	nop
 8015fcc:	200052fe 	.word	0x200052fe

08015fd0 <__sinit>:
 8015fd0:	b510      	push	{r4, lr}
 8015fd2:	4604      	mov	r4, r0
 8015fd4:	f7ff fff0 	bl	8015fb8 <__sinit_lock_acquire>
 8015fd8:	69a3      	ldr	r3, [r4, #24]
 8015fda:	b11b      	cbz	r3, 8015fe4 <__sinit+0x14>
 8015fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fe0:	f7ff bff0 	b.w	8015fc4 <__sinit_lock_release>
 8015fe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015fe8:	6523      	str	r3, [r4, #80]	; 0x50
 8015fea:	4b13      	ldr	r3, [pc, #76]	; (8016038 <__sinit+0x68>)
 8015fec:	4a13      	ldr	r2, [pc, #76]	; (801603c <__sinit+0x6c>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	62a2      	str	r2, [r4, #40]	; 0x28
 8015ff2:	42a3      	cmp	r3, r4
 8015ff4:	bf04      	itt	eq
 8015ff6:	2301      	moveq	r3, #1
 8015ff8:	61a3      	streq	r3, [r4, #24]
 8015ffa:	4620      	mov	r0, r4
 8015ffc:	f000 f820 	bl	8016040 <__sfp>
 8016000:	6060      	str	r0, [r4, #4]
 8016002:	4620      	mov	r0, r4
 8016004:	f000 f81c 	bl	8016040 <__sfp>
 8016008:	60a0      	str	r0, [r4, #8]
 801600a:	4620      	mov	r0, r4
 801600c:	f000 f818 	bl	8016040 <__sfp>
 8016010:	2200      	movs	r2, #0
 8016012:	60e0      	str	r0, [r4, #12]
 8016014:	2104      	movs	r1, #4
 8016016:	6860      	ldr	r0, [r4, #4]
 8016018:	f7ff ff82 	bl	8015f20 <std>
 801601c:	68a0      	ldr	r0, [r4, #8]
 801601e:	2201      	movs	r2, #1
 8016020:	2109      	movs	r1, #9
 8016022:	f7ff ff7d 	bl	8015f20 <std>
 8016026:	68e0      	ldr	r0, [r4, #12]
 8016028:	2202      	movs	r2, #2
 801602a:	2112      	movs	r1, #18
 801602c:	f7ff ff78 	bl	8015f20 <std>
 8016030:	2301      	movs	r3, #1
 8016032:	61a3      	str	r3, [r4, #24]
 8016034:	e7d2      	b.n	8015fdc <__sinit+0xc>
 8016036:	bf00      	nop
 8016038:	08016c94 	.word	0x08016c94
 801603c:	08015f69 	.word	0x08015f69

08016040 <__sfp>:
 8016040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016042:	4607      	mov	r7, r0
 8016044:	f7ff ffac 	bl	8015fa0 <__sfp_lock_acquire>
 8016048:	4b1e      	ldr	r3, [pc, #120]	; (80160c4 <__sfp+0x84>)
 801604a:	681e      	ldr	r6, [r3, #0]
 801604c:	69b3      	ldr	r3, [r6, #24]
 801604e:	b913      	cbnz	r3, 8016056 <__sfp+0x16>
 8016050:	4630      	mov	r0, r6
 8016052:	f7ff ffbd 	bl	8015fd0 <__sinit>
 8016056:	3648      	adds	r6, #72	; 0x48
 8016058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801605c:	3b01      	subs	r3, #1
 801605e:	d503      	bpl.n	8016068 <__sfp+0x28>
 8016060:	6833      	ldr	r3, [r6, #0]
 8016062:	b30b      	cbz	r3, 80160a8 <__sfp+0x68>
 8016064:	6836      	ldr	r6, [r6, #0]
 8016066:	e7f7      	b.n	8016058 <__sfp+0x18>
 8016068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801606c:	b9d5      	cbnz	r5, 80160a4 <__sfp+0x64>
 801606e:	4b16      	ldr	r3, [pc, #88]	; (80160c8 <__sfp+0x88>)
 8016070:	60e3      	str	r3, [r4, #12]
 8016072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016076:	6665      	str	r5, [r4, #100]	; 0x64
 8016078:	f000 f847 	bl	801610a <__retarget_lock_init_recursive>
 801607c:	f7ff ff96 	bl	8015fac <__sfp_lock_release>
 8016080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016088:	6025      	str	r5, [r4, #0]
 801608a:	61a5      	str	r5, [r4, #24]
 801608c:	2208      	movs	r2, #8
 801608e:	4629      	mov	r1, r5
 8016090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016094:	f7ff fd44 	bl	8015b20 <memset>
 8016098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801609c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80160a0:	4620      	mov	r0, r4
 80160a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160a4:	3468      	adds	r4, #104	; 0x68
 80160a6:	e7d9      	b.n	801605c <__sfp+0x1c>
 80160a8:	2104      	movs	r1, #4
 80160aa:	4638      	mov	r0, r7
 80160ac:	f7ff ff62 	bl	8015f74 <__sfmoreglue>
 80160b0:	4604      	mov	r4, r0
 80160b2:	6030      	str	r0, [r6, #0]
 80160b4:	2800      	cmp	r0, #0
 80160b6:	d1d5      	bne.n	8016064 <__sfp+0x24>
 80160b8:	f7ff ff78 	bl	8015fac <__sfp_lock_release>
 80160bc:	230c      	movs	r3, #12
 80160be:	603b      	str	r3, [r7, #0]
 80160c0:	e7ee      	b.n	80160a0 <__sfp+0x60>
 80160c2:	bf00      	nop
 80160c4:	08016c94 	.word	0x08016c94
 80160c8:	ffff0001 	.word	0xffff0001

080160cc <_fwalk_reent>:
 80160cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160d0:	4606      	mov	r6, r0
 80160d2:	4688      	mov	r8, r1
 80160d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160d8:	2700      	movs	r7, #0
 80160da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160de:	f1b9 0901 	subs.w	r9, r9, #1
 80160e2:	d505      	bpl.n	80160f0 <_fwalk_reent+0x24>
 80160e4:	6824      	ldr	r4, [r4, #0]
 80160e6:	2c00      	cmp	r4, #0
 80160e8:	d1f7      	bne.n	80160da <_fwalk_reent+0xe>
 80160ea:	4638      	mov	r0, r7
 80160ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160f0:	89ab      	ldrh	r3, [r5, #12]
 80160f2:	2b01      	cmp	r3, #1
 80160f4:	d907      	bls.n	8016106 <_fwalk_reent+0x3a>
 80160f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160fa:	3301      	adds	r3, #1
 80160fc:	d003      	beq.n	8016106 <_fwalk_reent+0x3a>
 80160fe:	4629      	mov	r1, r5
 8016100:	4630      	mov	r0, r6
 8016102:	47c0      	blx	r8
 8016104:	4307      	orrs	r7, r0
 8016106:	3568      	adds	r5, #104	; 0x68
 8016108:	e7e9      	b.n	80160de <_fwalk_reent+0x12>

0801610a <__retarget_lock_init_recursive>:
 801610a:	4770      	bx	lr

0801610c <__retarget_lock_acquire_recursive>:
 801610c:	4770      	bx	lr

0801610e <__retarget_lock_release_recursive>:
 801610e:	4770      	bx	lr

08016110 <__swhatbuf_r>:
 8016110:	b570      	push	{r4, r5, r6, lr}
 8016112:	460e      	mov	r6, r1
 8016114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016118:	2900      	cmp	r1, #0
 801611a:	b096      	sub	sp, #88	; 0x58
 801611c:	4614      	mov	r4, r2
 801611e:	461d      	mov	r5, r3
 8016120:	da08      	bge.n	8016134 <__swhatbuf_r+0x24>
 8016122:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016126:	2200      	movs	r2, #0
 8016128:	602a      	str	r2, [r5, #0]
 801612a:	061a      	lsls	r2, r3, #24
 801612c:	d410      	bmi.n	8016150 <__swhatbuf_r+0x40>
 801612e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016132:	e00e      	b.n	8016152 <__swhatbuf_r+0x42>
 8016134:	466a      	mov	r2, sp
 8016136:	f000 f9a7 	bl	8016488 <_fstat_r>
 801613a:	2800      	cmp	r0, #0
 801613c:	dbf1      	blt.n	8016122 <__swhatbuf_r+0x12>
 801613e:	9a01      	ldr	r2, [sp, #4]
 8016140:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016144:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016148:	425a      	negs	r2, r3
 801614a:	415a      	adcs	r2, r3
 801614c:	602a      	str	r2, [r5, #0]
 801614e:	e7ee      	b.n	801612e <__swhatbuf_r+0x1e>
 8016150:	2340      	movs	r3, #64	; 0x40
 8016152:	2000      	movs	r0, #0
 8016154:	6023      	str	r3, [r4, #0]
 8016156:	b016      	add	sp, #88	; 0x58
 8016158:	bd70      	pop	{r4, r5, r6, pc}
	...

0801615c <__smakebuf_r>:
 801615c:	898b      	ldrh	r3, [r1, #12]
 801615e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016160:	079d      	lsls	r5, r3, #30
 8016162:	4606      	mov	r6, r0
 8016164:	460c      	mov	r4, r1
 8016166:	d507      	bpl.n	8016178 <__smakebuf_r+0x1c>
 8016168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801616c:	6023      	str	r3, [r4, #0]
 801616e:	6123      	str	r3, [r4, #16]
 8016170:	2301      	movs	r3, #1
 8016172:	6163      	str	r3, [r4, #20]
 8016174:	b002      	add	sp, #8
 8016176:	bd70      	pop	{r4, r5, r6, pc}
 8016178:	ab01      	add	r3, sp, #4
 801617a:	466a      	mov	r2, sp
 801617c:	f7ff ffc8 	bl	8016110 <__swhatbuf_r>
 8016180:	9900      	ldr	r1, [sp, #0]
 8016182:	4605      	mov	r5, r0
 8016184:	4630      	mov	r0, r6
 8016186:	f000 f895 	bl	80162b4 <_malloc_r>
 801618a:	b948      	cbnz	r0, 80161a0 <__smakebuf_r+0x44>
 801618c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016190:	059a      	lsls	r2, r3, #22
 8016192:	d4ef      	bmi.n	8016174 <__smakebuf_r+0x18>
 8016194:	f023 0303 	bic.w	r3, r3, #3
 8016198:	f043 0302 	orr.w	r3, r3, #2
 801619c:	81a3      	strh	r3, [r4, #12]
 801619e:	e7e3      	b.n	8016168 <__smakebuf_r+0xc>
 80161a0:	4b0d      	ldr	r3, [pc, #52]	; (80161d8 <__smakebuf_r+0x7c>)
 80161a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80161a4:	89a3      	ldrh	r3, [r4, #12]
 80161a6:	6020      	str	r0, [r4, #0]
 80161a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161ac:	81a3      	strh	r3, [r4, #12]
 80161ae:	9b00      	ldr	r3, [sp, #0]
 80161b0:	6163      	str	r3, [r4, #20]
 80161b2:	9b01      	ldr	r3, [sp, #4]
 80161b4:	6120      	str	r0, [r4, #16]
 80161b6:	b15b      	cbz	r3, 80161d0 <__smakebuf_r+0x74>
 80161b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161bc:	4630      	mov	r0, r6
 80161be:	f000 f975 	bl	80164ac <_isatty_r>
 80161c2:	b128      	cbz	r0, 80161d0 <__smakebuf_r+0x74>
 80161c4:	89a3      	ldrh	r3, [r4, #12]
 80161c6:	f023 0303 	bic.w	r3, r3, #3
 80161ca:	f043 0301 	orr.w	r3, r3, #1
 80161ce:	81a3      	strh	r3, [r4, #12]
 80161d0:	89a0      	ldrh	r0, [r4, #12]
 80161d2:	4305      	orrs	r5, r0
 80161d4:	81a5      	strh	r5, [r4, #12]
 80161d6:	e7cd      	b.n	8016174 <__smakebuf_r+0x18>
 80161d8:	08015f69 	.word	0x08015f69

080161dc <_free_r>:
 80161dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161de:	2900      	cmp	r1, #0
 80161e0:	d044      	beq.n	801626c <_free_r+0x90>
 80161e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161e6:	9001      	str	r0, [sp, #4]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	f1a1 0404 	sub.w	r4, r1, #4
 80161ee:	bfb8      	it	lt
 80161f0:	18e4      	addlt	r4, r4, r3
 80161f2:	f000 f97d 	bl	80164f0 <__malloc_lock>
 80161f6:	4a1e      	ldr	r2, [pc, #120]	; (8016270 <_free_r+0x94>)
 80161f8:	9801      	ldr	r0, [sp, #4]
 80161fa:	6813      	ldr	r3, [r2, #0]
 80161fc:	b933      	cbnz	r3, 801620c <_free_r+0x30>
 80161fe:	6063      	str	r3, [r4, #4]
 8016200:	6014      	str	r4, [r2, #0]
 8016202:	b003      	add	sp, #12
 8016204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016208:	f000 b978 	b.w	80164fc <__malloc_unlock>
 801620c:	42a3      	cmp	r3, r4
 801620e:	d908      	bls.n	8016222 <_free_r+0x46>
 8016210:	6825      	ldr	r5, [r4, #0]
 8016212:	1961      	adds	r1, r4, r5
 8016214:	428b      	cmp	r3, r1
 8016216:	bf01      	itttt	eq
 8016218:	6819      	ldreq	r1, [r3, #0]
 801621a:	685b      	ldreq	r3, [r3, #4]
 801621c:	1949      	addeq	r1, r1, r5
 801621e:	6021      	streq	r1, [r4, #0]
 8016220:	e7ed      	b.n	80161fe <_free_r+0x22>
 8016222:	461a      	mov	r2, r3
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	b10b      	cbz	r3, 801622c <_free_r+0x50>
 8016228:	42a3      	cmp	r3, r4
 801622a:	d9fa      	bls.n	8016222 <_free_r+0x46>
 801622c:	6811      	ldr	r1, [r2, #0]
 801622e:	1855      	adds	r5, r2, r1
 8016230:	42a5      	cmp	r5, r4
 8016232:	d10b      	bne.n	801624c <_free_r+0x70>
 8016234:	6824      	ldr	r4, [r4, #0]
 8016236:	4421      	add	r1, r4
 8016238:	1854      	adds	r4, r2, r1
 801623a:	42a3      	cmp	r3, r4
 801623c:	6011      	str	r1, [r2, #0]
 801623e:	d1e0      	bne.n	8016202 <_free_r+0x26>
 8016240:	681c      	ldr	r4, [r3, #0]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	6053      	str	r3, [r2, #4]
 8016246:	4421      	add	r1, r4
 8016248:	6011      	str	r1, [r2, #0]
 801624a:	e7da      	b.n	8016202 <_free_r+0x26>
 801624c:	d902      	bls.n	8016254 <_free_r+0x78>
 801624e:	230c      	movs	r3, #12
 8016250:	6003      	str	r3, [r0, #0]
 8016252:	e7d6      	b.n	8016202 <_free_r+0x26>
 8016254:	6825      	ldr	r5, [r4, #0]
 8016256:	1961      	adds	r1, r4, r5
 8016258:	428b      	cmp	r3, r1
 801625a:	bf04      	itt	eq
 801625c:	6819      	ldreq	r1, [r3, #0]
 801625e:	685b      	ldreq	r3, [r3, #4]
 8016260:	6063      	str	r3, [r4, #4]
 8016262:	bf04      	itt	eq
 8016264:	1949      	addeq	r1, r1, r5
 8016266:	6021      	streq	r1, [r4, #0]
 8016268:	6054      	str	r4, [r2, #4]
 801626a:	e7ca      	b.n	8016202 <_free_r+0x26>
 801626c:	b003      	add	sp, #12
 801626e:	bd30      	pop	{r4, r5, pc}
 8016270:	20005300 	.word	0x20005300

08016274 <sbrk_aligned>:
 8016274:	b570      	push	{r4, r5, r6, lr}
 8016276:	4e0e      	ldr	r6, [pc, #56]	; (80162b0 <sbrk_aligned+0x3c>)
 8016278:	460c      	mov	r4, r1
 801627a:	6831      	ldr	r1, [r6, #0]
 801627c:	4605      	mov	r5, r0
 801627e:	b911      	cbnz	r1, 8016286 <sbrk_aligned+0x12>
 8016280:	f000 f88c 	bl	801639c <_sbrk_r>
 8016284:	6030      	str	r0, [r6, #0]
 8016286:	4621      	mov	r1, r4
 8016288:	4628      	mov	r0, r5
 801628a:	f000 f887 	bl	801639c <_sbrk_r>
 801628e:	1c43      	adds	r3, r0, #1
 8016290:	d00a      	beq.n	80162a8 <sbrk_aligned+0x34>
 8016292:	1cc4      	adds	r4, r0, #3
 8016294:	f024 0403 	bic.w	r4, r4, #3
 8016298:	42a0      	cmp	r0, r4
 801629a:	d007      	beq.n	80162ac <sbrk_aligned+0x38>
 801629c:	1a21      	subs	r1, r4, r0
 801629e:	4628      	mov	r0, r5
 80162a0:	f000 f87c 	bl	801639c <_sbrk_r>
 80162a4:	3001      	adds	r0, #1
 80162a6:	d101      	bne.n	80162ac <sbrk_aligned+0x38>
 80162a8:	f04f 34ff 	mov.w	r4, #4294967295
 80162ac:	4620      	mov	r0, r4
 80162ae:	bd70      	pop	{r4, r5, r6, pc}
 80162b0:	20005304 	.word	0x20005304

080162b4 <_malloc_r>:
 80162b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162b8:	1ccd      	adds	r5, r1, #3
 80162ba:	f025 0503 	bic.w	r5, r5, #3
 80162be:	3508      	adds	r5, #8
 80162c0:	2d0c      	cmp	r5, #12
 80162c2:	bf38      	it	cc
 80162c4:	250c      	movcc	r5, #12
 80162c6:	2d00      	cmp	r5, #0
 80162c8:	4607      	mov	r7, r0
 80162ca:	db01      	blt.n	80162d0 <_malloc_r+0x1c>
 80162cc:	42a9      	cmp	r1, r5
 80162ce:	d905      	bls.n	80162dc <_malloc_r+0x28>
 80162d0:	230c      	movs	r3, #12
 80162d2:	603b      	str	r3, [r7, #0]
 80162d4:	2600      	movs	r6, #0
 80162d6:	4630      	mov	r0, r6
 80162d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162dc:	4e2e      	ldr	r6, [pc, #184]	; (8016398 <_malloc_r+0xe4>)
 80162de:	f000 f907 	bl	80164f0 <__malloc_lock>
 80162e2:	6833      	ldr	r3, [r6, #0]
 80162e4:	461c      	mov	r4, r3
 80162e6:	bb34      	cbnz	r4, 8016336 <_malloc_r+0x82>
 80162e8:	4629      	mov	r1, r5
 80162ea:	4638      	mov	r0, r7
 80162ec:	f7ff ffc2 	bl	8016274 <sbrk_aligned>
 80162f0:	1c43      	adds	r3, r0, #1
 80162f2:	4604      	mov	r4, r0
 80162f4:	d14d      	bne.n	8016392 <_malloc_r+0xde>
 80162f6:	6834      	ldr	r4, [r6, #0]
 80162f8:	4626      	mov	r6, r4
 80162fa:	2e00      	cmp	r6, #0
 80162fc:	d140      	bne.n	8016380 <_malloc_r+0xcc>
 80162fe:	6823      	ldr	r3, [r4, #0]
 8016300:	4631      	mov	r1, r6
 8016302:	4638      	mov	r0, r7
 8016304:	eb04 0803 	add.w	r8, r4, r3
 8016308:	f000 f848 	bl	801639c <_sbrk_r>
 801630c:	4580      	cmp	r8, r0
 801630e:	d13a      	bne.n	8016386 <_malloc_r+0xd2>
 8016310:	6821      	ldr	r1, [r4, #0]
 8016312:	3503      	adds	r5, #3
 8016314:	1a6d      	subs	r5, r5, r1
 8016316:	f025 0503 	bic.w	r5, r5, #3
 801631a:	3508      	adds	r5, #8
 801631c:	2d0c      	cmp	r5, #12
 801631e:	bf38      	it	cc
 8016320:	250c      	movcc	r5, #12
 8016322:	4629      	mov	r1, r5
 8016324:	4638      	mov	r0, r7
 8016326:	f7ff ffa5 	bl	8016274 <sbrk_aligned>
 801632a:	3001      	adds	r0, #1
 801632c:	d02b      	beq.n	8016386 <_malloc_r+0xd2>
 801632e:	6823      	ldr	r3, [r4, #0]
 8016330:	442b      	add	r3, r5
 8016332:	6023      	str	r3, [r4, #0]
 8016334:	e00e      	b.n	8016354 <_malloc_r+0xa0>
 8016336:	6822      	ldr	r2, [r4, #0]
 8016338:	1b52      	subs	r2, r2, r5
 801633a:	d41e      	bmi.n	801637a <_malloc_r+0xc6>
 801633c:	2a0b      	cmp	r2, #11
 801633e:	d916      	bls.n	801636e <_malloc_r+0xba>
 8016340:	1961      	adds	r1, r4, r5
 8016342:	42a3      	cmp	r3, r4
 8016344:	6025      	str	r5, [r4, #0]
 8016346:	bf18      	it	ne
 8016348:	6059      	strne	r1, [r3, #4]
 801634a:	6863      	ldr	r3, [r4, #4]
 801634c:	bf08      	it	eq
 801634e:	6031      	streq	r1, [r6, #0]
 8016350:	5162      	str	r2, [r4, r5]
 8016352:	604b      	str	r3, [r1, #4]
 8016354:	4638      	mov	r0, r7
 8016356:	f104 060b 	add.w	r6, r4, #11
 801635a:	f000 f8cf 	bl	80164fc <__malloc_unlock>
 801635e:	f026 0607 	bic.w	r6, r6, #7
 8016362:	1d23      	adds	r3, r4, #4
 8016364:	1af2      	subs	r2, r6, r3
 8016366:	d0b6      	beq.n	80162d6 <_malloc_r+0x22>
 8016368:	1b9b      	subs	r3, r3, r6
 801636a:	50a3      	str	r3, [r4, r2]
 801636c:	e7b3      	b.n	80162d6 <_malloc_r+0x22>
 801636e:	6862      	ldr	r2, [r4, #4]
 8016370:	42a3      	cmp	r3, r4
 8016372:	bf0c      	ite	eq
 8016374:	6032      	streq	r2, [r6, #0]
 8016376:	605a      	strne	r2, [r3, #4]
 8016378:	e7ec      	b.n	8016354 <_malloc_r+0xa0>
 801637a:	4623      	mov	r3, r4
 801637c:	6864      	ldr	r4, [r4, #4]
 801637e:	e7b2      	b.n	80162e6 <_malloc_r+0x32>
 8016380:	4634      	mov	r4, r6
 8016382:	6876      	ldr	r6, [r6, #4]
 8016384:	e7b9      	b.n	80162fa <_malloc_r+0x46>
 8016386:	230c      	movs	r3, #12
 8016388:	603b      	str	r3, [r7, #0]
 801638a:	4638      	mov	r0, r7
 801638c:	f000 f8b6 	bl	80164fc <__malloc_unlock>
 8016390:	e7a1      	b.n	80162d6 <_malloc_r+0x22>
 8016392:	6025      	str	r5, [r4, #0]
 8016394:	e7de      	b.n	8016354 <_malloc_r+0xa0>
 8016396:	bf00      	nop
 8016398:	20005300 	.word	0x20005300

0801639c <_sbrk_r>:
 801639c:	b538      	push	{r3, r4, r5, lr}
 801639e:	4d06      	ldr	r5, [pc, #24]	; (80163b8 <_sbrk_r+0x1c>)
 80163a0:	2300      	movs	r3, #0
 80163a2:	4604      	mov	r4, r0
 80163a4:	4608      	mov	r0, r1
 80163a6:	602b      	str	r3, [r5, #0]
 80163a8:	f7f0 fad2 	bl	8006950 <_sbrk>
 80163ac:	1c43      	adds	r3, r0, #1
 80163ae:	d102      	bne.n	80163b6 <_sbrk_r+0x1a>
 80163b0:	682b      	ldr	r3, [r5, #0]
 80163b2:	b103      	cbz	r3, 80163b6 <_sbrk_r+0x1a>
 80163b4:	6023      	str	r3, [r4, #0]
 80163b6:	bd38      	pop	{r3, r4, r5, pc}
 80163b8:	20005308 	.word	0x20005308

080163bc <__sread>:
 80163bc:	b510      	push	{r4, lr}
 80163be:	460c      	mov	r4, r1
 80163c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163c4:	f000 f8a0 	bl	8016508 <_read_r>
 80163c8:	2800      	cmp	r0, #0
 80163ca:	bfab      	itete	ge
 80163cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80163ce:	89a3      	ldrhlt	r3, [r4, #12]
 80163d0:	181b      	addge	r3, r3, r0
 80163d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80163d6:	bfac      	ite	ge
 80163d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80163da:	81a3      	strhlt	r3, [r4, #12]
 80163dc:	bd10      	pop	{r4, pc}

080163de <__swrite>:
 80163de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163e2:	461f      	mov	r7, r3
 80163e4:	898b      	ldrh	r3, [r1, #12]
 80163e6:	05db      	lsls	r3, r3, #23
 80163e8:	4605      	mov	r5, r0
 80163ea:	460c      	mov	r4, r1
 80163ec:	4616      	mov	r6, r2
 80163ee:	d505      	bpl.n	80163fc <__swrite+0x1e>
 80163f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163f4:	2302      	movs	r3, #2
 80163f6:	2200      	movs	r2, #0
 80163f8:	f000 f868 	bl	80164cc <_lseek_r>
 80163fc:	89a3      	ldrh	r3, [r4, #12]
 80163fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016406:	81a3      	strh	r3, [r4, #12]
 8016408:	4632      	mov	r2, r6
 801640a:	463b      	mov	r3, r7
 801640c:	4628      	mov	r0, r5
 801640e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016412:	f000 b817 	b.w	8016444 <_write_r>

08016416 <__sseek>:
 8016416:	b510      	push	{r4, lr}
 8016418:	460c      	mov	r4, r1
 801641a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801641e:	f000 f855 	bl	80164cc <_lseek_r>
 8016422:	1c43      	adds	r3, r0, #1
 8016424:	89a3      	ldrh	r3, [r4, #12]
 8016426:	bf15      	itete	ne
 8016428:	6560      	strne	r0, [r4, #84]	; 0x54
 801642a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801642e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016432:	81a3      	strheq	r3, [r4, #12]
 8016434:	bf18      	it	ne
 8016436:	81a3      	strhne	r3, [r4, #12]
 8016438:	bd10      	pop	{r4, pc}

0801643a <__sclose>:
 801643a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801643e:	f000 b813 	b.w	8016468 <_close_r>
	...

08016444 <_write_r>:
 8016444:	b538      	push	{r3, r4, r5, lr}
 8016446:	4d07      	ldr	r5, [pc, #28]	; (8016464 <_write_r+0x20>)
 8016448:	4604      	mov	r4, r0
 801644a:	4608      	mov	r0, r1
 801644c:	4611      	mov	r1, r2
 801644e:	2200      	movs	r2, #0
 8016450:	602a      	str	r2, [r5, #0]
 8016452:	461a      	mov	r2, r3
 8016454:	f7ec fafa 	bl	8002a4c <_write>
 8016458:	1c43      	adds	r3, r0, #1
 801645a:	d102      	bne.n	8016462 <_write_r+0x1e>
 801645c:	682b      	ldr	r3, [r5, #0]
 801645e:	b103      	cbz	r3, 8016462 <_write_r+0x1e>
 8016460:	6023      	str	r3, [r4, #0]
 8016462:	bd38      	pop	{r3, r4, r5, pc}
 8016464:	20005308 	.word	0x20005308

08016468 <_close_r>:
 8016468:	b538      	push	{r3, r4, r5, lr}
 801646a:	4d06      	ldr	r5, [pc, #24]	; (8016484 <_close_r+0x1c>)
 801646c:	2300      	movs	r3, #0
 801646e:	4604      	mov	r4, r0
 8016470:	4608      	mov	r0, r1
 8016472:	602b      	str	r3, [r5, #0]
 8016474:	f7f0 fa37 	bl	80068e6 <_close>
 8016478:	1c43      	adds	r3, r0, #1
 801647a:	d102      	bne.n	8016482 <_close_r+0x1a>
 801647c:	682b      	ldr	r3, [r5, #0]
 801647e:	b103      	cbz	r3, 8016482 <_close_r+0x1a>
 8016480:	6023      	str	r3, [r4, #0]
 8016482:	bd38      	pop	{r3, r4, r5, pc}
 8016484:	20005308 	.word	0x20005308

08016488 <_fstat_r>:
 8016488:	b538      	push	{r3, r4, r5, lr}
 801648a:	4d07      	ldr	r5, [pc, #28]	; (80164a8 <_fstat_r+0x20>)
 801648c:	2300      	movs	r3, #0
 801648e:	4604      	mov	r4, r0
 8016490:	4608      	mov	r0, r1
 8016492:	4611      	mov	r1, r2
 8016494:	602b      	str	r3, [r5, #0]
 8016496:	f7f0 fa32 	bl	80068fe <_fstat>
 801649a:	1c43      	adds	r3, r0, #1
 801649c:	d102      	bne.n	80164a4 <_fstat_r+0x1c>
 801649e:	682b      	ldr	r3, [r5, #0]
 80164a0:	b103      	cbz	r3, 80164a4 <_fstat_r+0x1c>
 80164a2:	6023      	str	r3, [r4, #0]
 80164a4:	bd38      	pop	{r3, r4, r5, pc}
 80164a6:	bf00      	nop
 80164a8:	20005308 	.word	0x20005308

080164ac <_isatty_r>:
 80164ac:	b538      	push	{r3, r4, r5, lr}
 80164ae:	4d06      	ldr	r5, [pc, #24]	; (80164c8 <_isatty_r+0x1c>)
 80164b0:	2300      	movs	r3, #0
 80164b2:	4604      	mov	r4, r0
 80164b4:	4608      	mov	r0, r1
 80164b6:	602b      	str	r3, [r5, #0]
 80164b8:	f7f0 fa31 	bl	800691e <_isatty>
 80164bc:	1c43      	adds	r3, r0, #1
 80164be:	d102      	bne.n	80164c6 <_isatty_r+0x1a>
 80164c0:	682b      	ldr	r3, [r5, #0]
 80164c2:	b103      	cbz	r3, 80164c6 <_isatty_r+0x1a>
 80164c4:	6023      	str	r3, [r4, #0]
 80164c6:	bd38      	pop	{r3, r4, r5, pc}
 80164c8:	20005308 	.word	0x20005308

080164cc <_lseek_r>:
 80164cc:	b538      	push	{r3, r4, r5, lr}
 80164ce:	4d07      	ldr	r5, [pc, #28]	; (80164ec <_lseek_r+0x20>)
 80164d0:	4604      	mov	r4, r0
 80164d2:	4608      	mov	r0, r1
 80164d4:	4611      	mov	r1, r2
 80164d6:	2200      	movs	r2, #0
 80164d8:	602a      	str	r2, [r5, #0]
 80164da:	461a      	mov	r2, r3
 80164dc:	f7f0 fa2a 	bl	8006934 <_lseek>
 80164e0:	1c43      	adds	r3, r0, #1
 80164e2:	d102      	bne.n	80164ea <_lseek_r+0x1e>
 80164e4:	682b      	ldr	r3, [r5, #0]
 80164e6:	b103      	cbz	r3, 80164ea <_lseek_r+0x1e>
 80164e8:	6023      	str	r3, [r4, #0]
 80164ea:	bd38      	pop	{r3, r4, r5, pc}
 80164ec:	20005308 	.word	0x20005308

080164f0 <__malloc_lock>:
 80164f0:	4801      	ldr	r0, [pc, #4]	; (80164f8 <__malloc_lock+0x8>)
 80164f2:	f7ff be0b 	b.w	801610c <__retarget_lock_acquire_recursive>
 80164f6:	bf00      	nop
 80164f8:	200052fc 	.word	0x200052fc

080164fc <__malloc_unlock>:
 80164fc:	4801      	ldr	r0, [pc, #4]	; (8016504 <__malloc_unlock+0x8>)
 80164fe:	f7ff be06 	b.w	801610e <__retarget_lock_release_recursive>
 8016502:	bf00      	nop
 8016504:	200052fc 	.word	0x200052fc

08016508 <_read_r>:
 8016508:	b538      	push	{r3, r4, r5, lr}
 801650a:	4d07      	ldr	r5, [pc, #28]	; (8016528 <_read_r+0x20>)
 801650c:	4604      	mov	r4, r0
 801650e:	4608      	mov	r0, r1
 8016510:	4611      	mov	r1, r2
 8016512:	2200      	movs	r2, #0
 8016514:	602a      	str	r2, [r5, #0]
 8016516:	461a      	mov	r2, r3
 8016518:	f7f0 f9c8 	bl	80068ac <_read>
 801651c:	1c43      	adds	r3, r0, #1
 801651e:	d102      	bne.n	8016526 <_read_r+0x1e>
 8016520:	682b      	ldr	r3, [r5, #0]
 8016522:	b103      	cbz	r3, 8016526 <_read_r+0x1e>
 8016524:	6023      	str	r3, [r4, #0]
 8016526:	bd38      	pop	{r3, r4, r5, pc}
 8016528:	20005308 	.word	0x20005308

0801652c <_init>:
 801652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801652e:	bf00      	nop
 8016530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016532:	bc08      	pop	{r3}
 8016534:	469e      	mov	lr, r3
 8016536:	4770      	bx	lr

08016538 <_fini>:
 8016538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801653a:	bf00      	nop
 801653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801653e:	bc08      	pop	{r3}
 8016540:	469e      	mov	lr, r3
 8016542:	4770      	bx	lr
