
DingoPDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017884  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08017a14  08017a14  00027a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080181c8  080181c8  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  080181c8  080181c8  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080181c8  080181c8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080181c8  080181c8  000281c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080181cc  080181cc  000281cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080181d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000515c  200001e4  080183b4  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005340  080183b4  00035340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003319b  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071d5  00000000  00000000  000633af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002740  00000000  00000000  0006a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023a8  00000000  00000000  0006ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a092  00000000  00000000  0006f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000384d6  00000000  00000000  00099102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dab3a  00000000  00000000  000d15d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ac112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a95c  00000000  00000000  001ac164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080179fc 	.word	0x080179fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080179fc 	.word	0x080179fc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <EvaluateCANInput>:
 */

#include "can_input.h"

uint8_t EvaluateCANInput(CAN_RxHeaderTypeDef* stRxHeader, uint8_t nRxData[8], PdmConfig_CanInput_t *in, uint16_t* nResult)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
  if(!in->nEnabled)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <EvaluateCANInput+0x1a>
    return 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e0a6      	b.n	8000bb4 <EvaluateCANInput+0x168>
  if(stRxHeader->StdId != in->nId)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	8852      	ldrh	r2, [r2, #2]
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d001      	beq.n	8000a76 <EvaluateCANInput+0x2a>
    return 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e09e      	b.n	8000bb4 <EvaluateCANInput+0x168>

  uint16_t nSelected;

  //8 bit
  if(in->nHighByte == 0)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	88db      	ldrh	r3, [r3, #6]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <EvaluateCANInput+0x42>
  {
    nSelected = nRxData[in->nLowByte];
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	889b      	ldrh	r3, [r3, #4]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	82fb      	strh	r3, [r7, #22]
 8000a8c:	e011      	b.n	8000ab2 <EvaluateCANInput+0x66>
  }
  else
  {
    nSelected = (nRxData[in->nHighByte] << 8) + nRxData[in->nLowByte];
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	88db      	ldrh	r3, [r3, #6]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	440b      	add	r3, r1
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	4413      	add	r3, r2
 8000ab0:	82fb      	strh	r3, [r7, #22]
  }

  switch(in->eOperator)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7a1b      	ldrb	r3, [r3, #8]
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d87b      	bhi.n	8000bb2 <EvaluateCANInput+0x166>
 8000aba:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <EvaluateCANInput+0x74>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000ad5 	.word	0x08000ad5
 8000ac4:	08000ae3 	.word	0x08000ae3
 8000ac8:	08000afd 	.word	0x08000afd
 8000acc:	08000b17 	.word	0x08000b17
 8000ad0:	08000b5d 	.word	0x08000b5d
  {
  case OPER_EQUAL:
    *nResult = nSelected & 0xFF;
 8000ad4:	8afb      	ldrh	r3, [r7, #22]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	801a      	strh	r2, [r3, #0]
    return 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e068      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_GREATER_THAN:
    *nResult = nSelected > in->nOnVal;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	895b      	ldrh	r3, [r3, #10]
 8000ae6:	8afa      	ldrh	r2, [r7, #22]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	bf8c      	ite	hi
 8000aec:	2301      	movhi	r3, #1
 8000aee:	2300      	movls	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	801a      	strh	r2, [r3, #0]
    return 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e05b      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_LESS_THAN:
    *nResult = nSelected < in->nOnVal;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	895b      	ldrh	r3, [r3, #10]
 8000b00:	8afa      	ldrh	r2, [r7, #22]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	bf34      	ite	cc
 8000b06:	2301      	movcc	r3, #1
 8000b08:	2300      	movcs	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	801a      	strh	r2, [r3, #0]
    return 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e04e      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_BITWISE_AND:
    if (in->eMode == MODE_NUM)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7b1b      	ldrb	r3, [r3, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d107      	bne.n	8000b2e <EvaluateCANInput+0xe2>
      *nResult = (nSelected & in->nOnVal);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	895a      	ldrh	r2, [r3, #10]
 8000b22:	8afb      	ldrh	r3, [r7, #22]
 8000b24:	4013      	ands	r3, r2
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	801a      	strh	r2, [r3, #0]
 8000b2c:	e014      	b.n	8000b58 <EvaluateCANInput+0x10c>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, ((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f103 0010 	add.w	r0, r3, #16
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7b19      	ldrb	r1, [r3, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	895a      	ldrh	r2, [r3, #10]
 8000b3c:	8afb      	ldrh	r3, [r7, #22]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bf14      	ite	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	2300      	moveq	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	2300      	movs	r3, #0
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	f007 f814 	bl	8007b80 <CheckPushbutton>
    return 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e02b      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_BITWISE_NAND:
    if (in->eMode == MODE_NUM)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7b1b      	ldrb	r3, [r3, #12]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10f      	bne.n	8000b84 <EvaluateCANInput+0x138>
      *nResult = (nSelected & !in->nOnVal);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	895b      	ldrh	r3, [r3, #10]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf0c      	ite	eq
 8000b6c:	2301      	moveq	r3, #1
 8000b6e:	2300      	movne	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	801a      	strh	r2, [r3, #0]
 8000b82:	e014      	b.n	8000bae <EvaluateCANInput+0x162>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, !((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f103 0010 	add.w	r0, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7b19      	ldrb	r1, [r3, #12]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	895a      	ldrh	r2, [r3, #10]
 8000b92:	8afb      	ldrh	r3, [r7, #22]
 8000b94:	4013      	ands	r3, r2
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf0c      	ite	eq
 8000b9c:	2301      	moveq	r3, #1
 8000b9e:	2300      	movne	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f006 ffe9 	bl	8007b80 <CheckPushbutton>
    return 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e000      	b.n	8000bb4 <EvaluateCANInput+0x168>
  }

  return 0;
 8000bb2:	2300      	movs	r3, #0

}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bc8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d013      	beq.n	8000bfc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000bd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bd8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000bdc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00b      	beq.n	8000bfc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000be4:	e000      	b.n	8000be8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000be6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000be8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f9      	beq.n	8000be6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000bf2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <USBD_CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUSBD, USBD_TxBuffer, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	4905      	ldr	r1, [pc, #20]	; (8000c28 <USBD_CDC_Init+0x1c>)
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <USBD_CDC_Init+0x20>)
 8000c16:	f011 fe3a 	bl	801288e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUSBD, USBD_RxBuffer);
 8000c1a:	4905      	ldr	r1, [pc, #20]	; (8000c30 <USBD_CDC_Init+0x24>)
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <USBD_CDC_Init+0x20>)
 8000c1e:	f011 fe50 	bl	80128c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200018e8 	.word	0x200018e8
 8000c2c:	200020e8 	.word	0x200020e8
 8000c30:	200010e8 	.word	0x200010e8

08000c34 <USBD_CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_DeInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <USBD_CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Control(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	80bb      	strh	r3, [r7, #4]
  switch(cmd)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b23      	cmp	r3, #35	; 0x23
 8000c58:	d866      	bhi.n	8000d28 <USBD_CDC_Control+0xe4>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <USBD_CDC_Control+0x1c>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000d29 	.word	0x08000d29
 8000c64:	08000d29 	.word	0x08000d29
 8000c68:	08000d29 	.word	0x08000d29
 8000c6c:	08000d29 	.word	0x08000d29
 8000c70:	08000d29 	.word	0x08000d29
 8000c74:	08000d29 	.word	0x08000d29
 8000c78:	08000d29 	.word	0x08000d29
 8000c7c:	08000d29 	.word	0x08000d29
 8000c80:	08000d29 	.word	0x08000d29
 8000c84:	08000d29 	.word	0x08000d29
 8000c88:	08000d29 	.word	0x08000d29
 8000c8c:	08000d29 	.word	0x08000d29
 8000c90:	08000d29 	.word	0x08000d29
 8000c94:	08000d29 	.word	0x08000d29
 8000c98:	08000d29 	.word	0x08000d29
 8000c9c:	08000d29 	.word	0x08000d29
 8000ca0:	08000d29 	.word	0x08000d29
 8000ca4:	08000d29 	.word	0x08000d29
 8000ca8:	08000d29 	.word	0x08000d29
 8000cac:	08000d29 	.word	0x08000d29
 8000cb0:	08000d29 	.word	0x08000d29
 8000cb4:	08000d29 	.word	0x08000d29
 8000cb8:	08000d29 	.word	0x08000d29
 8000cbc:	08000d29 	.word	0x08000d29
 8000cc0:	08000d29 	.word	0x08000d29
 8000cc4:	08000d29 	.word	0x08000d29
 8000cc8:	08000d29 	.word	0x08000d29
 8000ccc:	08000d29 	.word	0x08000d29
 8000cd0:	08000d29 	.word	0x08000d29
 8000cd4:	08000d29 	.word	0x08000d29
 8000cd8:	08000d29 	.word	0x08000d29
 8000cdc:	08000d29 	.word	0x08000d29
 8000ce0:	08000d29 	.word	0x08000d29
 8000ce4:	08000cf1 	.word	0x08000cf1
 8000ce8:	08000d29 	.word	0x08000d29
 8000cec:	08000d29 	.word	0x08000d29
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(115200);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(115200 >> 8);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	22c2      	movs	r2, #194	; 0xc2
 8000cfc:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(115200 >> 16);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3302      	adds	r3, #2
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(115200 >> 24);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	3303      	adds	r3, #3
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0; //Stop bits (1)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0; //Parity (none)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	3305      	adds	r3, #5
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8; //Number of bits (8)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	3306      	adds	r3, #6
 8000d22:	2208      	movs	r2, #8
 8000d24:	701a      	strb	r2, [r3, #0]
    break;
 8000d26:	e000      	b.n	8000d2a <USBD_CDC_Control+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000d28:	bf00      	nop
  }

  return (USBD_OK);
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <USBD_CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Receive(uint8_t* Buf, uint32_t *Len)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b090      	sub	sp, #64	; 0x40
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = USB_RX;
 8000d42:	2301      	movs	r3, #1
 8000d44:	733b      	strb	r3, [r7, #12]
  stMsg.nCRC = 0xFFFFFFFF;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  stMsg.nRxLen = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 8000d52:	2300      	movs	r3, #0
 8000d54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000d58:	e019      	b.n	8000d8e <USBD_CDC_Receive+0x56>
    if(i < 8){
 8000d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d5e:	2b07      	cmp	r3, #7
 8000d60:	d810      	bhi.n	8000d84 <USBD_CDC_Receive+0x4c>
      stMsg.nRxData[i] = Buf[i];
 8000d62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	441a      	add	r2, r3
 8000d6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	3340      	adds	r3, #64	; 0x40
 8000d72:	443b      	add	r3, r7
 8000d74:	f803 2c14 	strb.w	r2, [r3, #-20]
      stMsg.nRxLen++;
 8000d78:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 8000d84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000d8e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3df      	bcc.n	8000d5a <USBD_CDC_Receive+0x22>
    }
  }

  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <USBD_CDC_Receive+0x8c>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f107 010c 	add.w	r1, r7, #12
 8000da2:	2300      	movs	r3, #0
 8000da4:	2200      	movs	r2, #0
 8000da6:	f013 f861 	bl	8013e6c <osMessageQueuePut>

  USBD_CDC_SetRxBuffer(&hUSBD, &Buf[0]);
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <USBD_CDC_Receive+0x90>)
 8000dae:	f011 fd88 	bl	80128c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUSBD);
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <USBD_CDC_Receive+0x90>)
 8000db4:	f011 fdc8 	bl	8012948 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3740      	adds	r7, #64	; 0x40
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000ad4 	.word	0x20000ad4
 8000dc8:	200020e8 	.word	0x200020e8

08000dcc <USBD_CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t USBD_CDC_Transmit(uint8_t* Buf, uint16_t Len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUSBD.pClassData;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <USBD_CDC_Transmit+0x48>)
 8000dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000de2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <USBD_CDC_Transmit+0x26>
    return USBD_BUSY;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00b      	b.n	8000e0a <USBD_CDC_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUSBD, Buf, Len);
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	461a      	mov	r2, r3
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <USBD_CDC_Transmit+0x48>)
 8000dfa:	f011 fd48 	bl	801288e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUSBD);
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <USBD_CDC_Transmit+0x48>)
 8000e00:	f011 fd73 	bl	80128ea <USBD_CDC_TransmitPacket>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
  return result;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200020e8 	.word	0x200020e8

08000e18 <HAL_CAN_RxFifo0MsgPendingCallback>:

//========================================================================
// CAN Receive Callback
//========================================================================
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &stCanRxHeader, nCanRxData) != HAL_OK)
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000e22:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e24:	2100      	movs	r1, #0
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f008 ffc0 	bl	8009dac <HAL_CAN_GetRxMessage>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000e32:	f002 fcf1 	bl	8003818 <Error_Handler>
  }

  //Store latest receive time
  //Use to determine connection status
  nLastCanUpdate = HAL_GetTick();
 8000e36:	f007 fca1 	bl	800877c <HAL_GetTick>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000e3e:	6013      	str	r3, [r2, #0]

  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = CAN_RX;
 8000e40:	2300      	movs	r3, #0
 8000e42:	723b      	strb	r3, [r7, #8]
  stMsg.nRxLen = (uint8_t)stCanRxHeader.DLC;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  memcpy(&stMsg.stCanRxHeader, &stCanRxHeader, sizeof(stCanRxHeader));
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e50:	f107 040c 	add.w	r4, r7, #12
 8000e54:	461d      	mov	r5, r3
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  memcpy(&stMsg.nRxData, &nCanRxData, sizeof(nCanRxData));
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000e64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e6c:	e883 0003 	stmia.w	r3, {r0, r1}
  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f107 0108 	add.w	r1, r7, #8
 8000e78:	2300      	movs	r3, #0
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f012 fff6 	bl	8013e6c <osMessageQueuePut>

}
 8000e80:	bf00      	nop
 8000e82:	3738      	adds	r7, #56	; 0x38
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}
 8000e88:	20000e7c 	.word	0x20000e7c
 8000e8c:	20000e58 	.word	0x20000e58
 8000e90:	20000e88 	.word	0x20000e88
 8000e94:	20000ad4 	.word	0x20000ad4

08000e98 <PdmMainTask>:
//========================================================================
//========================================================================
// MAIN
//========================================================================
//========================================================================
void PdmMainTask(osThreadId_t* thisThreadId, ADC_HandleTypeDef* hadc1, ADC_HandleTypeDef* hadc4, CAN_HandleTypeDef* hcan, RTC_HandleTypeDef* hrtc, CRC_HandleTypeDef* hcrc){
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b090      	sub	sp, #64	; 0x40
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]

  HAL_ADC_Start_DMA(hadc1, (uint32_t*) nAdc1Data, ADC_1_COUNT);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	499f      	ldr	r1, [pc, #636]	; (8001128 <PdmMainTask+0x290>)
 8000eaa:	68b8      	ldr	r0, [r7, #8]
 8000eac:	f007 fe70 	bl	8008b90 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(hadc4, (uint32_t*) nAdc4Data, ADC_4_COUNT);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	499e      	ldr	r1, [pc, #632]	; (800112c <PdmMainTask+0x294>)
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f007 fe6b 	bl	8008b90 <HAL_ADC_Start_DMA>

  //Configure the CAN Filter
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  sFilterConfig.FilterIdHigh = 0x0000;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdLow = 0x0000;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig.FilterActivation = ENABLE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  sFilterConfig.SlaveStartFilterBank = 14;
 8000ede:	230e      	movs	r3, #14
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f008 fd76 	bl	80099da <HAL_CAN_ConfigFilter>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <PdmMainTask+0x60>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000ef4:	f002 fc90 	bl	8003818 <Error_Handler>
  }

  //Start the CAN periphera
  if (HAL_CAN_Start(hcan) != HAL_OK)
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f008 fe38 	bl	8009b6e <HAL_CAN_Start>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <PdmMainTask+0x70>
  {
    /* Start Error */
    Error_Handler();
 8000f04:	f002 fc88 	bl	8003818 <Error_Handler>
  }

  //Activate CAN RX notification
  if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000f08:	2102      	movs	r1, #2
 8000f0a:	6838      	ldr	r0, [r7, #0]
 8000f0c:	f009 f860 	bl	8009fd0 <HAL_CAN_ActivateNotification>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <PdmMainTask+0x82>
  {
    /* Notification Error */
    Error_Handler();
 8000f16:	f002 fc7f 	bl	8003818 <Error_Handler>
  }

  //Configure Transmission
  stCanTxHeader.StdId = 1620;
 8000f1a:	4b85      	ldr	r3, [pc, #532]	; (8001130 <PdmMainTask+0x298>)
 8000f1c:	f240 6254 	movw	r2, #1620	; 0x654
 8000f20:	601a      	str	r2, [r3, #0]
  stCanTxHeader.ExtId = 0;
 8000f22:	4b83      	ldr	r3, [pc, #524]	; (8001130 <PdmMainTask+0x298>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  stCanTxHeader.RTR = CAN_RTR_DATA;
 8000f28:	4b81      	ldr	r3, [pc, #516]	; (8001130 <PdmMainTask+0x298>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  stCanTxHeader.IDE = CAN_ID_STD;
 8000f2e:	4b80      	ldr	r3, [pc, #512]	; (8001130 <PdmMainTask+0x298>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  stCanTxHeader.DLC = 8;
 8000f34:	4b7e      	ldr	r3, [pc, #504]	; (8001130 <PdmMainTask+0x298>)
 8000f36:	2208      	movs	r2, #8
 8000f38:	611a      	str	r2, [r3, #16]
  stCanTxHeader.TransmitGlobalTime = DISABLE;
 8000f3a:	4b7d      	ldr	r3, [pc, #500]	; (8001130 <PdmMainTask+0x298>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	751a      	strb	r2, [r3, #20]


  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUSBD, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000f40:	2200      	movs	r2, #0
 8000f42:	497c      	ldr	r1, [pc, #496]	; (8001134 <PdmMainTask+0x29c>)
 8000f44:	487c      	ldr	r0, [pc, #496]	; (8001138 <PdmMainTask+0x2a0>)
 8000f46:	f011 fd29 	bl	801299c <USBD_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <PdmMainTask+0xbc>
  {
    Error_Handler();
 8000f50:	f002 fc62 	bl	8003818 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUSBD, &USBD_CDC) != USBD_OK)
 8000f54:	4979      	ldr	r1, [pc, #484]	; (800113c <PdmMainTask+0x2a4>)
 8000f56:	4878      	ldr	r0, [pc, #480]	; (8001138 <PdmMainTask+0x2a0>)
 8000f58:	f011 fd4b 	bl	80129f2 <USBD_RegisterClass>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <PdmMainTask+0xce>
  {
    Error_Handler();
 8000f62:	f002 fc59 	bl	8003818 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUSBD, &USBD_Interface_PDM) != USBD_OK)
 8000f66:	4976      	ldr	r1, [pc, #472]	; (8001140 <PdmMainTask+0x2a8>)
 8000f68:	4873      	ldr	r0, [pc, #460]	; (8001138 <PdmMainTask+0x2a0>)
 8000f6a:	f011 fc79 	bl	8012860 <USBD_CDC_RegisterInterface>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <PdmMainTask+0xe0>
  {
    Error_Handler();
 8000f74:	f002 fc50 	bl	8003818 <Error_Handler>
  }
  if (USBD_Start(&hUSBD) != USBD_OK)
 8000f78:	486f      	ldr	r0, [pc, #444]	; (8001138 <PdmMainTask+0x2a0>)
 8000f7a:	f011 fd54 	bl	8012a26 <USBD_Start>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <PdmMainTask+0xf0>
  {
    Error_Handler();
 8000f84:	f002 fc48 	bl	8003818 <Error_Handler>
    //=====================================================================================================
    // ADC channels
    // ADC1 = Vbat and device temperature
    // ADC4 = Battery sense
    //=====================================================================================================
    nBattSense = (uint16_t)(((float)nAdc4Data[0]) * 0.0519 - 11.3);
 8000f88:	4b68      	ldr	r3, [pc, #416]	; (800112c <PdmMainTask+0x294>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f96:	ee17 0a90 	vmov	r0, s15
 8000f9a:	f7ff fa7d 	bl	8000498 <__aeabi_f2d>
 8000f9e:	a35e      	add	r3, pc, #376	; (adr r3, 8001118 <PdmMainTask+0x280>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fad0 	bl	8000548 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	a35b      	add	r3, pc, #364	; (adr r3, 8001120 <PdmMainTask+0x288>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff f90f 	bl	80001d8 <__aeabi_dsub>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fcd3 	bl	800096c <__aeabi_d2uiz>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <PdmMainTask+0x2ac>)
 8000fcc:	801a      	strh	r2, [r3, #0]
    nStmTemp = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8000fce:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <PdmMainTask+0x2b0>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <PdmMainTask+0x2b4>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fea:	ee17 0a90 	vmov	r0, s15
 8000fee:	f7ff fa53 	bl	8000498 <__aeabi_f2d>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4955      	ldr	r1, [pc, #340]	; (8001150 <PdmMainTask+0x2b8>)
 8000ffc:	f7ff fbce 	bl	800079c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4614      	mov	r4, r2
 8001006:	461d      	mov	r5, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0) * 10.0);
 8001008:	4b47      	ldr	r3, [pc, #284]	; (8001128 <PdmMainTask+0x290>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	b29b      	uxth	r3, r3
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001016:	4b4d      	ldr	r3, [pc, #308]	; (800114c <PdmMainTask+0x2b4>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001026:	ee17 0a90 	vmov	r0, s15
 800102a:	f7ff fa35 	bl	8000498 <__aeabi_f2d>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8001032:	4620      	mov	r0, r4
 8001034:	4629      	mov	r1, r5
 8001036:	f7ff fa87 	bl	8000548 <__aeabi_dmul>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0) * 10.0);
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b43      	ldr	r3, [pc, #268]	; (8001154 <PdmMainTask+0x2bc>)
 8001048:	f7ff f8c8 	bl	80001dc <__adddf3>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <PdmMainTask+0x2c0>)
 800105a:	f7ff fa75 	bl	8000548 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fc81 	bl	800096c <__aeabi_d2uiz>
 800106a:	4603      	mov	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <PdmMainTask+0x2c4>)
 8001070:	801a      	strh	r2, [r3, #0]

    //=====================================================================================================
    // CANBoard check connection
    //=====================================================================================================
    CANBoardCheckConnection(&stCANBoard_RX);
 8001072:	483b      	ldr	r0, [pc, #236]	; (8001160 <PdmMainTask+0x2c8>)
 8001074:	f005 fe64 	bl	8006d40 <CANBoardCheckConnection>

    //=====================================================================================================
    // USB Connection
    //=====================================================================================================
    if( (USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && !bUsbConnected){
 8001078:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <PdmMainTask+0x2cc>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00f      	beq.n	80010a4 <PdmMainTask+0x20c>
 8001084:	4b38      	ldr	r3, [pc, #224]	; (8001168 <PdmMainTask+0x2d0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <PdmMainTask+0x20c>
      USB_PULLUP_GPIO_Port->ODR |= USB_PULLUP_Pin;
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <PdmMainTask+0x2cc>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a33      	ldr	r2, [pc, #204]	; (8001164 <PdmMainTask+0x2cc>)
 8001098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800109c:	6153      	str	r3, [r2, #20]
      bUsbConnected = true;
 800109e:	4b32      	ldr	r3, [pc, #200]	; (8001168 <PdmMainTask+0x2d0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
    }

    if( !(USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && bUsbConnected){
 80010a4:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <PdmMainTask+0x2cc>)
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10c      	bne.n	80010ca <PdmMainTask+0x232>
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <PdmMainTask+0x2d0>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <PdmMainTask+0x232>
      USB_PULLUP_GPIO_Port->ODR &= ~USB_PULLUP_Pin;
 80010b8:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <PdmMainTask+0x2cc>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	4a29      	ldr	r2, [pc, #164]	; (8001164 <PdmMainTask+0x2cc>)
 80010be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010c2:	6153      	str	r3, [r2, #20]
      bUsbConnected = false;
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <PdmMainTask+0x2d0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    }

    nILTotal = 0;
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <PdmMainTask+0x2d4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<12;i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010d4:	e010      	b.n	80010f8 <PdmMainTask+0x260>
      nILTotal += pf[i].nIL;
 80010d6:	4a26      	ldr	r2, [pc, #152]	; (8001170 <PdmMainTask+0x2d8>)
 80010d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010da:	019b      	lsls	r3, r3, #6
 80010dc:	4413      	add	r3, r2
 80010de:	3328      	adds	r3, #40	; 0x28
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <PdmMainTask+0x2d4>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <PdmMainTask+0x2d4>)
 80010f0:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<12;i++)
 80010f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f4:	3301      	adds	r3, #1
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010fa:	2b0b      	cmp	r3, #11
 80010fc:	ddeb      	ble.n	80010d6 <PdmMainTask+0x23e>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(MAIN_TASK_DELAY);
 80010fe:	2064      	movs	r0, #100	; 0x64
 8001100:	f012 fe00 	bl	8013d04 <osDelay>

    //Debug GPIO
    EXTRA3_GPIO_Port->ODR ^= EXTRA3_Pin;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <PdmMainTask+0x2cc>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <PdmMainTask+0x2cc>)
 800110a:	f083 0310 	eor.w	r3, r3, #16
 800110e:	6153      	str	r3, [r2, #20]
    nBattSense = (uint16_t)(((float)nAdc4Data[0]) * 0.0519 - 11.3);
 8001110:	e73a      	b.n	8000f88 <PdmMainTask+0xf0>
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	05532618 	.word	0x05532618
 800111c:	3faa92a3 	.word	0x3faa92a3
 8001120:	9999999a 	.word	0x9999999a
 8001124:	40269999 	.word	0x40269999
 8001128:	20000e18 	.word	0x20000e18
 800112c:	20000e1c 	.word	0x20000e1c
 8001130:	20000e40 	.word	0x20000e40
 8001134:	20000130 	.word	0x20000130
 8001138:	200020e8 	.word	0x200020e8
 800113c:	20000028 	.word	0x20000028
 8001140:	20000000 	.word	0x20000000
 8001144:	20000e1e 	.word	0x20000e1e
 8001148:	1ffff7c2 	.word	0x1ffff7c2
 800114c:	1ffff7b8 	.word	0x1ffff7b8
 8001150:	40540000 	.word	0x40540000
 8001154:	403e0000 	.word	0x403e0000
 8001158:	40240000 	.word	0x40240000
 800115c:	20000e20 	.word	0x20000e20
 8001160:	20000e8c 	.word	0x20000e8c
 8001164:	48000400 	.word	0x48000400
 8001168:	20000e0c 	.word	0x20000e0c
 800116c:	20000de4 	.word	0x20000de4
 8001170:	20000ae4 	.word	0x20000ae4

08001174 <InputLogic>:
  }
}

void InputLogic(){
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e012      	b.n	80011a6 <InputLogic+0x32>
    EvaluateInput(&stPdmConfig.stInput[i], &nPdmInputs[i]);
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	3308      	adds	r3, #8
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <InputLogic+0x13c>)
 800118e:	441a      	add	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4947      	ldr	r1, [pc, #284]	; (80012b4 <InputLogic+0x140>)
 8001196:	440b      	add	r3, r1
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f005 f88f 	bl	80062be <EvaluateInput>
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	dde9      	ble.n	8001180 <InputLogic+0xc>

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	e012      	b.n	80011d8 <InputLogic+0x64>
    EvaluateVirtInput(&stPdmConfig.stVirtualInput[i], &nVirtInputs[i]);
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	33b0      	adds	r3, #176	; 0xb0
 80011be:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <InputLogic+0x13c>)
 80011c0:	441a      	add	r2, r3
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	493c      	ldr	r1, [pc, #240]	; (80012b8 <InputLogic+0x144>)
 80011c8:	440b      	add	r3, r1
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f005 fc21 	bl	8006a14 <EvaluateVirtInput>
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3301      	adds	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b13      	cmp	r3, #19
 80011dc:	dde9      	ble.n	80011b2 <InputLogic+0x3e>

  //Map profet state to integer for use as virtual input pointer
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	e01d      	b.n	8001220 <InputLogic+0xac>
    nOutputs[i] = pf[i].eState == ON;
 80011e4:	4a35      	ldr	r2, [pc, #212]	; (80012bc <InputLogic+0x148>)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	019b      	lsls	r3, r3, #6
 80011ea:	4413      	add	r3, r2
 80011ec:	3301      	adds	r3, #1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	bf0c      	ite	eq
 80011f6:	2301      	moveq	r3, #1
 80011f8:	2300      	movne	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	b299      	uxth	r1, r3
 80011fe:	4a30      	ldr	r2, [pc, #192]	; (80012c0 <InputLogic+0x14c>)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    EvaluateStarter(&stPdmConfig.stStarter, i, &nStarterDisable[i]);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	b2d9      	uxtb	r1, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4a2d      	ldr	r2, [pc, #180]	; (80012c4 <InputLogic+0x150>)
 8001210:	4413      	add	r3, r2
 8001212:	461a      	mov	r2, r3
 8001214:	482c      	ldr	r0, [pc, #176]	; (80012c8 <InputLogic+0x154>)
 8001216:	f005 f877 	bl	8006308 <EvaluateStarter>
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b0b      	cmp	r3, #11
 8001224:	ddde      	ble.n	80011e4 <InputLogic+0x70>
  }

  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	e023      	b.n	8001274 <InputLogic+0x100>
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <InputLogic+0x13c>)
 800122e:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
 8001232:	461a      	mov	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <InputLogic+0xfa>
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <InputLogic+0x13c>)
 800123c:	f893 3535 	ldrb.w	r3, [r3, #1333]	; 0x535
 8001240:	461a      	mov	r2, r3
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	4293      	cmp	r3, r2
 8001246:	d012      	beq.n	800126e <InputLogic+0xfa>
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <InputLogic+0x13c>)
 800124a:	f893 354d 	ldrb.w	r3, [r3, #1357]	; 0x54d
 800124e:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4293      	cmp	r3, r2
 8001254:	d00b      	beq.n	800126e <InputLogic+0xfa>
          (stPdmConfig.stFlasher[3].nOutput != i))
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <InputLogic+0x13c>)
 8001258:	f893 3565 	ldrb.w	r3, [r3, #1381]	; 0x565
 800125c:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4293      	cmp	r3, r2
 8001262:	d004      	beq.n	800126e <InputLogic+0xfa>
        nOutputFlasher[i] = 1;
 8001264:	4a19      	ldr	r2, [pc, #100]	; (80012cc <InputLogic+0x158>)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2101      	movs	r1, #1
 800126a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3301      	adds	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b0b      	cmp	r3, #11
 8001278:	ddd8      	ble.n	800122c <InputLogic+0xb8>
  }
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	e00f      	b.n	80012a0 <InputLogic+0x12c>
    EvaluateFlasher(&stPdmConfig.stFlasher[i], nOutputFlasher);
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <InputLogic+0x13c>)
 8001290:	4413      	add	r3, r2
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <InputLogic+0x158>)
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fe01 	bl	8002e9c <EvaluateFlasher>
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3301      	adds	r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	ddec      	ble.n	8001280 <InputLogic+0x10c>
  }
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000200 	.word	0x20000200
 80012b4:	2000102c 	.word	0x2000102c
 80012b8:	20001074 	.word	0x20001074
 80012bc:	20000ae4 	.word	0x20000ae4
 80012c0:	2000109c 	.word	0x2000109c
 80012c4:	200010b4 	.word	0x200010b4
 80012c8:	20000770 	.word	0x20000770
 80012cc:	200010cc 	.word	0x200010cc

080012d0 <OutputLogic>:

void OutputLogic(){
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
  //Copy output logic to profet requested state
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	e039      	b.n	8001350 <OutputLogic+0x80>
  {
    if(eDevMode == DEVICE_AUTO){
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <OutputLogic+0x94>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d123      	bne.n	800132c <OutputLogic+0x5c>
      pf[i].eReqState = (ProfetStateTypeDef)(*stPdmConfig.stOutput[i].pInput && nStarterDisable[i] && nOutputFlasher[i]);
 80012e4:	4920      	ldr	r1, [pc, #128]	; (8001368 <OutputLogic+0x98>)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	440b      	add	r3, r1
 80012f2:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00d      	beq.n	800131a <OutputLogic+0x4a>
 80012fe:	4a1b      	ldr	r2, [pc, #108]	; (800136c <OutputLogic+0x9c>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <OutputLogic+0x4a>
 800130a:	4a19      	ldr	r2, [pc, #100]	; (8001370 <OutputLogic+0xa0>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <OutputLogic+0x4a>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <OutputLogic+0x4c>
 800131a:	2300      	movs	r3, #0
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <OutputLogic+0xa4>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	019b      	lsls	r3, r3, #6
 8001324:	4413      	add	r3, r2
 8001326:	3302      	adds	r3, #2
 8001328:	460a      	mov	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
    }
    if(eDevMode == DEVICE_MANUAL){
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <OutputLogic+0x94>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10a      	bne.n	800134a <OutputLogic+0x7a>
      pf[i].eReqState = (ProfetStateTypeDef)nManualOutputs[i];
 8001334:	4a10      	ldr	r2, [pc, #64]	; (8001378 <OutputLogic+0xa8>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	7819      	ldrb	r1, [r3, #0]
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <OutputLogic+0xa4>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	019b      	lsls	r3, r3, #6
 8001342:	4413      	add	r3, r2
 8001344:	3302      	adds	r3, #2
 8001346:	460a      	mov	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3301      	adds	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b0b      	cmp	r3, #11
 8001354:	ddc2      	ble.n	80012dc <OutputLogic+0xc>
    }
  }
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000ae0 	.word	0x20000ae0
 8001368:	20000200 	.word	0x20000200
 800136c:	200010b4 	.word	0x200010b4
 8001370:	200010cc 	.word	0x200010cc
 8001374:	20000ae4 	.word	0x20000ae4
 8001378:	200023ac 	.word	0x200023ac

0800137c <I2CTask>:

void I2CTask(osThreadId_t* thisThreadId, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2){
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

  //=====================================================================================================
  // MCP9808 Temperature Sensor Configuration
  //=====================================================================================================
  if(MCP9808_Init(hi2c1, MCP9808_ADDRESS) != MCP9808_OK)
 8001388:	2118      	movs	r1, #24
 800138a:	68b8      	ldr	r0, [r7, #8]
 800138c:	f005 fd8e 	bl	8006eac <MCP9808_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b01      	cmp	r3, #1
 8001394:	d002      	beq.n	800139c <I2CTask+0x20>
    printf("MCP9808 Init FAIL\n");
 8001396:	4898      	ldr	r0, [pc, #608]	; (80015f8 <I2CTask+0x27c>)
 8001398:	f015 fea0 	bl	80170dc <puts>

  MCP9808_SetResolution(hi2c1, MCP9808_ADDRESS, MCP9808_RESOLUTION_0_5DEG);
 800139c:	2200      	movs	r2, #0
 800139e:	2118      	movs	r1, #24
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f005 fe25 	bl	8006ff0 <MCP9808_SetResolution>

  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_UPPER_TEMP, BOARD_TEMP_MAX) != MCP9808_OK)
 80013a6:	ed9f 0a95 	vldr	s0, [pc, #596]	; 80015fc <I2CTask+0x280>
 80013aa:	2202      	movs	r2, #2
 80013ac:	2118      	movs	r1, #24
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f005 fe32 	bl	8007018 <MCP9808_SetLimit>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d002      	beq.n	80013c0 <I2CTask+0x44>
    printf("MCP9808 Set Upper Limit Failed\n");
 80013ba:	4891      	ldr	r0, [pc, #580]	; (8001600 <I2CTask+0x284>)
 80013bc:	f015 fe8e 	bl	80170dc <puts>
  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_LOWER_TEMP, BOARD_TEMP_MIN) != MCP9808_OK)
 80013c0:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8001604 <I2CTask+0x288>
 80013c4:	2203      	movs	r2, #3
 80013c6:	2118      	movs	r1, #24
 80013c8:	68b8      	ldr	r0, [r7, #8]
 80013ca:	f005 fe25 	bl	8007018 <MCP9808_SetLimit>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d002      	beq.n	80013da <I2CTask+0x5e>
    printf("MCP9808 Set Lower Limit Failed\n");
 80013d4:	488c      	ldr	r0, [pc, #560]	; (8001608 <I2CTask+0x28c>)
 80013d6:	f015 fe81 	bl	80170dc <puts>
  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_CRIT_TEMP, BOARD_TEMP_CRIT) != MCP9808_OK)
 80013da:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 800160c <I2CTask+0x290>
 80013de:	2204      	movs	r2, #4
 80013e0:	2118      	movs	r1, #24
 80013e2:	68b8      	ldr	r0, [r7, #8]
 80013e4:	f005 fe18 	bl	8007018 <MCP9808_SetLimit>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d002      	beq.n	80013f4 <I2CTask+0x78>
    printf("MCP9808 Set Critical Limit Failed\n");
 80013ee:	4888      	ldr	r0, [pc, #544]	; (8001610 <I2CTask+0x294>)
 80013f0:	f015 fe74 	bl	80170dc <puts>
  //Setup configuration
  //Enable alert pin
  //Lock Tupper/Tlower window settings
  //Lock Tcrit settings
  //Set Tupper/Tlower hysteresis to +1.5 deg C
  MCP9808_Write16(hi2c1, MCP9808_ADDRESS, MCP9808_REG_CONFIG, (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_WINLOCKED | MCP9808_REG_CONFIG_CRITLOCKED | MCP9808_REG_CONFIG_HYST_1_5));
 80013f4:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 80013f8:	2201      	movs	r2, #1
 80013fa:	2118      	movs	r1, #24
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f005 fec3 	bl	8007188 <MCP9808_Write16>

  //=====================================================================================================
  // PCA9555 Profet GPIO Configuration
  //=====================================================================================================
  //Set configuration registers (all to output)
  PCA9555_WriteReg16(hi2c1, PCA9555_ADDRESS_BANK1, PCA9555_CMD_CONFIG_PORT0, 0x0000);
 8001402:	2300      	movs	r3, #0
 8001404:	2206      	movs	r2, #6
 8001406:	2120      	movs	r1, #32
 8001408:	68b8      	ldr	r0, [r7, #8]
 800140a:	f005 ff51 	bl	80072b0 <PCA9555_WriteReg16>
  PCA9555_WriteReg16(hi2c2, PCA9555_ADDRESS_BANK2, PCA9555_CMD_CONFIG_PORT0, 0x0000);
 800140e:	2300      	movs	r3, #0
 8001410:	2206      	movs	r2, #6
 8001412:	2121      	movs	r1, #33	; 0x21
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f005 ff4b 	bl	80072b0 <PCA9555_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank1.deviceType = ADS1015;
 800141a:	4b7e      	ldr	r3, [pc, #504]	; (8001614 <I2CTask+0x298>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
  stAdcPfBank1.bitShift = 0;
 8001420:	4b7c      	ldr	r3, [pc, #496]	; (8001614 <I2CTask+0x298>)
 8001422:	2200      	movs	r2, #0
 8001424:	715a      	strb	r2, [r3, #5]
  stAdcPfBank1.gain = GAIN_ONE;
 8001426:	4b7b      	ldr	r3, [pc, #492]	; (8001614 <I2CTask+0x298>)
 8001428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142c:	805a      	strh	r2, [r3, #2]
  stAdcPfBank1.dataRate = ADS1015_DATARATE_3300SPS;
 800142e:	4b79      	ldr	r3, [pc, #484]	; (8001614 <I2CTask+0x298>)
 8001430:	22c0      	movs	r2, #192	; 0xc0
 8001432:	711a      	strb	r2, [r3, #4]

  stAdcPfBank2.deviceType = ADS1015;
 8001434:	4b78      	ldr	r3, [pc, #480]	; (8001618 <I2CTask+0x29c>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
  stAdcPfBank2.bitShift = 0;
 800143a:	4b77      	ldr	r3, [pc, #476]	; (8001618 <I2CTask+0x29c>)
 800143c:	2200      	movs	r2, #0
 800143e:	715a      	strb	r2, [r3, #5]
  stAdcPfBank2.gain = GAIN_ONE;
 8001440:	4b75      	ldr	r3, [pc, #468]	; (8001618 <I2CTask+0x29c>)
 8001442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001446:	805a      	strh	r2, [r3, #2]
  stAdcPfBank2.dataRate = ADS1015_DATARATE_3300SPS;
 8001448:	4b73      	ldr	r3, [pc, #460]	; (8001618 <I2CTask+0x29c>)
 800144a:	22c0      	movs	r2, #192	; 0xc0
 800144c:	711a      	strb	r2, [r3, #4]

  //=====================================================================================================
  // PCA9635 LED Configuration
  //=====================================================================================================
  //Send configuration, set to blink/flasher
  PCA9635_Init(hi2c2, PCA9635_ADDRESS, PCA9635_BLINK);
 800144e:	2201      	movs	r2, #1
 8001450:	2130      	movs	r1, #48	; 0x30
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f005 ff53 	bl	80072fe <PCA9635_Init>

  //Set flashing frequency
  PCA9635_SetGroupFreq(hi2c2, PCA9635_ADDRESS, PCA9635_FLASH_FREQ);
 8001458:	2202      	movs	r2, #2
 800145a:	2130      	movs	r1, #48	; 0x30
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f005 ffbf 	bl	80073e0 <PCA9635_SetGroupFreq>

  //Set PWM duty cycle for each channel (overriden by group PWM)
  for(int i=0; i<16; i++){
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e009      	b.n	800147c <I2CTask+0x100>
    PCA9635_SetPWM(hi2c2, PCA9635_ADDRESS, i, 255);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	23ff      	movs	r3, #255	; 0xff
 800146e:	2130      	movs	r1, #48	; 0x30
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f005 ff73 	bl	800735c <PCA9635_SetPWM>
  for(int i=0; i<16; i++){
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	ddf2      	ble.n	8001468 <I2CTask+0xec>
  }

  //Set flashing duty cycle
  PCA9635_SetGroupPWM(hi2c2, PCA9635_ADDRESS, PCA9635_FLASH_DUTY_CYCLE); //Have to set individual brightness levels first
 8001482:	2280      	movs	r2, #128	; 0x80
 8001484:	2130      	movs	r1, #48	; 0x30
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f005 ff8e 	bl	80073a8 <PCA9635_SetGroupPWM>

  //Start LED test sequence
  nLEDTestSeqIndex = 1;
 800148c:	4b63      	ldr	r3, [pc, #396]	; (800161c <I2CTask+0x2a0>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
  nLEDTestSeqLastTime = HAL_GetTick();
 8001492:	f007 f973 	bl	800877c <HAL_GetTick>
 8001496:	4603      	mov	r3, r0
 8001498:	4a61      	ldr	r2, [pc, #388]	; (8001620 <I2CTask+0x2a4>)
 800149a:	6013      	str	r3, [r2, #0]
    //=====================================================================================================
    // Set Profet
    // DSEL to channel 1
    // Enable all DEN
    //=====================================================================================================
    pfGpioBank1 &= ~PF_BANK1_DSEL;
 800149c:	4b61      	ldr	r3, [pc, #388]	; (8001624 <I2CTask+0x2a8>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <I2CTask+0x2a8>)
 80014a8:	801a      	strh	r2, [r3, #0]
    pfGpioBank2 &= ~PF_BANK2_DSEL;
 80014aa:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <I2CTask+0x2ac>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	f423 7308 	bic.w	r3, r3, #544	; 0x220
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <I2CTask+0x2ac>)
 80014b6:	801a      	strh	r2, [r3, #0]
    pfGpioBank1 |= PF_BANK1_DEN;
 80014b8:	4b5a      	ldr	r3, [pc, #360]	; (8001624 <I2CTask+0x2a8>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80014c0:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	4b57      	ldr	r3, [pc, #348]	; (8001624 <I2CTask+0x2a8>)
 80014c8:	801a      	strh	r2, [r3, #0]
    pfGpioBank2 |= PF_BANK2_DEN;
 80014ca:	4b57      	ldr	r3, [pc, #348]	; (8001628 <I2CTask+0x2ac>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 80014d2:	f043 0305 	orr.w	r3, r3, #5
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b53      	ldr	r3, [pc, #332]	; (8001628 <I2CTask+0x2ac>)
 80014da:	801a      	strh	r2, [r3, #0]

    PCA9555_WriteReg16(hi2c1, PCA9555_ADDRESS_BANK1, PCA9555_CMD_OUT_PORT0, pfGpioBank1);
 80014dc:	4b51      	ldr	r3, [pc, #324]	; (8001624 <I2CTask+0x2a8>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2202      	movs	r2, #2
 80014e2:	2120      	movs	r1, #32
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	f005 fee3 	bl	80072b0 <PCA9555_WriteReg16>
    PCA9555_WriteReg16(hi2c2, PCA9555_ADDRESS_BANK2, PCA9555_CMD_OUT_PORT0, pfGpioBank2);
 80014ea:	4b4f      	ldr	r3, [pc, #316]	; (8001628 <I2CTask+0x2ac>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	2202      	movs	r2, #2
 80014f0:	2121      	movs	r1, #33	; 0x21
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f005 fedc 	bl	80072b0 <PCA9555_WriteReg16>

    //=====================================================================================================
    // ADS1115 Analog Input
    //=====================================================================================================
    for(int i = 0; i < 4; i++){
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	e029      	b.n	8001552 <I2CTask+0x1d6>
      //Send channel register
      //Sets ADC multiplexer - must delay after for conversion
      ADS1x15_SendRegs(hi2c1, ADS1115_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4a44      	ldr	r2, [pc, #272]	; (8001614 <I2CTask+0x298>)
 8001504:	2149      	movs	r1, #73	; 0x49
 8001506:	68b8      	ldr	r0, [r7, #8]
 8001508:	f005 fb7c 	bl	8006c04 <ADS1x15_SendRegs>
      ADS1x15_SendRegs(hi2c2, ADS1115_ADDRESS_PF_BANK2, &stAdcPfBank2, i);
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4a41      	ldr	r2, [pc, #260]	; (8001618 <I2CTask+0x29c>)
 8001512:	2149      	movs	r1, #73	; 0x49
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f005 fb75 	bl	8006c04 <ADS1x15_SendRegs>

      //Delay for conversion
      //860 SPS = 1.16ms per conversion - delay 2ms
      osDelay(ADS1015_CONVERSIONDELAY);
 800151a:	2001      	movs	r0, #1
 800151c:	f012 fbf2 	bl	8013d04 <osDelay>

      //Read channel value
      nPfISBank1Raw[i] = ADS1x15_ReadADC(hi2c1, ADS1115_ADDRESS_PF_BANK1, &stAdcPfBank1);
 8001520:	4a3c      	ldr	r2, [pc, #240]	; (8001614 <I2CTask+0x298>)
 8001522:	2149      	movs	r1, #73	; 0x49
 8001524:	68b8      	ldr	r0, [r7, #8]
 8001526:	f005 fbd9 	bl	8006cdc <ADS1x15_ReadADC>
 800152a:	4603      	mov	r3, r0
 800152c:	4619      	mov	r1, r3
 800152e:	4a3f      	ldr	r2, [pc, #252]	; (800162c <I2CTask+0x2b0>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      nPfISBank2Raw[i] = ADS1x15_ReadADC(hi2c2, ADS1115_ADDRESS_PF_BANK2, &stAdcPfBank2);
 8001536:	4a38      	ldr	r2, [pc, #224]	; (8001618 <I2CTask+0x29c>)
 8001538:	2149      	movs	r1, #73	; 0x49
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f005 fbce 	bl	8006cdc <ADS1x15_ReadADC>
 8001540:	4603      	mov	r3, r0
 8001542:	4619      	mov	r1, r3
 8001544:	4a3a      	ldr	r2, [pc, #232]	; (8001630 <I2CTask+0x2b4>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < 4; i++){
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	3301      	adds	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b03      	cmp	r3, #3
 8001556:	ddd2      	ble.n	80014fe <I2CTask+0x182>
    }

    Profet_UpdateIS(&pf[0], nPfISBank1Raw[3]);
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <I2CTask+0x2b0>)
 800155a:	88db      	ldrh	r3, [r3, #6]
 800155c:	4619      	mov	r1, r3
 800155e:	4835      	ldr	r0, [pc, #212]	; (8001634 <I2CTask+0x2b8>)
 8001560:	f006 fa50 	bl	8007a04 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[1], nPfISBank1Raw[2]);
 8001564:	4b31      	ldr	r3, [pc, #196]	; (800162c <I2CTask+0x2b0>)
 8001566:	889b      	ldrh	r3, [r3, #4]
 8001568:	4619      	mov	r1, r3
 800156a:	4833      	ldr	r0, [pc, #204]	; (8001638 <I2CTask+0x2bc>)
 800156c:	f006 fa4a 	bl	8007a04 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[2], nPfISBank1Raw[1]);
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <I2CTask+0x2b0>)
 8001572:	885b      	ldrh	r3, [r3, #2]
 8001574:	4619      	mov	r1, r3
 8001576:	4831      	ldr	r0, [pc, #196]	; (800163c <I2CTask+0x2c0>)
 8001578:	f006 fa44 	bl	8007a04 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[4], nPfISBank1Raw[0]);
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <I2CTask+0x2b0>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	482f      	ldr	r0, [pc, #188]	; (8001640 <I2CTask+0x2c4>)
 8001584:	f006 fa3e 	bl	8007a04 <Profet_UpdateIS>


    Profet_UpdateIS(&pf[6], nPfISBank2Raw[0]);
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <I2CTask+0x2b4>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	482d      	ldr	r0, [pc, #180]	; (8001644 <I2CTask+0x2c8>)
 8001590:	f006 fa38 	bl	8007a04 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[7], nPfISBank2Raw[1]);
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <I2CTask+0x2b4>)
 8001596:	885b      	ldrh	r3, [r3, #2]
 8001598:	4619      	mov	r1, r3
 800159a:	482b      	ldr	r0, [pc, #172]	; (8001648 <I2CTask+0x2cc>)
 800159c:	f006 fa32 	bl	8007a04 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[9], nPfISBank2Raw[2]);
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <I2CTask+0x2b4>)
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4829      	ldr	r0, [pc, #164]	; (800164c <I2CTask+0x2d0>)
 80015a8:	f006 fa2c 	bl	8007a04 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[11], nPfISBank2Raw[3]);
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <I2CTask+0x2b4>)
 80015ae:	88db      	ldrh	r3, [r3, #6]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4827      	ldr	r0, [pc, #156]	; (8001650 <I2CTask+0x2d4>)
 80015b4:	f006 fa26 	bl	8007a04 <Profet_UpdateIS>

    //=====================================================================================================
    //Flip Profet DSEL to channel 2
    //=====================================================================================================
    pfGpioBank1 |= PF_BANK1_DSEL;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <I2CTask+0x2a8>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <I2CTask+0x2a8>)
 80015c4:	801a      	strh	r2, [r3, #0]
    pfGpioBank2 |= PF_BANK2_DSEL;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <I2CTask+0x2ac>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	f443 7308 	orr.w	r3, r3, #544	; 0x220
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <I2CTask+0x2ac>)
 80015d2:	801a      	strh	r2, [r3, #0]

    PCA9555_WriteReg16(hi2c1, PCA9555_ADDRESS_BANK1, PCA9555_CMD_OUT_PORT0, pfGpioBank1);
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <I2CTask+0x2a8>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	2202      	movs	r2, #2
 80015da:	2120      	movs	r1, #32
 80015dc:	68b8      	ldr	r0, [r7, #8]
 80015de:	f005 fe67 	bl	80072b0 <PCA9555_WriteReg16>
    PCA9555_WriteReg16(hi2c2, PCA9555_ADDRESS_BANK2, PCA9555_CMD_OUT_PORT0, pfGpioBank2);
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <I2CTask+0x2ac>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	2202      	movs	r2, #2
 80015e8:	2121      	movs	r1, #33	; 0x21
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f005 fe60 	bl	80072b0 <PCA9555_WriteReg16>

    for(int i = 0; i < 2; i++){
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e05b      	b.n	80016ae <I2CTask+0x332>
 80015f6:	bf00      	nop
 80015f8:	08017a14 	.word	0x08017a14
 80015fc:	42480000 	.word	0x42480000
 8001600:	08017a28 	.word	0x08017a28
 8001604:	00000000 	.word	0x00000000
 8001608:	08017a48 	.word	0x08017a48
 800160c:	42a00000 	.word	0x42a00000
 8001610:	08017a68 	.word	0x08017a68
 8001614:	20000dfc 	.word	0x20000dfc
 8001618:	20000e04 	.word	0x20000e04
 800161c:	20000e34 	.word	0x20000e34
 8001620:	20000e3c 	.word	0x20000e3c
 8001624:	20000de6 	.word	0x20000de6
 8001628:	20000de8 	.word	0x20000de8
 800162c:	20000dec 	.word	0x20000dec
 8001630:	20000df4 	.word	0x20000df4
 8001634:	20000ae4 	.word	0x20000ae4
 8001638:	20000b24 	.word	0x20000b24
 800163c:	20000b64 	.word	0x20000b64
 8001640:	20000be4 	.word	0x20000be4
 8001644:	20000c64 	.word	0x20000c64
 8001648:	20000ca4 	.word	0x20000ca4
 800164c:	20000d24 	.word	0x20000d24
 8001650:	20000da4 	.word	0x20000da4
      //Send channel register
      //Sets ADC multiplexer - must delay after for conversion
      ADS1x15_SendRegs(hi2c1, ADS1115_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	4a80      	ldr	r2, [pc, #512]	; (800185c <I2CTask+0x4e0>)
 800165a:	2149      	movs	r1, #73	; 0x49
 800165c:	68b8      	ldr	r0, [r7, #8]
 800165e:	f005 fad1 	bl	8006c04 <ADS1x15_SendRegs>
      ADS1x15_SendRegs(hi2c2, ADS1115_ADDRESS_PF_BANK2, &stAdcPfBank2, i+2);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	3302      	adds	r3, #2
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4a7d      	ldr	r2, [pc, #500]	; (8001860 <I2CTask+0x4e4>)
 800166c:	2149      	movs	r1, #73	; 0x49
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f005 fac8 	bl	8006c04 <ADS1x15_SendRegs>

      //Delay for conversion
      //860 SPS = 1.16ms per conversion - delay 2ms
      osDelay(ADS1115_CONVERSIONDELAY);
 8001674:	2002      	movs	r0, #2
 8001676:	f012 fb45 	bl	8013d04 <osDelay>

      //Read channel value
      nPfISBank1Raw[i] = ADS1x15_ReadADC(hi2c1, ADS1115_ADDRESS_PF_BANK1, &stAdcPfBank1);
 800167a:	4a78      	ldr	r2, [pc, #480]	; (800185c <I2CTask+0x4e0>)
 800167c:	2149      	movs	r1, #73	; 0x49
 800167e:	68b8      	ldr	r0, [r7, #8]
 8001680:	f005 fb2c 	bl	8006cdc <ADS1x15_ReadADC>
 8001684:	4603      	mov	r3, r0
 8001686:	4619      	mov	r1, r3
 8001688:	4a76      	ldr	r2, [pc, #472]	; (8001864 <I2CTask+0x4e8>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      nPfISBank2Raw[i+2] = ADS1x15_ReadADC(hi2c2, ADS1115_ADDRESS_PF_BANK2, &stAdcPfBank2);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1c9c      	adds	r4, r3, #2
 8001694:	4a72      	ldr	r2, [pc, #456]	; (8001860 <I2CTask+0x4e4>)
 8001696:	2149      	movs	r1, #73	; 0x49
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f005 fb1f 	bl	8006cdc <ADS1x15_ReadADC>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b71      	ldr	r3, [pc, #452]	; (8001868 <I2CTask+0x4ec>)
 80016a4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    for(int i = 0; i < 2; i++){
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	ddcf      	ble.n	8001654 <I2CTask+0x2d8>
    }

    //=====================================================================================================
    // Scale to IS Values
    //=====================================================================================================
    Profet_UpdateIS(&pf[3], nPfISBank1Raw[1]);
 80016b4:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <I2CTask+0x4e8>)
 80016b6:	885b      	ldrh	r3, [r3, #2]
 80016b8:	4619      	mov	r1, r3
 80016ba:	486c      	ldr	r0, [pc, #432]	; (800186c <I2CTask+0x4f0>)
 80016bc:	f006 f9a2 	bl	8007a04 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[5], nPfISBank1Raw[0]);
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <I2CTask+0x4e8>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	486a      	ldr	r0, [pc, #424]	; (8001870 <I2CTask+0x4f4>)
 80016c8:	f006 f99c 	bl	8007a04 <Profet_UpdateIS>

    Profet_UpdateIS(&pf[8], nPfISBank2Raw[2]);
 80016cc:	4b66      	ldr	r3, [pc, #408]	; (8001868 <I2CTask+0x4ec>)
 80016ce:	889b      	ldrh	r3, [r3, #4]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4868      	ldr	r0, [pc, #416]	; (8001874 <I2CTask+0x4f8>)
 80016d4:	f006 f996 	bl	8007a04 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[10], nPfISBank2Raw[3]);
 80016d8:	4b63      	ldr	r3, [pc, #396]	; (8001868 <I2CTask+0x4ec>)
 80016da:	88db      	ldrh	r3, [r3, #6]
 80016dc:	4619      	mov	r1, r3
 80016de:	4866      	ldr	r0, [pc, #408]	; (8001878 <I2CTask+0x4fc>)
 80016e0:	f006 f990 	bl	8007a04 <Profet_UpdateIS>
    // Profet I2C GPIO
    // PCA9555
    // PF1-6 Bank 1
    // PF7-12 Bank 2
    //=====================================================================================================
    InputLogic();
 80016e4:	f7ff fd46 	bl	8001174 <InputLogic>
    OutputLogic();
 80016e8:	f7ff fdf2 	bl	80012d0 <OutputLogic>
    PCA9555_WriteReg16(hi2c1, PCA9555_ADDRESS_BANK1, PCA9555_CMD_OUT_PORT0, pfGpioBank1);
 80016ec:	4b63      	ldr	r3, [pc, #396]	; (800187c <I2CTask+0x500>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	2202      	movs	r2, #2
 80016f2:	2120      	movs	r1, #32
 80016f4:	68b8      	ldr	r0, [r7, #8]
 80016f6:	f005 fddb 	bl	80072b0 <PCA9555_WriteReg16>
    PCA9555_WriteReg16(hi2c2, PCA9555_ADDRESS_BANK2, PCA9555_CMD_OUT_PORT0, pfGpioBank2);
 80016fa:	4b61      	ldr	r3, [pc, #388]	; (8001880 <I2CTask+0x504>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	2202      	movs	r2, #2
 8001700:	2121      	movs	r1, #33	; 0x21
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f005 fdd4 	bl	80072b0 <PCA9555_WriteReg16>

    //=====================================================================================================
    // MCP9808 temperature sensor
    //=====================================================================================================
    fBoardTempC = MCP9808_ReadTempC(hi2c1, MCP9808_ADDRESS);
 8001708:	2118      	movs	r1, #24
 800170a:	68b8      	ldr	r0, [r7, #8]
 800170c:	f005 fbfa 	bl	8006f04 <MCP9808_ReadTempC>
 8001710:	eef0 7a40 	vmov.f32	s15, s0
 8001714:	4b5b      	ldr	r3, [pc, #364]	; (8001884 <I2CTask+0x508>)
 8001716:	edc3 7a00 	vstr	s15, [r3]
    fBoardTempF = MCP9808_ConvertToF(fBoardTempC);
 800171a:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <I2CTask+0x508>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	eeb0 0a67 	vmov.f32	s0, s15
 8001724:	f005 fc30 	bl	8006f88 <MCP9808_ConvertToF>
 8001728:	eef0 7a40 	vmov.f32	s15, s0
 800172c:	4b56      	ldr	r3, [pc, #344]	; (8001888 <I2CTask+0x50c>)
 800172e:	edc3 7a00 	vstr	s15, [r3]

    if(MCP9808_GetOvertemp()) printf("*******MCP9808 Overtemp Detected*******\n");
 8001732:	f005 fdb1 	bl	8007298 <MCP9808_GetOvertemp>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <I2CTask+0x3c6>
 800173c:	4853      	ldr	r0, [pc, #332]	; (800188c <I2CTask+0x510>)
 800173e:	f015 fccd 	bl	80170dc <puts>
    if(MCP9808_GetCriticalTemp()) printf("*******MCP9808 CRITICAL Overtemp Detected*******\n");
 8001742:	f005 fd9d 	bl	8007280 <MCP9808_GetCriticalTemp>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <I2CTask+0x3d6>
 800174c:	4850      	ldr	r0, [pc, #320]	; (8001890 <I2CTask+0x514>)
 800174e:	f015 fcc5 	bl	80170dc <puts>

    //=====================================================================================================
    // Status LEDs
    //=====================================================================================================
    if(nLEDTestSeqIndex > 0)
 8001752:	4b50      	ldr	r3, [pc, #320]	; (8001894 <I2CTask+0x518>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d02b      	beq.n	80017b2 <I2CTask+0x436>
    {
      nLEDTestSeqValues = (0x00000001 << ((nLEDTestSeqIndex-1)*2));
 800175a:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <I2CTask+0x518>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	3b01      	subs	r3, #1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2201      	movs	r2, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	461a      	mov	r2, r3
 800176a:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <I2CTask+0x51c>)
 800176c:	601a      	str	r2, [r3, #0]

      PCA9635_SetAllNum(hi2c2, PCA9635_ADDRESS, nLEDTestSeqValues);
 800176e:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <I2CTask+0x51c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	2130      	movs	r1, #48	; 0x30
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f005 fe4e 	bl	8007418 <PCA9635_SetAllNum>

      if((HAL_GetTick() - nLEDTestSeqLastTime) > LED_TEST_SEQ_DELAY)
 800177c:	f006 fffe 	bl	800877c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	4b46      	ldr	r3, [pc, #280]	; (800189c <I2CTask+0x520>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b32      	cmp	r3, #50	; 0x32
 800178a:	d90a      	bls.n	80017a2 <I2CTask+0x426>
      {
        nLEDTestSeqLastTime = HAL_GetTick();
 800178c:	f006 fff6 	bl	800877c <HAL_GetTick>
 8001790:	4603      	mov	r3, r0
 8001792:	4a42      	ldr	r2, [pc, #264]	; (800189c <I2CTask+0x520>)
 8001794:	6013      	str	r3, [r2, #0]
        nLEDTestSeqIndex++;
 8001796:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <I2CTask+0x518>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <I2CTask+0x518>)
 80017a0:	701a      	strb	r2, [r3, #0]
      }

      //Last step
      if(nLEDTestSeqIndex > 16)
 80017a2:	4b3c      	ldr	r3, [pc, #240]	; (8001894 <I2CTask+0x518>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d94e      	bls.n	8001848 <I2CTask+0x4cc>
        nLEDTestSeqIndex = 0;
 80017aa:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <I2CTask+0x518>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e04a      	b.n	8001848 <I2CTask+0x4cc>
    }
    else
    {
      for(int i=0; i<12; i++){
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e00d      	b.n	80017d4 <I2CTask+0x458>
        SetPfStatusLed(&eStatusLeds[i], &pf[i]);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4a39      	ldr	r2, [pc, #228]	; (80018a0 <I2CTask+0x524>)
 80017bc:	441a      	add	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	019b      	lsls	r3, r3, #6
 80017c2:	4938      	ldr	r1, [pc, #224]	; (80018a4 <I2CTask+0x528>)
 80017c4:	440b      	add	r3, r1
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f000 fed1 	bl	8002570 <SetPfStatusLed>
      for(int i=0; i<12; i++){
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	3301      	adds	r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b0b      	cmp	r3, #11
 80017d8:	ddee      	ble.n	80017b8 <I2CTask+0x43c>
      }
      eStatusLeds[12] = (eDevMode == DEVICE_AUTO) + ((eDevMode == DEVICE_MANUAL) * LED_FLASH);              //State
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <I2CTask+0x52c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf0c      	ite	eq
 80017e2:	2301      	moveq	r3, #1
 80017e4:	2300      	movne	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <I2CTask+0x52c>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <I2CTask+0x47a>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e000      	b.n	80017f8 <I2CTask+0x47c>
 80017f6:	2300      	movs	r3, #0
 80017f8:	4413      	add	r3, r2
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <I2CTask+0x524>)
 80017fe:	731a      	strb	r2, [r3, #12]
      eStatusLeds[13] = bUsbConnected;   //USB
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <I2CTask+0x530>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <I2CTask+0x524>)
 8001808:	735a      	strb	r2, [r3, #13]
      eStatusLeds[14] = (HAL_GetTick() - nLastCanUpdate) < 1000;              //CAN
 800180a:	f006 ffb7 	bl	800877c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <I2CTask+0x534>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f240 32e7 	movw	r2, #999	; 0x3e7
 800181a:	4293      	cmp	r3, r2
 800181c:	bf94      	ite	ls
 800181e:	2301      	movls	r3, #1
 8001820:	2300      	movhi	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <I2CTask+0x524>)
 8001828:	739a      	strb	r2, [r3, #14]
      eStatusLeds[15] = (eDevState == DEVICE_ERROR);   //Fault
 800182a:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <I2CTask+0x538>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b03      	cmp	r3, #3
 8001830:	bf0c      	ite	eq
 8001832:	2301      	moveq	r3, #1
 8001834:	2300      	movne	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <I2CTask+0x524>)
 800183c:	73da      	strb	r2, [r3, #15]
      PCA9635_SetAll(hi2c2, PCA9635_ADDRESS, eStatusLeds);
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <I2CTask+0x524>)
 8001840:	2130      	movs	r1, #48	; 0x30
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f005 fe10 	bl	8007468 <PCA9635_SetAll>
    }

    //Debug GPIO
    EXTRA1_GPIO_Port->ODR ^= EXTRA1_Pin;
 8001848:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001852:	f083 0310 	eor.w	r3, r3, #16
 8001856:	6153      	str	r3, [r2, #20]
    pfGpioBank1 &= ~PF_BANK1_DSEL;
 8001858:	e620      	b.n	800149c <I2CTask+0x120>
 800185a:	bf00      	nop
 800185c:	20000dfc 	.word	0x20000dfc
 8001860:	20000e04 	.word	0x20000e04
 8001864:	20000dec 	.word	0x20000dec
 8001868:	20000df4 	.word	0x20000df4
 800186c:	20000ba4 	.word	0x20000ba4
 8001870:	20000c24 	.word	0x20000c24
 8001874:	20000ce4 	.word	0x20000ce4
 8001878:	20000d64 	.word	0x20000d64
 800187c:	20000de6 	.word	0x20000de6
 8001880:	20000de8 	.word	0x20000de8
 8001884:	20000e10 	.word	0x20000e10
 8001888:	20000e14 	.word	0x20000e14
 800188c:	08017a8c 	.word	0x08017a8c
 8001890:	08017ab4 	.word	0x08017ab4
 8001894:	20000e34 	.word	0x20000e34
 8001898:	20000e38 	.word	0x20000e38
 800189c:	20000e3c 	.word	0x20000e3c
 80018a0:	20000e24 	.word	0x20000e24
 80018a4:	20000ae4 	.word	0x20000ae4
 80018a8:	20000ae0 	.word	0x20000ae0
 80018ac:	20000e0c 	.word	0x20000e0c
 80018b0:	20000e88 	.word	0x20000e88
 80018b4:	20000ae1 	.word	0x20000ae1

080018b8 <ProfetSMTask>:
  }
}


void ProfetSMTask(osThreadId_t* thisThreadId, I2C_HandleTypeDef* hi2c2, RTC_HandleTypeDef* hrtc)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b0ab      	sub	sp, #172	; 0xac
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  Profet_Init();
 80018c4:	f000 fe9c 	bl	8002600 <Profet_Init>

  MsgQueueUsbTx_t stMsgUsbTx;
  MsgQueueCanTx_t stMsgCanTx;

  RTC_TimeTypeDef stTime = {0};
 80018c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef stDate = {0};
 80018d8:	2300      	movs	r3, #0
 80018da:	653b      	str	r3, [r7, #80]	; 0x50

  uint8_t nSend;

  for(;;){
    for(int i=0; i<12; i++){
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80018e2:	e00c      	b.n	80018fe <ProfetSMTask+0x46>
      Profet_SM(&pf[i]);
 80018e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018e8:	019b      	lsls	r3, r3, #6
 80018ea:	4ab7      	ldr	r2, [pc, #732]	; (8001bc8 <ProfetSMTask+0x310>)
 80018ec:	4413      	add	r3, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f006 f824 	bl	800793c <Profet_SM>
    for(int i=0; i<12; i++){
 80018f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018f8:	3301      	adds	r3, #1
 80018fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80018fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001902:	2b0b      	cmp	r3, #11
 8001904:	ddee      	ble.n	80018e4 <ProfetSMTask+0x2c>
    }
    WiperSM(&stWiper);
 8001906:	48b1      	ldr	r0, [pc, #708]	; (8001bcc <ProfetSMTask+0x314>)
 8001908:	f006 fec4 	bl	8008694 <WiperSM>
    MsgQueueRx_t stMsgRx;
    osStatus_t eStatus;

    nMsgCnt = osMessageQueueGetCount(qMsgQueueRx);
 800190c:	4bb0      	ldr	r3, [pc, #704]	; (8001bd0 <ProfetSMTask+0x318>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f012 fb91 	bl	8014038 <osMessageQueueGetCount>
 8001916:	4603      	mov	r3, r0
 8001918:	4aae      	ldr	r2, [pc, #696]	; (8001bd4 <ProfetSMTask+0x31c>)
 800191a:	6013      	str	r3, [r2, #0]
    if(nMsgCnt == 16)
      EXTRA2_GPIO_Port->ODR |= EXTRA2_Pin;
    else
      EXTRA2_GPIO_Port->ODR &= ~EXTRA2_Pin;
*/
    eStatus = osMessageQueueGet(qMsgQueueRx, &stMsgRx, NULL, 0U);
 800191c:	4bac      	ldr	r3, [pc, #688]	; (8001bd0 <ProfetSMTask+0x318>)
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	f107 0114 	add.w	r1, r7, #20
 8001924:	2300      	movs	r3, #0
 8001926:	2200      	movs	r2, #0
 8001928:	f012 fb14 	bl	8013f54 <osMessageQueueGet>
 800192c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    if(eStatus == osOK){
 8001930:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001934:	2b00      	cmp	r3, #0
 8001936:	f040 837a 	bne.w	800202e <ProfetSMTask+0x776>
      if(stMsgRx.eMsgSrc == CAN_RX){
 800193a:	7d3b      	ldrb	r3, [r7, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d126      	bne.n	800198e <ProfetSMTask+0xd6>
        for(int i=0; i<30; i++){
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001946:	e01e      	b.n	8001986 <ProfetSMTask+0xce>
          EvaluateCANInput(&stMsgRx.stCanRxHeader, stMsgRx.nRxData, &stPdmConfig.stCanInput[i], &nCanInputs[i]);
 8001948:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8001958:	4a9f      	ldr	r2, [pc, #636]	; (8001bd8 <ProfetSMTask+0x320>)
 800195a:	4413      	add	r3, r2
 800195c:	1d1a      	adds	r2, r3, #4
 800195e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	499d      	ldr	r1, [pc, #628]	; (8001bdc <ProfetSMTask+0x324>)
 8001966:	185c      	adds	r4, r3, r1
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	f103 0120 	add.w	r1, r3, #32
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	1d18      	adds	r0, r3, #4
 8001976:	4623      	mov	r3, r4
 8001978:	f7ff f868 	bl	8000a4c <EvaluateCANInput>
        for(int i=0; i<30; i++){
 800197c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001980:	3301      	adds	r3, #1
 8001982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800198a:	2b1d      	cmp	r3, #29
 800198c:	dddc      	ble.n	8001948 <ProfetSMTask+0x90>
        }
      }
      if((stMsgRx.eMsgSrc == CAN_RX && stMsgRx.stCanRxHeader.StdId == stPdmConfig.stCanOutput.nBaseId + 21) || (stMsgRx.eMsgSrc == USB_RX)){
 800198e:	7d3b      	ldrb	r3, [r7, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d106      	bne.n	80019a2 <ProfetSMTask+0xea>
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	4a90      	ldr	r2, [pc, #576]	; (8001bd8 <ProfetSMTask+0x320>)
 8001998:	f8b2 28ce 	ldrh.w	r2, [r2, #2254]	; 0x8ce
 800199c:	3215      	adds	r2, #21
 800199e:	4293      	cmp	r3, r2
 80019a0:	d003      	beq.n	80019aa <ProfetSMTask+0xf2>
 80019a2:	7d3b      	ldrb	r3, [r7, #20]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	f040 8342 	bne.w	800202e <ProfetSMTask+0x776>
        EXTRA2_GPIO_Port->ODR ^= EXTRA2_Pin;
 80019aa:	4b8d      	ldr	r3, [pc, #564]	; (8001be0 <ProfetSMTask+0x328>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	4a8c      	ldr	r2, [pc, #560]	; (8001be0 <ProfetSMTask+0x328>)
 80019b0:	f083 0304 	eor.w	r3, r3, #4
 80019b4:	6153      	str	r3, [r2, #20]

        nSend = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

        switch((MsgQueueRxCmd_t)stMsgRx.nRxData[0]){
 80019bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019c0:	3b42      	subs	r3, #66	; 0x42
 80019c2:	2b12      	cmp	r3, #18
 80019c4:	f200 832b 	bhi.w	800201e <ProfetSMTask+0x766>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <ProfetSMTask+0x118>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	08001a1d 	.word	0x08001a1d
 80019d4:	0800201f 	.word	0x0800201f
 80019d8:	0800201f 	.word	0x0800201f
 80019dc:	0800201f 	.word	0x0800201f
 80019e0:	0800201f 	.word	0x0800201f
 80019e4:	0800201f 	.word	0x0800201f
 80019e8:	0800201f 	.word	0x0800201f
 80019ec:	0800201f 	.word	0x0800201f
 80019f0:	0800201f 	.word	0x0800201f
 80019f4:	0800201f 	.word	0x0800201f
 80019f8:	0800201f 	.word	0x0800201f
 80019fc:	08001acd 	.word	0x08001acd
 8001a00:	0800201f 	.word	0x0800201f
 8001a04:	0800201f 	.word	0x0800201f
 8001a08:	0800201f 	.word	0x0800201f
 8001a0c:	08001bf5 	.word	0x08001bf5
 8001a10:	08001e31 	.word	0x08001e31
 8001a14:	0800201f 	.word	0x0800201f
 8001a18:	08001f09 	.word	0x08001f09

            //Burn Settings
            // 'B'
            case MSG_RX_BURN_SETTINGS:
              //Check special number sequence
              if(stMsgRx.nRxLen == 4){
 8001a1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	f040 8306 	bne.w	8002032 <ProfetSMTask+0x77a>
                if((stMsgRx.nRxData[1] == 1) && (stMsgRx.nRxData[2] == 23) && (stMsgRx.nRxData[3] == 20)){
 8001a26:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	f040 8301 	bne.w	8002032 <ProfetSMTask+0x77a>
 8001a30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a34:	2b17      	cmp	r3, #23
 8001a36:	f040 82fc 	bne.w	8002032 <ProfetSMTask+0x77a>
 8001a3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a3e:	2b14      	cmp	r3, #20
 8001a40:	f040 82f7 	bne.w	8002032 <ProfetSMTask+0x77a>
                  //Write settings to FRAM
                  uint8_t nRet = PdmConfig_Write(hi2c2, MB85RC_ADDRESS, &stPdmConfig);
 8001a44:	4a64      	ldr	r2, [pc, #400]	; (8001bd8 <ProfetSMTask+0x320>)
 8001a46:	2150      	movs	r1, #80	; 0x50
 8001a48:	68b8      	ldr	r0, [r7, #8]
 8001a4a:	f001 ff0c 	bl	8003866 <PdmConfig_Write>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

                  stMsgUsbTx.nTxLen = 2;
 8001a54:	2302      	movs	r3, #2
 8001a56:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                  stMsgCanTx.stTxHeader.DLC = 2;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	67bb      	str	r3, [r7, #120]	; 0x78

                  stMsgUsbTx.nTxData[0] = MSG_TX_BURN_SETTINGS;
 8001a5e:	2362      	movs	r3, #98	; 0x62
 8001a60:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                  stMsgUsbTx.nTxData[1] = nRet;
 8001a64:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001a68:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
                  stMsgUsbTx.nTxData[2] = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                  stMsgUsbTx.nTxData[3] = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                  stMsgUsbTx.nTxData[4] = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                  stMsgUsbTx.nTxData[5] = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
                  stMsgUsbTx.nTxData[6] = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                  stMsgUsbTx.nTxData[7] = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                  stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001a90:	4b51      	ldr	r3, [pc, #324]	; (8001bd8 <ProfetSMTask+0x320>)
 8001a92:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8001a96:	3314      	adds	r3, #20
 8001a98:	66bb      	str	r3, [r7, #104]	; 0x68

                  memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001a9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a9e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa6:	e883 0003 	stmia.w	r3, {r0, r1}

                  osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	; (8001be4 <ProfetSMTask+0x32c>)
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f012 f9d9 	bl	8013e6c <osMessageQueuePut>
                  osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001aba:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <ProfetSMTask+0x330>)
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f012 f9d1 	bl	8013e6c <osMessageQueuePut>
                }
              }
            break;
 8001aca:	e2b2      	b.n	8002032 <ProfetSMTask+0x77a>

           //Set Mode
           // 'M'
           case MSG_RX_SET_MODE:
             if(stMsgRx.nRxLen == 2){
 8001acc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d133      	bne.n	8001b3c <ProfetSMTask+0x284>
               switch(eDevMode){
 8001ad4:	4b45      	ldr	r3, [pc, #276]	; (8001bec <ProfetSMTask+0x334>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <ProfetSMTask+0x22a>
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d01d      	beq.n	8001b1c <ProfetSMTask+0x264>
 8001ae0:	e029      	b.n	8001b36 <ProfetSMTask+0x27e>
               case DEVICE_AUTO:
                 if(stMsgRx.nRxData[1] & 0x01){ //Manual sent
 8001ae2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d020      	beq.n	8001b30 <ProfetSMTask+0x278>
                   for(int i=0; i<12; i++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001af4:	e00a      	b.n	8001b0c <ProfetSMTask+0x254>
                     nManualOutputs[i] = 0;
 8001af6:	4a3e      	ldr	r2, [pc, #248]	; (8001bf0 <ProfetSMTask+0x338>)
 8001af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001afc:	4413      	add	r3, r2
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
                   for(int i=0; i<12; i++)
 8001b02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b06:	3301      	adds	r3, #1
 8001b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b10:	2b0b      	cmp	r3, #11
 8001b12:	ddf0      	ble.n	8001af6 <ProfetSMTask+0x23e>
                   eDevMode = DEVICE_MANUAL;
 8001b14:	4b35      	ldr	r3, [pc, #212]	; (8001bec <ProfetSMTask+0x334>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8001b1a:	e009      	b.n	8001b30 <ProfetSMTask+0x278>

               case DEVICE_MANUAL:
                 if(!(stMsgRx.nRxData[1] & 0x01)){ //Auto sent
 8001b1c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <ProfetSMTask+0x27c>
                   eDevMode = DEVICE_AUTO;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <ProfetSMTask+0x334>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8001b2e:	e001      	b.n	8001b34 <ProfetSMTask+0x27c>
                 break;
 8001b30:	bf00      	nop
 8001b32:	e000      	b.n	8001b36 <ProfetSMTask+0x27e>
                 break;
 8001b34:	bf00      	nop
               }
               nSend = 1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
             }

             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001b3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d004      	beq.n	8001b4e <ProfetSMTask+0x296>
 8001b44:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8274 	beq.w	8002036 <ProfetSMTask+0x77e>
               stMsgUsbTx.nTxLen = 2;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
               stMsgCanTx.stTxHeader.DLC = 2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	67bb      	str	r3, [r7, #120]	; 0x78

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_MODE;
 8001b58:	236d      	movs	r3, #109	; 0x6d
 8001b5a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgUsbTx.nTxData[1] = (uint8_t)eDevMode;
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <ProfetSMTask+0x334>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
               stMsgUsbTx.nTxData[2] = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
               stMsgUsbTx.nTxData[3] = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
               stMsgUsbTx.nTxData[4] = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
               stMsgUsbTx.nTxData[5] = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
               stMsgUsbTx.nTxData[6] = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
               stMsgUsbTx.nTxData[7] = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <ProfetSMTask+0x320>)
 8001b8c:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8001b90:	3314      	adds	r3, #20
 8001b92:	66bb      	str	r3, [r7, #104]	; 0x68

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001b94:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b98:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba0:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <ProfetSMTask+0x32c>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001bac:	2300      	movs	r3, #0
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f012 f95c 	bl	8013e6c <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <ProfetSMTask+0x330>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f012 f954 	bl	8013e6c <osMessageQueuePut>
             }
           break;
 8001bc4:	e237      	b.n	8002036 <ProfetSMTask+0x77e>
 8001bc6:	bf00      	nop
 8001bc8:	20000ae4 	.word	0x20000ae4
 8001bcc:	20000ec0 	.word	0x20000ec0
 8001bd0:	20000ad4 	.word	0x20000ad4
 8001bd4:	200010e4 	.word	0x200010e4
 8001bd8:	20000200 	.word	0x20000200
 8001bdc:	20001038 	.word	0x20001038
 8001be0:	48000400 	.word	0x48000400
 8001be4:	20000ad8 	.word	0x20000ad8
 8001be8:	20000adc 	.word	0x20000adc
 8001bec:	20000ae0 	.word	0x20000ae0
 8001bf0:	200023ac 	.word	0x200023ac


           //Force Outputs
           // 'Q'
           case MSG_RX_FORCE_OUTPUTS:
             if(stMsgRx.nRxLen == 7){
 8001bf4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001bf8:	2b07      	cmp	r3, #7
 8001bfa:	d16b      	bne.n	8001cd4 <ProfetSMTask+0x41c>
               if(eDevMode == DEVICE_MANUAL){
 8001bfc:	4b87      	ldr	r3, [pc, #540]	; (8001e1c <ProfetSMTask+0x564>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d167      	bne.n	8001cd4 <ProfetSMTask+0x41c>
                 nManualOutputs[0] = (stMsgRx.nRxData[1] & 0x01);
 8001c04:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b84      	ldr	r3, [pc, #528]	; (8001e20 <ProfetSMTask+0x568>)
 8001c10:	701a      	strb	r2, [r3, #0]
                 nManualOutputs[1] = (stMsgRx.nRxData[1] & 0x02) >> 1;
 8001c12:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c16:	105b      	asrs	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b7f      	ldr	r3, [pc, #508]	; (8001e20 <ProfetSMTask+0x568>)
 8001c22:	705a      	strb	r2, [r3, #1]
                 nManualOutputs[2] = (stMsgRx.nRxData[1] & 0x04) >> 2;
 8001c24:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c28:	109b      	asrs	r3, r3, #2
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b7b      	ldr	r3, [pc, #492]	; (8001e20 <ProfetSMTask+0x568>)
 8001c34:	709a      	strb	r2, [r3, #2]
                 nManualOutputs[3] = (stMsgRx.nRxData[1] & 0x08) >> 3;
 8001c36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c3a:	10db      	asrs	r3, r3, #3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <ProfetSMTask+0x568>)
 8001c46:	70da      	strb	r2, [r3, #3]
                 nManualOutputs[4] = (stMsgRx.nRxData[1] & 0x10) >> 4;
 8001c48:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c4c:	111b      	asrs	r3, r3, #4
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b72      	ldr	r3, [pc, #456]	; (8001e20 <ProfetSMTask+0x568>)
 8001c58:	711a      	strb	r2, [r3, #4]
                 nManualOutputs[5] = (stMsgRx.nRxData[1] & 0x20) >> 5;
 8001c5a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c5e:	115b      	asrs	r3, r3, #5
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <ProfetSMTask+0x568>)
 8001c6a:	715a      	strb	r2, [r3, #5]
                 nManualOutputs[6] = (stMsgRx.nRxData[1] & 0x40) >> 6;
 8001c6c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c70:	119b      	asrs	r3, r3, #6
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b69      	ldr	r3, [pc, #420]	; (8001e20 <ProfetSMTask+0x568>)
 8001c7c:	719a      	strb	r2, [r3, #6]
                 nManualOutputs[7] = (stMsgRx.nRxData[1] & 0x80) >> 7;
 8001c7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c82:	09db      	lsrs	r3, r3, #7
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b66      	ldr	r3, [pc, #408]	; (8001e20 <ProfetSMTask+0x568>)
 8001c88:	71da      	strb	r2, [r3, #7]
                 nManualOutputs[8] = (stMsgRx.nRxData[2] & 0x01);
 8001c8a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b62      	ldr	r3, [pc, #392]	; (8001e20 <ProfetSMTask+0x568>)
 8001c96:	721a      	strb	r2, [r3, #8]
                 nManualOutputs[9] = (stMsgRx.nRxData[2] & 0x02) >> 1;
 8001c98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c9c:	105b      	asrs	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <ProfetSMTask+0x568>)
 8001ca8:	725a      	strb	r2, [r3, #9]
                 nManualOutputs[10] = (stMsgRx.nRxData[2] & 0x04) >> 2;
 8001caa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cae:	109b      	asrs	r3, r3, #2
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <ProfetSMTask+0x568>)
 8001cba:	729a      	strb	r2, [r3, #10]
                 nManualOutputs[11] = (stMsgRx.nRxData[2] & 0x08) >> 3;
 8001cbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cc0:	10db      	asrs	r3, r3, #3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <ProfetSMTask+0x568>)
 8001ccc:	72da      	strb	r2, [r3, #11]
                 nSend = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
               }
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001cd4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d004      	beq.n	8001ce6 <ProfetSMTask+0x42e>
 8001cdc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 81aa 	beq.w	800203a <ProfetSMTask+0x782>
               stMsgUsbTx.nTxLen = 7;
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
               stMsgCanTx.stTxHeader.DLC = 7;
 8001cec:	2307      	movs	r3, #7
 8001cee:	67bb      	str	r3, [r7, #120]	; 0x78

               stMsgUsbTx.nTxData[0] = MSG_TX_FORCE_OUTPUTS;
 8001cf0:	2371      	movs	r3, #113	; 0x71
 8001cf2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <ProfetSMTask+0x568>)
 8001cf8:	79db      	ldrb	r3, [r3, #7]
 8001cfa:	01db      	lsls	r3, r3, #7
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <ProfetSMTask+0x568>)
 8001d00:	799b      	ldrb	r3, [r3, #6]
 8001d02:	019b      	lsls	r3, r3, #6
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <ProfetSMTask+0x568>)
 8001d12:	795b      	ldrb	r3, [r3, #5]
 8001d14:	015b      	lsls	r3, r3, #5
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001d1e:	4413      	add	r3, r2
 8001d20:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <ProfetSMTask+0x568>)
 8001d24:	791b      	ldrb	r3, [r3, #4]
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001d34:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <ProfetSMTask+0x568>)
 8001d36:	78db      	ldrb	r3, [r3, #3]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001d42:	4413      	add	r3, r2
 8001d44:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <ProfetSMTask+0x568>)
 8001d48:	789b      	ldrb	r3, [r3, #2]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 8001d58:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <ProfetSMTask+0x568>)
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001d66:	4413      	add	r3, r2
 8001d68:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <ProfetSMTask+0x568>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001d78:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <ProfetSMTask+0x568>)
 8001d7e:	7adb      	ldrb	r3, [r3, #11]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	b25b      	sxtb	r3, r3
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	b25a      	sxtb	r2, r3
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <ProfetSMTask+0x568>)
 8001d8c:	7a9b      	ldrb	r3, [r3, #10]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b25b      	sxtb	r3, r3
 8001d9c:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <ProfetSMTask+0x568>)
 8001da0:	7a5b      	ldrb	r3, [r3, #9]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001dac:	4413      	add	r3, r2
 8001dae:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <ProfetSMTask+0x568>)
 8001db2:	7a1b      	ldrb	r3, [r3, #8]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001dbe:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

               //TODO:Add manual output modes
               stMsgUsbTx.nTxData[3] = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
               stMsgUsbTx.nTxData[4] = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
               stMsgUsbTx.nTxData[5] = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
               stMsgUsbTx.nTxData[6] = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
               stMsgUsbTx.nTxData[7] = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <ProfetSMTask+0x56c>)
 8001de2:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8001de6:	3314      	adds	r3, #20
 8001de8:	66bb      	str	r3, [r7, #104]	; 0x68

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001dea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001df6:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <ProfetSMTask+0x570>)
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e02:	2300      	movs	r3, #0
 8001e04:	2200      	movs	r2, #0
 8001e06:	f012 f831 	bl	8013e6c <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <ProfetSMTask+0x574>)
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001e12:	2300      	movs	r3, #0
 8001e14:	2200      	movs	r2, #0
 8001e16:	f012 f829 	bl	8013e6c <osMessageQueuePut>
             }
           break;
 8001e1a:	e10e      	b.n	800203a <ProfetSMTask+0x782>
 8001e1c:	20000ae0 	.word	0x20000ae0
 8001e20:	200023ac 	.word	0x200023ac
 8001e24:	20000200 	.word	0x20000200
 8001e28:	20000ad8 	.word	0x20000ad8
 8001e2c:	20000adc 	.word	0x20000adc

           //Set Reporting
           // 'R'
           case MSG_RX_SET_REPORTING:
             if(stMsgRx.nRxLen == 3){
 8001e30:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d118      	bne.n	8001e6a <ProfetSMTask+0x5b2>
               nReportingOn = stMsgRx.nRxData[1] & 0x01;
 8001e38:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b8e      	ldr	r3, [pc, #568]	; (800207c <ProfetSMTask+0x7c4>)
 8001e44:	701a      	strb	r2, [r3, #0]
               nReportingDelay = stMsgRx.nRxData[2] * 100;
 8001e46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	461a      	mov	r2, r3
 8001e54:	0091      	lsls	r1, r2, #2
 8001e56:	461a      	mov	r2, r3
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b87      	ldr	r3, [pc, #540]	; (8002080 <ProfetSMTask+0x7c8>)
 8001e62:	801a      	strh	r2, [r3, #0]
               nSend = 1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001e6a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d004      	beq.n	8001e7c <ProfetSMTask+0x5c4>
 8001e72:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80e1 	beq.w	800203e <ProfetSMTask+0x786>
               stMsgUsbTx.nTxLen = 3;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
               stMsgCanTx.stTxHeader.DLC = 3;
 8001e82:	2303      	movs	r3, #3
 8001e84:	67bb      	str	r3, [r7, #120]	; 0x78

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_REPORTING;
 8001e86:	2372      	movs	r3, #114	; 0x72
 8001e88:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgUsbTx.nTxData[1] = (nReportingOn & 0x01);
 8001e8c:	4b7b      	ldr	r3, [pc, #492]	; (800207c <ProfetSMTask+0x7c4>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
               stMsgUsbTx.nTxData[2] = (uint8_t)(nReportingDelay / 100);
 8001e9a:	4b79      	ldr	r3, [pc, #484]	; (8002080 <ProfetSMTask+0x7c8>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	4a79      	ldr	r2, [pc, #484]	; (8002084 <ProfetSMTask+0x7cc>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	095b      	lsrs	r3, r3, #5
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
               stMsgUsbTx.nTxData[3] = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
               stMsgUsbTx.nTxData[4] = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
               stMsgUsbTx.nTxData[5] = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
               stMsgUsbTx.nTxData[6] = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
               stMsgUsbTx.nTxData[7] = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001ecc:	4b6e      	ldr	r3, [pc, #440]	; (8002088 <ProfetSMTask+0x7d0>)
 8001ece:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8001ed2:	3314      	adds	r3, #20
 8001ed4:	66bb      	str	r3, [r7, #104]	; 0x68

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001ed6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001eda:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee2:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001ee6:	4b69      	ldr	r3, [pc, #420]	; (800208c <ProfetSMTask+0x7d4>)
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001eee:	2300      	movs	r3, #0
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f011 ffbb 	bl	8013e6c <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001ef6:	4b66      	ldr	r3, [pc, #408]	; (8002090 <ProfetSMTask+0x7d8>)
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001efe:	2300      	movs	r3, #0
 8001f00:	2200      	movs	r2, #0
 8001f02:	f011 ffb3 	bl	8013e6c <osMessageQueuePut>
             }
           break;
 8001f06:	e09a      	b.n	800203e <ProfetSMTask+0x786>

           //Set Time
           // 'T'
           case MSG_RX_SET_TIME:
             if(stMsgRx.nRxLen == 7){
 8001f08:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001f0c:	2b07      	cmp	r3, #7
 8001f0e:	d12f      	bne.n	8001f70 <ProfetSMTask+0x6b8>
               stTime.Hours = stMsgRx.nRxData[1];
 8001f10:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f14:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
               stTime.Minutes = stMsgRx.nRxData[2];
 8001f18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f1c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
               stTime.Seconds = stMsgRx.nRxData[3];
 8001f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f24:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
               stTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	663b      	str	r3, [r7, #96]	; 0x60
               stTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	667b      	str	r3, [r7, #100]	; 0x64

               stDate.Year = stMsgRx.nRxData[4];
 8001f30:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f34:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
               stDate.Month = stMsgRx.nRxData[5];
 8001f38:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f3c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
               stDate.Date = stMsgRx.nRxData[6];
 8001f40:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001f44:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
               stDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

               HAL_RTC_SetTime(hrtc, &stTime, RTC_FORMAT_BCD);
 8001f4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f52:	2201      	movs	r2, #1
 8001f54:	4619      	mov	r1, r3
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f00d f96b 	bl	800f232 <HAL_RTC_SetTime>
               HAL_RTC_SetDate(hrtc, &stDate, RTC_FORMAT_BCD);
 8001f5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f60:	2201      	movs	r2, #1
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f00d fa7f 	bl	800f468 <HAL_RTC_SetDate>
               nSend = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
             }

             if((stMsgRx.nRxLen == 1) || nSend){
 8001f70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d003      	beq.n	8001f80 <ProfetSMTask+0x6c8>
 8001f78:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d060      	beq.n	8002042 <ProfetSMTask+0x78a>
                 HAL_RTC_GetTime(hrtc, &stTime, RTC_FORMAT_BCD);
 8001f80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f84:	2201      	movs	r2, #1
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f00d fa0f 	bl	800f3ac <HAL_RTC_GetTime>
                 HAL_RTC_GetDate(hrtc, &stDate, RTC_FORMAT_BCD);
 8001f8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f92:	2201      	movs	r2, #1
 8001f94:	4619      	mov	r1, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f00d fb0d 	bl	800f5b6 <HAL_RTC_GetDate>

                 stMsgUsbTx.nTxLen = 7;
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                 stMsgCanTx.stTxHeader.DLC = 7;
 8001fa2:	2307      	movs	r3, #7
 8001fa4:	67bb      	str	r3, [r7, #120]	; 0x78

                 stMsgUsbTx.nTxData[0] = MSG_TX_SET_TIME;
 8001fa6:	2374      	movs	r3, #116	; 0x74
 8001fa8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                 stMsgUsbTx.nTxData[1] = stTime.Hours;
 8001fac:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001fb0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
                 stMsgUsbTx.nTxData[2] = stTime.Minutes;
 8001fb4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001fb8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                 stMsgUsbTx.nTxData[3] = stTime.Seconds;
 8001fbc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001fc0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                 stMsgUsbTx.nTxData[4] = stDate.Year;
 8001fc4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001fc8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                 stMsgUsbTx.nTxData[5] = stDate.Month;
 8001fcc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001fd0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
                 stMsgUsbTx.nTxData[6] = stDate.Date;
 8001fd4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001fd8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                 stMsgUsbTx.nTxData[7] = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                 stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <ProfetSMTask+0x7d0>)
 8001fe4:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8001fe8:	3314      	adds	r3, #20
 8001fea:	66bb      	str	r3, [r7, #104]	; 0x68

                 memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001fec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ff0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ff8:	e883 0003 	stmia.w	r3, {r0, r1}

                 osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <ProfetSMTask+0x7d4>)
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002004:	2300      	movs	r3, #0
 8002006:	2200      	movs	r2, #0
 8002008:	f011 ff30 	bl	8013e6c <osMessageQueuePut>
                 osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 800200c:	4b20      	ldr	r3, [pc, #128]	; (8002090 <ProfetSMTask+0x7d8>)
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002014:	2300      	movs	r3, #0
 8002016:	2200      	movs	r2, #0
 8002018:	f011 ff28 	bl	8013e6c <osMessageQueuePut>
             }


             break;
 800201c:	e011      	b.n	8002042 <ProfetSMTask+0x78a>

           default:
             PdmConfig_Set(&stPdmConfig, &stMsgRx, &qMsgQueueUsbTx, &qMsgQueueCanTx);
 800201e:	f107 0114 	add.w	r1, r7, #20
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <ProfetSMTask+0x7d8>)
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <ProfetSMTask+0x7d4>)
 8002026:	4818      	ldr	r0, [pc, #96]	; (8002088 <ProfetSMTask+0x7d0>)
 8002028:	f001 fc3c 	bl	80038a4 <PdmConfig_Set>
             break;
 800202c:	e00a      	b.n	8002044 <ProfetSMTask+0x78c>
        }
      }
 800202e:	bf00      	nop
 8002030:	e008      	b.n	8002044 <ProfetSMTask+0x78c>
            break;
 8002032:	bf00      	nop
 8002034:	e006      	b.n	8002044 <ProfetSMTask+0x78c>
           break;
 8002036:	bf00      	nop
 8002038:	e004      	b.n	8002044 <ProfetSMTask+0x78c>
           break;
 800203a:	bf00      	nop
 800203c:	e002      	b.n	8002044 <ProfetSMTask+0x78c>
           break;
 800203e:	bf00      	nop
 8002040:	e000      	b.n	8002044 <ProfetSMTask+0x78c>
             break;
 8002042:	bf00      	nop
    }

    MsgQueueUsbTx_t stMsgTx;
    if(osMessageQueueGet(qMsgQueueUsbTx, &stMsgTx, NULL, 0U) == osOK){
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <ProfetSMTask+0x7d4>)
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800204c:	2300      	movs	r3, #0
 800204e:	2200      	movs	r2, #0
 8002050:	f011 ff80 	bl	8013f54 <osMessageQueueGet>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <ProfetSMTask+0x7bc>
      if(bUsbConnected){
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <ProfetSMTask+0x7dc>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d008      	beq.n	8002074 <ProfetSMTask+0x7bc>
        //memcpy(&nUsbMsgTx, &stMsgTx.nTxData, stMsgTx.nTxLen);
        //nUsbMsgTx[stMsgTx.nTxLen] = '\r';
        if(USBD_CDC_Transmit((uint8_t*)stMsgTx.nTxData, stMsgTx.nTxLen) != USBD_OK){
 8002062:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002066:	b29a      	uxth	r2, r3
 8002068:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe feac 	bl	8000dcc <USBD_CDC_Transmit>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(5);
 8002074:	2005      	movs	r0, #5
 8002076:	f011 fe45 	bl	8013d04 <osDelay>
  for(;;){
 800207a:	e42f      	b.n	80018dc <ProfetSMTask+0x24>
 800207c:	200023b8 	.word	0x200023b8
 8002080:	200023ba 	.word	0x200023ba
 8002084:	51eb851f 	.word	0x51eb851f
 8002088:	20000200 	.word	0x20000200
 800208c:	20000ad8 	.word	0x20000ad8
 8002090:	20000adc 	.word	0x20000adc
 8002094:	20000e0c 	.word	0x20000e0c

08002098 <CanTxTask>:
  }

}

void CanTxTask(osThreadId_t* thisThreadId, CAN_HandleTypeDef* hcan)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08c      	sub	sp, #48	; 0x30
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  for(;;){
    if(stPdmConfig.stCanOutput.nEnabled &&
 80020a2:	4ba8      	ldr	r3, [pc, #672]	; (8002344 <CanTxTask+0x2ac>)
 80020a4:	f893 38cc 	ldrb.w	r3, [r3, #2252]	; 0x8cc
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8253 	beq.w	8002554 <CanTxTask+0x4bc>
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 80020ae:	4ba5      	ldr	r3, [pc, #660]	; (8002344 <CanTxTask+0x2ac>)
 80020b0:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
    if(stPdmConfig.stCanOutput.nEnabled &&
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 824d 	beq.w	8002554 <CanTxTask+0x4bc>
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 80020ba:	4ba2      	ldr	r3, [pc, #648]	; (8002344 <CanTxTask+0x2ac>)
 80020bc:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8247 	beq.w	8002554 <CanTxTask+0x4bc>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 80020c6:	4b9f      	ldr	r3, [pc, #636]	; (8002344 <CanTxTask+0x2ac>)
 80020c8:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 80020cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020d0:	f080 8240 	bcs.w	8002554 <CanTxTask+0x4bc>

      MsgQueueCanTx_t stMsgTx;
      osStatus_t stStatus;
      //Keep sending queued messages until empty
      do{
        stStatus = osMessageQueueGet(qMsgQueueCanTx, &stMsgTx, NULL, 0U);
 80020d4:	4b9c      	ldr	r3, [pc, #624]	; (8002348 <CanTxTask+0x2b0>)
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	f107 010c 	add.w	r1, r7, #12
 80020dc:	2300      	movs	r3, #0
 80020de:	2200      	movs	r2, #0
 80020e0:	f011 ff38 	bl	8013f54 <osMessageQueueGet>
 80020e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(stStatus == osOK){
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d11d      	bne.n	8002128 <CanTxTask+0x90>
          stMsgTx.stTxHeader.ExtId = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
          stMsgTx.stTxHeader.IDE = CAN_ID_STD;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
          stMsgTx.stTxHeader.RTR = CAN_RTR_DATA;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
          stMsgTx.stTxHeader.TransmitGlobalTime = DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3020 	strb.w	r3, [r7, #32]

          if(HAL_CAN_AddTxMessage(hcan, &stMsgTx.stTxHeader, stMsgTx.nTxData, &nCanTxMailbox) != HAL_OK){
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	f103 0218 	add.w	r2, r3, #24
 8002106:	f107 010c 	add.w	r1, r7, #12
 800210a:	4b90      	ldr	r3, [pc, #576]	; (800234c <CanTxTask+0x2b4>)
 800210c:	6838      	ldr	r0, [r7, #0]
 800210e:	f007 fd72 	bl	8009bf6 <HAL_CAN_AddTxMessage>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <CanTxTask+0x90>
            //Send failed - add back to queue
            osMessageQueuePut(qMsgQueueCanTx, &stMsgTx, 0U, 0U);
 8002118:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <CanTxTask+0x2b0>)
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	f107 010c 	add.w	r1, r7, #12
 8002120:	2300      	movs	r3, #0
 8002122:	2200      	movs	r2, #0
 8002124:	f011 fea2 	bl	8013e6c <osMessageQueuePut>
          }
        }
      }while(stStatus == osOK);
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0d2      	beq.n	80020d4 <CanTxTask+0x3c>


      //=======================================================
      //Build Msg 0 (Analog inputs 1-4)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 0;
 800212e:	4b85      	ldr	r3, [pc, #532]	; (8002344 <CanTxTask+0x2ac>)
 8002130:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8002134:	461a      	mov	r2, r3
 8002136:	4b86      	ldr	r3, [pc, #536]	; (8002350 <CanTxTask+0x2b8>)
 8002138:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 800213a:	4b85      	ldr	r3, [pc, #532]	; (8002350 <CanTxTask+0x2b8>)
 800213c:	2208      	movs	r2, #8
 800213e:	611a      	str	r2, [r3, #16]
      //nCanTxData[7] = nAiBank1Raw[3];

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002140:	4b82      	ldr	r3, [pc, #520]	; (800234c <CanTxTask+0x2b4>)
 8002142:	4a84      	ldr	r2, [pc, #528]	; (8002354 <CanTxTask+0x2bc>)
 8002144:	4982      	ldr	r1, [pc, #520]	; (8002350 <CanTxTask+0x2b8>)
 8002146:	6838      	ldr	r0, [r7, #0]
 8002148:	f007 fd55 	bl	8009bf6 <HAL_CAN_AddTxMessage>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <CanTxTask+0xbe>
        Error_Handler();
 8002152:	f001 fb61 	bl	8003818 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002156:	2005      	movs	r0, #5
 8002158:	f011 fdd4 	bl	8013d04 <osDelay>

      //=======================================================
      //Build Msg 1 (Analog inputs 5-6)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 1;
 800215c:	4b79      	ldr	r3, [pc, #484]	; (8002344 <CanTxTask+0x2ac>)
 800215e:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8002162:	3301      	adds	r3, #1
 8002164:	461a      	mov	r2, r3
 8002166:	4b7a      	ldr	r3, [pc, #488]	; (8002350 <CanTxTask+0x2b8>)
 8002168:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 800216a:	4b79      	ldr	r3, [pc, #484]	; (8002350 <CanTxTask+0x2b8>)
 800216c:	2208      	movs	r2, #8
 800216e:	611a      	str	r2, [r3, #16]
      //nCanTxData[7] = 0;

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002170:	4b76      	ldr	r3, [pc, #472]	; (800234c <CanTxTask+0x2b4>)
 8002172:	4a78      	ldr	r2, [pc, #480]	; (8002354 <CanTxTask+0x2bc>)
 8002174:	4976      	ldr	r1, [pc, #472]	; (8002350 <CanTxTask+0x2b8>)
 8002176:	6838      	ldr	r0, [r7, #0]
 8002178:	f007 fd3d 	bl	8009bf6 <HAL_CAN_AddTxMessage>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <CanTxTask+0xee>
        Error_Handler();
 8002182:	f001 fb49 	bl	8003818 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002186:	2005      	movs	r0, #5
 8002188:	f011 fdbc 	bl	8013d04 <osDelay>

      //=======================================================
      //Build Msg 2 (Device status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 2;
 800218c:	4b6d      	ldr	r3, [pc, #436]	; (8002344 <CanTxTask+0x2ac>)
 800218e:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8002192:	3302      	adds	r3, #2
 8002194:	461a      	mov	r2, r3
 8002196:	4b6e      	ldr	r3, [pc, #440]	; (8002350 <CanTxTask+0x2b8>)
 8002198:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 800219a:	4b6d      	ldr	r3, [pc, #436]	; (8002350 <CanTxTask+0x2b8>)
 800219c:	2208      	movs	r2, #8
 800219e:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = eDevState;
 80021a0:	4b6d      	ldr	r3, [pc, #436]	; (8002358 <CanTxTask+0x2c0>)
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	4b6b      	ldr	r3, [pc, #428]	; (8002354 <CanTxTask+0x2bc>)
 80021a6:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = 0;
 80021a8:	4b6a      	ldr	r3, [pc, #424]	; (8002354 <CanTxTask+0x2bc>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = nILTotal >> 8;
 80021ae:	4b6b      	ldr	r3, [pc, #428]	; (800235c <CanTxTask+0x2c4>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b66      	ldr	r3, [pc, #408]	; (8002354 <CanTxTask+0x2bc>)
 80021bc:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = nILTotal;
 80021be:	4b67      	ldr	r3, [pc, #412]	; (800235c <CanTxTask+0x2c4>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b63      	ldr	r3, [pc, #396]	; (8002354 <CanTxTask+0x2bc>)
 80021c8:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = nBattSense >> 8;
 80021ca:	4b65      	ldr	r3, [pc, #404]	; (8002360 <CanTxTask+0x2c8>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b5f      	ldr	r3, [pc, #380]	; (8002354 <CanTxTask+0x2bc>)
 80021d8:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = nBattSense;
 80021da:	4b61      	ldr	r3, [pc, #388]	; (8002360 <CanTxTask+0x2c8>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <CanTxTask+0x2bc>)
 80021e4:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = (uint16_t)fBoardTempC >> 8;
 80021e6:	4b5f      	ldr	r3, [pc, #380]	; (8002364 <CanTxTask+0x2cc>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f0:	ee17 3a90 	vmov	r3, s15
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	4b55      	ldr	r3, [pc, #340]	; (8002354 <CanTxTask+0x2bc>)
 80021fe:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = (uint16_t)fBoardTempC;
 8002200:	4b58      	ldr	r3, [pc, #352]	; (8002364 <CanTxTask+0x2cc>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800220a:	ee17 3a90 	vmov	r3, s15
 800220e:	b29b      	uxth	r3, r3
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b50      	ldr	r3, [pc, #320]	; (8002354 <CanTxTask+0x2bc>)
 8002214:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002216:	4b4d      	ldr	r3, [pc, #308]	; (800234c <CanTxTask+0x2b4>)
 8002218:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <CanTxTask+0x2bc>)
 800221a:	494d      	ldr	r1, [pc, #308]	; (8002350 <CanTxTask+0x2b8>)
 800221c:	6838      	ldr	r0, [r7, #0]
 800221e:	f007 fcea 	bl	8009bf6 <HAL_CAN_AddTxMessage>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <CanTxTask+0x194>
        Error_Handler();
 8002228:	f001 faf6 	bl	8003818 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 800222c:	2005      	movs	r0, #5
 800222e:	f011 fd69 	bl	8013d04 <osDelay>

      //=======================================================
      //Build Msg 3 (Out 1-4 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 3;
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <CanTxTask+0x2ac>)
 8002234:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8002238:	3303      	adds	r3, #3
 800223a:	461a      	mov	r2, r3
 800223c:	4b44      	ldr	r3, [pc, #272]	; (8002350 <CanTxTask+0x2b8>)
 800223e:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002240:	4b43      	ldr	r3, [pc, #268]	; (8002350 <CanTxTask+0x2b8>)
 8002242:	2208      	movs	r2, #8
 8002244:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[0].nIL >> 8;
 8002246:	4b48      	ldr	r3, [pc, #288]	; (8002368 <CanTxTask+0x2d0>)
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	b29b      	uxth	r3, r3
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	b29b      	uxth	r3, r3
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b40      	ldr	r3, [pc, #256]	; (8002354 <CanTxTask+0x2bc>)
 8002254:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[0].nIL;
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <CanTxTask+0x2d0>)
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	b29b      	uxth	r3, r3
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <CanTxTask+0x2bc>)
 8002260:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[1].nIL >> 8;
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <CanTxTask+0x2d0>)
 8002264:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002268:	b29b      	uxth	r3, r3
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	b29b      	uxth	r3, r3
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b38      	ldr	r3, [pc, #224]	; (8002354 <CanTxTask+0x2bc>)
 8002272:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[1].nIL;
 8002274:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <CanTxTask+0x2d0>)
 8002276:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800227a:	b29b      	uxth	r3, r3
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b35      	ldr	r3, [pc, #212]	; (8002354 <CanTxTask+0x2bc>)
 8002280:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[2].nIL >> 8;
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <CanTxTask+0x2d0>)
 8002284:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002288:	b29b      	uxth	r3, r3
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b29b      	uxth	r3, r3
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <CanTxTask+0x2bc>)
 8002292:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[2].nIL;
 8002294:	4b34      	ldr	r3, [pc, #208]	; (8002368 <CanTxTask+0x2d0>)
 8002296:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800229a:	b29b      	uxth	r3, r3
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <CanTxTask+0x2bc>)
 80022a0:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[3].nIL >> 8;
 80022a2:	4b31      	ldr	r3, [pc, #196]	; (8002368 <CanTxTask+0x2d0>)
 80022a4:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	4b28      	ldr	r3, [pc, #160]	; (8002354 <CanTxTask+0x2bc>)
 80022b2:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[3].nIL;
 80022b4:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <CanTxTask+0x2d0>)
 80022b6:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b25      	ldr	r3, [pc, #148]	; (8002354 <CanTxTask+0x2bc>)
 80022c0:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <CanTxTask+0x2b4>)
 80022c4:	4a23      	ldr	r2, [pc, #140]	; (8002354 <CanTxTask+0x2bc>)
 80022c6:	4922      	ldr	r1, [pc, #136]	; (8002350 <CanTxTask+0x2b8>)
 80022c8:	6838      	ldr	r0, [r7, #0]
 80022ca:	f007 fc94 	bl	8009bf6 <HAL_CAN_AddTxMessage>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <CanTxTask+0x240>
        Error_Handler();
 80022d4:	f001 faa0 	bl	8003818 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 80022d8:	2005      	movs	r0, #5
 80022da:	f011 fd13 	bl	8013d04 <osDelay>

      //=======================================================
      //Build Msg 4 (Out 5-8 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 4;
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <CanTxTask+0x2ac>)
 80022e0:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 80022e4:	3304      	adds	r3, #4
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <CanTxTask+0x2b8>)
 80022ea:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <CanTxTask+0x2b8>)
 80022ee:	2208      	movs	r2, #8
 80022f0:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[4].nIL >> 8;
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <CanTxTask+0x2d0>)
 80022f4:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <CanTxTask+0x2bc>)
 8002302:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[4].nIL;
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <CanTxTask+0x2d0>)
 8002306:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800230a:	b29b      	uxth	r3, r3
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <CanTxTask+0x2bc>)
 8002310:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[5].nIL >> 8;
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <CanTxTask+0x2d0>)
 8002314:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8002318:	b29b      	uxth	r3, r3
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	b29b      	uxth	r3, r3
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <CanTxTask+0x2bc>)
 8002322:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[5].nIL;
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <CanTxTask+0x2d0>)
 8002326:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 800232a:	b29b      	uxth	r3, r3
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <CanTxTask+0x2bc>)
 8002330:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[6].nIL >> 8;
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <CanTxTask+0x2d0>)
 8002334:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8002338:	b29b      	uxth	r3, r3
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b2da      	uxtb	r2, r3
 8002340:	e014      	b.n	800236c <CanTxTask+0x2d4>
 8002342:	bf00      	nop
 8002344:	20000200 	.word	0x20000200
 8002348:	20000adc 	.word	0x20000adc
 800234c:	20000e84 	.word	0x20000e84
 8002350:	20000e40 	.word	0x20000e40
 8002354:	20000e74 	.word	0x20000e74
 8002358:	20000ae1 	.word	0x20000ae1
 800235c:	20000de4 	.word	0x20000de4
 8002360:	20000e1e 	.word	0x20000e1e
 8002364:	20000e10 	.word	0x20000e10
 8002368:	20000ae4 	.word	0x20000ae4
 800236c:	4b7b      	ldr	r3, [pc, #492]	; (800255c <CanTxTask+0x4c4>)
 800236e:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[6].nIL;
 8002370:	4b7b      	ldr	r3, [pc, #492]	; (8002560 <CanTxTask+0x4c8>)
 8002372:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8002376:	b29b      	uxth	r3, r3
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b78      	ldr	r3, [pc, #480]	; (800255c <CanTxTask+0x4c4>)
 800237c:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[7].nIL >> 8;
 800237e:	4b78      	ldr	r3, [pc, #480]	; (8002560 <CanTxTask+0x4c8>)
 8002380:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 8002384:	b29b      	uxth	r3, r3
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	b29b      	uxth	r3, r3
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b73      	ldr	r3, [pc, #460]	; (800255c <CanTxTask+0x4c4>)
 800238e:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[7].nIL;
 8002390:	4b73      	ldr	r3, [pc, #460]	; (8002560 <CanTxTask+0x4c8>)
 8002392:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 8002396:	b29b      	uxth	r3, r3
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b70      	ldr	r3, [pc, #448]	; (800255c <CanTxTask+0x4c4>)
 800239c:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 800239e:	4b71      	ldr	r3, [pc, #452]	; (8002564 <CanTxTask+0x4cc>)
 80023a0:	4a6e      	ldr	r2, [pc, #440]	; (800255c <CanTxTask+0x4c4>)
 80023a2:	4971      	ldr	r1, [pc, #452]	; (8002568 <CanTxTask+0x4d0>)
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f007 fc26 	bl	8009bf6 <HAL_CAN_AddTxMessage>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <CanTxTask+0x31c>
        Error_Handler();
 80023b0:	f001 fa32 	bl	8003818 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 80023b4:	2005      	movs	r0, #5
 80023b6:	f011 fca5 	bl	8013d04 <osDelay>

      //=======================================================
      //Build Msg 5 (Out 9-12 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 5;
 80023ba:	4b6c      	ldr	r3, [pc, #432]	; (800256c <CanTxTask+0x4d4>)
 80023bc:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 80023c0:	3305      	adds	r3, #5
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b68      	ldr	r3, [pc, #416]	; (8002568 <CanTxTask+0x4d0>)
 80023c6:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80023c8:	4b67      	ldr	r3, [pc, #412]	; (8002568 <CanTxTask+0x4d0>)
 80023ca:	2208      	movs	r2, #8
 80023cc:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[8].nIL >> 8;
 80023ce:	4b64      	ldr	r3, [pc, #400]	; (8002560 <CanTxTask+0x4c8>)
 80023d0:	f8b3 3228 	ldrh.w	r3, [r3, #552]	; 0x228
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b5f      	ldr	r3, [pc, #380]	; (800255c <CanTxTask+0x4c4>)
 80023de:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[8].nIL;
 80023e0:	4b5f      	ldr	r3, [pc, #380]	; (8002560 <CanTxTask+0x4c8>)
 80023e2:	f8b3 3228 	ldrh.w	r3, [r3, #552]	; 0x228
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b5c      	ldr	r3, [pc, #368]	; (800255c <CanTxTask+0x4c4>)
 80023ec:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[9].nIL >> 8;
 80023ee:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <CanTxTask+0x4c8>)
 80023f0:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b57      	ldr	r3, [pc, #348]	; (800255c <CanTxTask+0x4c4>)
 80023fe:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[9].nIL;
 8002400:	4b57      	ldr	r3, [pc, #348]	; (8002560 <CanTxTask+0x4c8>)
 8002402:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8002406:	b29b      	uxth	r3, r3
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b54      	ldr	r3, [pc, #336]	; (800255c <CanTxTask+0x4c4>)
 800240c:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[10].nIL >> 8;
 800240e:	4b54      	ldr	r3, [pc, #336]	; (8002560 <CanTxTask+0x4c8>)
 8002410:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8002414:	b29b      	uxth	r3, r3
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	b29b      	uxth	r3, r3
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b4f      	ldr	r3, [pc, #316]	; (800255c <CanTxTask+0x4c4>)
 800241e:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[10].nIL;
 8002420:	4b4f      	ldr	r3, [pc, #316]	; (8002560 <CanTxTask+0x4c8>)
 8002422:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8002426:	b29b      	uxth	r3, r3
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b4c      	ldr	r3, [pc, #304]	; (800255c <CanTxTask+0x4c4>)
 800242c:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[11].nIL >> 8;
 800242e:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <CanTxTask+0x4c8>)
 8002430:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002434:	b29b      	uxth	r3, r3
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	b29b      	uxth	r3, r3
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b47      	ldr	r3, [pc, #284]	; (800255c <CanTxTask+0x4c4>)
 800243e:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[11].nIL;
 8002440:	4b47      	ldr	r3, [pc, #284]	; (8002560 <CanTxTask+0x4c8>)
 8002442:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002446:	b29b      	uxth	r3, r3
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4b44      	ldr	r3, [pc, #272]	; (800255c <CanTxTask+0x4c4>)
 800244c:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 800244e:	4b45      	ldr	r3, [pc, #276]	; (8002564 <CanTxTask+0x4cc>)
 8002450:	4a42      	ldr	r2, [pc, #264]	; (800255c <CanTxTask+0x4c4>)
 8002452:	4945      	ldr	r1, [pc, #276]	; (8002568 <CanTxTask+0x4d0>)
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	f007 fbce 	bl	8009bf6 <HAL_CAN_AddTxMessage>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <CanTxTask+0x3cc>
        Error_Handler();
 8002460:	f001 f9da 	bl	8003818 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002464:	2005      	movs	r0, #5
 8002466:	f011 fc4d 	bl	8013d04 <osDelay>

      //=======================================================
      //Build Msg 6 (Out 1-12 Status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 6;
 800246a:	4b40      	ldr	r3, [pc, #256]	; (800256c <CanTxTask+0x4d4>)
 800246c:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8002470:	3306      	adds	r3, #6
 8002472:	461a      	mov	r2, r3
 8002474:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <CanTxTask+0x4d0>)
 8002476:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002478:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <CanTxTask+0x4d0>)
 800247a:	2208      	movs	r2, #8
 800247c:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = (pf[1].eState << 4) + pf[0].eState;
 800247e:	4b38      	ldr	r3, [pc, #224]	; (8002560 <CanTxTask+0x4c8>)
 8002480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002484:	b2db      	uxtb	r3, r3
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4b35      	ldr	r3, [pc, #212]	; (8002560 <CanTxTask+0x4c8>)
 800248c:	785b      	ldrb	r3, [r3, #1]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	4413      	add	r3, r2
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b31      	ldr	r3, [pc, #196]	; (800255c <CanTxTask+0x4c4>)
 8002496:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = (pf[3].eState << 4) + pf[2].eState;
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <CanTxTask+0x4c8>)
 800249a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <CanTxTask+0x4c8>)
 80024a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b2a      	ldr	r3, [pc, #168]	; (800255c <CanTxTask+0x4c4>)
 80024b2:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = (pf[5].eState << 4) + pf[4].eState;
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <CanTxTask+0x4c8>)
 80024b6:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <CanTxTask+0x4c8>)
 80024c2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <CanTxTask+0x4c4>)
 80024ce:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = (pf[7].eState << 4) + pf[6].eState;
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <CanTxTask+0x4c8>)
 80024d2:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b20      	ldr	r3, [pc, #128]	; (8002560 <CanTxTask+0x4c8>)
 80024de:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b1c      	ldr	r3, [pc, #112]	; (800255c <CanTxTask+0x4c4>)
 80024ea:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = (pf[9].eState << 4) + pf[8].eState;
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <CanTxTask+0x4c8>)
 80024ee:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <CanTxTask+0x4c8>)
 80024fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	4413      	add	r3, r2
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <CanTxTask+0x4c4>)
 8002506:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = (pf[11].eState << 4) + pf[10].eState;
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <CanTxTask+0x4c8>)
 800250a:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	b2da      	uxtb	r2, r3
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <CanTxTask+0x4c8>)
 8002516:	f893 3281 	ldrb.w	r3, [r3, #641]	; 0x281
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4413      	add	r3, r2
 800251e:	b2da      	uxtb	r2, r3
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <CanTxTask+0x4c4>)
 8002522:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = 0;
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <CanTxTask+0x4c4>)
 8002526:	2200      	movs	r2, #0
 8002528:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = 0;
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <CanTxTask+0x4c4>)
 800252c:	2200      	movs	r2, #0
 800252e:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <CanTxTask+0x4cc>)
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <CanTxTask+0x4c4>)
 8002534:	490c      	ldr	r1, [pc, #48]	; (8002568 <CanTxTask+0x4d0>)
 8002536:	6838      	ldr	r0, [r7, #0]
 8002538:	f007 fb5d 	bl	8009bf6 <HAL_CAN_AddTxMessage>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <CanTxTask+0x4ae>
        Error_Handler();
 8002542:	f001 f969 	bl	8003818 <Error_Handler>

#ifdef MEAS_HEAP_USE
      __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

      osDelay(stPdmConfig.stCanOutput.nUpdateTime);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <CanTxTask+0x4d4>)
 8002548:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
 800254c:	4618      	mov	r0, r3
 800254e:	f011 fbd9 	bl	8013d04 <osDelay>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 8002552:	e002      	b.n	800255a <CanTxTask+0x4c2>
    }
    else{
      osDelay(50);
 8002554:	2032      	movs	r0, #50	; 0x32
 8002556:	f011 fbd5 	bl	8013d04 <osDelay>
    if(stPdmConfig.stCanOutput.nEnabled &&
 800255a:	e5a2      	b.n	80020a2 <CanTxTask+0xa>
 800255c:	20000e74 	.word	0x20000e74
 8002560:	20000ae4 	.word	0x20000ae4
 8002564:	20000e84 	.word	0x20000e84
 8002568:	20000e40 	.word	0x20000e40
 800256c:	20000200 	.word	0x20000200

08002570 <SetPfStatusLed>:

  }
}

void SetPfStatusLed(PCA9635_LEDOnState_t *ledState, volatile ProfetTypeDef *profet)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  //0 = Off
  //1 = On
  //3 = Flash
  *ledState = (profet->eState == ON) +          //On
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	785b      	ldrb	r3, [r3, #1]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
              (profet->eState == IN_RUSH) +     //On
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
  *ledState = (profet->eState == ON) +          //On
 800259c:	4413      	add	r3, r2
 800259e:	b2db      	uxtb	r3, r3
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	7852      	ldrb	r2, [r2, #1]
 80025a4:	b2d2      	uxtb	r2, r2
              (profet->eState == IN_RUSH) +     //On
 80025a6:	2a04      	cmp	r2, #4
 80025a8:	d101      	bne.n	80025ae <SetPfStatusLed+0x3e>
 80025aa:	2203      	movs	r2, #3
 80025ac:	e000      	b.n	80025b0 <SetPfStatusLed+0x40>
 80025ae:	2200      	movs	r2, #0
 80025b0:	4413      	add	r3, r2
 80025b2:	b2db      	uxtb	r3, r3
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	7852      	ldrb	r2, [r2, #1]
 80025b8:	b2d2      	uxtb	r2, r2
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 80025ba:	2a03      	cmp	r2, #3
 80025bc:	d101      	bne.n	80025c2 <SetPfStatusLed+0x52>
 80025be:	2203      	movs	r2, #3
 80025c0:	e000      	b.n	80025c4 <SetPfStatusLed+0x54>
 80025c2:	2200      	movs	r2, #0
 80025c4:	4413      	add	r3, r2
 80025c6:	b2db      	uxtb	r3, r3
              (profet->eState == SUSPENDED)     * LED_FLASH +
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	7852      	ldrb	r2, [r2, #1]
 80025cc:	b2d2      	uxtb	r2, r2
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 80025ce:	2a06      	cmp	r2, #6
 80025d0:	d101      	bne.n	80025d6 <SetPfStatusLed+0x66>
 80025d2:	2203      	movs	r2, #3
 80025d4:	e000      	b.n	80025d8 <SetPfStatusLed+0x68>
 80025d6:	2200      	movs	r2, #0
 80025d8:	4413      	add	r3, r2
 80025da:	b2db      	uxtb	r3, r3
              (profet->eState == FAULT)         * LED_FLASH;
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	7852      	ldrb	r2, [r2, #1]
 80025e0:	b2d2      	uxtb	r2, r2
              (profet->eState == SUSPENDED)     * LED_FLASH +
 80025e2:	2a05      	cmp	r2, #5
 80025e4:	d101      	bne.n	80025ea <SetPfStatusLed+0x7a>
 80025e6:	2203      	movs	r2, #3
 80025e8:	e000      	b.n	80025ec <SetPfStatusLed+0x7c>
 80025ea:	2200      	movs	r2, #0
 80025ec:	4413      	add	r3, r2
 80025ee:	b2da      	uxtb	r2, r3
  *ledState = (profet->eState == ON) +          //On
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	701a      	strb	r2, [r3, #0]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <Profet_Init>:

void Profet_Init(){
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  pf[0].eModel = BTS7002_1EPP;
 8002604:	4bbf      	ldr	r3, [pc, #764]	; (8002904 <Profet_Init+0x304>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
  pf[0].eState = OFF;
 800260a:	4bbe      	ldr	r3, [pc, #760]	; (8002904 <Profet_Init+0x304>)
 800260c:	2200      	movs	r2, #0
 800260e:	705a      	strb	r2, [r3, #1]
  pf[0].nNum = 0;
 8002610:	4bbc      	ldr	r3, [pc, #752]	; (8002904 <Profet_Init+0x304>)
 8002612:	2200      	movs	r2, #0
 8002614:	809a      	strh	r2, [r3, #4]
  pf[0].nIN_Port = &pfGpioBank1;
 8002616:	4bbb      	ldr	r3, [pc, #748]	; (8002904 <Profet_Init+0x304>)
 8002618:	4abb      	ldr	r2, [pc, #748]	; (8002908 <Profet_Init+0x308>)
 800261a:	609a      	str	r2, [r3, #8]
  pf[0].nIN_Pin = 0x0080;
 800261c:	4bb9      	ldr	r3, [pc, #740]	; (8002904 <Profet_Init+0x304>)
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	819a      	strh	r2, [r3, #12]
  pf[0].nDEN_Port = 0;
 8002622:	4bb8      	ldr	r3, [pc, #736]	; (8002904 <Profet_Init+0x304>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  pf[0].nDEN_Pin = 0;
 8002628:	4bb6      	ldr	r3, [pc, #728]	; (8002904 <Profet_Init+0x304>)
 800262a:	2200      	movs	r2, #0
 800262c:	829a      	strh	r2, [r3, #20]
  pf[0].nIL_Limit = 250; //25.0A;
 800262e:	4bb5      	ldr	r3, [pc, #724]	; (8002904 <Profet_Init+0x304>)
 8002630:	22fa      	movs	r2, #250	; 0xfa
 8002632:	839a      	strh	r2, [r3, #28]
  pf[0].nIL_InRush_Limit = 300; //30A
 8002634:	4bb3      	ldr	r3, [pc, #716]	; (8002904 <Profet_Init+0x304>)
 8002636:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800263a:	83da      	strh	r2, [r3, #30]
  pf[0].nIL_InRush_Time = 2000; //ms
 800263c:	4bb1      	ldr	r3, [pc, #708]	; (8002904 <Profet_Init+0x304>)
 800263e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002642:	841a      	strh	r2, [r3, #32]
  pf[0].nOC_ResetTime = 1000;
 8002644:	4baf      	ldr	r3, [pc, #700]	; (8002904 <Profet_Init+0x304>)
 8002646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800264a:	861a      	strh	r2, [r3, #48]	; 0x30
  pf[0].nOC_ResetLimit = 1;
 800264c:	4bad      	ldr	r3, [pc, #692]	; (8002904 <Profet_Init+0x304>)
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  pf[0].fKilis = 2.286;
 8002654:	4bab      	ldr	r3, [pc, #684]	; (8002904 <Profet_Init+0x304>)
 8002656:	4aad      	ldr	r2, [pc, #692]	; (800290c <Profet_Init+0x30c>)
 8002658:	63da      	str	r2, [r3, #60]	; 0x3c

  pf[1].eModel = BTS7002_1EPP;
 800265a:	4baa      	ldr	r3, [pc, #680]	; (8002904 <Profet_Init+0x304>)
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pf[1].eState = OFF;
 8002662:	4ba8      	ldr	r3, [pc, #672]	; (8002904 <Profet_Init+0x304>)
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pf[1].nNum = 1;
 800266a:	4ba6      	ldr	r3, [pc, #664]	; (8002904 <Profet_Init+0x304>)
 800266c:	2201      	movs	r2, #1
 800266e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  pf[1].nIN_Port = &pfGpioBank1;
 8002672:	4ba4      	ldr	r3, [pc, #656]	; (8002904 <Profet_Init+0x304>)
 8002674:	4aa4      	ldr	r2, [pc, #656]	; (8002908 <Profet_Init+0x308>)
 8002676:	649a      	str	r2, [r3, #72]	; 0x48
  pf[1].nIN_Pin = 0x0002;
 8002678:	4ba2      	ldr	r3, [pc, #648]	; (8002904 <Profet_Init+0x304>)
 800267a:	2202      	movs	r2, #2
 800267c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pf[1].nDEN_Port = 0;
 8002680:	4ba0      	ldr	r3, [pc, #640]	; (8002904 <Profet_Init+0x304>)
 8002682:	2200      	movs	r2, #0
 8002684:	651a      	str	r2, [r3, #80]	; 0x50
  pf[1].nDEN_Pin = 0;
 8002686:	4b9f      	ldr	r3, [pc, #636]	; (8002904 <Profet_Init+0x304>)
 8002688:	2200      	movs	r2, #0
 800268a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  pf[1].nIL_Limit = 150; //15.0A
 800268e:	4b9d      	ldr	r3, [pc, #628]	; (8002904 <Profet_Init+0x304>)
 8002690:	2296      	movs	r2, #150	; 0x96
 8002692:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  pf[1].nIL_InRush_Limit = 300;
 8002696:	4b9b      	ldr	r3, [pc, #620]	; (8002904 <Profet_Init+0x304>)
 8002698:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800269c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  pf[1].nIL_InRush_Time = 2000; //ms
 80026a0:	4b98      	ldr	r3, [pc, #608]	; (8002904 <Profet_Init+0x304>)
 80026a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pf[1].nOC_ResetTime = 1000;
 80026aa:	4b96      	ldr	r3, [pc, #600]	; (8002904 <Profet_Init+0x304>)
 80026ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026b0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  pf[1].nOC_ResetLimit = 2;
 80026b4:	4b93      	ldr	r3, [pc, #588]	; (8002904 <Profet_Init+0x304>)
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  pf[1].fKilis = 2.286;
 80026bc:	4b91      	ldr	r3, [pc, #580]	; (8002904 <Profet_Init+0x304>)
 80026be:	4a93      	ldr	r2, [pc, #588]	; (800290c <Profet_Init+0x30c>)
 80026c0:	67da      	str	r2, [r3, #124]	; 0x7c

  pf[2].eModel = BTS7008_2EPA_CH1;
 80026c2:	4b90      	ldr	r3, [pc, #576]	; (8002904 <Profet_Init+0x304>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  pf[2].eState = OFF;
 80026ca:	4b8e      	ldr	r3, [pc, #568]	; (8002904 <Profet_Init+0x304>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  pf[2].nNum = 2;
 80026d2:	4b8c      	ldr	r3, [pc, #560]	; (8002904 <Profet_Init+0x304>)
 80026d4:	2202      	movs	r2, #2
 80026d6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  pf[2].nIN_Port = &pfGpioBank1;
 80026da:	4b8a      	ldr	r3, [pc, #552]	; (8002904 <Profet_Init+0x304>)
 80026dc:	4a8a      	ldr	r2, [pc, #552]	; (8002908 <Profet_Init+0x308>)
 80026de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  pf[2].nIN_Pin = 0x8000;
 80026e2:	4b88      	ldr	r3, [pc, #544]	; (8002904 <Profet_Init+0x304>)
 80026e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026e8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
  pf[2].nDEN_Port = 0;
 80026ec:	4b85      	ldr	r3, [pc, #532]	; (8002904 <Profet_Init+0x304>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  pf[2].nDEN_Pin = 0;
 80026f4:	4b83      	ldr	r3, [pc, #524]	; (8002904 <Profet_Init+0x304>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
  pf[2].nIL_Limit = 80; //8A;
 80026fc:	4b81      	ldr	r3, [pc, #516]	; (8002904 <Profet_Init+0x304>)
 80026fe:	2250      	movs	r2, #80	; 0x50
 8002700:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
  pf[2].nIL_InRush_Limit = 160; //16A
 8002704:	4b7f      	ldr	r3, [pc, #508]	; (8002904 <Profet_Init+0x304>)
 8002706:	22a0      	movs	r2, #160	; 0xa0
 8002708:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
  pf[2].nIL_InRush_Time = 2000; //ms
 800270c:	4b7d      	ldr	r3, [pc, #500]	; (8002904 <Profet_Init+0x304>)
 800270e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002712:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
  pf[2].nOC_ResetTime = 1000;
 8002716:	4b7b      	ldr	r3, [pc, #492]	; (8002904 <Profet_Init+0x304>)
 8002718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800271c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  pf[2].nOC_ResetLimit = 3;
 8002720:	4b78      	ldr	r3, [pc, #480]	; (8002904 <Profet_Init+0x304>)
 8002722:	2203      	movs	r2, #3
 8002724:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
  pf[2].fKilis = 0.554;
 8002728:	4b76      	ldr	r3, [pc, #472]	; (8002904 <Profet_Init+0x304>)
 800272a:	4a79      	ldr	r2, [pc, #484]	; (8002910 <Profet_Init+0x310>)
 800272c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  pf[3].eModel = BTS7008_2EPA_CH2;
 8002730:	4b74      	ldr	r3, [pc, #464]	; (8002904 <Profet_Init+0x304>)
 8002732:	2202      	movs	r2, #2
 8002734:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  pf[3].eState = OFF;
 8002738:	4b72      	ldr	r3, [pc, #456]	; (8002904 <Profet_Init+0x304>)
 800273a:	2200      	movs	r2, #0
 800273c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  pf[3].nNum = 3;
 8002740:	4b70      	ldr	r3, [pc, #448]	; (8002904 <Profet_Init+0x304>)
 8002742:	2203      	movs	r2, #3
 8002744:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  pf[3].nIN_Port = &pfGpioBank1;
 8002748:	4b6e      	ldr	r3, [pc, #440]	; (8002904 <Profet_Init+0x304>)
 800274a:	4a6f      	ldr	r2, [pc, #444]	; (8002908 <Profet_Init+0x308>)
 800274c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  pf[3].nIN_Pin = 0x1000;
 8002750:	4b6c      	ldr	r3, [pc, #432]	; (8002904 <Profet_Init+0x304>)
 8002752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002756:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
  pf[3].nDEN_Port = 0;
 800275a:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <Profet_Init+0x304>)
 800275c:	2200      	movs	r2, #0
 800275e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  pf[3].nDEN_Pin = 0;
 8002762:	4b68      	ldr	r3, [pc, #416]	; (8002904 <Profet_Init+0x304>)
 8002764:	2200      	movs	r2, #0
 8002766:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
  pf[3].nIL_Limit = 80;   //8A;
 800276a:	4b66      	ldr	r3, [pc, #408]	; (8002904 <Profet_Init+0x304>)
 800276c:	2250      	movs	r2, #80	; 0x50
 800276e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
  pf[3].nIL_InRush_Limit = 160; //16A
 8002772:	4b64      	ldr	r3, [pc, #400]	; (8002904 <Profet_Init+0x304>)
 8002774:	22a0      	movs	r2, #160	; 0xa0
 8002776:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
  pf[3].nIL_InRush_Time = 2000; //ms
 800277a:	4b62      	ldr	r3, [pc, #392]	; (8002904 <Profet_Init+0x304>)
 800277c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002780:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
  pf[3].nOC_ResetTime = 1000;
 8002784:	4b5f      	ldr	r3, [pc, #380]	; (8002904 <Profet_Init+0x304>)
 8002786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800278a:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
  pf[3].nOC_ResetLimit = 2;
 800278e:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <Profet_Init+0x304>)
 8002790:	2202      	movs	r2, #2
 8002792:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  pf[3].fKilis = 0.554;
 8002796:	4b5b      	ldr	r3, [pc, #364]	; (8002904 <Profet_Init+0x304>)
 8002798:	4a5d      	ldr	r2, [pc, #372]	; (8002910 <Profet_Init+0x310>)
 800279a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

  pf[4].eModel = BTS7008_2EPA_CH1;
 800279e:	4b59      	ldr	r3, [pc, #356]	; (8002904 <Profet_Init+0x304>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  pf[4].eState = OFF;
 80027a6:	4b57      	ldr	r3, [pc, #348]	; (8002904 <Profet_Init+0x304>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  pf[4].nNum = 4;
 80027ae:	4b55      	ldr	r3, [pc, #340]	; (8002904 <Profet_Init+0x304>)
 80027b0:	2204      	movs	r2, #4
 80027b2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  pf[4].nIN_Port = &pfGpioBank1;
 80027b6:	4b53      	ldr	r3, [pc, #332]	; (8002904 <Profet_Init+0x304>)
 80027b8:	4a53      	ldr	r2, [pc, #332]	; (8002908 <Profet_Init+0x308>)
 80027ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pf[4].nIN_Pin = 0x0800;
 80027be:	4b51      	ldr	r3, [pc, #324]	; (8002904 <Profet_Init+0x304>)
 80027c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
  pf[4].nDEN_Port = 0;
 80027c8:	4b4e      	ldr	r3, [pc, #312]	; (8002904 <Profet_Init+0x304>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pf[4].nDEN_Pin = 0;
 80027d0:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <Profet_Init+0x304>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
  pf[4].nIL_Limit = 80; //8A;
 80027d8:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <Profet_Init+0x304>)
 80027da:	2250      	movs	r2, #80	; 0x50
 80027dc:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  pf[4].nIL_InRush_Limit = 160; //16A
 80027e0:	4b48      	ldr	r3, [pc, #288]	; (8002904 <Profet_Init+0x304>)
 80027e2:	22a0      	movs	r2, #160	; 0xa0
 80027e4:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
  pf[4].nIL_InRush_Time = 2000; //ms
 80027e8:	4b46      	ldr	r3, [pc, #280]	; (8002904 <Profet_Init+0x304>)
 80027ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027ee:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
  pf[4].nOC_ResetTime = 1000;
 80027f2:	4b44      	ldr	r3, [pc, #272]	; (8002904 <Profet_Init+0x304>)
 80027f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027f8:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
  pf[4].nOC_ResetLimit = 2;
 80027fc:	4b41      	ldr	r3, [pc, #260]	; (8002904 <Profet_Init+0x304>)
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
  pf[4].fKilis = 0.554;
 8002804:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <Profet_Init+0x304>)
 8002806:	4a42      	ldr	r2, [pc, #264]	; (8002910 <Profet_Init+0x310>)
 8002808:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

  pf[5].eModel = BTS7008_2EPA_CH2;
 800280c:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <Profet_Init+0x304>)
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  pf[5].eState = OFF;
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <Profet_Init+0x304>)
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  pf[5].nNum = 5;
 800281c:	4b39      	ldr	r3, [pc, #228]	; (8002904 <Profet_Init+0x304>)
 800281e:	2205      	movs	r2, #5
 8002820:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
  pf[5].nIN_Port = &pfGpioBank1;
 8002824:	4b37      	ldr	r3, [pc, #220]	; (8002904 <Profet_Init+0x304>)
 8002826:	4a38      	ldr	r2, [pc, #224]	; (8002908 <Profet_Init+0x308>)
 8002828:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pf[5].nIN_Pin = 0x0100;
 800282c:	4b35      	ldr	r3, [pc, #212]	; (8002904 <Profet_Init+0x304>)
 800282e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002832:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
  pf[5].nDEN_Port = 0;
 8002836:	4b33      	ldr	r3, [pc, #204]	; (8002904 <Profet_Init+0x304>)
 8002838:	2200      	movs	r2, #0
 800283a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  pf[5].nDEN_Pin = 0;
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <Profet_Init+0x304>)
 8002840:	2200      	movs	r2, #0
 8002842:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  pf[5].nIL_Limit = 80; ///8A;
 8002846:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <Profet_Init+0x304>)
 8002848:	2250      	movs	r2, #80	; 0x50
 800284a:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
  pf[5].nIL_InRush_Limit = 160; //16A
 800284e:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <Profet_Init+0x304>)
 8002850:	22a0      	movs	r2, #160	; 0xa0
 8002852:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
  pf[5].nIL_InRush_Time = 2000; //ms
 8002856:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <Profet_Init+0x304>)
 8002858:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800285c:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
  pf[5].nOC_ResetTime = 1000;
 8002860:	4b28      	ldr	r3, [pc, #160]	; (8002904 <Profet_Init+0x304>)
 8002862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002866:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
  pf[5].nOC_ResetLimit = 2;
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <Profet_Init+0x304>)
 800286c:	2202      	movs	r2, #2
 800286e:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
  pf[5].fKilis = 0.554;
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <Profet_Init+0x304>)
 8002874:	4a26      	ldr	r2, [pc, #152]	; (8002910 <Profet_Init+0x310>)
 8002876:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

  pf[6].eModel = BTS7002_1EPP;
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <Profet_Init+0x304>)
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
  pf[6].eState = OFF;
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <Profet_Init+0x304>)
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
  pf[6].nNum = 6;
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <Profet_Init+0x304>)
 800288c:	2206      	movs	r2, #6
 800288e:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
  pf[6].nIN_Port = &pfGpioBank2;
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <Profet_Init+0x304>)
 8002894:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <Profet_Init+0x314>)
 8002896:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  pf[6].nIN_Pin = 0x0002;
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <Profet_Init+0x304>)
 800289c:	2202      	movs	r2, #2
 800289e:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pf[6].nDEN_Port = 0;
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <Profet_Init+0x304>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  pf[6].nDEN_Pin = 0;
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <Profet_Init+0x304>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
  pf[6].nIL_Limit = 150; //15A;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <Profet_Init+0x304>)
 80028b4:	2296      	movs	r2, #150	; 0x96
 80028b6:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
  pf[6].nIL_InRush_Limit = 300; //30A
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <Profet_Init+0x304>)
 80028bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028c0:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
  pf[6].nIL_InRush_Time = 2000; //ms
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <Profet_Init+0x304>)
 80028c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028ca:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
  pf[6].nOC_ResetTime = 1000;
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <Profet_Init+0x304>)
 80028d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028d4:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
  pf[6].nOC_ResetLimit = 2;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <Profet_Init+0x304>)
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  pf[6].fKilis = 2.286;
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <Profet_Init+0x304>)
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <Profet_Init+0x30c>)
 80028e4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

  pf[7].eModel = BTS7002_1EPP;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <Profet_Init+0x304>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
  pf[7].eState = OFF;
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <Profet_Init+0x304>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  pf[7].nNum = 7;
 80028f8:	4b02      	ldr	r3, [pc, #8]	; (8002904 <Profet_Init+0x304>)
 80028fa:	2207      	movs	r2, #7
 80028fc:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  pf[7].nIN_Port = &pfGpioBank2;
 8002900:	4b00      	ldr	r3, [pc, #0]	; (8002904 <Profet_Init+0x304>)
 8002902:	e009      	b.n	8002918 <Profet_Init+0x318>
 8002904:	20000ae4 	.word	0x20000ae4
 8002908:	20000de6 	.word	0x20000de6
 800290c:	40124dd3 	.word	0x40124dd3
 8002910:	3f0dd2f2 	.word	0x3f0dd2f2
 8002914:	20000de8 	.word	0x20000de8
 8002918:	4a84      	ldr	r2, [pc, #528]	; (8002b2c <Profet_Init+0x52c>)
 800291a:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  pf[7].nIN_Pin = 0x0008;
 800291e:	4b84      	ldr	r3, [pc, #528]	; (8002b30 <Profet_Init+0x530>)
 8002920:	2208      	movs	r2, #8
 8002922:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
  pf[7].nDEN_Port = 0;
 8002926:	4b82      	ldr	r3, [pc, #520]	; (8002b30 <Profet_Init+0x530>)
 8002928:	2200      	movs	r2, #0
 800292a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
  pf[7].nDEN_Pin = 0;
 800292e:	4b80      	ldr	r3, [pc, #512]	; (8002b30 <Profet_Init+0x530>)
 8002930:	2200      	movs	r2, #0
 8002932:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
  pf[7].nIL_Limit = 150; //15A;
 8002936:	4b7e      	ldr	r3, [pc, #504]	; (8002b30 <Profet_Init+0x530>)
 8002938:	2296      	movs	r2, #150	; 0x96
 800293a:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
  pf[7].nIL_InRush_Limit = 300; //30A
 800293e:	4b7c      	ldr	r3, [pc, #496]	; (8002b30 <Profet_Init+0x530>)
 8002940:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002944:	f8a3 21de 	strh.w	r2, [r3, #478]	; 0x1de
  pf[7].nIL_InRush_Time = 2000; //ms
 8002948:	4b79      	ldr	r3, [pc, #484]	; (8002b30 <Profet_Init+0x530>)
 800294a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800294e:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
  pf[7].nOC_ResetTime = 1000;
 8002952:	4b77      	ldr	r3, [pc, #476]	; (8002b30 <Profet_Init+0x530>)
 8002954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002958:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
  pf[7].nOC_ResetLimit = 2;
 800295c:	4b74      	ldr	r3, [pc, #464]	; (8002b30 <Profet_Init+0x530>)
 800295e:	2202      	movs	r2, #2
 8002960:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
  pf[7].fKilis = 2.286;
 8002964:	4b72      	ldr	r3, [pc, #456]	; (8002b30 <Profet_Init+0x530>)
 8002966:	4a73      	ldr	r2, [pc, #460]	; (8002b34 <Profet_Init+0x534>)
 8002968:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

  pf[8].eModel = BTS7008_2EPA_CH1;
 800296c:	4b70      	ldr	r3, [pc, #448]	; (8002b30 <Profet_Init+0x530>)
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  pf[8].eState = OFF;
 8002974:	4b6e      	ldr	r3, [pc, #440]	; (8002b30 <Profet_Init+0x530>)
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  pf[8].nNum = 8;
 800297c:	4b6c      	ldr	r3, [pc, #432]	; (8002b30 <Profet_Init+0x530>)
 800297e:	2208      	movs	r2, #8
 8002980:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  pf[8].nIN_Port = &pfGpioBank2;
 8002984:	4b6a      	ldr	r3, [pc, #424]	; (8002b30 <Profet_Init+0x530>)
 8002986:	4a69      	ldr	r2, [pc, #420]	; (8002b2c <Profet_Init+0x52c>)
 8002988:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  pf[8].nIN_Pin = 0x0010;
 800298c:	4b68      	ldr	r3, [pc, #416]	; (8002b30 <Profet_Init+0x530>)
 800298e:	2210      	movs	r2, #16
 8002990:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
  pf[8].nDEN_Port = 0;
 8002994:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <Profet_Init+0x530>)
 8002996:	2200      	movs	r2, #0
 8002998:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  pf[8].nDEN_Pin = 0;
 800299c:	4b64      	ldr	r3, [pc, #400]	; (8002b30 <Profet_Init+0x530>)
 800299e:	2200      	movs	r2, #0
 80029a0:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
  pf[8].nIL_Limit = 80; //8A;
 80029a4:	4b62      	ldr	r3, [pc, #392]	; (8002b30 <Profet_Init+0x530>)
 80029a6:	2250      	movs	r2, #80	; 0x50
 80029a8:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
  pf[8].nIL_InRush_Limit = 160; //16A
 80029ac:	4b60      	ldr	r3, [pc, #384]	; (8002b30 <Profet_Init+0x530>)
 80029ae:	22a0      	movs	r2, #160	; 0xa0
 80029b0:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
  pf[8].nIL_InRush_Time = 2000; //ms
 80029b4:	4b5e      	ldr	r3, [pc, #376]	; (8002b30 <Profet_Init+0x530>)
 80029b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80029ba:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
  pf[8].nOC_ResetTime = 1000;
 80029be:	4b5c      	ldr	r3, [pc, #368]	; (8002b30 <Profet_Init+0x530>)
 80029c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029c4:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
  pf[8].nOC_ResetLimit = 2;
 80029c8:	4b59      	ldr	r3, [pc, #356]	; (8002b30 <Profet_Init+0x530>)
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
  pf[8].fKilis = 0.554;
 80029d0:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <Profet_Init+0x530>)
 80029d2:	4a59      	ldr	r2, [pc, #356]	; (8002b38 <Profet_Init+0x538>)
 80029d4:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c

  pf[9].eModel = BTS7008_2EPA_CH2;
 80029d8:	4b55      	ldr	r3, [pc, #340]	; (8002b30 <Profet_Init+0x530>)
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
  pf[9].eState = OFF;
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <Profet_Init+0x530>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
  pf[9].nNum = 9;
 80029e8:	4b51      	ldr	r3, [pc, #324]	; (8002b30 <Profet_Init+0x530>)
 80029ea:	2209      	movs	r2, #9
 80029ec:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
  pf[9].nIN_Port = &pfGpioBank2;
 80029f0:	4b4f      	ldr	r3, [pc, #316]	; (8002b30 <Profet_Init+0x530>)
 80029f2:	4a4e      	ldr	r2, [pc, #312]	; (8002b2c <Profet_Init+0x52c>)
 80029f4:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
  pf[9].nIN_Pin = 0x0080;
 80029f8:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <Profet_Init+0x530>)
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
  pf[9].nDEN_Port = 0;
 8002a00:	4b4b      	ldr	r3, [pc, #300]	; (8002b30 <Profet_Init+0x530>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  pf[9].nDEN_Pin = 0;
 8002a08:	4b49      	ldr	r3, [pc, #292]	; (8002b30 <Profet_Init+0x530>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
  pf[9].nIL_Limit = 80; //8A;
 8002a10:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <Profet_Init+0x530>)
 8002a12:	2250      	movs	r2, #80	; 0x50
 8002a14:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
  pf[9].nIL_InRush_Limit = 160; //16A
 8002a18:	4b45      	ldr	r3, [pc, #276]	; (8002b30 <Profet_Init+0x530>)
 8002a1a:	22a0      	movs	r2, #160	; 0xa0
 8002a1c:	f8a3 225e 	strh.w	r2, [r3, #606]	; 0x25e
  pf[9].nIL_InRush_Time = 2000; //ms
 8002a20:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <Profet_Init+0x530>)
 8002a22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a26:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260
  pf[9].nOC_ResetTime = 1000;
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <Profet_Init+0x530>)
 8002a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a30:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
  pf[9].nOC_ResetLimit = 2;
 8002a34:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <Profet_Init+0x530>)
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
  pf[9].fKilis = 0.554;
 8002a3c:	4b3c      	ldr	r3, [pc, #240]	; (8002b30 <Profet_Init+0x530>)
 8002a3e:	4a3e      	ldr	r2, [pc, #248]	; (8002b38 <Profet_Init+0x538>)
 8002a40:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  pf[10].eModel = BTS7008_2EPA_CH1;
 8002a44:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <Profet_Init+0x530>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
  pf[10].eState = OFF;
 8002a4c:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <Profet_Init+0x530>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
  pf[10].nNum = 10;
 8002a54:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <Profet_Init+0x530>)
 8002a56:	220a      	movs	r2, #10
 8002a58:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
  pf[10].nIN_Port = &pfGpioBank2;
 8002a5c:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <Profet_Init+0x530>)
 8002a5e:	4a33      	ldr	r2, [pc, #204]	; (8002b2c <Profet_Init+0x52c>)
 8002a60:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  pf[10].nIN_Pin = 0x0100;
 8002a64:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <Profet_Init+0x530>)
 8002a66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a6a:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
  pf[10].nDEN_Port = 0;
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <Profet_Init+0x530>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  pf[10].nDEN_Pin = 0;
 8002a76:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <Profet_Init+0x530>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
  pf[10].nIL_Limit = 80; // 8A;
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <Profet_Init+0x530>)
 8002a80:	2250      	movs	r2, #80	; 0x50
 8002a82:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
  pf[10].nIL_InRush_Limit = 160; //16A
 8002a86:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <Profet_Init+0x530>)
 8002a88:	22a0      	movs	r2, #160	; 0xa0
 8002a8a:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e
  pf[10].nIL_InRush_Time = 2000; //ms
 8002a8e:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <Profet_Init+0x530>)
 8002a90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a94:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
  pf[10].nOC_ResetTime = 1000;
 8002a98:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <Profet_Init+0x530>)
 8002a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a9e:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
  pf[10].nOC_ResetLimit = 2;
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <Profet_Init+0x530>)
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
  pf[10].fKilis = 0.554;
 8002aaa:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <Profet_Init+0x530>)
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <Profet_Init+0x538>)
 8002aae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  pf[11].eModel = BTS7008_2EPA_CH2;
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <Profet_Init+0x530>)
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
  pf[11].eState = OFF;
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <Profet_Init+0x530>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
  pf[11].nNum = 11;
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <Profet_Init+0x530>)
 8002ac4:	220b      	movs	r2, #11
 8002ac6:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
  pf[11].nIN_Port = &pfGpioBank2;
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <Profet_Init+0x530>)
 8002acc:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <Profet_Init+0x52c>)
 8002ace:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  pf[11].nIN_Pin = 0x0800;
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <Profet_Init+0x530>)
 8002ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad8:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
  pf[11].nDEN_Port = 0;
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <Profet_Init+0x530>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  pf[11].nDEN_Pin = 0;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <Profet_Init+0x530>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
  pf[11].nIL_Limit = 50; //8A
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <Profet_Init+0x530>)
 8002aee:	2232      	movs	r2, #50	; 0x32
 8002af0:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
  pf[11].nIL_InRush_Limit = 160; //16A
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <Profet_Init+0x530>)
 8002af6:	22a0      	movs	r2, #160	; 0xa0
 8002af8:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
  pf[11].nIL_InRush_Time = 2000; //ms
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <Profet_Init+0x530>)
 8002afe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b02:	f8a3 22e0 	strh.w	r2, [r3, #736]	; 0x2e0
  pf[11].nOC_ResetTime = 1000;
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <Profet_Init+0x530>)
 8002b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b0c:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
  pf[11].nOC_ResetLimit = 2;
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <Profet_Init+0x530>)
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
  pf[11].fKilis = 0.554;
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <Profet_Init+0x530>)
 8002b1a:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <Profet_Init+0x538>)
 8002b1c:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000de8 	.word	0x20000de8
 8002b30:	20000ae4 	.word	0x20000ae4
 8002b34:	40124dd3 	.word	0x40124dd3
 8002b38:	3f0dd2f2 	.word	0x3f0dd2f2

08002b3c <_write>:


//Overwrite printf _write to send to ITM_SendChar
int _write(int file, char *ptr, int len){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  int i=0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  for(i=0; i<len; i++){
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e009      	b.n	8002b66 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	60ba      	str	r2, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe f82e 	bl	8000bbc <ITM_SendChar>
  for(i=0; i<len; i++){
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3301      	adds	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	dbf1      	blt.n	8002b52 <_write+0x16>
  }
  return len;
 8002b6e:	687b      	ldr	r3, [r7, #4]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <ReadPdmConfig>:

uint8_t ReadPdmConfig(I2C_HandleTypeDef* hi2c2)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	; 0x30
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  //PdmConfig_SetDefault(&stPdmConfig);
  //PdmConfig_Write(hi2c2, MB85RC_ADDRESS, &stPdmConfig);

  if(PdmConfig_Read(hi2c2, MB85RC_ADDRESS, &stPdmConfig) == 0){
 8002b80:	4aa9      	ldr	r2, [pc, #676]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002b82:	2150      	movs	r1, #80	; 0x50
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fe4f 	bl	8003828 <PdmConfig_Read>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <ReadPdmConfig+0x1e>
    PdmConfig_SetDefault(&stPdmConfig);
 8002b90:	48a5      	ldr	r0, [pc, #660]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002b92:	f002 f9d5 	bl	8004f40 <PdmConfig_SetDefault>
  }

  //Map the variable map first before using
  //ADS1x15 inputs
  for(int i=0; i<6; i++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9a:	e00b      	b.n	8002bb4 <ReadPdmConfig+0x3c>
    pVariableMap[i+1] = &nPdmInputs[i];
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba2:	0052      	lsls	r2, r2, #1
 8002ba4:	49a1      	ldr	r1, [pc, #644]	; (8002e2c <ReadPdmConfig+0x2b4>)
 8002ba6:	440a      	add	r2, r1
 8002ba8:	49a1      	ldr	r1, [pc, #644]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<6; i++)
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	ddf0      	ble.n	8002b9c <ReadPdmConfig+0x24>

  //CAN inputs
  for(int i=0; i<30; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbe:	e00b      	b.n	8002bd8 <ReadPdmConfig+0x60>
    pVariableMap[i + 7] = &nCanInputs[i];
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	3307      	adds	r3, #7
 8002bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc6:	0052      	lsls	r2, r2, #1
 8002bc8:	499a      	ldr	r1, [pc, #616]	; (8002e34 <ReadPdmConfig+0x2bc>)
 8002bca:	440a      	add	r2, r1
 8002bcc:	4998      	ldr	r1, [pc, #608]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<30; i++)
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	2b1d      	cmp	r3, #29
 8002bdc:	ddf0      	ble.n	8002bc0 <ReadPdmConfig+0x48>

  for(int i=0; i<20; i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	e00b      	b.n	8002bfc <ReadPdmConfig+0x84>
    pVariableMap[i + 37] = &nVirtInputs[i];
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	3325      	adds	r3, #37	; 0x25
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	0052      	lsls	r2, r2, #1
 8002bec:	4992      	ldr	r1, [pc, #584]	; (8002e38 <ReadPdmConfig+0x2c0>)
 8002bee:	440a      	add	r2, r1
 8002bf0:	498f      	ldr	r1, [pc, #572]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<20; i++)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	2b13      	cmp	r3, #19
 8002c00:	ddf0      	ble.n	8002be4 <ReadPdmConfig+0x6c>

  for(int i=0; i<12; i++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	e00b      	b.n	8002c20 <ReadPdmConfig+0xa8>
  {
    pVariableMap[i + 57] = &nOutputs[i];
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	3339      	adds	r3, #57	; 0x39
 8002c0c:	6a3a      	ldr	r2, [r7, #32]
 8002c0e:	0052      	lsls	r2, r2, #1
 8002c10:	498a      	ldr	r1, [pc, #552]	; (8002e3c <ReadPdmConfig+0x2c4>)
 8002c12:	440a      	add	r2, r1
 8002c14:	4986      	ldr	r1, [pc, #536]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<12; i++)
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	623b      	str	r3, [r7, #32]
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b0b      	cmp	r3, #11
 8002c24:	ddf0      	ble.n	8002c08 <ReadPdmConfig+0x90>
  }

  pVariableMap[69] = &stWiper.nSlowOut;
 8002c26:	4b82      	ldr	r3, [pc, #520]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002c28:	4a85      	ldr	r2, [pc, #532]	; (8002e40 <ReadPdmConfig+0x2c8>)
 8002c2a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  pVariableMap[70] = &stWiper.nFastOut;
 8002c2e:	4b80      	ldr	r3, [pc, #512]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002c30:	4a84      	ldr	r2, [pc, #528]	; (8002e44 <ReadPdmConfig+0x2cc>)
 8002c32:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118


  //Assign variable map values
  for(int i=0; i<12; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e01a      	b.n	8002c72 <ReadPdmConfig+0xfa>
  {
    stPdmConfig.stOutput[i].pInput = pVariableMap[stPdmConfig.stOutput[i].nInput];
 8002c3c:	497a      	ldr	r1, [pc, #488]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	f203 33d1 	addw	r3, r3, #977	; 0x3d1
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b77      	ldr	r3, [pc, #476]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c58:	4873      	ldr	r0, [pc, #460]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4403      	add	r3, r0
 8002c66:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8002c6a:	6019      	str	r1, [r3, #0]
  for(int i=0; i<12; i++)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2b0b      	cmp	r3, #11
 8002c76:	dde1      	ble.n	8002c3c <ReadPdmConfig+0xc4>
  //stPdmConfig.stInput[2].pInput = &nAiBank1Raw[2];
  //stPdmConfig.stInput[3].pInput = &nAiBank1Raw[3];
  //stPdmConfig.stInput[4].pInput = &nAiBank2Raw[0];
  //stPdmConfig.stInput[5].pInput = &nAiBank2Raw[1];

  for(int i=0; i<20; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	e044      	b.n	8002d08 <ReadPdmConfig+0x190>
  {
    stPdmConfig.stVirtualInput[i].pVar0 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar0];
 8002c7e:	496a      	ldr	r1, [pc, #424]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	33b2      	adds	r3, #178	; 0xb2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b67      	ldr	r3, [pc, #412]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c98:	4863      	ldr	r0, [pc, #396]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4403      	add	r3, r0
 8002ca6:	33b4      	adds	r3, #180	; 0xb4
 8002ca8:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar1 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar1];
 8002caa:	495f      	ldr	r1, [pc, #380]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	33ba      	adds	r3, #186	; 0xba
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cc4:	4858      	ldr	r0, [pc, #352]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4403      	add	r3, r0
 8002cd2:	33bc      	adds	r3, #188	; 0xbc
 8002cd4:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar2 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar2];
 8002cd6:	4954      	ldr	r1, [pc, #336]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	33c2      	adds	r3, #194	; 0xc2
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b51      	ldr	r3, [pc, #324]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cf0:	484d      	ldr	r0, [pc, #308]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4403      	add	r3, r0
 8002cfe:	33c4      	adds	r3, #196	; 0xc4
 8002d00:	6019      	str	r1, [r3, #0]
  for(int i=0; i<20; i++)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	3301      	adds	r3, #1
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b13      	cmp	r3, #19
 8002d0c:	ddb7      	ble.n	8002c7e <ReadPdmConfig+0x106>
  }

  stWiper.eMode = stPdmConfig.stWiper.nMode;
 8002d0e:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002d10:	f893 24f1 	ldrb.w	r2, [r3, #1265]	; 0x4f1
 8002d14:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002d16:	701a      	strb	r2, [r3, #0]
  stWiper.pSlowInput = pVariableMap[stPdmConfig.stWiper.nSlowInput];
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002d1a:	f893 34f2 	ldrb.w	r3, [r3, #1266]	; 0x4f2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d26:	4a48      	ldr	r2, [pc, #288]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002d28:	6253      	str	r3, [r2, #36]	; 0x24
  stWiper.pFastInput = pVariableMap[stPdmConfig.stWiper.nFastInput];
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002d2c:	f893 34f3 	ldrb.w	r3, [r3, #1267]	; 0x4f3
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	4a43      	ldr	r2, [pc, #268]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002d3a:	6293      	str	r3, [r2, #40]	; 0x28
  stWiper.pInterInput = pVariableMap[stPdmConfig.stWiper.nInterInput];
 8002d3c:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002d3e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4a:	4a3f      	ldr	r2, [pc, #252]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
  stWiper.pSwipeInput = pVariableMap[stPdmConfig.stWiper.nSwipeInput];
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002d50:	f893 34f9 	ldrb.w	r3, [r3, #1273]	; 0x4f9
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5c:	4a3a      	ldr	r2, [pc, #232]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002d5e:	6193      	str	r3, [r2, #24]
  stWiper.pOnSw = pVariableMap[stPdmConfig.stWiper.nOnInput];
 8002d60:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002d62:	f893 34f5 	ldrb.w	r3, [r3, #1269]	; 0x4f5
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6e:	4a36      	ldr	r2, [pc, #216]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
  stWiper.pParkSw = pVariableMap[stPdmConfig.stWiper.nParkInput];
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002d74:	f893 34f7 	ldrb.w	r3, [r3, #1271]	; 0x4f7
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	4a31      	ldr	r2, [pc, #196]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002d82:	6093      	str	r3, [r2, #8]
  stWiper.pSpeedInput = pVariableMap[stPdmConfig.stWiper.nSpeedInput];
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002d86:	f893 34f6 	ldrb.w	r3, [r3, #1270]	; 0x4f6
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d92:	4a2d      	ldr	r2, [pc, #180]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
  stWiper.pWashInput = pVariableMap[stPdmConfig.stWiper.nWashInput];
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002d98:	f893 34fa 	ldrb.w	r3, [r3, #1274]	; 0x4fa
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da4:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002da6:	61d3      	str	r3, [r2, #28]
  stWiper.nWashWipeCycles = stPdmConfig.stWiper.nWashWipeCycles;
 8002da8:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002daa:	f893 24fb 	ldrb.w	r2, [r3, #1275]	; 0x4fb
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002db0:	f883 2020 	strb.w	r2, [r3, #32]
  for(int i=0; i<6; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e010      	b.n	8002ddc <ReadPdmConfig+0x264>
    stWiper.nInterDelays[i] = stPdmConfig.stWiper.nIntermitTime[i];
 8002dba:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	8899      	ldrh	r1, [r3, #4]
 8002dc8:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	460a      	mov	r2, r1
 8002dd4:	809a      	strh	r2, [r3, #4]
  for(int i=0; i<6; i++)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	ddeb      	ble.n	8002dba <ReadPdmConfig+0x242>
  for(int i=0; i<8; i++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	e00e      	b.n	8002e06 <ReadPdmConfig+0x28e>
    stWiper.eSpeedMap[i] = (WiperSpeed_t)stPdmConfig.stWiper.nSpeedMap[i];
 8002de8:	4a0f      	ldr	r2, [pc, #60]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4413      	add	r3, r2
 8002dee:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8002df2:	7819      	ldrb	r1, [r3, #0]
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <ReadPdmConfig+0x2d0>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3334      	adds	r3, #52	; 0x34
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<8; i++)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	3301      	adds	r3, #1
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b07      	cmp	r3, #7
 8002e0a:	dded      	ble.n	8002de8 <ReadPdmConfig+0x270>

  stPdmConfig.stStarter.pInput = pVariableMap[stPdmConfig.stStarter.nInput];
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002e0e:	f893 3571 	ldrb.w	r3, [r3, #1393]	; 0x571
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <ReadPdmConfig+0x2b8>)
 8002e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1a:	4a03      	ldr	r2, [pc, #12]	; (8002e28 <ReadPdmConfig+0x2b0>)
 8002e1c:	f8c2 3574 	str.w	r3, [r2, #1396]	; 0x574

  for(int i=0; i<4; i++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	e02d      	b.n	8002e82 <ReadPdmConfig+0x30a>
 8002e26:	bf00      	nop
 8002e28:	20000200 	.word	0x20000200
 8002e2c:	2000102c 	.word	0x2000102c
 8002e30:	20000f10 	.word	0x20000f10
 8002e34:	20001038 	.word	0x20001038
 8002e38:	20001074 	.word	0x20001074
 8002e3c:	2000109c 	.word	0x2000109c
 8002e40:	20000ec2 	.word	0x20000ec2
 8002e44:	20000ec4 	.word	0x20000ec4
 8002e48:	20000ec0 	.word	0x20000ec0
    stPdmConfig.stFlasher[i].pInput = pVariableMap[stPdmConfig.stFlasher[i].nInput];
 8002e4c:	4911      	ldr	r1, [pc, #68]	; (8002e94 <ReadPdmConfig+0x31c>)
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	440b      	add	r3, r1
 8002e5a:	f203 5311 	addw	r3, r3, #1297	; 0x511
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <ReadPdmConfig+0x320>)
 8002e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e68:	480a      	ldr	r0, [pc, #40]	; (8002e94 <ReadPdmConfig+0x31c>)
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4403      	add	r3, r0
 8002e76:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8002e7a:	6019      	str	r1, [r3, #0]
  for(int i=0; i<4; i++)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	dde1      	ble.n	8002e4c <ReadPdmConfig+0x2d4>


  return PDM_OK;
 8002e88:	2301      	movs	r3, #1
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3730      	adds	r7, #48	; 0x30
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000200 	.word	0x20000200
 8002e98:	20000f10 	.word	0x20000f10

08002e9c <EvaluateFlasher>:
 */

#include "flasher.h"

void EvaluateFlasher(PdmConfig_Flasher_t *pFlasher, uint16_t pResult[12])
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  if(!pFlasher->nEnabled){
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d107      	bne.n	8002ebe <EvaluateFlasher+0x22>
    pResult[pFlasher->nOutput] = 1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7b5b      	ldrb	r3, [r3, #13]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	2201      	movs	r2, #1
 8002eba:	801a      	strh	r2, [r3, #0]
    return;
 8002ebc:	e048      	b.n	8002f50 <EvaluateFlasher+0xb4>
  }
  if(!*pFlasher->pInput){
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d107      	bne.n	8002ed8 <EvaluateFlasher+0x3c>
    pResult[pFlasher->nOutput] = 1;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7b5b      	ldrb	r3, [r3, #13]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	801a      	strh	r2, [r3, #0]
    return;
 8002ed6:	e03b      	b.n	8002f50 <EvaluateFlasher+0xb4>
  }

  if((pResult[pFlasher->nOutput] == 0) && ((HAL_GetTick() - pFlasher->nTimeOff) > pFlasher->nFlashOffTime)){
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7b5b      	ldrb	r3, [r3, #13]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d115      	bne.n	8002f14 <EvaluateFlasher+0x78>
 8002ee8:	f005 fc48 	bl	800877c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	8952      	ldrh	r2, [r2, #10]
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d90b      	bls.n	8002f14 <EvaluateFlasher+0x78>
    pResult[pFlasher->nOutput] = 1;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7b5b      	ldrb	r3, [r3, #13]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	4413      	add	r3, r2
 8002f06:	2201      	movs	r2, #1
 8002f08:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOn = HAL_GetTick();
 8002f0a:	f005 fc37 	bl	800877c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	615a      	str	r2, [r3, #20]
  }
  if((pResult[pFlasher->nOutput] == 1) && ((HAL_GetTick() - pFlasher->nTimeOn) > pFlasher->nFlashOnTime)){
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7b5b      	ldrb	r3, [r3, #13]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d115      	bne.n	8002f50 <EvaluateFlasher+0xb4>
 8002f24:	f005 fc2a 	bl	800877c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	8912      	ldrh	r2, [r2, #8]
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d90b      	bls.n	8002f50 <EvaluateFlasher+0xb4>
    pResult[pFlasher->nOutput] = 0;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7b5b      	ldrb	r3, [r3, #13]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	2200      	movs	r2, #0
 8002f44:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOff = HAL_GetTick();
 8002f46:	f005 fc19 	bl	800877c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	611a      	str	r2, [r3, #16]
  }

}
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f5c:	f005 fbe4 	bl	8008728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f60:	f000 f8a4 	bl	80030ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f64:	f000 fb56 	bl	8003614 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f68:	f000 fb22 	bl	80035b0 <MX_DMA_Init>
  MX_ADC4_Init();
 8002f6c:	f000 f986 	bl	800327c <MX_ADC4_Init>
  MX_CAN_Init();
 8002f70:	f000 f9e2 	bl	8003338 <MX_CAN_Init>
  MX_I2C2_Init();
 8002f74:	f000 fa78 	bl	8003468 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002f78:	f000 fadc 	bl	8003534 <MX_SPI1_Init>
  MX_RTC_Init();
 8002f7c:	f000 fab4 	bl	80034e8 <MX_RTC_Init>
  MX_I2C1_Init();
 8002f80:	f000 fa32 	bl	80033e8 <MX_I2C1_Init>
  MX_CRC_Init();
 8002f84:	f000 fa0e 	bl	80033a4 <MX_CRC_Init>
  MX_ADC1_Init();
 8002f88:	f000 f908 	bl	800319c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002f8c:	f010 fda8 	bl	8013ae0 <osKernelInitialize>
  //if(osTimerStart(KickIWDGHandle, 1300) != osOK)
  //  Error_Handler();
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  qMsgQueueRx = osMessageQueueNew(MSGQUEUE_RX_SIZE, sizeof(MsgQueueRx_t), NULL);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2130      	movs	r1, #48	; 0x30
 8002f94:	2010      	movs	r0, #16
 8002f96:	f010 fee3 	bl	8013d60 <osMessageQueueNew>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4a33      	ldr	r2, [pc, #204]	; (800306c <main+0x114>)
 8002f9e:	6013      	str	r3, [r2, #0]
  if(qMsgQueueRx == NULL){
 8002fa0:	4b32      	ldr	r3, [pc, #200]	; (800306c <main+0x114>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <main+0x54>
    //TODO: Message queue not created
    Error_Handler();
 8002fa8:	f000 fc36 	bl	8003818 <Error_Handler>
  }

  qMsgQueueUsbTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueUsbTx_t), NULL);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2109      	movs	r1, #9
 8002fb0:	2010      	movs	r0, #16
 8002fb2:	f010 fed5 	bl	8013d60 <osMessageQueueNew>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4a2d      	ldr	r2, [pc, #180]	; (8003070 <main+0x118>)
 8002fba:	6013      	str	r3, [r2, #0]
  if(qMsgQueueUsbTx == NULL){
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <main+0x118>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <main+0x70>
    //TODO: Message queue not created
    Error_Handler();
 8002fc4:	f000 fc28 	bl	8003818 <Error_Handler>
  }

  qMsgQueueCanTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueCanTx_t), NULL);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2120      	movs	r1, #32
 8002fcc:	2010      	movs	r0, #16
 8002fce:	f010 fec7 	bl	8013d60 <osMessageQueueNew>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4a27      	ldr	r2, [pc, #156]	; (8003074 <main+0x11c>)
 8002fd6:	6013      	str	r3, [r2, #0]
  if(qMsgQueueCanTx == NULL){
 8002fd8:	4b26      	ldr	r3, [pc, #152]	; (8003074 <main+0x11c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <main+0x8c>
    //TODO: Message queue not created
    Error_Handler();
 8002fe0:	f000 fc1a 	bl	8003818 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002fe4:	4a24      	ldr	r2, [pc, #144]	; (8003078 <main+0x120>)
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4824      	ldr	r0, [pc, #144]	; (800307c <main+0x124>)
 8002fea:	f010 fde1 	bl	8013bb0 <osThreadNew>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4a23      	ldr	r2, [pc, #140]	; (8003080 <main+0x128>)
 8002ff2:	6013      	str	r3, [r2, #0]

  /* creation of i2cTask */
  i2cTaskHandle = osThreadNew(StartI2CTask, NULL, &i2cTask_attributes);
 8002ff4:	4a23      	ldr	r2, [pc, #140]	; (8003084 <main+0x12c>)
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4823      	ldr	r0, [pc, #140]	; (8003088 <main+0x130>)
 8002ffa:	f010 fdd9 	bl	8013bb0 <osThreadNew>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a22      	ldr	r2, [pc, #136]	; (800308c <main+0x134>)
 8003002:	6013      	str	r3, [r2, #0]

  /* creation of profetSMTask */
  profetSMTaskHandle = osThreadNew(StartProfetSMTask, NULL, &profetSMTask_attributes);
 8003004:	4a22      	ldr	r2, [pc, #136]	; (8003090 <main+0x138>)
 8003006:	2100      	movs	r1, #0
 8003008:	4822      	ldr	r0, [pc, #136]	; (8003094 <main+0x13c>)
 800300a:	f010 fdd1 	bl	8013bb0 <osThreadNew>
 800300e:	4603      	mov	r3, r0
 8003010:	4a21      	ldr	r2, [pc, #132]	; (8003098 <main+0x140>)
 8003012:	6013      	str	r3, [r2, #0]

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &canTxTask_attributes);
 8003014:	4a21      	ldr	r2, [pc, #132]	; (800309c <main+0x144>)
 8003016:	2100      	movs	r1, #0
 8003018:	4821      	ldr	r0, [pc, #132]	; (80030a0 <main+0x148>)
 800301a:	f010 fdc9 	bl	8013bb0 <osThreadNew>
 800301e:	4603      	mov	r3, r0
 8003020:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <main+0x14c>)
 8003022:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(defaultTaskHandle == 0x0)
 8003024:	4b16      	ldr	r3, [pc, #88]	; (8003080 <main+0x128>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <main+0xd8>
    Error_Handler();
 800302c:	f000 fbf4 	bl	8003818 <Error_Handler>

  if(i2cTaskHandle == 0x0)
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <main+0x134>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <main+0xe4>
    Error_Handler();
 8003038:	f000 fbee 	bl	8003818 <Error_Handler>

  if(profetSMTaskHandle == 0x0)
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <main+0x140>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <main+0xf0>
    Error_Handler();
 8003044:	f000 fbe8 	bl	8003818 <Error_Handler>

  if(canTxTaskHandle == 0x0)
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <main+0x14c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <main+0xfc>
    Error_Handler();
 8003050:	f000 fbe2 	bl	8003818 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  if(ReadPdmConfig(&hi2c2) != PDM_OK)
 8003054:	4814      	ldr	r0, [pc, #80]	; (80030a8 <main+0x150>)
 8003056:	f7ff fd8f 	bl	8002b78 <ReadPdmConfig>
 800305a:	4603      	mov	r3, r0
 800305c:	2b01      	cmp	r3, #1
 800305e:	d001      	beq.n	8003064 <main+0x10c>
    Error_Handler();
 8003060:	f000 fbda 	bl	8003818 <Error_Handler>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003064:	f010 fd70 	bl	8013b48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003068:	e7fe      	b.n	8003068 <main+0x110>
 800306a:	bf00      	nop
 800306c:	20000ad4 	.word	0x20000ad4
 8003070:	20000ad8 	.word	0x20000ad8
 8003074:	20000adc 	.word	0x20000adc
 8003078:	08017b84 	.word	0x08017b84
 800307c:	08003749 	.word	0x08003749
 8003080:	2000264c 	.word	0x2000264c
 8003084:	08017ba8 	.word	0x08017ba8
 8003088:	08003785 	.word	0x08003785
 800308c:	20002650 	.word	0x20002650
 8003090:	08017bcc 	.word	0x08017bcc
 8003094:	080037ad 	.word	0x080037ad
 8003098:	20002654 	.word	0x20002654
 800309c:	08017bf0 	.word	0x08017bf0
 80030a0:	080037d5 	.word	0x080037d5
 80030a4:	20002658 	.word	0x20002658
 80030a8:	2000257c 	.word	0x2000257c

080030ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b09e      	sub	sp, #120	; 0x78
 80030b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030b6:	2228      	movs	r2, #40	; 0x28
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f013 ff98 	bl	8016ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030d0:	463b      	mov	r3, r7
 80030d2:	223c      	movs	r2, #60	; 0x3c
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f013 ff8a 	bl	8016ff0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80030dc:	f00a fba2 	bl	800d824 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80030e0:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <SystemClock_Config+0xe8>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <SystemClock_Config+0xe8>)
 80030e6:	f023 0318 	bic.w	r3, r3, #24
 80030ea:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80030ec:	230d      	movs	r3, #13
 80030ee:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030f6:	2300      	movs	r3, #0
 80030f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80030fa:	2301      	movs	r3, #1
 80030fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030fe:	2301      	movs	r3, #1
 8003100:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003102:	2301      	movs	r3, #1
 8003104:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003106:	2302      	movs	r3, #2
 8003108:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800310a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800310e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003110:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003114:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003116:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800311a:	4618      	mov	r0, r3
 800311c:	f00a fb92 	bl	800d844 <HAL_RCC_OscConfig>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8003126:	f000 fb77 	bl	8003818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800312a:	230f      	movs	r3, #15
 800312c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800312e:	2302      	movs	r3, #2
 8003130:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003132:	2300      	movs	r3, #0
 8003134:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800313a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800313c:	2300      	movs	r3, #0
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003140:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f00b fbba 	bl	800e8c0 <HAL_RCC_ClockConfig>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003152:	f000 fb61 	bl	8003818 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <SystemClock_Config+0xec>)
 8003158:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RTC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800315a:	2310      	movs	r3, #16
 800315c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 800315e:	2320      	movs	r3, #32
 8003160:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003166:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003168:	2300      	movs	r3, #0
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800316c:	463b      	mov	r3, r7
 800316e:	4618      	mov	r0, r3
 8003170:	f00b fe1e 	bl	800edb0 <HAL_RCCEx_PeriphCLKConfig>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800317a:	f000 fb4d 	bl	8003818 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800317e:	2200      	movs	r2, #0
 8003180:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8003184:	2000      	movs	r0, #0
 8003186:	f00b fd17 	bl	800ebb8 <HAL_RCC_MCOConfig>
}
 800318a:	bf00      	nop
 800318c:	3778      	adds	r7, #120	; 0x78
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	00030060 	.word	0x00030060

0800319c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80031a2:	f107 031c 	add.w	r3, r7, #28
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
 80031bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80031be:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <MX_ADC1_Init+0xdc>)
 80031c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80031c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031c6:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <MX_ADC1_Init+0xdc>)
 80031c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80031cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031ce:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <MX_ADC1_Init+0xdc>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80031d4:	4b28      	ldr	r3, [pc, #160]	; (8003278 <MX_ADC1_Init+0xdc>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <MX_ADC1_Init+0xdc>)
 80031dc:	2201      	movs	r2, #1
 80031de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <MX_ADC1_Init+0xdc>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <MX_ADC1_Init+0xdc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031ee:	4b22      	ldr	r3, [pc, #136]	; (8003278 <MX_ADC1_Init+0xdc>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031f4:	4b20      	ldr	r3, [pc, #128]	; (8003278 <MX_ADC1_Init+0xdc>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031fa:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <MX_ADC1_Init+0xdc>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <MX_ADC1_Init+0xdc>)
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <MX_ADC1_Init+0xdc>)
 800320a:	2204      	movs	r2, #4
 800320c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800320e:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <MX_ADC1_Init+0xdc>)
 8003210:	2200      	movs	r2, #0
 8003212:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <MX_ADC1_Init+0xdc>)
 8003216:	2200      	movs	r2, #0
 8003218:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800321a:	4817      	ldr	r0, [pc, #92]	; (8003278 <MX_ADC1_Init+0xdc>)
 800321c:	f005 fad8 	bl	80087d0 <HAL_ADC_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003226:	f000 faf7 	bl	8003818 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	4619      	mov	r1, r3
 8003234:	4810      	ldr	r0, [pc, #64]	; (8003278 <MX_ADC1_Init+0xdc>)
 8003236:	f006 f8b3 	bl	80093a0 <HAL_ADCEx_MultiModeConfigChannel>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8003240:	f000 faea 	bl	8003818 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003244:	2310      	movs	r3, #16
 8003246:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003248:	2301      	movs	r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8003250:	2307      	movs	r3, #7
 8003252:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	4619      	mov	r1, r3
 8003260:	4805      	ldr	r0, [pc, #20]	; (8003278 <MX_ADC1_Init+0xdc>)
 8003262:	f005 fdb1 	bl	8008dc8 <HAL_ADC_ConfigChannel>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800326c:	f000 fad4 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003270:	bf00      	nop
 8003272:	3728      	adds	r7, #40	; 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200023bc 	.word	0x200023bc

0800327c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003282:	463b      	mov	r3, r7
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	611a      	str	r2, [r3, #16]
 8003290:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8003292:	4b27      	ldr	r3, [pc, #156]	; (8003330 <MX_ADC4_Init+0xb4>)
 8003294:	4a27      	ldr	r2, [pc, #156]	; (8003334 <MX_ADC4_Init+0xb8>)
 8003296:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <MX_ADC4_Init+0xb4>)
 800329a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800329e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80032a0:	4b23      	ldr	r3, [pc, #140]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80032ac:	4b20      	ldr	r3, [pc, #128]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80032b2:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032bc:	2200      	movs	r2, #0
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032dc:	2204      	movs	r2, #4
 80032de:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80032e0:	4b13      	ldr	r3, [pc, #76]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80032ec:	4810      	ldr	r0, [pc, #64]	; (8003330 <MX_ADC4_Init+0xb4>)
 80032ee:	f005 fa6f 	bl	80087d0 <HAL_ADC_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 80032f8:	f000 fa8e 	bl	8003818 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80032fc:	2303      	movs	r3, #3
 80032fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003300:	2301      	movs	r3, #1
 8003302:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8003308:	2307      	movs	r3, #7
 800330a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8003314:	463b      	mov	r3, r7
 8003316:	4619      	mov	r1, r3
 8003318:	4805      	ldr	r0, [pc, #20]	; (8003330 <MX_ADC4_Init+0xb4>)
 800331a:	f005 fd55 	bl	8008dc8 <HAL_ADC_ConfigChannel>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 8003324:	f000 fa78 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8003328:	bf00      	nop
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	2000240c 	.word	0x2000240c
 8003334:	50000500 	.word	0x50000500

08003338 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <MX_CAN_Init+0x64>)
 800333e:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <MX_CAN_Init+0x68>)
 8003340:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <MX_CAN_Init+0x64>)
 8003344:	2204      	movs	r2, #4
 8003346:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <MX_CAN_Init+0x64>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <MX_CAN_Init+0x64>)
 8003350:	2200      	movs	r2, #0
 8003352:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <MX_CAN_Init+0x64>)
 8003356:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800335a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <MX_CAN_Init+0x64>)
 800335e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003362:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <MX_CAN_Init+0x64>)
 8003366:	2200      	movs	r2, #0
 8003368:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <MX_CAN_Init+0x64>)
 800336c:	2200      	movs	r2, #0
 800336e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <MX_CAN_Init+0x64>)
 8003372:	2200      	movs	r2, #0
 8003374:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <MX_CAN_Init+0x64>)
 8003378:	2200      	movs	r2, #0
 800337a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <MX_CAN_Init+0x64>)
 800337e:	2200      	movs	r2, #0
 8003380:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <MX_CAN_Init+0x64>)
 8003384:	2200      	movs	r2, #0
 8003386:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003388:	4804      	ldr	r0, [pc, #16]	; (800339c <MX_CAN_Init+0x64>)
 800338a:	f006 fa2b 	bl	80097e4 <HAL_CAN_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003394:	f000 fa40 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200024e4 	.word	0x200024e4
 80033a0:	40006400 	.word	0x40006400

080033a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <MX_CRC_Init+0x3c>)
 80033aa:	4a0e      	ldr	r2, [pc, #56]	; (80033e4 <MX_CRC_Init+0x40>)
 80033ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <MX_CRC_Init+0x3c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80033b4:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <MX_CRC_Init+0x3c>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <MX_CRC_Init+0x3c>)
 80033bc:	2220      	movs	r2, #32
 80033be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80033c0:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <MX_CRC_Init+0x3c>)
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <MX_CRC_Init+0x3c>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80033cc:	4804      	ldr	r0, [pc, #16]	; (80033e0 <MX_CRC_Init+0x3c>)
 80033ce:	f007 f937 	bl	800a640 <HAL_CRC_Init>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80033d8:	f000 fa1e 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	2000250c 	.word	0x2000250c
 80033e4:	40023000 	.word	0x40023000

080033e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <MX_I2C1_Init+0x74>)
 80033ee:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <MX_I2C1_Init+0x78>)
 80033f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <MX_I2C1_Init+0x74>)
 80033f4:	4a1b      	ldr	r2, [pc, #108]	; (8003464 <MX_I2C1_Init+0x7c>)
 80033f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <MX_I2C1_Init+0x74>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033fe:	4b17      	ldr	r3, [pc, #92]	; (800345c <MX_I2C1_Init+0x74>)
 8003400:	2201      	movs	r2, #1
 8003402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003404:	4b15      	ldr	r3, [pc, #84]	; (800345c <MX_I2C1_Init+0x74>)
 8003406:	2200      	movs	r2, #0
 8003408:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800340a:	4b14      	ldr	r3, [pc, #80]	; (800345c <MX_I2C1_Init+0x74>)
 800340c:	2200      	movs	r2, #0
 800340e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <MX_I2C1_Init+0x74>)
 8003412:	2200      	movs	r2, #0
 8003414:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <MX_I2C1_Init+0x74>)
 8003418:	2200      	movs	r2, #0
 800341a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <MX_I2C1_Init+0x74>)
 800341e:	2200      	movs	r2, #0
 8003420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003422:	480e      	ldr	r0, [pc, #56]	; (800345c <MX_I2C1_Init+0x74>)
 8003424:	f007 fd3c 	bl	800aea0 <HAL_I2C_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800342e:	f000 f9f3 	bl	8003818 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003432:	2100      	movs	r1, #0
 8003434:	4809      	ldr	r0, [pc, #36]	; (800345c <MX_I2C1_Init+0x74>)
 8003436:	f008 fc73 	bl	800bd20 <HAL_I2CEx_ConfigAnalogFilter>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003440:	f000 f9ea 	bl	8003818 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003444:	2100      	movs	r1, #0
 8003446:	4805      	ldr	r0, [pc, #20]	; (800345c <MX_I2C1_Init+0x74>)
 8003448:	f008 fcb5 	bl	800bdb6 <HAL_I2CEx_ConfigDigitalFilter>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003452:	f000 f9e1 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20002530 	.word	0x20002530
 8003460:	40005400 	.word	0x40005400
 8003464:	00702681 	.word	0x00702681

08003468 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <MX_I2C2_Init+0x74>)
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <MX_I2C2_Init+0x78>)
 8003470:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702681;
 8003472:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <MX_I2C2_Init+0x74>)
 8003474:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <MX_I2C2_Init+0x7c>)
 8003476:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003478:	4b18      	ldr	r3, [pc, #96]	; (80034dc <MX_I2C2_Init+0x74>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <MX_I2C2_Init+0x74>)
 8003480:	2201      	movs	r2, #1
 8003482:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003484:	4b15      	ldr	r3, [pc, #84]	; (80034dc <MX_I2C2_Init+0x74>)
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800348a:	4b14      	ldr	r3, [pc, #80]	; (80034dc <MX_I2C2_Init+0x74>)
 800348c:	2200      	movs	r2, #0
 800348e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <MX_I2C2_Init+0x74>)
 8003492:	2200      	movs	r2, #0
 8003494:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <MX_I2C2_Init+0x74>)
 8003498:	2200      	movs	r2, #0
 800349a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <MX_I2C2_Init+0x74>)
 800349e:	2200      	movs	r2, #0
 80034a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80034a2:	480e      	ldr	r0, [pc, #56]	; (80034dc <MX_I2C2_Init+0x74>)
 80034a4:	f007 fcfc 	bl	800aea0 <HAL_I2C_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80034ae:	f000 f9b3 	bl	8003818 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034b2:	2100      	movs	r1, #0
 80034b4:	4809      	ldr	r0, [pc, #36]	; (80034dc <MX_I2C2_Init+0x74>)
 80034b6:	f008 fc33 	bl	800bd20 <HAL_I2CEx_ConfigAnalogFilter>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80034c0:	f000 f9aa 	bl	8003818 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80034c4:	2100      	movs	r1, #0
 80034c6:	4805      	ldr	r0, [pc, #20]	; (80034dc <MX_I2C2_Init+0x74>)
 80034c8:	f008 fc75 	bl	800bdb6 <HAL_I2CEx_ConfigDigitalFilter>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80034d2:	f000 f9a1 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	2000257c 	.word	0x2000257c
 80034e0:	40005800 	.word	0x40005800
 80034e4:	00702681 	.word	0x00702681

080034e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <MX_RTC_Init+0x44>)
 80034ee:	4a10      	ldr	r2, [pc, #64]	; (8003530 <MX_RTC_Init+0x48>)
 80034f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <MX_RTC_Init+0x44>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <MX_RTC_Init+0x44>)
 80034fa:	227f      	movs	r2, #127	; 0x7f
 80034fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <MX_RTC_Init+0x44>)
 8003500:	22ff      	movs	r2, #255	; 0xff
 8003502:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <MX_RTC_Init+0x44>)
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <MX_RTC_Init+0x44>)
 800350c:	2200      	movs	r2, #0
 800350e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <MX_RTC_Init+0x44>)
 8003512:	2200      	movs	r2, #0
 8003514:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003516:	4805      	ldr	r0, [pc, #20]	; (800352c <MX_RTC_Init+0x44>)
 8003518:	f00b fdfa 	bl	800f110 <HAL_RTC_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003522:	f000 f979 	bl	8003818 <Error_Handler>
  /* USER CODE END Check_RTC_BKUP */
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200025c8 	.word	0x200025c8
 8003530:	40002800 	.word	0x40002800

08003534 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <MX_SPI1_Init+0x74>)
 800353a:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <MX_SPI1_Init+0x78>)
 800353c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800353e:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <MX_SPI1_Init+0x74>)
 8003540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003544:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003546:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <MX_SPI1_Init+0x74>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <MX_SPI1_Init+0x74>)
 800354e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003552:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <MX_SPI1_Init+0x74>)
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <MX_SPI1_Init+0x74>)
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003560:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <MX_SPI1_Init+0x74>)
 8003562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003566:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <MX_SPI1_Init+0x74>)
 800356a:	2208      	movs	r2, #8
 800356c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800356e:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <MX_SPI1_Init+0x74>)
 8003570:	2200      	movs	r2, #0
 8003572:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <MX_SPI1_Init+0x74>)
 8003576:	2200      	movs	r2, #0
 8003578:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <MX_SPI1_Init+0x74>)
 800357c:	2200      	movs	r2, #0
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <MX_SPI1_Init+0x74>)
 8003582:	2207      	movs	r2, #7
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003586:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <MX_SPI1_Init+0x74>)
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <MX_SPI1_Init+0x74>)
 800358e:	2208      	movs	r2, #8
 8003590:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003592:	4805      	ldr	r0, [pc, #20]	; (80035a8 <MX_SPI1_Init+0x74>)
 8003594:	f00c f8ee 	bl	800f774 <HAL_SPI_Init>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800359e:	f000 f93b 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200025e8 	.word	0x200025e8
 80035ac:	40013000 	.word	0x40013000

080035b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035b6:	4b16      	ldr	r3, [pc, #88]	; (8003610 <MX_DMA_Init+0x60>)
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <MX_DMA_Init+0x60>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6153      	str	r3, [r2, #20]
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <MX_DMA_Init+0x60>)
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <MX_DMA_Init+0x60>)
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <MX_DMA_Init+0x60>)
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	6153      	str	r3, [r2, #20]
 80035da:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <MX_DMA_Init+0x60>)
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2105      	movs	r1, #5
 80035ea:	200b      	movs	r0, #11
 80035ec:	f006 fffe 	bl	800a5ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035f0:	200b      	movs	r0, #11
 80035f2:	f007 f817 	bl	800a624 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 80035f6:	2200      	movs	r2, #0
 80035f8:	2105      	movs	r1, #5
 80035fa:	2039      	movs	r0, #57	; 0x39
 80035fc:	f006 fff6 	bl	800a5ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8003600:	2039      	movs	r0, #57	; 0x39
 8003602:	f007 f80f 	bl	800a624 <HAL_NVIC_EnableIRQ>

}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000

08003614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800362a:	4b45      	ldr	r3, [pc, #276]	; (8003740 <MX_GPIO_Init+0x12c>)
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4a44      	ldr	r2, [pc, #272]	; (8003740 <MX_GPIO_Init+0x12c>)
 8003630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003634:	6153      	str	r3, [r2, #20]
 8003636:	4b42      	ldr	r3, [pc, #264]	; (8003740 <MX_GPIO_Init+0x12c>)
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003642:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <MX_GPIO_Init+0x12c>)
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	4a3e      	ldr	r2, [pc, #248]	; (8003740 <MX_GPIO_Init+0x12c>)
 8003648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800364c:	6153      	str	r3, [r2, #20]
 800364e:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <MX_GPIO_Init+0x12c>)
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800365a:	4b39      	ldr	r3, [pc, #228]	; (8003740 <MX_GPIO_Init+0x12c>)
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	4a38      	ldr	r2, [pc, #224]	; (8003740 <MX_GPIO_Init+0x12c>)
 8003660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003664:	6153      	str	r3, [r2, #20]
 8003666:	4b36      	ldr	r3, [pc, #216]	; (8003740 <MX_GPIO_Init+0x12c>)
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003672:	4b33      	ldr	r3, [pc, #204]	; (8003740 <MX_GPIO_Init+0x12c>)
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4a32      	ldr	r2, [pc, #200]	; (8003740 <MX_GPIO_Init+0x12c>)
 8003678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800367c:	6153      	str	r3, [r2, #20]
 800367e:	4b30      	ldr	r3, [pc, #192]	; (8003740 <MX_GPIO_Init+0x12c>)
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTRA1_GPIO_Port, EXTRA1_Pin, GPIO_PIN_RESET);
 800368a:	2200      	movs	r2, #0
 800368c:	2110      	movs	r1, #16
 800368e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003692:	f007 fbed 	bl	800ae70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EXTRA2_Pin|USB_PULLUP_Pin|EXTRA3_Pin, GPIO_PIN_RESET);
 8003696:	2200      	movs	r2, #0
 8003698:	f640 0114 	movw	r1, #2068	; 0x814
 800369c:	4829      	ldr	r0, [pc, #164]	; (8003744 <MX_GPIO_Init+0x130>)
 800369e:	f007 fbe7 	bl	800ae70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTRA1_Pin */
  GPIO_InitStruct.Pin = EXTRA1_Pin;
 80036a2:	2310      	movs	r3, #16
 80036a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a6:	2301      	movs	r3, #1
 80036a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036aa:	2302      	movs	r3, #2
 80036ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA1_GPIO_Port, &GPIO_InitStruct);
 80036b2:	f107 0314 	add.w	r3, r7, #20
 80036b6:	4619      	mov	r1, r3
 80036b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036bc:	f007 fa5e 	bl	800ab7c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA2_Pin EXTRA3_Pin */
  GPIO_InitStruct.Pin = EXTRA2_Pin|EXTRA3_Pin;
 80036c0:	2314      	movs	r3, #20
 80036c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c4:	2301      	movs	r3, #1
 80036c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036c8:	2302      	movs	r3, #2
 80036ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036cc:	2300      	movs	r3, #0
 80036ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	4619      	mov	r1, r3
 80036d6:	481b      	ldr	r0, [pc, #108]	; (8003744 <MX_GPIO_Init+0x130>)
 80036d8:	f007 fa50 	bl	800ab7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80036dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	4619      	mov	r1, r3
 80036f0:	4814      	ldr	r0, [pc, #80]	; (8003744 <MX_GPIO_Init+0x130>)
 80036f2:	f007 fa43 	bl	800ab7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 80036f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003704:	2300      	movs	r3, #0
 8003706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4619      	mov	r1, r3
 800370e:	480d      	ldr	r0, [pc, #52]	; (8003744 <MX_GPIO_Init+0x130>)
 8003710:	f007 fa34 	bl	800ab7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003722:	2300      	movs	r3, #0
 8003724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372a:	f107 0314 	add.w	r3, r7, #20
 800372e:	4619      	mov	r1, r3
 8003730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003734:	f007 fa22 	bl	800ab7c <HAL_GPIO_Init>

}
 8003738:	bf00      	nop
 800373a:	3728      	adds	r7, #40	; 0x28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	48000400 	.word	0x48000400

08003748 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af02      	add	r7, sp, #8
 800374e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  PdmMainTask(&defaultTaskHandle, &hadc1, &hadc4, &hcan, &hrtc, &hcrc);
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <StartDefaultTask+0x24>)
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <StartDefaultTask+0x28>)
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <StartDefaultTask+0x2c>)
 800375a:	4a07      	ldr	r2, [pc, #28]	; (8003778 <StartDefaultTask+0x30>)
 800375c:	4907      	ldr	r1, [pc, #28]	; (800377c <StartDefaultTask+0x34>)
 800375e:	4808      	ldr	r0, [pc, #32]	; (8003780 <StartDefaultTask+0x38>)
 8003760:	f7fd fb9a 	bl	8000e98 <PdmMainTask>
  /* USER CODE END 5 */
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	2000250c 	.word	0x2000250c
 8003770:	200025c8 	.word	0x200025c8
 8003774:	200024e4 	.word	0x200024e4
 8003778:	2000240c 	.word	0x2000240c
 800377c:	200023bc 	.word	0x200023bc
 8003780:	2000264c 	.word	0x2000264c

08003784 <StartI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  I2CTask(&i2cTaskHandle, &hi2c1, &hi2c2);
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <StartI2CTask+0x1c>)
 800378e:	4905      	ldr	r1, [pc, #20]	; (80037a4 <StartI2CTask+0x20>)
 8003790:	4805      	ldr	r0, [pc, #20]	; (80037a8 <StartI2CTask+0x24>)
 8003792:	f7fd fdf3 	bl	800137c <I2CTask>
  /* USER CODE END StartI2CTask */
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	2000257c 	.word	0x2000257c
 80037a4:	20002530 	.word	0x20002530
 80037a8:	20002650 	.word	0x20002650

080037ac <StartProfetSMTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProfetSMTask */
void StartProfetSMTask(void *argument)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProfetSMTask */
  ProfetSMTask(&profetSMTaskHandle, &hi2c2, &hrtc);
 80037b4:	4a04      	ldr	r2, [pc, #16]	; (80037c8 <StartProfetSMTask+0x1c>)
 80037b6:	4905      	ldr	r1, [pc, #20]	; (80037cc <StartProfetSMTask+0x20>)
 80037b8:	4805      	ldr	r0, [pc, #20]	; (80037d0 <StartProfetSMTask+0x24>)
 80037ba:	f7fe f87d 	bl	80018b8 <ProfetSMTask>
  /* USER CODE END StartProfetSMTask */
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	200025c8 	.word	0x200025c8
 80037cc:	2000257c 	.word	0x2000257c
 80037d0:	20002654 	.word	0x20002654

080037d4 <StartCanTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanTxTask */
  /* Infinite loop */
  CanTxTask(&canTxTaskHandle, &hcan);
 80037dc:	4903      	ldr	r1, [pc, #12]	; (80037ec <StartCanTxTask+0x18>)
 80037de:	4804      	ldr	r0, [pc, #16]	; (80037f0 <StartCanTxTask+0x1c>)
 80037e0:	f7fe fc5a 	bl	8002098 <CanTxTask>
  /* USER CODE END StartCanTxTask */
}
 80037e4:	bf00      	nop
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	200024e4 	.word	0x200024e4
 80037f0:	20002658 	.word	0x20002658

080037f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003806:	f004 ffa5 	bl	8008754 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40001000 	.word	0x40001000

08003818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __NOP();
 800381c:	bf00      	nop
  /* USER CODE END Error_Handler_Debug */
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <PdmConfig_Read>:
static uint8_t nOutNum;
static uint8_t nVirtInNum;
static uint8_t nFlasherNum;
static uint8_t nCanInputNum;

uint8_t PdmConfig_Read(I2C_HandleTypeDef* hi2c, uint8_t nAddr, PdmConfig_t* pConfig){
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	460b      	mov	r3, r1
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	72fb      	strb	r3, [r7, #11]
  //Verifty that FRAM is communicating
  if(MB85RC_CheckId(hi2c, nAddr) != MB85RC_OK){
 8003836:	7afb      	ldrb	r3, [r7, #11]
 8003838:	4619      	mov	r1, r3
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f003 fade 	bl	8006dfc <MB85RC_CheckId>
 8003840:	4603      	mov	r3, r0
 8003842:	2b01      	cmp	r3, #1
 8003844:	d001      	beq.n	800384a <PdmConfig_Read+0x22>
      return 0;
 8003846:	2300      	movs	r3, #0
 8003848:	e009      	b.n	800385e <PdmConfig_Read+0x36>
  }

  //Takes approx. 60ms to read entire struct
  MB85RC_Read(hi2c, nAddr, 0x0, (uint8_t*)pConfig, sizeof(*pConfig));
 800384a:	7af9      	ldrb	r1, [r7, #11]
 800384c:	f640 03d4 	movw	r3, #2260	; 0x8d4
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f003 faee 	bl	8006e38 <MB85RC_Read>

  return 1;
 800385c:	2301      	movs	r3, #1
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <PdmConfig_Write>:

uint8_t PdmConfig_Write(I2C_HandleTypeDef* hi2c, uint8_t nAddr, PdmConfig_t* pConfig){
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af02      	add	r7, sp, #8
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	460b      	mov	r3, r1
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	72fb      	strb	r3, [r7, #11]
  //Verifty that FRAM is communicating
  if(MB85RC_CheckId(hi2c, nAddr) != MB85RC_OK){
 8003874:	7afb      	ldrb	r3, [r7, #11]
 8003876:	4619      	mov	r1, r3
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f003 fabf 	bl	8006dfc <MB85RC_CheckId>
 800387e:	4603      	mov	r3, r0
 8003880:	2b01      	cmp	r3, #1
 8003882:	d001      	beq.n	8003888 <PdmConfig_Write+0x22>
      return 0;
 8003884:	2300      	movs	r3, #0
 8003886:	e009      	b.n	800389c <PdmConfig_Write+0x36>
  }

  MB85RC_Write(hi2c, nAddr, 0x0, (uint8_t*)pConfig, sizeof(*pConfig));
 8003888:	7af9      	ldrb	r1, [r7, #11]
 800388a:	f640 03d4 	movw	r3, #2260	; 0x8d4
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f003 faec 	bl	8006e72 <MB85RC_Write>

  return 1;
 800389a:	2301      	movs	r3, #1
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <PdmConfig_Set>:

uint8_t PdmConfig_Set(PdmConfig_t* pConfig, MsgQueueRx_t* stMsgRx, osMessageQueueId_t* qMsgQueueUsbTx, osMessageQueueId_t* qMsgQueueCanTx){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]

  nSend = 0;
 80038b2:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <PdmConfig_Set+0x1b8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]

  switch((MsgQueueRxCmd_t)stMsgRx->nRxData[0]){
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038be:	3b43      	subs	r3, #67	; 0x43
 80038c0:	2b16      	cmp	r3, #22
 80038c2:	f201 82f2 	bhi.w	8004eaa <PdmConfig_Set+0x1606>
 80038c6:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <PdmConfig_Set+0x28>)
 80038c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038cc:	08003929 	.word	0x08003929
 80038d0:	0800495d 	.word	0x0800495d
 80038d4:	08004eab 	.word	0x08004eab
 80038d8:	08004eab 	.word	0x08004eab
 80038dc:	08004eab 	.word	0x08004eab
 80038e0:	080046f1 	.word	0x080046f1
 80038e4:	08003a6d 	.word	0x08003a6d
 80038e8:	08004eab 	.word	0x08004eab
 80038ec:	08004eab 	.word	0x08004eab
 80038f0:	08003a4f 	.word	0x08003a4f
 80038f4:	08004eab 	.word	0x08004eab
 80038f8:	08004bd1 	.word	0x08004bd1
 80038fc:	08003c05 	.word	0x08003c05
 8003900:	080043a9 	.word	0x080043a9
 8003904:	08004eab 	.word	0x08004eab
 8003908:	08004eab 	.word	0x08004eab
 800390c:	08004eab 	.word	0x08004eab
 8003910:	08004eab 	.word	0x08004eab
 8003914:	08003f11 	.word	0x08003f11
 8003918:	08004e5d 	.word	0x08004e5d
 800391c:	0800423b 	.word	0x0800423b
 8003920:	08004eab 	.word	0x08004eab
 8003924:	0800454b 	.word	0x0800454b

    //Set CAN Settings
    // 'C'
    case MSG_RX_SET_CAN:
      if(stMsgRx->nRxLen == 5){
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800392e:	2b05      	cmp	r3, #5
 8003930:	d13c      	bne.n	80039ac <PdmConfig_Set+0x108>

        pConfig->stDevConfig.nCanEnabled = stMsgRx->nRxData[1] & 0x01;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	705a      	strb	r2, [r3, #1]
        pConfig->stCanOutput.nEnabled = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003948:	105b      	asrs	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
        pConfig->stDevConfig.nCanSpeed = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	b2da      	uxtb	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	709a      	strb	r2, [r3, #2]

        pConfig->stCanOutput.nBaseId = (stMsgRx->nRxData[2] << 8) + stMsgRx->nRxData[3];
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800396c:	b29b      	uxth	r3, r3
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	b29a      	uxth	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003978:	b29b      	uxth	r3, r3
 800397a:	4413      	add	r3, r2
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f8a3 28ce 	strh.w	r2, [r3, #2254]	; 0x8ce
        pConfig->stCanOutput.nUpdateTime = stMsgRx->nRxData[4] * 100;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	0092      	lsls	r2, r2, #2
 8003990:	4413      	add	r3, r2
 8003992:	461a      	mov	r2, r3
 8003994:	0091      	lsls	r1, r2, #2
 8003996:	461a      	mov	r2, r3
 8003998:	460b      	mov	r3, r1
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8a3 28d0 	strh.w	r2, [r3, #2256]	; 0x8d0
        nSend = 1;
 80039a6:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <PdmConfig_Set+0x1b8>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || (nSend)){
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d004      	beq.n	80039c0 <PdmConfig_Set+0x11c>
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <PdmConfig_Set+0x1b8>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f001 8277 	beq.w	8004eae <PdmConfig_Set+0x160a>
        stMsgUsbTx.nTxLen = 5;
 80039c0:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <PdmConfig_Set+0x1bc>)
 80039c2:	2205      	movs	r2, #5
 80039c4:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 80039c6:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <PdmConfig_Set+0x1c0>)
 80039c8:	2205      	movs	r2, #5
 80039ca:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN;
 80039cc:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <PdmConfig_Set+0x1bc>)
 80039ce:	2263      	movs	r2, #99	; 0x63
 80039d0:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stDevConfig.nCanSpeed & 0x0F) << 4) + ((pConfig->stCanOutput.nEnabled & 0x01) << 1) + (pConfig->stDevConfig.nCanEnabled & 0x01);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	789b      	ldrb	r3, [r3, #2]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 38cc 	ldrb.w	r3, [r3, #2252]	; 0x8cc
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	785b      	ldrb	r3, [r3, #1]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <PdmConfig_Set+0x1bc>)
 80039fe:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)((pConfig->stCanOutput.nBaseId & 0xFF00) >> 8);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <PdmConfig_Set+0x1bc>)
 8003a0e:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanOutput.nBaseId & 0x00FF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <PdmConfig_Set+0x1bc>)
 8003a1a:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)((pConfig->stCanOutput.nUpdateTime) / 100);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
 8003a22:	4a11      	ldr	r2, [pc, #68]	; (8003a68 <PdmConfig_Set+0x1c4>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <PdmConfig_Set+0x1bc>)
 8003a30:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <PdmConfig_Set+0x1bc>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <PdmConfig_Set+0x1bc>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <PdmConfig_Set+0x1bc>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <PdmConfig_Set+0x1b8>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
      }
    break;
 8003a4a:	f001 ba30 	b.w	8004eae <PdmConfig_Set+0x160a>
    // 'L'
    case MSG_RX_SET_LOGGING:
      if(stMsgRx->nRxLen == 3){
        //TODO:Send response
      }
      if((stMsgRx->nRxLen == 1) || (nSend)){
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a54:	2b01      	cmp	r3, #1

      }
    break;
 8003a56:	f001 ba48 	b.w	8004eea <PdmConfig_Set+0x1646>
 8003a5a:	bf00      	nop
 8003a5c:	20002688 	.word	0x20002688
 8003a60:	2000265c 	.word	0x2000265c
 8003a64:	20002668 	.word	0x20002668
 8003a68:	51eb851f 	.word	0x51eb851f

    //Set Input Settings
    // 'I'
    case MSG_RX_SET_INPUTS:
      if(stMsgRx->nRxLen == 3){
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d14e      	bne.n	8003b14 <PdmConfig_Set+0x270>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	4b5b      	ldr	r3, [pc, #364]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003a82:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 8003a84:	4b5a      	ldr	r3, [pc, #360]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d843      	bhi.n	8003b14 <PdmConfig_Set+0x270>
          pConfig->stInput[nInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a92:	4a57      	ldr	r2, [pc, #348]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	4611      	mov	r1, r2
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	b2d8      	uxtb	r0, r3
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	1a5b      	subs	r3, r3, r1
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3308      	adds	r3, #8
 8003aac:	4602      	mov	r2, r0
 8003aae:	701a      	strb	r2, [r3, #0]
          pConfig->stInput[nInNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ab6:	105b      	asrs	r3, r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	4a4d      	ldr	r2, [pc, #308]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003abc:	7812      	ldrb	r2, [r2, #0]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	b2d8      	uxtb	r0, r3
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	1a5b      	subs	r3, r3, r1
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3310      	adds	r3, #16
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	701a      	strb	r2, [r3, #0]
          //TODO:Include binary on level on V3 PCB
          //pConfig->stInput[nInNum].nOnLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
          pConfig->stInput[nInNum].nDebounceTime = stMsgRx->nRxData[2] * 100;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	461a      	mov	r2, r3
 8003af0:	0090      	lsls	r0, r2, #2
 8003af2:	461a      	mov	r2, r3
 8003af4:	4603      	mov	r3, r0
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	b298      	uxth	r0, r3
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	460b      	mov	r3, r1
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	1a5b      	subs	r3, r3, r1
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	3322      	adds	r3, #34	; 0x22
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8003b0e:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <PdmConfig_Set+0x350>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d10d      	bne.n	8003b3a <PdmConfig_Set+0x296>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003b2a:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 8003b2c:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d802      	bhi.n	8003b3a <PdmConfig_Set+0x296>
          nSend = 1;
 8003b34:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <PdmConfig_Set+0x350>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8003b3a:	4b2e      	ldr	r3, [pc, #184]	; (8003bf4 <PdmConfig_Set+0x350>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f001 81b7 	beq.w	8004eb2 <PdmConfig_Set+0x160e>
        stMsgUsbTx.nTxLen = 3;
 8003b44:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <PdmConfig_Set+0x354>)
 8003b46:	2203      	movs	r2, #3
 8003b48:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 3;
 8003b4a:	4b2c      	ldr	r3, [pc, #176]	; (8003bfc <PdmConfig_Set+0x358>)
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_INPUTS;
 8003b50:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <PdmConfig_Set+0x354>)
 8003b52:	2269      	movs	r2, #105	; 0x69
 8003b54:	701a      	strb	r2, [r3, #0]
        //TODO:Add binary On Level on V3 PCB
        stMsgUsbTx.nTxData[1] = ((nInNum & 0x0F) << 4) + ((pConfig->stInput[nInNum].eMode & 0x03) << 2) + (pConfig->stInput[nInNum].nEnabled & 0x01);
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	68f9      	ldr	r1, [r7, #12]
 8003b66:	4603      	mov	r3, r0
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	1a1b      	subs	r3, r3, r0
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	3310      	adds	r3, #16
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	1a1b      	subs	r3, r3, r0
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	3308      	adds	r3, #8
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <PdmConfig_Set+0x354>)
 8003ba4:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stInput[nInNum].nDebounceTime / 100);
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <PdmConfig_Set+0x34c>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	4619      	mov	r1, r3
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	1a5b      	subs	r3, r3, r1
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3322      	adds	r3, #34	; 0x22
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <PdmConfig_Set+0x35c>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <PdmConfig_Set+0x354>)
 8003bca:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = 0;
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <PdmConfig_Set+0x354>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = 0;
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <PdmConfig_Set+0x354>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <PdmConfig_Set+0x354>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <PdmConfig_Set+0x354>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <PdmConfig_Set+0x354>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	71da      	strb	r2, [r3, #7]
      }

    break;
 8003bea:	f001 b962 	b.w	8004eb2 <PdmConfig_Set+0x160e>
 8003bee:	bf00      	nop
 8003bf0:	20002689 	.word	0x20002689
 8003bf4:	20002688 	.word	0x20002688
 8003bf8:	2000265c 	.word	0x2000265c
 8003bfc:	20002668 	.word	0x20002668
 8003c00:	51eb851f 	.word	0x51eb851f

    //Set Output Settings
    // 'O'
    case MSG_RX_SET_OUTPUTS:
      if(stMsgRx->nRxLen == 8){
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	f040 80bb 	bne.w	8003d86 <PdmConfig_Set+0x4e2>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	4bb7      	ldr	r3, [pc, #732]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003c1c:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8003c1e:	4bb6      	ldr	r3, [pc, #728]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b0b      	cmp	r3, #11
 8003c24:	f200 80af 	bhi.w	8003d86 <PdmConfig_Set+0x4e2>
          pConfig->stOutput[nOutNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c2e:	4ab2      	ldr	r2, [pc, #712]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	4611      	mov	r1, r2
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	b2d8      	uxtb	r0, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	440b      	add	r3, r1
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInput = stMsgRx->nRxData[2];
 8003c4e:	4baa      	ldr	r3, [pc, #680]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	4619      	mov	r1, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	440b      	add	r3, r1
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	f203 33d1 	addw	r3, r3, #977	; 0x3d1
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nCurrentLimit = stMsgRx->nRxData[3] / 10;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003c74:	4aa1      	ldr	r2, [pc, #644]	; (8003efc <PdmConfig_Set+0x658>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4b9e      	ldr	r3, [pc, #632]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	4619      	mov	r1, r3
 8003c84:	b290      	uxth	r0, r2
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	440b      	add	r3, r1
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	f203 33da 	addw	r3, r3, #986	; 0x3da
 8003c96:	4602      	mov	r2, r0
 8003c98:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].eResetMode = (stMsgRx->nRxData[4] & 0x0F);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ca0:	4a95      	ldr	r2, [pc, #596]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003ca2:	7812      	ldrb	r2, [r2, #0]
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	b2d8      	uxtb	r0, r3
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	440b      	add	r3, r1
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetLimit = (stMsgRx->nRxData[4] & 0xF0) >> 4;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cc6:	4a8c      	ldr	r2, [pc, #560]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	b2d8      	uxtb	r0, r3
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	440b      	add	r3, r1
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetTime = stMsgRx->nRxData[5] * 100;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	4b82      	ldr	r3, [pc, #520]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	0092      	lsls	r2, r2, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	0090      	lsls	r0, r2, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4603      	mov	r3, r0
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	b298      	uxth	r0, r3
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	440b      	add	r3, r1
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	f203 33e2 	addw	r3, r3, #994	; 0x3e2
 8003d18:	4602      	mov	r2, r0
 8003d1a:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushLimit = stMsgRx->nRxData[6] / 10;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003d22:	4a76      	ldr	r2, [pc, #472]	; (8003efc <PdmConfig_Set+0x658>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	4b72      	ldr	r3, [pc, #456]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	4619      	mov	r1, r3
 8003d32:	b290      	uxth	r0, r2
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	460b      	mov	r3, r1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	440b      	add	r3, r1
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8003d44:	4602      	mov	r2, r0
 8003d46:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushTime = stMsgRx->nRxData[7] * 100;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	4b69      	ldr	r3, [pc, #420]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	4613      	mov	r3, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	0092      	lsls	r2, r2, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	461a      	mov	r2, r3
 8003d60:	0090      	lsls	r0, r2, #2
 8003d62:	461a      	mov	r2, r3
 8003d64:	4603      	mov	r3, r0
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	b298      	uxth	r0, r3
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	440b      	add	r3, r1
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	f203 33de 	addw	r3, r3, #990	; 0x3de
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8003d80:	4b5f      	ldr	r3, [pc, #380]	; (8003f00 <PdmConfig_Set+0x65c>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d10d      	bne.n	8003dac <PdmConfig_Set+0x508>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4b57      	ldr	r3, [pc, #348]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003d9c:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8003d9e:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b0b      	cmp	r3, #11
 8003da4:	d802      	bhi.n	8003dac <PdmConfig_Set+0x508>
          nSend = 1;
 8003da6:	4b56      	ldr	r3, [pc, #344]	; (8003f00 <PdmConfig_Set+0x65c>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8003dac:	4b54      	ldr	r3, [pc, #336]	; (8003f00 <PdmConfig_Set+0x65c>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f001 8080 	beq.w	8004eb6 <PdmConfig_Set+0x1612>
        stMsgUsbTx.nTxLen = 8;
 8003db6:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <PdmConfig_Set+0x660>)
 8003db8:	2208      	movs	r2, #8
 8003dba:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 8003dbc:	4b52      	ldr	r3, [pc, #328]	; (8003f08 <PdmConfig_Set+0x664>)
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_OUTPUTS;
 8003dc2:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <PdmConfig_Set+0x660>)
 8003dc4:	226f      	movs	r2, #111	; 0x6f
 8003dc6:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nOutNum & 0x0F) << 4) + (pConfig->stOutput[nOutNum].nEnabled & 0x01);
 8003dc8:	4b4b      	ldr	r3, [pc, #300]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	4603      	mov	r3, r0
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	4403      	add	r3, r0
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	440b      	add	r3, r1
 8003de2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	4b44      	ldr	r3, [pc, #272]	; (8003f04 <PdmConfig_Set+0x660>)
 8003df4:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stOutput[nOutNum].nInput;
 8003df6:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	440b      	add	r3, r1
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	f203 33d1 	addw	r3, r3, #977	; 0x3d1
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <PdmConfig_Set+0x660>)
 8003e10:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stOutput[nOutNum].nCurrentLimit * 10);
 8003e12:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	4619      	mov	r1, r3
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	440b      	add	r3, r1
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	f203 33da 	addw	r3, r3, #986	; 0x3da
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	0092      	lsls	r2, r2, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <PdmConfig_Set+0x660>)
 8003e38:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stOutput[nOutNum].nResetLimit & 0x0F) << 4) + (pConfig->stOutput[nOutNum].eResetMode & 0x0F);
 8003e3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	460b      	mov	r3, r1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	440b      	add	r3, r1
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	4603      	mov	r3, r0
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	4403      	add	r3, r0
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	440b      	add	r3, r1
 8003e68:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <PdmConfig_Set+0x660>)
 8003e7a:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stOutput[nOutNum].nResetTime / 100);
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	4619      	mov	r1, r3
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	460b      	mov	r3, r1
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	440b      	add	r3, r1
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f203 33e2 	addw	r3, r3, #994	; 0x3e2
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <PdmConfig_Set+0x668>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <PdmConfig_Set+0x660>)
 8003ea2:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushLimit * 10);
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	460b      	mov	r3, r1
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	440b      	add	r3, r1
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	0092      	lsls	r2, r2, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <PdmConfig_Set+0x660>)
 8003eca:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushTime / 100);
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <PdmConfig_Set+0x654>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	440b      	add	r3, r1
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	f203 33de 	addw	r3, r3, #990	; 0x3de
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <PdmConfig_Set+0x668>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <PdmConfig_Set+0x660>)
 8003ef2:	71da      	strb	r2, [r3, #7]
      }
    break;
 8003ef4:	f000 bfdf 	b.w	8004eb6 <PdmConfig_Set+0x1612>
 8003ef8:	2000268a 	.word	0x2000268a
 8003efc:	cccccccd 	.word	0xcccccccd
 8003f00:	20002688 	.word	0x20002688
 8003f04:	2000265c 	.word	0x2000265c
 8003f08:	20002668 	.word	0x20002668
 8003f0c:	51eb851f 	.word	0x51eb851f

    //Set Virtual Input Settings
    // 'U'
    case MSG_RX_SET_VIRTUAL_INPUTS:
      if(stMsgRx->nRxLen == 7){
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f16:	2b07      	cmp	r3, #7
 8003f18:	f040 80bf 	bne.w	800409a <PdmConfig_Set+0x7f6>
        nVirtInNum = (stMsgRx->nRxData[2]);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003f22:	4bbb      	ldr	r3, [pc, #748]	; (8004210 <PdmConfig_Set+0x96c>)
 8003f24:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8003f26:	4bba      	ldr	r3, [pc, #744]	; (8004210 <PdmConfig_Set+0x96c>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b13      	cmp	r3, #19
 8003f2c:	f200 80b5 	bhi.w	800409a <PdmConfig_Set+0x7f6>
          pConfig->stVirtualInput[nVirtInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f36:	4ab6      	ldr	r2, [pc, #728]	; (8004210 <PdmConfig_Set+0x96c>)
 8003f38:	7812      	ldrb	r2, [r2, #0]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	b2d8      	uxtb	r0, r3
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	460b      	mov	r3, r1
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	33b0      	adds	r3, #176	; 0xb0
 8003f50:	4602      	mov	r2, r0
 8003f52:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot0 = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f5a:	105b      	asrs	r3, r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4aac      	ldr	r2, [pc, #688]	; (8004210 <PdmConfig_Set+0x96c>)
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	4611      	mov	r1, r2
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	b2d8      	uxtb	r0, r3
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	33b1      	adds	r3, #177	; 0xb1
 8003f78:	4602      	mov	r2, r0
 8003f7a:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot1 = (stMsgRx->nRxData[1] & 0x04) >> 2;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f82:	109b      	asrs	r3, r3, #2
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4aa2      	ldr	r2, [pc, #648]	; (8004210 <PdmConfig_Set+0x96c>)
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	b2d8      	uxtb	r0, r3
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	460b      	mov	r3, r1
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	33b9      	adds	r3, #185	; 0xb9
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot2 = (stMsgRx->nRxData[1] & 0x08) >> 3;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003faa:	10db      	asrs	r3, r3, #3
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	4a98      	ldr	r2, [pc, #608]	; (8004210 <PdmConfig_Set+0x96c>)
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	b2d8      	uxtb	r0, r3
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	33c1      	adds	r3, #193	; 0xc1
 8003fc8:	4602      	mov	r2, r0
 8003fca:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].nVar0 = stMsgRx->nRxData[3];
 8003fcc:	4b90      	ldr	r3, [pc, #576]	; (8004210 <PdmConfig_Set+0x96c>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	33b2      	adds	r3, #178	; 0xb2
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar1 = stMsgRx->nRxData[4];
 8003fea:	4b89      	ldr	r3, [pc, #548]	; (8004210 <PdmConfig_Set+0x96c>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	33ba      	adds	r3, #186	; 0xba
 8004004:	4602      	mov	r2, r0
 8004006:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar2 = stMsgRx->nRxData[5];
 8004008:	4b81      	ldr	r3, [pc, #516]	; (8004210 <PdmConfig_Set+0x96c>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	4619      	mov	r1, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	460b      	mov	r3, r1
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	33c2      	adds	r3, #194	; 0xc2
 8004022:	4602      	mov	r2, r0
 8004024:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].eCond0 = (stMsgRx->nRxData[6] & 0x03);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800402c:	4a78      	ldr	r2, [pc, #480]	; (8004210 <PdmConfig_Set+0x96c>)
 800402e:	7812      	ldrb	r2, [r2, #0]
 8004030:	4611      	mov	r1, r2
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	b2d8      	uxtb	r0, r3
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	460b      	mov	r3, r1
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	33b8      	adds	r3, #184	; 0xb8
 8004046:	4602      	mov	r2, r0
 8004048:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eCond1 = (stMsgRx->nRxData[6] & 0x0C) >> 2;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004050:	109b      	asrs	r3, r3, #2
 8004052:	b2db      	uxtb	r3, r3
 8004054:	4a6e      	ldr	r2, [pc, #440]	; (8004210 <PdmConfig_Set+0x96c>)
 8004056:	7812      	ldrb	r2, [r2, #0]
 8004058:	4611      	mov	r1, r2
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	b2d8      	uxtb	r0, r3
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	460b      	mov	r3, r1
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	33c0      	adds	r3, #192	; 0xc0
 800406e:	4602      	mov	r2, r0
 8004070:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eMode = (stMsgRx->nRxData[6] & 0xC0) >> 6;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004078:	4a65      	ldr	r2, [pc, #404]	; (8004210 <PdmConfig_Set+0x96c>)
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	4611      	mov	r1, r2
 800407e:	099b      	lsrs	r3, r3, #6
 8004080:	b2d8      	uxtb	r0, r3
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	460b      	mov	r3, r1
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	33c8      	adds	r3, #200	; 0xc8
 8004090:	4602      	mov	r2, r0
 8004092:	701a      	strb	r2, [r3, #0]
          nSend = 1;
 8004094:	4b5f      	ldr	r3, [pc, #380]	; (8004214 <PdmConfig_Set+0x970>)
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d10b      	bne.n	80040bc <PdmConfig_Set+0x818>
        nVirtInNum = (stMsgRx->nRxData[1]);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80040aa:	4b59      	ldr	r3, [pc, #356]	; (8004210 <PdmConfig_Set+0x96c>)
 80040ac:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 80040ae:	4b58      	ldr	r3, [pc, #352]	; (8004210 <PdmConfig_Set+0x96c>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b13      	cmp	r3, #19
 80040b4:	d802      	bhi.n	80040bc <PdmConfig_Set+0x818>
          nSend = 1;
 80040b6:	4b57      	ldr	r3, [pc, #348]	; (8004214 <PdmConfig_Set+0x970>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 80040bc:	4b55      	ldr	r3, [pc, #340]	; (8004214 <PdmConfig_Set+0x970>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8703 	beq.w	8004ecc <PdmConfig_Set+0x1628>
        stMsgUsbTx.nTxLen = 7;
 80040c6:	4b54      	ldr	r3, [pc, #336]	; (8004218 <PdmConfig_Set+0x974>)
 80040c8:	2207      	movs	r2, #7
 80040ca:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 80040cc:	4b53      	ldr	r3, [pc, #332]	; (800421c <PdmConfig_Set+0x978>)
 80040ce:	2207      	movs	r2, #7
 80040d0:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_VIRTUAL_INPUTS;
 80040d2:	4b51      	ldr	r3, [pc, #324]	; (8004218 <PdmConfig_Set+0x974>)
 80040d4:	2275      	movs	r2, #117	; 0x75
 80040d6:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 80040d8:	4b4d      	ldr	r3, [pc, #308]	; (8004210 <PdmConfig_Set+0x96c>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	4619      	mov	r1, r3
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	460b      	mov	r3, r1
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	33c1      	adds	r3, #193	; 0xc1
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	b25a      	sxtb	r2, r3
 80040f8:	4b45      	ldr	r3, [pc, #276]	; (8004210 <PdmConfig_Set+0x96c>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	4603      	mov	r3, r0
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4403      	add	r3, r0
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	440b      	add	r3, r1
 800410a:	33b9      	adds	r3, #185	; 0xb9
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	b25b      	sxtb	r3, r3
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	b25b      	sxtb	r3, r3
 8004118:	4313      	orrs	r3, r2
 800411a:	b25b      	sxtb	r3, r3
 800411c:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 800411e:	4b3c      	ldr	r3, [pc, #240]	; (8004210 <PdmConfig_Set+0x96c>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	68f9      	ldr	r1, [r7, #12]
 8004126:	4603      	mov	r3, r0
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	440b      	add	r3, r1
 8004130:	33b1      	adds	r3, #177	; 0xb1
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 800413e:	4413      	add	r3, r2
 8004140:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 8004142:	4b33      	ldr	r3, [pc, #204]	; (8004210 <PdmConfig_Set+0x96c>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	68f9      	ldr	r1, [r7, #12]
 800414a:	4603      	mov	r3, r0
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4403      	add	r3, r0
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	440b      	add	r3, r1
 8004154:	33b0      	adds	r3, #176	; 0xb0
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	4413      	add	r3, r2
 8004160:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8004162:	4b2d      	ldr	r3, [pc, #180]	; (8004218 <PdmConfig_Set+0x974>)
 8004164:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = nVirtInNum;
 8004166:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <PdmConfig_Set+0x96c>)
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <PdmConfig_Set+0x974>)
 800416c:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stVirtualInput[nVirtInNum].nVar0;
 800416e:	4b28      	ldr	r3, [pc, #160]	; (8004210 <PdmConfig_Set+0x96c>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	4619      	mov	r1, r3
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	460b      	mov	r3, r1
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	33b2      	adds	r3, #178	; 0xb2
 8004182:	781a      	ldrb	r2, [r3, #0]
 8004184:	4b24      	ldr	r3, [pc, #144]	; (8004218 <PdmConfig_Set+0x974>)
 8004186:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stVirtualInput[nVirtInNum].nVar1;
 8004188:	4b21      	ldr	r3, [pc, #132]	; (8004210 <PdmConfig_Set+0x96c>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	4619      	mov	r1, r3
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	460b      	mov	r3, r1
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	33ba      	adds	r3, #186	; 0xba
 800419c:	781a      	ldrb	r2, [r3, #0]
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <PdmConfig_Set+0x974>)
 80041a0:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stVirtualInput[nVirtInNum].nVar2;
 80041a2:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <PdmConfig_Set+0x96c>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	460b      	mov	r3, r1
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4413      	add	r3, r2
 80041b4:	33c2      	adds	r3, #194	; 0xc2
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	4b17      	ldr	r3, [pc, #92]	; (8004218 <PdmConfig_Set+0x974>)
 80041ba:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 80041bc:	4b14      	ldr	r3, [pc, #80]	; (8004210 <PdmConfig_Set+0x96c>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4619      	mov	r1, r3
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	460b      	mov	r3, r1
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4413      	add	r3, r2
 80041ce:	33c8      	adds	r3, #200	; 0xc8
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <PdmConfig_Set+0x96c>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	68f9      	ldr	r1, [r7, #12]
 80041de:	4603      	mov	r3, r0
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4403      	add	r3, r0
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	440b      	add	r3, r1
 80041e8:	33b8      	adds	r3, #184	; 0xb8
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 030c 	and.w	r3, r3, #12
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	b2da      	uxtb	r2, r3
                                (pConfig->stVirtualInput[nVirtInNum].eCond1 & 0x03);
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <PdmConfig_Set+0x96c>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	68f9      	ldr	r1, [r7, #12]
 8004202:	4603      	mov	r3, r0
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4403      	add	r3, r0
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	440b      	add	r3, r1
 800420c:	33c0      	adds	r3, #192	; 0xc0
 800420e:	e007      	b.n	8004220 <PdmConfig_Set+0x97c>
 8004210:	2000268b 	.word	0x2000268b
 8004214:	20002688 	.word	0x20002688
 8004218:	2000265c 	.word	0x2000265c
 800421c:	20002668 	.word	0x20002668
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 8004228:	4413      	add	r3, r2
 800422a:	b2da      	uxtb	r2, r3
 800422c:	4b5b      	ldr	r3, [pc, #364]	; (800439c <PdmConfig_Set+0xaf8>)
 800422e:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004230:	4b5a      	ldr	r3, [pc, #360]	; (800439c <PdmConfig_Set+0xaf8>)
 8004232:	2200      	movs	r2, #0
 8004234:	71da      	strb	r2, [r3, #7]
      }
    break;
 8004236:	f000 be49 	b.w	8004ecc <PdmConfig_Set+0x1628>

    //Set Wiper Settings
    // 'W'
    case MSG_RX_SET_WIPER:
      if(stMsgRx->nRxLen == 8){
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004240:	2b08      	cmp	r3, #8
 8004242:	d152      	bne.n	80042ea <PdmConfig_Set+0xa46>
        pConfig->stWiper.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	b2da      	uxtb	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
        pConfig->stWiper.nMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800425c:	105b      	asrs	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	b2da      	uxtb	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
        pConfig->stWiper.nParkStopLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004272:	10db      	asrs	r3, r3, #3
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
        pConfig->stWiper.nWashWipeCycles = (stMsgRx->nRxData[1] * 0xF0) >> 4;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004288:	461a      	mov	r2, r3
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	111b      	asrs	r3, r3, #4
 8004294:	b2da      	uxtb	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb

        pConfig->stWiper.nSlowInput = stMsgRx->nRxData[2];
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2

        pConfig->stWiper.nFastInput = stMsgRx->nRxData[3];
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3

        pConfig->stWiper.nInterInput = stMsgRx->nRxData[4];
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

        pConfig->stWiper.nOnInput = stMsgRx->nRxData[5];
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f883 24f5 	strb.w	r2, [r3, #1269]	; 0x4f5

        pConfig->stWiper.nParkInput = stMsgRx->nRxData[6];
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7

        pConfig->stWiper.nWashInput = stMsgRx->nRxData[7];
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
        nSend = 1;
 80042e4:	4b2e      	ldr	r3, [pc, #184]	; (80043a0 <PdmConfig_Set+0xafc>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d004      	beq.n	80042fe <PdmConfig_Set+0xa5a>
 80042f4:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <PdmConfig_Set+0xafc>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 85e9 	beq.w	8004ed0 <PdmConfig_Set+0x162c>
        stMsgUsbTx.nTxLen = 8;
 80042fe:	4b27      	ldr	r3, [pc, #156]	; (800439c <PdmConfig_Set+0xaf8>)
 8004300:	2208      	movs	r2, #8
 8004302:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 8004304:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <PdmConfig_Set+0xb00>)
 8004306:	2208      	movs	r2, #8
 8004308:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER;
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <PdmConfig_Set+0xaf8>)
 800430c:	2277      	movs	r2, #119	; 0x77
 800430e:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 34fb 	ldrb.w	r3, [r3, #1275]	; 0x4fb
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 34f8 	ldrb.w	r3, [r3, #1272]	; 0x4f8
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	b2db      	uxtb	r3, r3
 800432a:	4413      	add	r3, r2
 800432c:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 34f1 	ldrb.w	r3, [r3, #1265]	; 0x4f1
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 800433e:	4413      	add	r3, r2
 8004340:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 34f0 	ldrb.w	r3, [r3, #1264]	; 0x4f0
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	4413      	add	r3, r2
 8004350:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <PdmConfig_Set+0xaf8>)
 8004354:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSlowInput;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 24f2 	ldrb.w	r2, [r3, #1266]	; 0x4f2
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <PdmConfig_Set+0xaf8>)
 800435e:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stWiper.nFastInput;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 24f3 	ldrb.w	r2, [r3, #1267]	; 0x4f3
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <PdmConfig_Set+0xaf8>)
 8004368:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stWiper.nInterInput;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 24f4 	ldrb.w	r2, [r3, #1268]	; 0x4f4
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <PdmConfig_Set+0xaf8>)
 8004372:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stWiper.nOnInput;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 24f5 	ldrb.w	r2, [r3, #1269]	; 0x4f5
 800437a:	4b08      	ldr	r3, [pc, #32]	; (800439c <PdmConfig_Set+0xaf8>)
 800437c:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = pConfig->stWiper.nParkInput;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 24f7 	ldrb.w	r2, [r3, #1271]	; 0x4f7
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <PdmConfig_Set+0xaf8>)
 8004386:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = pConfig->stWiper.nWashInput;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 24fa 	ldrb.w	r2, [r3, #1274]	; 0x4fa
 800438e:	4b03      	ldr	r3, [pc, #12]	; (800439c <PdmConfig_Set+0xaf8>)
 8004390:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8004392:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <PdmConfig_Set+0xafc>)
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004398:	f000 bd9a 	b.w	8004ed0 <PdmConfig_Set+0x162c>
 800439c:	2000265c 	.word	0x2000265c
 80043a0:	20002688 	.word	0x20002688
 80043a4:	20002668 	.word	0x20002668

    //Set Wiper Speed Settings
    // 'P'
    case MSG_RX_SET_WIPER_SPEED:
      if(stMsgRx->nRxLen == 7){
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ae:	2b07      	cmp	r3, #7
 80043b0:	d16a      	bne.n	8004488 <PdmConfig_Set+0xbe4>
        pConfig->stWiper.nSwipeInput = stMsgRx->nRxData[1];
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9

        pConfig->stWiper.nSpeedInput = stMsgRx->nRxData[2];
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6

        pConfig->stWiper.nSpeedMap[0] = (stMsgRx->nRxData[3] * 0x0F);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80043d0:	461a      	mov	r2, r3
 80043d2:	0112      	lsls	r2, r2, #4
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
        pConfig->stWiper.nSpeedMap[1] = (stMsgRx->nRxData[3] * 0xF0) >> 4;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80043e4:	461a      	mov	r2, r3
 80043e6:	4613      	mov	r3, r2
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	111b      	asrs	r3, r3, #4
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd

        pConfig->stWiper.nSpeedMap[2] = (stMsgRx->nRxData[4] * 0x0F);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043fe:	461a      	mov	r2, r3
 8004400:	0112      	lsls	r2, r2, #4
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
        pConfig->stWiper.nSpeedMap[3] = (stMsgRx->nRxData[4] * 0xF0) >> 4;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004412:	461a      	mov	r2, r3
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	111b      	asrs	r3, r3, #4
 800441e:	b2da      	uxtb	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff

        pConfig->stWiper.nSpeedMap[4] = (stMsgRx->nRxData[5] * 0x0F);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800442c:	461a      	mov	r2, r3
 800442e:	0112      	lsls	r2, r2, #4
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
        pConfig->stWiper.nSpeedMap[5] = (stMsgRx->nRxData[5] * 0xF0) >> 4;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004440:	461a      	mov	r2, r3
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	111b      	asrs	r3, r3, #4
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501

        pConfig->stWiper.nSpeedMap[6] = (stMsgRx->nRxData[6] * 0x0F);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800445a:	461a      	mov	r2, r3
 800445c:	0112      	lsls	r2, r2, #4
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
        pConfig->stWiper.nSpeedMap[7] = (stMsgRx->nRxData[6] * 0xF0) >> 4;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800446e:	461a      	mov	r2, r3
 8004470:	4613      	mov	r3, r2
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	111b      	asrs	r3, r3, #4
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
        nSend = 1;
 8004482:	4b97      	ldr	r3, [pc, #604]	; (80046e0 <PdmConfig_Set+0xe3c>)
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448e:	2b01      	cmp	r3, #1
 8004490:	d004      	beq.n	800449c <PdmConfig_Set+0xbf8>
 8004492:	4b93      	ldr	r3, [pc, #588]	; (80046e0 <PdmConfig_Set+0xe3c>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 851c 	beq.w	8004ed4 <PdmConfig_Set+0x1630>
        stMsgUsbTx.nTxLen = 7;
 800449c:	4b91      	ldr	r3, [pc, #580]	; (80046e4 <PdmConfig_Set+0xe40>)
 800449e:	2207      	movs	r2, #7
 80044a0:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 80044a2:	4b91      	ldr	r3, [pc, #580]	; (80046e8 <PdmConfig_Set+0xe44>)
 80044a4:	2207      	movs	r2, #7
 80044a6:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_SPEED;
 80044a8:	4b8e      	ldr	r3, [pc, #568]	; (80046e4 <PdmConfig_Set+0xe40>)
 80044aa:	2270      	movs	r2, #112	; 0x70
 80044ac:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = pConfig->stWiper.nSwipeInput;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 24f9 	ldrb.w	r2, [r3, #1273]	; 0x4f9
 80044b4:	4b8b      	ldr	r3, [pc, #556]	; (80046e4 <PdmConfig_Set+0xe40>)
 80044b6:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSpeedInput;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 24f6 	ldrb.w	r2, [r3, #1270]	; 0x4f6
 80044be:	4b89      	ldr	r3, [pc, #548]	; (80046e4 <PdmConfig_Set+0xe40>)
 80044c0:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stWiper.nSpeedMap[1] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[0] & 0x0F);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 34fd 	ldrb.w	r3, [r3, #1277]	; 0x4fd
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 34fc 	ldrb.w	r3, [r3, #1276]	; 0x4fc
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4413      	add	r3, r2
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	4b81      	ldr	r3, [pc, #516]	; (80046e4 <PdmConfig_Set+0xe40>)
 80044de:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stWiper.nSpeedMap[3] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[2] & 0x0F);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 34ff 	ldrb.w	r3, [r3, #1279]	; 0x4ff
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 34fe 	ldrb.w	r3, [r3, #1278]	; 0x4fe
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4b7a      	ldr	r3, [pc, #488]	; (80046e4 <PdmConfig_Set+0xe40>)
 80044fc:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = ((pConfig->stWiper.nSpeedMap[5] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[4] & 0x0F);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3501 	ldrb.w	r3, [r3, #1281]	; 0x501
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	b2da      	uxtb	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	b2db      	uxtb	r3, r3
 8004514:	4413      	add	r3, r2
 8004516:	b2da      	uxtb	r2, r3
 8004518:	4b72      	ldr	r3, [pc, #456]	; (80046e4 <PdmConfig_Set+0xe40>)
 800451a:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stWiper.nSpeedMap[7] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[6] & 0x0F);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 3503 	ldrb.w	r3, [r3, #1283]	; 0x503
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3502 	ldrb.w	r3, [r3, #1282]	; 0x502
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	b2db      	uxtb	r3, r3
 8004532:	4413      	add	r3, r2
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4b6b      	ldr	r3, [pc, #428]	; (80046e4 <PdmConfig_Set+0xe40>)
 8004538:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 800453a:	4b6a      	ldr	r3, [pc, #424]	; (80046e4 <PdmConfig_Set+0xe40>)
 800453c:	2200      	movs	r2, #0
 800453e:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8004540:	4b67      	ldr	r3, [pc, #412]	; (80046e0 <PdmConfig_Set+0xe3c>)
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004546:	f000 bcc5 	b.w	8004ed4 <PdmConfig_Set+0x1630>

    //Set Wiper Intermit Delays Settings
    // 'Y'
    case MSG_RX_SET_WIPER_DELAYS:
      if(stMsgRx->nRxLen == 7){
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004550:	2b07      	cmp	r3, #7
 8004552:	d168      	bne.n	8004626 <PdmConfig_Set+0xd82>
        pConfig->stWiper.nIntermitTime[0] = stMsgRx->nRxData[1] * 100;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800455a:	b29b      	uxth	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	0092      	lsls	r2, r2, #2
 8004560:	4413      	add	r3, r2
 8004562:	461a      	mov	r2, r3
 8004564:	0091      	lsls	r1, r2, #2
 8004566:	461a      	mov	r2, r3
 8004568:	460b      	mov	r3, r1
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
        pConfig->stWiper.nIntermitTime[1] = stMsgRx->nRxData[2] * 100;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800457c:	b29b      	uxth	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	0092      	lsls	r2, r2, #2
 8004582:	4413      	add	r3, r2
 8004584:	461a      	mov	r2, r3
 8004586:	0091      	lsls	r1, r2, #2
 8004588:	461a      	mov	r2, r3
 800458a:	460b      	mov	r3, r1
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8a3 2506 	strh.w	r2, [r3, #1286]	; 0x506
        pConfig->stWiper.nIntermitTime[2] = stMsgRx->nRxData[3] * 100;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800459e:	b29b      	uxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	0092      	lsls	r2, r2, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	461a      	mov	r2, r3
 80045a8:	0091      	lsls	r1, r2, #2
 80045aa:	461a      	mov	r2, r3
 80045ac:	460b      	mov	r3, r1
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8a3 2508 	strh.w	r2, [r3, #1288]	; 0x508
        pConfig->stWiper.nIntermitTime[3] = stMsgRx->nRxData[4] * 100;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	0092      	lsls	r2, r2, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	0091      	lsls	r1, r2, #2
 80045cc:	461a      	mov	r2, r3
 80045ce:	460b      	mov	r3, r1
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8a3 250a 	strh.w	r2, [r3, #1290]	; 0x50a
        pConfig->stWiper.nIntermitTime[4] = stMsgRx->nRxData[5] * 100;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	0092      	lsls	r2, r2, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	461a      	mov	r2, r3
 80045ec:	0091      	lsls	r1, r2, #2
 80045ee:	461a      	mov	r2, r3
 80045f0:	460b      	mov	r3, r1
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
        pConfig->stWiper.nIntermitTime[5] = stMsgRx->nRxData[6] * 100;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004604:	b29b      	uxth	r3, r3
 8004606:	461a      	mov	r2, r3
 8004608:	0092      	lsls	r2, r2, #2
 800460a:	4413      	add	r3, r2
 800460c:	461a      	mov	r2, r3
 800460e:	0091      	lsls	r1, r2, #2
 8004610:	461a      	mov	r2, r3
 8004612:	460b      	mov	r3, r1
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e
        nSend = 1;
 8004620:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <PdmConfig_Set+0xe3c>)
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800462c:	2b01      	cmp	r3, #1
 800462e:	d004      	beq.n	800463a <PdmConfig_Set+0xd96>
 8004630:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <PdmConfig_Set+0xe3c>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 844f 	beq.w	8004ed8 <PdmConfig_Set+0x1634>
        stMsgUsbTx.nTxLen = 7;
 800463a:	4b2a      	ldr	r3, [pc, #168]	; (80046e4 <PdmConfig_Set+0xe40>)
 800463c:	2207      	movs	r2, #7
 800463e:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 8004640:	4b29      	ldr	r3, [pc, #164]	; (80046e8 <PdmConfig_Set+0xe44>)
 8004642:	2207      	movs	r2, #7
 8004644:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_DELAYS;
 8004646:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <PdmConfig_Set+0xe40>)
 8004648:	2279      	movs	r2, #121	; 0x79
 800464a:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)(pConfig->stWiper.nIntermitTime[0] / 100);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8b3 3504 	ldrh.w	r3, [r3, #1284]	; 0x504
 8004652:	4a26      	ldr	r2, [pc, #152]	; (80046ec <PdmConfig_Set+0xe48>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	b29b      	uxth	r3, r3
 800465c:	b2da      	uxtb	r2, r3
 800465e:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <PdmConfig_Set+0xe40>)
 8004660:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stWiper.nIntermitTime[1] / 100);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3506 	ldrh.w	r3, [r3, #1286]	; 0x506
 8004668:	4a20      	ldr	r2, [pc, #128]	; (80046ec <PdmConfig_Set+0xe48>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	b29b      	uxth	r3, r3
 8004672:	b2da      	uxtb	r2, r3
 8004674:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <PdmConfig_Set+0xe40>)
 8004676:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stWiper.nIntermitTime[2] / 100);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f8b3 3508 	ldrh.w	r3, [r3, #1288]	; 0x508
 800467e:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <PdmConfig_Set+0xe48>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	b29b      	uxth	r3, r3
 8004688:	b2da      	uxtb	r2, r3
 800468a:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <PdmConfig_Set+0xe40>)
 800468c:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stWiper.nIntermitTime[3] / 100);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8b3 350a 	ldrh.w	r3, [r3, #1290]	; 0x50a
 8004694:	4a15      	ldr	r2, [pc, #84]	; (80046ec <PdmConfig_Set+0xe48>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	b29b      	uxth	r3, r3
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <PdmConfig_Set+0xe40>)
 80046a2:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stWiper.nIntermitTime[4] / 100);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8b3 350c 	ldrh.w	r3, [r3, #1292]	; 0x50c
 80046aa:	4a10      	ldr	r2, [pc, #64]	; (80046ec <PdmConfig_Set+0xe48>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <PdmConfig_Set+0xe40>)
 80046b8:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stWiper.nIntermitTime[5] / 100);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8b3 350e 	ldrh.w	r3, [r3, #1294]	; 0x50e
 80046c0:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <PdmConfig_Set+0xe48>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <PdmConfig_Set+0xe40>)
 80046ce:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <PdmConfig_Set+0xe40>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 80046d6:	4b02      	ldr	r3, [pc, #8]	; (80046e0 <PdmConfig_Set+0xe3c>)
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]
      }
    break;
 80046dc:	e3fc      	b.n	8004ed8 <PdmConfig_Set+0x1634>
 80046de:	bf00      	nop
 80046e0:	20002688 	.word	0x20002688
 80046e4:	2000265c 	.word	0x2000265c
 80046e8:	20002668 	.word	0x20002668
 80046ec:	51eb851f 	.word	0x51eb851f

    //Set Flasher Settings
    // 'H'
    case MSG_RX_SET_FLASHER:
      if(stMsgRx->nRxLen == 6){
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	f040 808f 	bne.w	800481a <PdmConfig_Set+0xf76>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	b2da      	uxtb	r2, r3
 8004706:	4b90      	ldr	r3, [pc, #576]	; (8004948 <PdmConfig_Set+0x10a4>)
 8004708:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 800470a:	4b8f      	ldr	r3, [pc, #572]	; (8004948 <PdmConfig_Set+0x10a4>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b03      	cmp	r3, #3
 8004710:	f200 8083 	bhi.w	800481a <PdmConfig_Set+0xf76>
          pConfig->stFlasher[nFlasherNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800471a:	4a8b      	ldr	r2, [pc, #556]	; (8004948 <PdmConfig_Set+0x10a4>)
 800471c:	7812      	ldrb	r2, [r2, #0]
 800471e:	4611      	mov	r1, r2
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	b2d8      	uxtb	r0, r3
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	460b      	mov	r3, r1
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	440b      	add	r3, r1
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004736:	4602      	mov	r2, r0
 8004738:	701a      	strb	r2, [r3, #0]
          pConfig->stFlasher[nFlasherNum].nSingleCycle = (stMsgRx->nRxData[1] & 0x02) >> 1;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004740:	105b      	asrs	r3, r3, #1
 8004742:	b2db      	uxtb	r3, r3
 8004744:	4a80      	ldr	r2, [pc, #512]	; (8004948 <PdmConfig_Set+0x10a4>)
 8004746:	7812      	ldrb	r2, [r2, #0]
 8004748:	4611      	mov	r1, r2
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	b2d8      	uxtb	r0, r3
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	460b      	mov	r3, r1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	440b      	add	r3, r1
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4413      	add	r3, r2
 800475c:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8004760:	4602      	mov	r2, r0
 8004762:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nInput = stMsgRx->nRxData[2];
 8004764:	4b78      	ldr	r3, [pc, #480]	; (8004948 <PdmConfig_Set+0x10a4>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	4619      	mov	r1, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	460b      	mov	r3, r1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	440b      	add	r3, r1
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	f203 5311 	addw	r3, r3, #1297	; 0x511
 8004780:	4602      	mov	r2, r0
 8004782:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nOutput = stMsgRx->nRxData[3];
 8004784:	4b70      	ldr	r3, [pc, #448]	; (8004948 <PdmConfig_Set+0x10a4>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	4619      	mov	r1, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	460b      	mov	r3, r1
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	440b      	add	r3, r1
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	f203 531d 	addw	r3, r3, #1309	; 0x51d
 80047a0:	4602      	mov	r2, r0
 80047a2:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOnTime = stMsgRx->nRxData[4] * 100;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b66      	ldr	r3, [pc, #408]	; (8004948 <PdmConfig_Set+0x10a4>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	4619      	mov	r1, r3
 80047b2:	4613      	mov	r3, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	0092      	lsls	r2, r2, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	461a      	mov	r2, r3
 80047bc:	0090      	lsls	r0, r2, #2
 80047be:	461a      	mov	r2, r3
 80047c0:	4603      	mov	r3, r0
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	b298      	uxth	r0, r3
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	460b      	mov	r3, r1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	440b      	add	r3, r1
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80047d8:	4602      	mov	r2, r0
 80047da:	801a      	strh	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOffTime = stMsgRx->nRxData[5] * 100;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	4b58      	ldr	r3, [pc, #352]	; (8004948 <PdmConfig_Set+0x10a4>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	4619      	mov	r1, r3
 80047ea:	4613      	mov	r3, r2
 80047ec:	461a      	mov	r2, r3
 80047ee:	0092      	lsls	r2, r2, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	461a      	mov	r2, r3
 80047f4:	0090      	lsls	r0, r2, #2
 80047f6:	461a      	mov	r2, r3
 80047f8:	4603      	mov	r3, r0
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	b298      	uxth	r0, r3
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	460b      	mov	r3, r1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	440b      	add	r3, r1
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4413      	add	r3, r2
 800480c:	f203 531a 	addw	r3, r3, #1306	; 0x51a
 8004810:	4602      	mov	r2, r0
 8004812:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8004814:	4b4d      	ldr	r3, [pc, #308]	; (800494c <PdmConfig_Set+0x10a8>)
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004820:	2b02      	cmp	r3, #2
 8004822:	d10d      	bne.n	8004840 <PdmConfig_Set+0xf9c>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4b46      	ldr	r3, [pc, #280]	; (8004948 <PdmConfig_Set+0x10a4>)
 8004830:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 8004832:	4b45      	ldr	r3, [pc, #276]	; (8004948 <PdmConfig_Set+0x10a4>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d802      	bhi.n	8004840 <PdmConfig_Set+0xf9c>
          nSend = 1;
 800483a:	4b44      	ldr	r3, [pc, #272]	; (800494c <PdmConfig_Set+0x10a8>)
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8004840:	4b42      	ldr	r3, [pc, #264]	; (800494c <PdmConfig_Set+0x10a8>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8349 	beq.w	8004edc <PdmConfig_Set+0x1638>
        stMsgUsbTx.nTxLen = 6;
 800484a:	4b41      	ldr	r3, [pc, #260]	; (8004950 <PdmConfig_Set+0x10ac>)
 800484c:	2206      	movs	r2, #6
 800484e:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 6;
 8004850:	4b40      	ldr	r3, [pc, #256]	; (8004954 <PdmConfig_Set+0x10b0>)
 8004852:	2206      	movs	r2, #6
 8004854:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_FLASHER;
 8004856:	4b3e      	ldr	r3, [pc, #248]	; (8004950 <PdmConfig_Set+0x10ac>)
 8004858:	2268      	movs	r2, #104	; 0x68
 800485a:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 800485c:	4b3a      	ldr	r3, [pc, #232]	; (8004948 <PdmConfig_Set+0x10a4>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	b2da      	uxtb	r2, r3
 8004864:	4b38      	ldr	r3, [pc, #224]	; (8004948 <PdmConfig_Set+0x10a4>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	4603      	mov	r3, r0
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4403      	add	r3, r0
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	440b      	add	r3, r1
 8004876:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	b2db      	uxtb	r3, r3
 8004886:	4413      	add	r3, r2
 8004888:	b2da      	uxtb	r2, r3
                                (pConfig->stFlasher[nFlasherNum].nEnabled & 0x01);
 800488a:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <PdmConfig_Set+0x10a4>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	4603      	mov	r3, r0
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4403      	add	r3, r0
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	440b      	add	r3, r1
 800489c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 80048a8:	4413      	add	r3, r2
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	4b28      	ldr	r3, [pc, #160]	; (8004950 <PdmConfig_Set+0x10ac>)
 80048ae:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stFlasher[nFlasherNum].nInput;
 80048b0:	4b25      	ldr	r3, [pc, #148]	; (8004948 <PdmConfig_Set+0x10a4>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	4619      	mov	r1, r3
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	460b      	mov	r3, r1
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	440b      	add	r3, r1
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	f203 5311 	addw	r3, r3, #1297	; 0x511
 80048c6:	781a      	ldrb	r2, [r3, #0]
 80048c8:	4b21      	ldr	r3, [pc, #132]	; (8004950 <PdmConfig_Set+0x10ac>)
 80048ca:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stFlasher[nFlasherNum].nOutput;
 80048cc:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <PdmConfig_Set+0x10a4>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	4619      	mov	r1, r3
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	460b      	mov	r3, r1
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	440b      	add	r3, r1
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4413      	add	r3, r2
 80048de:	f203 531d 	addw	r3, r3, #1309	; 0x51d
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <PdmConfig_Set+0x10ac>)
 80048e6:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOnTime / 100);
 80048e8:	4b17      	ldr	r3, [pc, #92]	; (8004948 <PdmConfig_Set+0x10a4>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	4619      	mov	r1, r3
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	460b      	mov	r3, r1
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	440b      	add	r3, r1
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	4a15      	ldr	r2, [pc, #84]	; (8004958 <PdmConfig_Set+0x10b4>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	b29b      	uxth	r3, r3
 800490a:	b2da      	uxtb	r2, r3
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <PdmConfig_Set+0x10ac>)
 800490e:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOffTime / 100);
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <PdmConfig_Set+0x10a4>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	4619      	mov	r1, r3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	460b      	mov	r3, r1
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	440b      	add	r3, r1
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	f203 531a 	addw	r3, r3, #1306	; 0x51a
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	4a0b      	ldr	r2, [pc, #44]	; (8004958 <PdmConfig_Set+0x10b4>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	b29b      	uxth	r3, r3
 8004932:	b2da      	uxtb	r2, r3
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <PdmConfig_Set+0x10ac>)
 8004936:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <PdmConfig_Set+0x10ac>)
 800493a:	2200      	movs	r2, #0
 800493c:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 800493e:	4b04      	ldr	r3, [pc, #16]	; (8004950 <PdmConfig_Set+0x10ac>)
 8004940:	2200      	movs	r2, #0
 8004942:	71da      	strb	r2, [r3, #7]
      }
    break;
 8004944:	e2ca      	b.n	8004edc <PdmConfig_Set+0x1638>
 8004946:	bf00      	nop
 8004948:	2000268c 	.word	0x2000268c
 800494c:	20002688 	.word	0x20002688
 8004950:	2000265c 	.word	0x2000265c
 8004954:	20002668 	.word	0x20002668
 8004958:	51eb851f 	.word	0x51eb851f

    //Set Starter Disable Settings
    // 'D'
    case MSG_RX_SET_STARTER:
      if(stMsgRx->nRxLen == 5){
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004962:	2b05      	cmp	r3, #5
 8004964:	f040 808f 	bne.w	8004a86 <PdmConfig_Set+0x11e2>
        pConfig->stStarter.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	b2da      	uxtb	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570

        pConfig->stStarter.nInput = stMsgRx->nRxData[2];
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571

        pConfig->stStarter.nDisableOut[0] = (stMsgRx->nRxData[3] & 0x01);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
        pConfig->stStarter.nDisableOut[1] = (stMsgRx->nRxData[3] & 0x02) >> 1;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800499e:	105b      	asrs	r3, r3, #1
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
        pConfig->stStarter.nDisableOut[2] = (stMsgRx->nRxData[3] & 0x04) >> 2;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80049b4:	109b      	asrs	r3, r3, #2
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
        pConfig->stStarter.nDisableOut[3] = (stMsgRx->nRxData[3] & 0x08) >> 3;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80049ca:	10db      	asrs	r3, r3, #3
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
        pConfig->stStarter.nDisableOut[4] = (stMsgRx->nRxData[3] & 0x10) >> 4;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80049e0:	111b      	asrs	r3, r3, #4
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
        pConfig->stStarter.nDisableOut[5] = (stMsgRx->nRxData[3] & 0x20) >> 5;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80049f6:	115b      	asrs	r3, r3, #5
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
        pConfig->stStarter.nDisableOut[6] = (stMsgRx->nRxData[3] & 0x40) >> 6;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a0c:	119b      	asrs	r3, r3, #6
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
        pConfig->stStarter.nDisableOut[7] = (stMsgRx->nRxData[3] & 0x80) >> 7;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a22:	09db      	lsrs	r3, r3, #7
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f

        pConfig->stStarter.nDisableOut[8] = (stMsgRx->nRxData[4] & 0x01);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
        pConfig->stStarter.nDisableOut[9] = (stMsgRx->nRxData[4] & 0x02) >> 1;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a44:	105b      	asrs	r3, r3, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
        pConfig->stStarter.nDisableOut[10] = (stMsgRx->nRxData[4] & 0x04) >> 2;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a5a:	109b      	asrs	r3, r3, #2
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
        pConfig->stStarter.nDisableOut[11] = (stMsgRx->nRxData[4] & 0x08) >> 3;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a70:	10db      	asrs	r3, r3, #3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
        nSend = 1;
 8004a80:	4b50      	ldr	r3, [pc, #320]	; (8004bc4 <PdmConfig_Set+0x1320>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || nSend){
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d004      	beq.n	8004a9a <PdmConfig_Set+0x11f6>
 8004a90:	4b4c      	ldr	r3, [pc, #304]	; (8004bc4 <PdmConfig_Set+0x1320>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8223 	beq.w	8004ee0 <PdmConfig_Set+0x163c>
        stMsgUsbTx.nTxLen = 5;
 8004a9a:	4b4b      	ldr	r3, [pc, #300]	; (8004bc8 <PdmConfig_Set+0x1324>)
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 8004aa0:	4b4a      	ldr	r3, [pc, #296]	; (8004bcc <PdmConfig_Set+0x1328>)
 8004aa2:	2205      	movs	r2, #5
 8004aa4:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_STARTER;
 8004aa6:	4b48      	ldr	r3, [pc, #288]	; (8004bc8 <PdmConfig_Set+0x1324>)
 8004aa8:	2264      	movs	r2, #100	; 0x64
 8004aaa:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (pConfig->stStarter.nEnabled & 0x01);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3570 	ldrb.w	r3, [r3, #1392]	; 0x570
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	4b43      	ldr	r3, [pc, #268]	; (8004bc8 <PdmConfig_Set+0x1324>)
 8004aba:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stStarter.nInput;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 2571 	ldrb.w	r2, [r3, #1393]	; 0x571
 8004ac2:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <PdmConfig_Set+0x1324>)
 8004ac4:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 357f 	ldrb.w	r3, [r3, #1407]	; 0x57f
 8004acc:	01db      	lsls	r3, r3, #7
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 357e 	ldrb.w	r3, [r3, #1406]	; 0x57e
 8004ad6:	019b      	lsls	r3, r3, #6
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 357d 	ldrb.w	r3, [r3, #1405]	; 0x57d
 8004aea:	015b      	lsls	r3, r3, #5
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004af4:	4413      	add	r3, r2
 8004af6:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	4413      	add	r3, r2
 8004b0a:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 357b 	ldrb.w	r3, [r3, #1403]	; 0x57b
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8004b1c:	4413      	add	r3, r2
 8004b1e:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 357a 	ldrb.w	r3, [r3, #1402]	; 0x57a
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3579 	ldrb.w	r3, [r3, #1401]	; 0x579
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8004b44:	4413      	add	r3, r2
 8004b46:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3578 	ldrb.w	r3, [r3, #1400]	; 0x578
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <PdmConfig_Set+0x1324>)
 8004b5a:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 3583 	ldrb.w	r3, [r3, #1411]	; 0x583
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	b25b      	sxtb	r3, r3
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	b25a      	sxtb	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3582 	ldrb.w	r3, [r3, #1410]	; 0x582
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	b25b      	sxtb	r3, r3
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	b25b      	sxtb	r3, r3
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3581 	ldrb.w	r3, [r3, #1409]	; 0x581
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004b92:	4413      	add	r3, r2
 8004b94:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3580 	ldrb.w	r3, [r3, #1408]	; 0x580
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <PdmConfig_Set+0x1324>)
 8004ba8:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <PdmConfig_Set+0x1324>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <PdmConfig_Set+0x1324>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <PdmConfig_Set+0x1324>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8004bbc:	4b01      	ldr	r3, [pc, #4]	; (8004bc4 <PdmConfig_Set+0x1320>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004bc2:	e18d      	b.n	8004ee0 <PdmConfig_Set+0x163c>
 8004bc4:	20002688 	.word	0x20002688
 8004bc8:	2000265c 	.word	0x2000265c
 8004bcc:	20002668 	.word	0x20002668

    //Set CAN Input Settings
    // 'N'
    case MSG_RX_SET_CAN_INPUTS:
       if(stMsgRx->nRxLen == 7){
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd6:	2b07      	cmp	r3, #7
 8004bd8:	f040 8097 	bne.w	8004d0a <PdmConfig_Set+0x1466>
         nCanInputNum = (stMsgRx->nRxData[2]);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004be2:	4bb6      	ldr	r3, [pc, #728]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004be4:	701a      	strb	r2, [r3, #0]
         if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 8004be6:	4bb5      	ldr	r3, [pc, #724]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b1d      	cmp	r3, #29
 8004bec:	f200 808d 	bhi.w	8004d0a <PdmConfig_Set+0x1466>
           pConfig->stCanInput[nCanInputNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bf6:	4ab1      	ldr	r2, [pc, #708]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004bf8:	7812      	ldrb	r2, [r2, #0]
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	b2d8      	uxtb	r0, r3
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	460b      	mov	r3, r1
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	1a5b      	subs	r3, r3, r1
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8004c12:	4602      	mov	r2, r0
 8004c14:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c1c:	105b      	asrs	r3, r3, #1
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	4aa6      	ldr	r2, [pc, #664]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004c22:	7812      	ldrb	r2, [r2, #0]
 8004c24:	4611      	mov	r1, r2
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	b2d8      	uxtb	r0, r3
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	1a5b      	subs	r3, r3, r1
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eOperator = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c46:	4a9d      	ldr	r2, [pc, #628]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004c48:	7812      	ldrb	r2, [r2, #0]
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	b2d8      	uxtb	r0, r3
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	460b      	mov	r3, r1
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	1a5b      	subs	r3, r3, r1
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8004c60:	4602      	mov	r2, r0
 8004c62:	701a      	strb	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nId = (stMsgRx->nRxData[3] << 8) + stMsgRx->nRxData[4];
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4990      	ldr	r1, [pc, #576]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004c7a:	7809      	ldrb	r1, [r1, #0]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	b298      	uxth	r0, r3
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	460b      	mov	r3, r1
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	1a5b      	subs	r3, r3, r1
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f203 5386 	addw	r3, r3, #1414	; 0x586
 8004c90:	4602      	mov	r2, r0
 8004c92:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nLowByte = (stMsgRx->nRxData[5] & 0x0F);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	4a87      	ldr	r2, [pc, #540]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004c9e:	7812      	ldrb	r2, [r2, #0]
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	b298      	uxth	r0, r3
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	460b      	mov	r3, r1
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	1a5b      	subs	r3, r3, r1
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004cb8:	4602      	mov	r2, r0
 8004cba:	801a      	strh	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].nHighByte = (stMsgRx->nRxData[5] & 0xF0) >> 4;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b7d      	ldr	r3, [pc, #500]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	b290      	uxth	r0, r2
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	1a5b      	subs	r3, r3, r1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	f203 538a 	addw	r3, r3, #1418	; 0x58a
 8004cde:	4602      	mov	r2, r0
 8004ce0:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nOnVal = stMsgRx->nRxData[6];
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004ce8:	4b74      	ldr	r3, [pc, #464]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4619      	mov	r1, r3
 8004cee:	b290      	uxth	r0, r2
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	1a5b      	subs	r3, r3, r1
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8004d00:	4602      	mov	r2, r0
 8004d02:	801a      	strh	r2, [r3, #0]

           nSend = 1;
 8004d04:	4b6e      	ldr	r3, [pc, #440]	; (8004ec0 <PdmConfig_Set+0x161c>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
         }
       }

       if(stMsgRx->nRxLen == 2){
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d10b      	bne.n	8004d2c <PdmConfig_Set+0x1488>
          nCanInputNum = (stMsgRx->nRxData[1]);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004d1a:	4b68      	ldr	r3, [pc, #416]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004d1c:	701a      	strb	r2, [r3, #0]
          if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 8004d1e:	4b67      	ldr	r3, [pc, #412]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b1d      	cmp	r3, #29
 8004d24:	d802      	bhi.n	8004d2c <PdmConfig_Set+0x1488>
            nSend = 1;
 8004d26:	4b66      	ldr	r3, [pc, #408]	; (8004ec0 <PdmConfig_Set+0x161c>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
          }
       }

       if(nSend){
 8004d2c:	4b64      	ldr	r3, [pc, #400]	; (8004ec0 <PdmConfig_Set+0x161c>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80d7 	beq.w	8004ee4 <PdmConfig_Set+0x1640>
         stMsgUsbTx.nTxLen = 7;
 8004d36:	4b63      	ldr	r3, [pc, #396]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004d38:	2207      	movs	r2, #7
 8004d3a:	721a      	strb	r2, [r3, #8]
         stMsgCanTx.stTxHeader.DLC = 7;
 8004d3c:	4b62      	ldr	r3, [pc, #392]	; (8004ec8 <PdmConfig_Set+0x1624>)
 8004d3e:	2207      	movs	r2, #7
 8004d40:	611a      	str	r2, [r3, #16]

         stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN_INPUTS;
 8004d42:	4b60      	ldr	r3, [pc, #384]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004d44:	226e      	movs	r2, #110	; 0x6e
 8004d46:	701a      	strb	r2, [r3, #0]
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8004d48:	4b5c      	ldr	r3, [pc, #368]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	460b      	mov	r3, r1
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	1a5b      	subs	r3, r3, r1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	4b55      	ldr	r3, [pc, #340]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	1a1b      	subs	r3, r3, r0
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f003 0306 	and.w	r3, r3, #6
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	b2da      	uxtb	r2, r3
                                 (pConfig->stCanInput[nCanInputNum].nEnabled & 0x01);
 8004d8a:	4b4c      	ldr	r3, [pc, #304]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	68f9      	ldr	r1, [r7, #12]
 8004d92:	4603      	mov	r3, r0
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	1a1b      	subs	r3, r3, r0
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	b2db      	uxtb	r3, r3
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8004da8:	4413      	add	r3, r2
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	4b45      	ldr	r3, [pc, #276]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004dae:	705a      	strb	r2, [r3, #1]
         stMsgUsbTx.nTxData[2] = nCanInputNum;
 8004db0:	4b42      	ldr	r3, [pc, #264]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	4b43      	ldr	r3, [pc, #268]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004db6:	709a      	strb	r2, [r3, #2]
         stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId >> 8);
 8004db8:	4b40      	ldr	r3, [pc, #256]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	1a5b      	subs	r3, r3, r1
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	f203 5386 	addw	r3, r3, #1414	; 0x586
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	0a1b      	lsrs	r3, r3, #8
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004dd8:	70da      	strb	r2, [r3, #3]
         stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId & 0xFF);
 8004dda:	4b38      	ldr	r3, [pc, #224]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	4619      	mov	r1, r3
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	460b      	mov	r3, r1
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	1a5b      	subs	r3, r3, r1
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	f203 5386 	addw	r3, r3, #1414	; 0x586
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	4b33      	ldr	r3, [pc, #204]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004df6:	711a      	strb	r2, [r3, #4]
         stMsgUsbTx.nTxData[5] = ((pConfig->stCanInput[nCanInputNum].nHighByte & 0xF) << 4) + (pConfig->stCanInput[nCanInputNum].nLowByte & 0xF);
 8004df8:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	460b      	mov	r3, r1
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	1a5b      	subs	r3, r3, r1
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	f203 538a 	addw	r3, r3, #1418	; 0x58a
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	4b29      	ldr	r3, [pc, #164]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	68f9      	ldr	r1, [r7, #12]
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	1a1b      	subs	r3, r3, r0
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004e3a:	715a      	strb	r2, [r3, #5]
         stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nOnVal);
 8004e3c:	4b1f      	ldr	r3, [pc, #124]	; (8004ebc <PdmConfig_Set+0x1618>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	4619      	mov	r1, r3
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	460b      	mov	r3, r1
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	1a5b      	subs	r3, r3, r1
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004e58:	719a      	strb	r2, [r3, #6]
       }
    break;
 8004e5a:	e043      	b.n	8004ee4 <PdmConfig_Set+0x1640>

    //Get Version
    // 'V'
    case MSG_RX_GET_VERSION:
      if(stMsgRx->nRxLen == 1){
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d140      	bne.n	8004ee8 <PdmConfig_Set+0x1644>
        nSend = 1;
 8004e66:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <PdmConfig_Set+0x161c>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxLen = 5;
 8004e6c:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004e6e:	2205      	movs	r2, #5
 8004e70:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <PdmConfig_Set+0x1624>)
 8004e74:	2205      	movs	r2, #5
 8004e76:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_GET_VERSION;
 8004e78:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004e7a:	2276      	movs	r2, #118	; 0x76
 8004e7c:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)PDM_MAJOR_VERSION;
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)PDM_MINOR_VERSION;
 8004e84:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(PDM_BUILD >> 8);
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(PDM_BUILD & 0xFF);
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8004e96:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <PdmConfig_Set+0x1620>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	71da      	strb	r2, [r3, #7]
      }
    break;
 8004ea8:	e01e      	b.n	8004ee8 <PdmConfig_Set+0x1644>

    default:
      return 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e03e      	b.n	8004f2c <PdmConfig_Set+0x1688>
    break;
 8004eae:	bf00      	nop
 8004eb0:	e01b      	b.n	8004eea <PdmConfig_Set+0x1646>
    break;
 8004eb2:	bf00      	nop
 8004eb4:	e019      	b.n	8004eea <PdmConfig_Set+0x1646>
    break;
 8004eb6:	bf00      	nop
 8004eb8:	e017      	b.n	8004eea <PdmConfig_Set+0x1646>
 8004eba:	bf00      	nop
 8004ebc:	2000268d 	.word	0x2000268d
 8004ec0:	20002688 	.word	0x20002688
 8004ec4:	2000265c 	.word	0x2000265c
 8004ec8:	20002668 	.word	0x20002668
    break;
 8004ecc:	bf00      	nop
 8004ece:	e00c      	b.n	8004eea <PdmConfig_Set+0x1646>
    break;
 8004ed0:	bf00      	nop
 8004ed2:	e00a      	b.n	8004eea <PdmConfig_Set+0x1646>
    break;
 8004ed4:	bf00      	nop
 8004ed6:	e008      	b.n	8004eea <PdmConfig_Set+0x1646>
    break;
 8004ed8:	bf00      	nop
 8004eda:	e006      	b.n	8004eea <PdmConfig_Set+0x1646>
    break;
 8004edc:	bf00      	nop
 8004ede:	e004      	b.n	8004eea <PdmConfig_Set+0x1646>
    break;
 8004ee0:	bf00      	nop
 8004ee2:	e002      	b.n	8004eea <PdmConfig_Set+0x1646>
    break;
 8004ee4:	bf00      	nop
 8004ee6:	e000      	b.n	8004eea <PdmConfig_Set+0x1646>
    break;
 8004ee8:	bf00      	nop
    }

  if(nSend){
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <PdmConfig_Set+0x1690>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01b      	beq.n	8004f2a <PdmConfig_Set+0x1686>
    stMsgCanTx.stTxHeader.StdId = pConfig->stCanOutput.nBaseId + 20;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8004ef8:	3314      	adds	r3, #20
 8004efa:	461a      	mov	r2, r3
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <PdmConfig_Set+0x1694>)
 8004efe:	601a      	str	r2, [r3, #0]

    memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8004f00:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <PdmConfig_Set+0x1694>)
 8004f02:	4a0e      	ldr	r2, [pc, #56]	; (8004f3c <PdmConfig_Set+0x1698>)
 8004f04:	3318      	adds	r3, #24
 8004f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f0a:	e883 0003 	stmia.w	r3, {r0, r1}

    osMessageQueuePut(*qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	2200      	movs	r2, #0
 8004f16:	4909      	ldr	r1, [pc, #36]	; (8004f3c <PdmConfig_Set+0x1698>)
 8004f18:	f00e ffa8 	bl	8013e6c <osMessageQueuePut>
    osMessageQueuePut(*qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	2300      	movs	r3, #0
 8004f22:	2200      	movs	r2, #0
 8004f24:	4904      	ldr	r1, [pc, #16]	; (8004f38 <PdmConfig_Set+0x1694>)
 8004f26:	f00e ffa1 	bl	8013e6c <osMessageQueuePut>
  }

  return 1;
 8004f2a:	2301      	movs	r3, #1

}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20002688 	.word	0x20002688
 8004f38:	20002668 	.word	0x20002668
 8004f3c:	2000265c 	.word	0x2000265c

08004f40 <PdmConfig_SetDefault>:

void PdmConfig_SetDefault(PdmConfig_t* pConfig){
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  //Device Configuration
  pConfig->stDevConfig.nVersion = 2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	701a      	strb	r2, [r3, #0]
  pConfig->stDevConfig.nCanEnabled = 1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	705a      	strb	r2, [r3, #1]
  pConfig->stDevConfig.nCanSpeed = 6;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2206      	movs	r2, #6
 8004f58:	709a      	strb	r2, [r3, #2]

  //Logging
  pConfig->stLogging.nUpdateTime = 1000;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f60:	809a      	strh	r2, [r3, #4]

  //Inputs
  pConfig->stInput[0].nEnabled = 1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	721a      	strb	r2, [r3, #8]
  pConfig->stInput[0].eMode = MODE_MOMENTARY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	741a      	strb	r2, [r3, #16]
  pConfig->stInput[0].nOnLevel = 10000;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f74:	841a      	strh	r2, [r3, #32]
  pConfig->stInput[0].nDebounceTime = 20;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2214      	movs	r2, #20
 8004f7a:	845a      	strh	r2, [r3, #34]	; 0x22

  pConfig->stInput[1].nEnabled = 1;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pConfig->stInput[1].eMode = MODE_MOMENTARY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pConfig->stInput[1].nOnLevel = 16383;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8004f92:	879a      	strh	r2, [r3, #60]	; 0x3c
  pConfig->stInput[1].nDebounceTime = 20;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2214      	movs	r2, #20
 8004f98:	87da      	strh	r2, [r3, #62]	; 0x3e

  pConfig->stInput[2].nEnabled = 1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pConfig->stInput[2].eMode = MODE_MOMENTARY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  pConfig->stInput[2].nOnLevel = 16383;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8004fb0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  pConfig->stInput[2].nDebounceTime = 20;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2214      	movs	r2, #20
 8004fb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  pConfig->stInput[3].nEnabled = 1;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  pConfig->stInput[3].eMode = MODE_MOMENTARY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  pConfig->stInput[3].nOnLevel = 10000;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fd2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  pConfig->stInput[3].nDebounceTime = 20;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2214      	movs	r2, #20
 8004fda:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

  pConfig->stInput[4].nEnabled = 1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  pConfig->stInput[4].eMode = MODE_MOMENTARY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  pConfig->stInput[4].nOnLevel = 16383;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8004ff4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  pConfig->stInput[4].nDebounceTime = 20;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2214      	movs	r2, #20
 8004ffc:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

  pConfig->stInput[5].nEnabled = 1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  pConfig->stInput[5].eMode = MODE_MOMENTARY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  pConfig->stInput[5].nOnLevel = 16383;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005016:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  pConfig->stInput[5].nDebounceTime = 20;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2214      	movs	r2, #20
 800501e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

  //Outputs
  pConfig->stOutput[0].nEnabled = 1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
  pConfig->stOutput[0].nInput = 4;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2204      	movs	r2, #4
 800502e:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
  pConfig->stOutput[0].nTriggerLevel = 0;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
  pConfig->stOutput[0].nCurrentLimit = 0;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f8a3 23da 	strh.w	r2, [r3, #986]	; 0x3da
  pConfig->stOutput[0].nInrushLimit = 0;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
  pConfig->stOutput[0].nInrushTime = 0;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f8a3 23de 	strh.w	r2, [r3, #990]	; 0x3de
  pConfig->stOutput[0].eResetMode = RESET_ENDLESS;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
  pConfig->stOutput[0].nResetTime = 0;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8a3 23e2 	strh.w	r2, [r3, #994]	; 0x3e2
  pConfig->stOutput[0].nResetLimit = 0;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4

  pConfig->stOutput[1].nEnabled = 1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  pConfig->stOutput[1].nInput = 3;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2203      	movs	r2, #3
 8005076:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
  pConfig->stOutput[1].nTriggerLevel = 0;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
  pConfig->stOutput[1].nCurrentLimit = 0;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f8a3 23f2 	strh.w	r2, [r3, #1010]	; 0x3f2
  pConfig->stOutput[1].nInrushLimit = 0;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
  pConfig->stOutput[1].nInrushTime = 0;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6
  pConfig->stOutput[1].eResetMode = RESET_ENDLESS;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
  pConfig->stOutput[1].nResetTime = 0;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8a3 23fa 	strh.w	r2, [r3, #1018]	; 0x3fa
  pConfig->stOutput[1].nResetLimit = 0;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc

  pConfig->stOutput[2].nEnabled = 1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  pConfig->stOutput[2].nInput = 2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
  pConfig->stOutput[2].nTriggerLevel = 0;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
  pConfig->stOutput[2].nCurrentLimit = 0;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
  pConfig->stOutput[2].nInrushLimit = 0;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
  pConfig->stOutput[2].nInrushTime = 0;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
  pConfig->stOutput[2].eResetMode = RESET_ENDLESS;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  pConfig->stOutput[2].nResetTime = 0;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
  pConfig->stOutput[2].nResetLimit = 0;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  pConfig->stOutput[3].nEnabled = 1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  pConfig->stOutput[3].nInput = 8;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2208      	movs	r2, #8
 8005106:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  pConfig->stOutput[3].nTriggerLevel = 0;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  pConfig->stOutput[3].nCurrentLimit = 0;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f8a3 2422 	strh.w	r2, [r3, #1058]	; 0x422
  pConfig->stOutput[3].nInrushLimit = 0;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
  pConfig->stOutput[3].nInrushTime = 0;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
  pConfig->stOutput[3].eResetMode = RESET_ENDLESS;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  pConfig->stOutput[3].nResetTime = 0;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f8a3 242a 	strh.w	r2, [r3, #1066]	; 0x42a
  pConfig->stOutput[3].nResetLimit = 0;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

  pConfig->stOutput[4].nEnabled = 1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
  pConfig->stOutput[4].nInput = 9;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2209      	movs	r2, #9
 800514e:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
  pConfig->stOutput[4].nTriggerLevel = 0;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
  pConfig->stOutput[4].nCurrentLimit = 0;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f8a3 243a 	strh.w	r2, [r3, #1082]	; 0x43a
  pConfig->stOutput[4].nInrushLimit = 0;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
  pConfig->stOutput[4].nInrushTime = 0;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f8a3 243e 	strh.w	r2, [r3, #1086]	; 0x43e
  pConfig->stOutput[4].eResetMode = RESET_ENDLESS;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
  pConfig->stOutput[4].nResetTime = 0;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
  pConfig->stOutput[4].nResetLimit = 0;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

  pConfig->stOutput[5].nEnabled = 1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
  pConfig->stOutput[5].nInput = 37;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2225      	movs	r2, #37	; 0x25
 8005196:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
  pConfig->stOutput[5].nTriggerLevel = 0;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
  pConfig->stOutput[5].nCurrentLimit = 0;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8a3 2452 	strh.w	r2, [r3, #1106]	; 0x452
  pConfig->stOutput[5].nInrushLimit = 0;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
  pConfig->stOutput[5].nInrushTime = 0;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
  pConfig->stOutput[5].eResetMode = RESET_ENDLESS;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
  pConfig->stOutput[5].nResetTime = 0;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
  pConfig->stOutput[5].nResetLimit = 0;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c

  pConfig->stOutput[6].nEnabled = 1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  pConfig->stOutput[6].nInput = 38;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2226      	movs	r2, #38	; 0x26
 80051de:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
  pConfig->stOutput[6].nTriggerLevel = 0;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
  pConfig->stOutput[6].nCurrentLimit = 0;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f8a3 246a 	strh.w	r2, [r3, #1130]	; 0x46a
  pConfig->stOutput[6].nInrushLimit = 0;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
  pConfig->stOutput[6].nInrushTime = 0;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8a3 246e 	strh.w	r2, [r3, #1134]	; 0x46e
  pConfig->stOutput[6].eResetMode = RESET_ENDLESS;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
  pConfig->stOutput[6].nResetTime = 0;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f8a3 2472 	strh.w	r2, [r3, #1138]	; 0x472
  pConfig->stOutput[6].nResetLimit = 0;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474

  pConfig->stOutput[7].nEnabled = 1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
  pConfig->stOutput[7].nInput = 12;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	220c      	movs	r2, #12
 8005226:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
  pConfig->stOutput[7].nTriggerLevel = 0;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
  pConfig->stOutput[7].nCurrentLimit = 0;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f8a3 2482 	strh.w	r2, [r3, #1154]	; 0x482
  pConfig->stOutput[7].nInrushLimit = 0;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
  pConfig->stOutput[7].nInrushTime = 0;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f8a3 2486 	strh.w	r2, [r3, #1158]	; 0x486
  pConfig->stOutput[7].eResetMode = RESET_ENDLESS;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2202      	movs	r2, #2
 800524e:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
  pConfig->stOutput[7].nResetTime = 0;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f8a3 248a 	strh.w	r2, [r3, #1162]	; 0x48a
  pConfig->stOutput[7].nResetLimit = 0;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c

  pConfig->stOutput[8].nEnabled = 1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
  pConfig->stOutput[8].nInput = 13;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	220d      	movs	r2, #13
 800526e:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
  pConfig->stOutput[8].nTriggerLevel = 0;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
  pConfig->stOutput[8].nCurrentLimit = 0;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f8a3 249a 	strh.w	r2, [r3, #1178]	; 0x49a
  pConfig->stOutput[8].nInrushLimit = 0;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
  pConfig->stOutput[8].nInrushTime = 0;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f8a3 249e 	strh.w	r2, [r3, #1182]	; 0x49e
  pConfig->stOutput[8].eResetMode = RESET_ENDLESS;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
  pConfig->stOutput[8].nResetTime = 0;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f8a3 24a2 	strh.w	r2, [r3, #1186]	; 0x4a2
  pConfig->stOutput[8].nResetLimit = 0;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 24a4 	strb.w	r2, [r3, #1188]	; 0x4a4

  pConfig->stOutput[9].nEnabled = 1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
  pConfig->stOutput[9].nInput = 14;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	220e      	movs	r2, #14
 80052b6:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
  pConfig->stOutput[9].nTriggerLevel = 0;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
  pConfig->stOutput[9].nCurrentLimit = 0;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f8a3 24b2 	strh.w	r2, [r3, #1202]	; 0x4b2
  pConfig->stOutput[9].nInrushLimit = 0;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
  pConfig->stOutput[9].nInrushTime = 0;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
  pConfig->stOutput[9].eResetMode = RESET_ENDLESS;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
  pConfig->stOutput[9].nResetTime = 0;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
  pConfig->stOutput[9].nResetLimit = 0;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  pConfig->stOutput[10].nEnabled = 1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
  pConfig->stOutput[10].nInput = 69;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2245      	movs	r2, #69	; 0x45
 80052fe:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
  pConfig->stOutput[10].nTriggerLevel = 0;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
  pConfig->stOutput[10].nCurrentLimit = 0;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f8a3 24ca 	strh.w	r2, [r3, #1226]	; 0x4ca
  pConfig->stOutput[10].nInrushLimit = 0;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
  pConfig->stOutput[10].nInrushTime = 0;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f8a3 24ce 	strh.w	r2, [r3, #1230]	; 0x4ce
  pConfig->stOutput[10].eResetMode = RESET_ENDLESS;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
  pConfig->stOutput[10].nResetTime = 0;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f8a3 24d2 	strh.w	r2, [r3, #1234]	; 0x4d2
  pConfig->stOutput[10].nResetLimit = 0;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4

  pConfig->stOutput[11].nEnabled = 1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
  pConfig->stOutput[11].nInput = 70;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2246      	movs	r2, #70	; 0x46
 8005346:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
  pConfig->stOutput[11].nTriggerLevel = 0;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
  pConfig->stOutput[11].nCurrentLimit = 0;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f8a3 24e2 	strh.w	r2, [r3, #1250]	; 0x4e2
  pConfig->stOutput[11].nInrushLimit = 0;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 24e4 	strh.w	r2, [r3, #1252]	; 0x4e4
  pConfig->stOutput[11].nInrushTime = 0;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 24e6 	strh.w	r2, [r3, #1254]	; 0x4e6
  pConfig->stOutput[11].eResetMode = RESET_ENDLESS;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
  pConfig->stOutput[11].nResetTime = 0;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f8a3 24ea 	strh.w	r2, [r3, #1258]	; 0x4ea
  pConfig->stOutput[11].nResetLimit = 0;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec

  //Virtual Inputs
  pConfig->stVirtualInput[0].nEnabled = 1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  pConfig->stVirtualInput[0].nNot0 = 0;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  pConfig->stVirtualInput[0].nVar0 = 10;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	220a      	movs	r2, #10
 8005396:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  pConfig->stVirtualInput[0].eCond0 = COND_AND;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
  pConfig->stVirtualInput[0].nNot1 = 1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
  pConfig->stVirtualInput[0].nVar1 = 63;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	223f      	movs	r2, #63	; 0x3f
 80053ae:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
  pConfig->stVirtualInput[0].eCond1 = COND_OR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  pConfig->stVirtualInput[0].nNot2 = 0;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  pConfig->stVirtualInput[0].nVar2 = 0;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  pConfig->stVirtualInput[0].eMode = MODE_LATCHING;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

  pConfig->stVirtualInput[1].nEnabled = 1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
  pConfig->stVirtualInput[1].nNot0 = 0;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
  pConfig->stVirtualInput[1].nVar0 = 11;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	220b      	movs	r2, #11
 80053e6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
  pConfig->stVirtualInput[1].eCond0 = COND_AND;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  pConfig->stVirtualInput[1].nNot1 = 1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  pConfig->stVirtualInput[1].nVar1 = 62;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	223e      	movs	r2, #62	; 0x3e
 80053fe:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
  pConfig->stVirtualInput[1].eCond1 = COND_OR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
  pConfig->stVirtualInput[1].nNot2 = 0;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
  pConfig->stVirtualInput[1].nVar2 = 0;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
  pConfig->stVirtualInput[1].eMode = MODE_LATCHING;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

  pConfig->stVirtualInput[2].nEnabled = 0;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  pConfig->stVirtualInput[2].nNot0 = 0;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  pConfig->stVirtualInput[2].nVar0 = 0;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  pConfig->stVirtualInput[2].eCond0 = COND_AND;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  pConfig->stVirtualInput[2].nNot1 = 0;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
  pConfig->stVirtualInput[2].nVar1 = 0;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
  pConfig->stVirtualInput[2].eCond1 = COND_OR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
  pConfig->stVirtualInput[2].nNot2 = 0;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  pConfig->stVirtualInput[2].nVar2 = 0;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pConfig->stVirtualInput[2].eMode = MODE_MOMENTARY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

  pConfig->stVirtualInput[3].nEnabled = 0;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
  pConfig->stVirtualInput[3].nNot0 = 0;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
  pConfig->stVirtualInput[3].nVar0 = 0;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  pConfig->stVirtualInput[3].eCond0 = COND_AND;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  pConfig->stVirtualInput[3].nNot1 = 0;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
  pConfig->stVirtualInput[3].nVar1 = 0;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
  pConfig->stVirtualInput[3].eCond1 = COND_OR;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  pConfig->stVirtualInput[3].nNot2 = 0;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
  pConfig->stVirtualInput[3].nVar2 = 0;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
  pConfig->stVirtualInput[3].eMode = MODE_MOMENTARY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

  pConfig->stVirtualInput[4].nEnabled = 0;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  pConfig->stVirtualInput[4].nNot0 = 0;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  pConfig->stVirtualInput[4].nVar0 = 0;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
  pConfig->stVirtualInput[4].eCond0 = COND_AND;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  pConfig->stVirtualInput[4].nNot1 = 0;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
  pConfig->stVirtualInput[4].nVar1 = 0;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
  pConfig->stVirtualInput[4].eCond1 = COND_OR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  pConfig->stVirtualInput[4].nNot2 = 0;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
  pConfig->stVirtualInput[4].nVar2 = 0;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
  pConfig->stVirtualInput[4].eMode = MODE_MOMENTARY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168

  pConfig->stVirtualInput[5].nEnabled = 0;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
  pConfig->stVirtualInput[5].nNot0 = 0;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
  pConfig->stVirtualInput[5].nVar0 = 0;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
  pConfig->stVirtualInput[5].eCond0 = COND_AND;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
  pConfig->stVirtualInput[5].nNot1 = 0;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
  pConfig->stVirtualInput[5].nVar1 = 0;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
  pConfig->stVirtualInput[5].eCond1 = COND_OR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
  pConfig->stVirtualInput[5].nNot2 = 0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  pConfig->stVirtualInput[5].nVar2 = 0;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  pConfig->stVirtualInput[5].eMode = MODE_MOMENTARY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

  pConfig->stVirtualInput[6].nEnabled = 0;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
  pConfig->stVirtualInput[6].nNot0 = 0;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
  pConfig->stVirtualInput[6].nVar0 = 0;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
  pConfig->stVirtualInput[6].eCond0 = COND_AND;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
  pConfig->stVirtualInput[6].nNot1 = 0;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
  pConfig->stVirtualInput[6].nVar1 = 0;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  pConfig->stVirtualInput[6].eCond1 = COND_OR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
  pConfig->stVirtualInput[6].nNot2 = 0;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
  pConfig->stVirtualInput[6].nVar2 = 0;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
  pConfig->stVirtualInput[6].eMode = MODE_MOMENTARY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8

  pConfig->stVirtualInput[7].nEnabled = 0;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
  pConfig->stVirtualInput[7].nNot0 = 0;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
  pConfig->stVirtualInput[7].nVar0 = 0;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
  pConfig->stVirtualInput[7].eCond0 = COND_AND;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  pConfig->stVirtualInput[7].nNot1 = 0;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
  pConfig->stVirtualInput[7].nVar1 = 0;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
  pConfig->stVirtualInput[7].eCond1 = COND_OR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
  pConfig->stVirtualInput[7].nNot2 = 0;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
  pConfig->stVirtualInput[7].nVar2 = 0;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
  pConfig->stVirtualInput[7].eMode = MODE_MOMENTARY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0

  pConfig->stVirtualInput[8].nEnabled = 0;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
  pConfig->stVirtualInput[8].nNot0 = 0;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
  pConfig->stVirtualInput[8].nVar0 = 0;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
  pConfig->stVirtualInput[8].eCond0 = COND_AND;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  pConfig->stVirtualInput[8].nNot1 = 0;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
  pConfig->stVirtualInput[8].nVar1 = 0;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
  pConfig->stVirtualInput[8].eCond1 = COND_OR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  pConfig->stVirtualInput[8].nNot2 = 0;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  pConfig->stVirtualInput[8].nVar2 = 0;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
  pConfig->stVirtualInput[8].eMode = MODE_MOMENTARY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

  pConfig->stVirtualInput[9].nEnabled = 0;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
  pConfig->stVirtualInput[9].nNot0 = 0;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
  pConfig->stVirtualInput[9].nVar0 = 0;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
  pConfig->stVirtualInput[9].eCond0 = COND_AND;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  pConfig->stVirtualInput[9].nNot1 = 0;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
  pConfig->stVirtualInput[9].nVar1 = 0;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
  pConfig->stVirtualInput[9].eCond1 = COND_OR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  pConfig->stVirtualInput[9].nNot2 = 0;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  pConfig->stVirtualInput[9].nVar2 = 0;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
  pConfig->stVirtualInput[9].eMode = MODE_MOMENTARY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230

  pConfig->stVirtualInput[10].nEnabled = 0;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
  pConfig->stVirtualInput[10].nNot0 = 0;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
  pConfig->stVirtualInput[10].nVar0 = 0;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
  pConfig->stVirtualInput[10].eCond0 = COND_AND;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
  pConfig->stVirtualInput[10].nNot1 = 0;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
  pConfig->stVirtualInput[10].nVar1 = 0;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
  pConfig->stVirtualInput[10].eCond1 = COND_OR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
  pConfig->stVirtualInput[10].nNot2 = 0;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
  pConfig->stVirtualInput[10].nVar2 = 0;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
  pConfig->stVirtualInput[10].eMode = MODE_MOMENTARY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258

  pConfig->stVirtualInput[11].nEnabled = 0;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
  pConfig->stVirtualInput[11].nNot0 = 0;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
  pConfig->stVirtualInput[11].nVar0 = 0;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
  pConfig->stVirtualInput[11].eCond0 = COND_AND;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
  pConfig->stVirtualInput[11].nNot1 = 0;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
  pConfig->stVirtualInput[11].nVar1 = 0;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
  pConfig->stVirtualInput[11].eCond1 = COND_OR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
  pConfig->stVirtualInput[11].nNot2 = 0;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
  pConfig->stVirtualInput[11].nVar2 = 0;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
  pConfig->stVirtualInput[11].eMode = MODE_MOMENTARY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280

  pConfig->stVirtualInput[12].nEnabled = 0;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  pConfig->stVirtualInput[12].nNot0 = 0;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  pConfig->stVirtualInput[12].nVar0 = 0;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
  pConfig->stVirtualInput[12].eCond0 = COND_AND;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
  pConfig->stVirtualInput[12].nNot1 = 0;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
  pConfig->stVirtualInput[12].nVar1 = 0;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
  pConfig->stVirtualInput[12].eCond1 = COND_OR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
  pConfig->stVirtualInput[12].nNot2 = 0;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
  pConfig->stVirtualInput[12].nVar2 = 0;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
  pConfig->stVirtualInput[12].eMode = MODE_MOMENTARY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  pConfig->stVirtualInput[13].nEnabled = 0;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  pConfig->stVirtualInput[13].nNot0 = 0;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
  pConfig->stVirtualInput[13].nVar0 = 0;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
  pConfig->stVirtualInput[13].eCond0 = COND_AND;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
  pConfig->stVirtualInput[13].nNot1 = 0;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
  pConfig->stVirtualInput[13].nVar1 = 0;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
  pConfig->stVirtualInput[13].eCond1 = COND_OR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
  pConfig->stVirtualInput[13].nNot2 = 0;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
  pConfig->stVirtualInput[13].nVar2 = 0;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
  pConfig->stVirtualInput[13].eMode = MODE_MOMENTARY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0

  pConfig->stVirtualInput[14].nEnabled = 0;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
  pConfig->stVirtualInput[14].nNot0 = 0;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
  pConfig->stVirtualInput[14].nVar0 = 0;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
  pConfig->stVirtualInput[14].eCond0 = COND_AND;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
  pConfig->stVirtualInput[14].nNot1 = 0;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
  pConfig->stVirtualInput[14].nVar1 = 0;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
  pConfig->stVirtualInput[14].eCond1 = COND_OR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
  pConfig->stVirtualInput[14].nNot2 = 0;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
  pConfig->stVirtualInput[14].nVar2 = 0;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
  pConfig->stVirtualInput[14].eMode = MODE_MOMENTARY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  pConfig->stVirtualInput[15].nEnabled = 0;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  pConfig->stVirtualInput[15].nNot0 = 0;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
  pConfig->stVirtualInput[15].nVar0 = 0;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  pConfig->stVirtualInput[15].eCond0 = COND_AND;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  pConfig->stVirtualInput[15].nNot1 = 0;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  pConfig->stVirtualInput[15].nVar1 = 0;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  pConfig->stVirtualInput[15].eCond1 = COND_OR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  pConfig->stVirtualInput[15].nNot2 = 0;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  pConfig->stVirtualInput[15].nVar2 = 0;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
  pConfig->stVirtualInput[15].eMode = MODE_MOMENTARY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  pConfig->stVirtualInput[16].nEnabled = 0;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
  pConfig->stVirtualInput[16].nNot0 = 0;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
  pConfig->stVirtualInput[16].nVar0 = 0;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
  pConfig->stVirtualInput[16].eCond0 = COND_AND;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  pConfig->stVirtualInput[16].nNot1 = 0;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
  pConfig->stVirtualInput[16].nVar1 = 0;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
  pConfig->stVirtualInput[16].eCond1 = COND_OR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
  pConfig->stVirtualInput[16].nNot2 = 0;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
  pConfig->stVirtualInput[16].nVar2 = 0;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
  pConfig->stVirtualInput[16].eMode = MODE_MOMENTARY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348

  pConfig->stVirtualInput[17].nEnabled = 0;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
  pConfig->stVirtualInput[17].nNot0 = 0;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
  pConfig->stVirtualInput[17].nVar0 = 0;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
  pConfig->stVirtualInput[17].eCond0 = COND_AND;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
  pConfig->stVirtualInput[17].nNot1 = 0;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
  pConfig->stVirtualInput[17].nVar1 = 0;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
  pConfig->stVirtualInput[17].eCond1 = COND_OR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
  pConfig->stVirtualInput[17].nNot2 = 0;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
  pConfig->stVirtualInput[17].nVar2 = 0;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
  pConfig->stVirtualInput[17].eMode = MODE_MOMENTARY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  pConfig->stVirtualInput[18].nEnabled = 0;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  pConfig->stVirtualInput[18].nNot0 = 0;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
  pConfig->stVirtualInput[18].nVar0 = 0;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
  pConfig->stVirtualInput[18].eCond0 = COND_AND;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
  pConfig->stVirtualInput[18].nNot1 = 0;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
  pConfig->stVirtualInput[18].nVar1 = 0;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
  pConfig->stVirtualInput[18].eCond1 = COND_OR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
  pConfig->stVirtualInput[18].nNot2 = 0;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
  pConfig->stVirtualInput[18].nVar2 = 0;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
  pConfig->stVirtualInput[18].eMode = MODE_MOMENTARY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

  pConfig->stVirtualInput[19].nEnabled = 0;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
  pConfig->stVirtualInput[19].nNot0 = 0;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
  pConfig->stVirtualInput[19].nVar0 = 0;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
  pConfig->stVirtualInput[19].eCond0 = COND_AND;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
  pConfig->stVirtualInput[19].nNot1 = 0;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
  pConfig->stVirtualInput[19].nVar1 = 0;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
  pConfig->stVirtualInput[19].eCond1 = COND_OR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  pConfig->stVirtualInput[19].nNot2 = 0;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  pConfig->stVirtualInput[19].nVar2 = 0;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
  pConfig->stVirtualInput[19].eMode = MODE_MOMENTARY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  //Wiper
  pConfig->stWiper.nEnabled = 1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
  pConfig->stWiper.nMode = 2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
  pConfig->stWiper.nSlowInput = 0;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
  pConfig->stWiper.nFastInput = 0;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
  pConfig->stWiper.nInterInput = 0;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  pConfig->stWiper.nOnInput = 15;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	220f      	movs	r2, #15
 80059ee:	f883 24f5 	strb.w	r2, [r3, #1269]	; 0x4f5
  pConfig->stWiper.nSpeedInput = 7;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2207      	movs	r2, #7
 80059f6:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
  pConfig->stWiper.nParkInput = 1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
  pConfig->stWiper.nParkStopLevel = 0;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
  pConfig->stWiper.nSwipeInput = 4;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
  pConfig->stWiper.nWashInput = 14;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	220e      	movs	r2, #14
 8005a16:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
  pConfig->stWiper.nWashWipeCycles = 2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
  pConfig->stWiper.nSpeedMap[0] = 3;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2203      	movs	r2, #3
 8005a26:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
  pConfig->stWiper.nSpeedMap[1] = 4;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2204      	movs	r2, #4
 8005a2e:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd
  pConfig->stWiper.nSpeedMap[2] = 5;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2205      	movs	r2, #5
 8005a36:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
  pConfig->stWiper.nSpeedMap[3] = 6;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2206      	movs	r2, #6
 8005a3e:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
  pConfig->stWiper.nSpeedMap[4] = 7;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2207      	movs	r2, #7
 8005a46:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  pConfig->stWiper.nSpeedMap[5] = 8;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
  pConfig->stWiper.nSpeedMap[6] = 1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
  pConfig->stWiper.nSpeedMap[7] = 2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
  pConfig->stWiper.nIntermitTime[0] = 1000;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a68:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
  pConfig->stWiper.nIntermitTime[1] = 2000;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005a72:	f8a3 2506 	strh.w	r2, [r3, #1286]	; 0x506
  pConfig->stWiper.nIntermitTime[2] = 3000;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005a7c:	f8a3 2508 	strh.w	r2, [r3, #1288]	; 0x508
  pConfig->stWiper.nIntermitTime[3] = 4000;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005a86:	f8a3 250a 	strh.w	r2, [r3, #1290]	; 0x50a
  pConfig->stWiper.nIntermitTime[4] = 5000;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a90:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
  pConfig->stWiper.nIntermitTime[5] = 6000;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f241 7270 	movw	r2, #6000	; 0x1770
 8005a9a:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e

  //Flasher
  pConfig->stFlasher[0].nEnabled = 1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
  pConfig->stFlasher[0].nInput = 37;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2225      	movs	r2, #37	; 0x25
 8005aaa:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
  pConfig->stFlasher[0].nFlashOnTime = 500;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ab4:	f8a3 2518 	strh.w	r2, [r3, #1304]	; 0x518
  pConfig->stFlasher[0].nFlashOffTime = 500;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005abe:	f8a3 251a 	strh.w	r2, [r3, #1306]	; 0x51a
  pConfig->stFlasher[0].nSingleCycle = 0;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
  pConfig->stFlasher[0].nOutput = 5;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2205      	movs	r2, #5
 8005ace:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d

  pConfig->stFlasher[1].nEnabled = 1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
  pConfig->stFlasher[1].nInput = 38;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2226      	movs	r2, #38	; 0x26
 8005ade:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
  pConfig->stFlasher[1].nFlashOnTime = 500;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ae8:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
  pConfig->stFlasher[1].nFlashOffTime = 500;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005af2:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
  pConfig->stFlasher[1].nSingleCycle = 0;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534
  pConfig->stFlasher[1].nOutput = 6;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2206      	movs	r2, #6
 8005b02:	f883 2535 	strb.w	r2, [r3, #1333]	; 0x535

  pConfig->stFlasher[2].nEnabled = 0;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
  pConfig->stFlasher[2].nInput = 0;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
  pConfig->stFlasher[2].nFlashOnTime = 0;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
  pConfig->stFlasher[2].nFlashOffTime = 0;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
  pConfig->stFlasher[2].nSingleCycle = 0;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 254c 	strb.w	r2, [r3, #1356]	; 0x54c
  pConfig->stFlasher[2].nOutput = 0;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 254d 	strb.w	r2, [r3, #1357]	; 0x54d

  pConfig->stFlasher[3].nEnabled = 0;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
  pConfig->stFlasher[3].nInput = 0;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
  pConfig->stFlasher[3].nFlashOnTime = 0;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8a3 2560 	strh.w	r2, [r3, #1376]	; 0x560
  pConfig->stFlasher[3].nFlashOffTime = 0;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8a3 2562 	strh.w	r2, [r3, #1378]	; 0x562
  pConfig->stFlasher[3].nSingleCycle = 0;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2564 	strb.w	r2, [r3, #1380]	; 0x564
  pConfig->stFlasher[3].nOutput = 0;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2565 	strb.w	r2, [r3, #1381]	; 0x565

  //Starter
  pConfig->stStarter.nEnabled = 1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
  pConfig->stStarter.nInput = 8;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2208      	movs	r2, #8
 8005b72:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
  pConfig->stStarter.nDisableOut[0] = 0;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
  pConfig->stStarter.nDisableOut[1] = 1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
  pConfig->stStarter.nDisableOut[2] = 0;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
  pConfig->stStarter.nDisableOut[3] = 0;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
  pConfig->stStarter.nDisableOut[4] = 0;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
  pConfig->stStarter.nDisableOut[5] = 0;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
  pConfig->stStarter.nDisableOut[6] = 0;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
  pConfig->stStarter.nDisableOut[7] = 0;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
  pConfig->stStarter.nDisableOut[8] = 0;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
  pConfig->stStarter.nDisableOut[9] = 0;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
  pConfig->stStarter.nDisableOut[10] = 0;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
  pConfig->stStarter.nDisableOut[11] = 0;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583

  //CAN Input
  pConfig->stCanInput[0].nEnabled = 1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
  pConfig->stCanInput[0].nId = 1602;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f240 6242 	movw	r2, #1602	; 0x642
 8005be4:	f8a3 2586 	strh.w	r2, [r3, #1414]	; 0x586
  pConfig->stCanInput[0].nLowByte = 0;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8a3 2588 	strh.w	r2, [r3, #1416]	; 0x588
  pConfig->stCanInput[0].nHighByte = 0;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8a3 258a 	strh.w	r2, [r3, #1418]	; 0x58a
  pConfig->stCanInput[0].eOperator = OPER_BITWISE_AND;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	f883 258c 	strb.w	r2, [r3, #1420]	; 0x58c
  pConfig->stCanInput[0].nOnVal = 0xF;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	220f      	movs	r2, #15
 8005c04:	f8a3 258e 	strh.w	r2, [r3, #1422]	; 0x58e
  pConfig->stCanInput[0].eMode = MODE_NUM;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590

  pConfig->stCanInput[1].nEnabled = 1;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
  pConfig->stCanInput[1].nId = 1602;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f240 6242 	movw	r2, #1602	; 0x642
 8005c1e:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
  pConfig->stCanInput[1].nLowByte = 4;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2204      	movs	r2, #4
 8005c26:	f8a3 25a4 	strh.w	r2, [r3, #1444]	; 0x5a4
  pConfig->stCanInput[1].nHighByte = 0;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8a3 25a6 	strh.w	r2, [r3, #1446]	; 0x5a6
  pConfig->stCanInput[1].eOperator = OPER_BITWISE_AND;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2203      	movs	r2, #3
 8005c36:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
  pConfig->stCanInput[1].nOnVal = 0x1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f8a3 25aa 	strh.w	r2, [r3, #1450]	; 0x5aa
  pConfig->stCanInput[1].eMode = MODE_MOMENTARY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac

  pConfig->stCanInput[2].nEnabled = 1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 25bc 	strb.w	r2, [r3, #1468]	; 0x5bc
  pConfig->stCanInput[2].nId = 1602;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f240 6242 	movw	r2, #1602	; 0x642
 8005c58:	f8a3 25be 	strh.w	r2, [r3, #1470]	; 0x5be
  pConfig->stCanInput[2].nLowByte = 4;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	f8a3 25c0 	strh.w	r2, [r3, #1472]	; 0x5c0
  pConfig->stCanInput[2].nHighByte = 0;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8a3 25c2 	strh.w	r2, [r3, #1474]	; 0x5c2
  pConfig->stCanInput[2].eOperator = OPER_BITWISE_AND;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2203      	movs	r2, #3
 8005c70:	f883 25c4 	strb.w	r2, [r3, #1476]	; 0x5c4
  pConfig->stCanInput[2].nOnVal = 0x2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f8a3 25c6 	strh.w	r2, [r3, #1478]	; 0x5c6
  pConfig->stCanInput[2].eMode = MODE_MOMENTARY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8

  pConfig->stCanInput[3].nEnabled = 1;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
  pConfig->stCanInput[3].nId = 1602;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f240 6242 	movw	r2, #1602	; 0x642
 8005c92:	f8a3 25da 	strh.w	r2, [r3, #1498]	; 0x5da
  pConfig->stCanInput[3].nLowByte = 4;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	f8a3 25dc 	strh.w	r2, [r3, #1500]	; 0x5dc
  pConfig->stCanInput[3].nHighByte = 0;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8a3 25de 	strh.w	r2, [r3, #1502]	; 0x5de
  pConfig->stCanInput[3].eOperator = OPER_BITWISE_AND;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2203      	movs	r2, #3
 8005caa:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
  pConfig->stCanInput[3].nOnVal = 0x4;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	f8a3 25e2 	strh.w	r2, [r3, #1506]	; 0x5e2
  pConfig->stCanInput[3].eMode = MODE_MOMENTARY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 25e4 	strb.w	r2, [r3, #1508]	; 0x5e4

  pConfig->stCanInput[4].nEnabled = 1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
  pConfig->stCanInput[4].nId = 1602;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f240 6242 	movw	r2, #1602	; 0x642
 8005ccc:	f8a3 25f6 	strh.w	r2, [r3, #1526]	; 0x5f6
  pConfig->stCanInput[4].nLowByte = 4;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	f8a3 25f8 	strh.w	r2, [r3, #1528]	; 0x5f8
  pConfig->stCanInput[4].nHighByte = 0;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8a3 25fa 	strh.w	r2, [r3, #1530]	; 0x5fa
  pConfig->stCanInput[4].eOperator = OPER_BITWISE_AND;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
  pConfig->stCanInput[4].nOnVal = 0x8;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2208      	movs	r2, #8
 8005cec:	f8a3 25fe 	strh.w	r2, [r3, #1534]	; 0x5fe
  pConfig->stCanInput[4].eMode = MODE_MOMENTARY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600

  pConfig->stCanInput[5].nEnabled = 1;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
  pConfig->stCanInput[5].nId = 1602;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f240 6242 	movw	r2, #1602	; 0x642
 8005d06:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
  pConfig->stCanInput[5].nLowByte = 4;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
  pConfig->stCanInput[5].nHighByte = 0;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8a3 2616 	strh.w	r2, [r3, #1558]	; 0x616
  pConfig->stCanInput[5].eOperator = OPER_BITWISE_AND;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
  pConfig->stCanInput[5].nOnVal = 0x10;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2210      	movs	r2, #16
 8005d26:	f8a3 261a 	strh.w	r2, [r3, #1562]	; 0x61a
  pConfig->stCanInput[5].eMode = MODE_LATCHING;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 261c 	strb.w	r2, [r3, #1564]	; 0x61c

  pConfig->stCanInput[6].nEnabled = 1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
  pConfig->stCanInput[6].nId = 1602;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f240 6242 	movw	r2, #1602	; 0x642
 8005d40:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
  pConfig->stCanInput[6].nLowByte = 4;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2204      	movs	r2, #4
 8005d48:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
  pConfig->stCanInput[6].nHighByte = 0;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8a3 2632 	strh.w	r2, [r3, #1586]	; 0x632
  pConfig->stCanInput[6].eOperator = OPER_BITWISE_AND;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2203      	movs	r2, #3
 8005d58:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
  pConfig->stCanInput[6].nOnVal = 0x20;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
  pConfig->stCanInput[6].eMode = MODE_LATCHING;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

  pConfig->stCanInput[7].nEnabled = 1;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
  pConfig->stCanInput[7].nId = 1602;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f240 6242 	movw	r2, #1602	; 0x642
 8005d7a:	f8a3 264a 	strh.w	r2, [r3, #1610]	; 0x64a
  pConfig->stCanInput[7].nLowByte = 4;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2204      	movs	r2, #4
 8005d82:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
  pConfig->stCanInput[7].nHighByte = 0;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
  pConfig->stCanInput[7].eOperator = OPER_BITWISE_AND;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2203      	movs	r2, #3
 8005d92:	f883 2650 	strb.w	r2, [r3, #1616]	; 0x650
  pConfig->stCanInput[7].nOnVal = 0x40;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2240      	movs	r2, #64	; 0x40
 8005d9a:	f8a3 2652 	strh.w	r2, [r3, #1618]	; 0x652
  pConfig->stCanInput[7].eMode = MODE_MOMENTARY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654

  pConfig->stCanInput[8].nEnabled = 1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
  pConfig->stCanInput[8].nId = 1602;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f240 6242 	movw	r2, #1602	; 0x642
 8005db4:	f8a3 2666 	strh.w	r2, [r3, #1638]	; 0x666
  pConfig->stCanInput[8].nLowByte = 4;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2204      	movs	r2, #4
 8005dbc:	f8a3 2668 	strh.w	r2, [r3, #1640]	; 0x668
  pConfig->stCanInput[8].nHighByte = 0;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8a3 266a 	strh.w	r2, [r3, #1642]	; 0x66a
  pConfig->stCanInput[8].eOperator = OPER_BITWISE_AND;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2203      	movs	r2, #3
 8005dcc:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
  pConfig->stCanInput[8].nOnVal = 0x80;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2280      	movs	r2, #128	; 0x80
 8005dd4:	f8a3 266e 	strh.w	r2, [r3, #1646]	; 0x66e
  pConfig->stCanInput[8].eMode = MODE_LATCHING;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670

  pConfig->stCanInput[9].nEnabled = 1;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
  pConfig->stCanInput[9].nId = 1620;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f240 6254 	movw	r2, #1620	; 0x654
 8005dee:	f8a3 2682 	strh.w	r2, [r3, #1666]	; 0x682
  pConfig->stCanInput[9].nLowByte = 4;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2204      	movs	r2, #4
 8005df6:	f8a3 2684 	strh.w	r2, [r3, #1668]	; 0x684
  pConfig->stCanInput[9].nHighByte = 5;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2205      	movs	r2, #5
 8005dfe:	f8a3 2686 	strh.w	r2, [r3, #1670]	; 0x686
  pConfig->stCanInput[9].eOperator = OPER_EQUAL;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
  pConfig->stCanInput[9].nOnVal = 1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f8a3 268a 	strh.w	r2, [r3, #1674]	; 0x68a
  pConfig->stCanInput[9].eMode = MODE_NUM;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c

  pConfig->stCanInput[10].nEnabled = 1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
  pConfig->stCanInput[10].nId = 1620;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f240 6254 	movw	r2, #1620	; 0x654
 8005e28:	f8a3 269e 	strh.w	r2, [r3, #1694]	; 0x69e
  pConfig->stCanInput[10].nLowByte = 2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f8a3 26a0 	strh.w	r2, [r3, #1696]	; 0x6a0
  pConfig->stCanInput[10].nHighByte = 3;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2203      	movs	r2, #3
 8005e38:	f8a3 26a2 	strh.w	r2, [r3, #1698]	; 0x6a2
  pConfig->stCanInput[10].eOperator = OPER_EQUAL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
  pConfig->stCanInput[10].nOnVal = 1;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f8a3 26a6 	strh.w	r2, [r3, #1702]	; 0x6a6
  pConfig->stCanInput[10].eMode = MODE_NUM;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8

  pConfig->stCanInput[11].nEnabled = 1;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
  pConfig->stCanInput[11].nId = 1620;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f240 6254 	movw	r2, #1620	; 0x654
 8005e62:	f8a3 26ba 	strh.w	r2, [r3, #1722]	; 0x6ba
  pConfig->stCanInput[11].nLowByte = 0;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8a3 26bc 	strh.w	r2, [r3, #1724]	; 0x6bc
  pConfig->stCanInput[11].nHighByte = 1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f8a3 26be 	strh.w	r2, [r3, #1726]	; 0x6be
  pConfig->stCanInput[11].eOperator = OPER_EQUAL;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 26c0 	strb.w	r2, [r3, #1728]	; 0x6c0
  pConfig->stCanInput[11].nOnVal = 1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f8a3 26c2 	strh.w	r2, [r3, #1730]	; 0x6c2
  pConfig->stCanInput[11].eMode = MODE_NUM;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4

  pConfig->stCanInput[12].nEnabled = 1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
  pConfig->stCanInput[12].nId = 1620;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f240 6254 	movw	r2, #1620	; 0x654
 8005e9c:	f8a3 26d6 	strh.w	r2, [r3, #1750]	; 0x6d6
  pConfig->stCanInput[12].nLowByte = 6;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2206      	movs	r2, #6
 8005ea4:	f8a3 26d8 	strh.w	r2, [r3, #1752]	; 0x6d8
  pConfig->stCanInput[12].nHighByte = 7;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2207      	movs	r2, #7
 8005eac:	f8a3 26da 	strh.w	r2, [r3, #1754]	; 0x6da
  pConfig->stCanInput[12].eOperator = OPER_EQUAL;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
  pConfig->stCanInput[12].nOnVal = 1;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
  pConfig->stCanInput[12].eMode = MODE_NUM;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0

  pConfig->stCanInput[13].nEnabled = 1;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 26f0 	strb.w	r2, [r3, #1776]	; 0x6f0
  pConfig->stCanInput[13].nId = 1621;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f240 6255 	movw	r2, #1621	; 0x655
 8005ed6:	f8a3 26f2 	strh.w	r2, [r3, #1778]	; 0x6f2
  pConfig->stCanInput[13].nLowByte = 0;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f8a3 26f4 	strh.w	r2, [r3, #1780]	; 0x6f4
  pConfig->stCanInput[13].nHighByte = 1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f8a3 26f6 	strh.w	r2, [r3, #1782]	; 0x6f6
  pConfig->stCanInput[13].eOperator = OPER_EQUAL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
  pConfig->stCanInput[13].nOnVal = 1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f8a3 26fa 	strh.w	r2, [r3, #1786]	; 0x6fa
  pConfig->stCanInput[13].eMode = MODE_NUM;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc

  pConfig->stCanInput[14].nEnabled = 1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
  pConfig->stCanInput[14].nId = 1621;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f240 6255 	movw	r2, #1621	; 0x655
 8005f10:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
  pConfig->stCanInput[14].nLowByte = 2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
  pConfig->stCanInput[14].nHighByte = 3;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2203      	movs	r2, #3
 8005f20:	f8a3 2712 	strh.w	r2, [r3, #1810]	; 0x712
  pConfig->stCanInput[14].eOperator = OPER_EQUAL;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
  pConfig->stCanInput[14].nOnVal = 1;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f8a3 2716 	strh.w	r2, [r3, #1814]	; 0x716
  pConfig->stCanInput[14].eMode = MODE_NUM;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718

  pConfig->stCanInput[15].nEnabled = 1;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
  pConfig->stCanInput[15].nId = 1622;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f240 6256 	movw	r2, #1622	; 0x656
 8005f4a:	f8a3 272a 	strh.w	r2, [r3, #1834]	; 0x72a
  pConfig->stCanInput[15].nLowByte = 0;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8a3 272c 	strh.w	r2, [r3, #1836]	; 0x72c
  pConfig->stCanInput[15].nHighByte = 0;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8a3 272e 	strh.w	r2, [r3, #1838]	; 0x72e
  pConfig->stCanInput[15].eOperator = OPER_BITWISE_AND;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2203      	movs	r2, #3
 8005f62:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
  pConfig->stCanInput[15].nOnVal = 0x01;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
  pConfig->stCanInput[15].eMode = MODE_MOMENTARY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2734 	strb.w	r2, [r3, #1844]	; 0x734

  pConfig->stCanInput[16].nEnabled = 1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2744 	strb.w	r2, [r3, #1860]	; 0x744
  pConfig->stCanInput[16].nId = 1622;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f240 6256 	movw	r2, #1622	; 0x656
 8005f84:	f8a3 2746 	strh.w	r2, [r3, #1862]	; 0x746
  pConfig->stCanInput[16].nLowByte = 0;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8a3 2748 	strh.w	r2, [r3, #1864]	; 0x748
  pConfig->stCanInput[16].nHighByte = 0;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8a3 274a 	strh.w	r2, [r3, #1866]	; 0x74a
  pConfig->stCanInput[16].eOperator = OPER_BITWISE_AND;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
  pConfig->stCanInput[16].nOnVal = 0x02;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f8a3 274e 	strh.w	r2, [r3, #1870]	; 0x74e
  pConfig->stCanInput[16].eMode = MODE_MOMENTARY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750

  pConfig->stCanInput[17].nEnabled = 1;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
  pConfig->stCanInput[17].nId = 1622;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f240 6256 	movw	r2, #1622	; 0x656
 8005fbe:	f8a3 2762 	strh.w	r2, [r3, #1890]	; 0x762
  pConfig->stCanInput[17].nLowByte = 0;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8a3 2764 	strh.w	r2, [r3, #1892]	; 0x764
  pConfig->stCanInput[17].nHighByte = 0;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f8a3 2766 	strh.w	r2, [r3, #1894]	; 0x766
  pConfig->stCanInput[17].eOperator = OPER_BITWISE_AND;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
  pConfig->stCanInput[17].nOnVal = 0x04;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	f8a3 276a 	strh.w	r2, [r3, #1898]	; 0x76a
  pConfig->stCanInput[17].eMode = MODE_MOMENTARY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c

  pConfig->stCanInput[18].nEnabled = 1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 277c 	strb.w	r2, [r3, #1916]	; 0x77c
  pConfig->stCanInput[18].nId = 1622;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f240 6256 	movw	r2, #1622	; 0x656
 8005ff8:	f8a3 277e 	strh.w	r2, [r3, #1918]	; 0x77e
  pConfig->stCanInput[18].nLowByte = 0;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8a3 2780 	strh.w	r2, [r3, #1920]	; 0x780
  pConfig->stCanInput[18].nHighByte = 0;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f8a3 2782 	strh.w	r2, [r3, #1922]	; 0x782
  pConfig->stCanInput[18].eOperator = OPER_BITWISE_AND;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2203      	movs	r2, #3
 8006010:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
  pConfig->stCanInput[18].nOnVal = 0x08;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2208      	movs	r2, #8
 8006018:	f8a3 2786 	strh.w	r2, [r3, #1926]	; 0x786
  pConfig->stCanInput[18].eMode = MODE_MOMENTARY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788

  pConfig->stCanInput[19].nEnabled = 1;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
  pConfig->stCanInput[19].nId = 1622;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f240 6256 	movw	r2, #1622	; 0x656
 8006032:	f8a3 279a 	strh.w	r2, [r3, #1946]	; 0x79a
  pConfig->stCanInput[19].nLowByte = 0;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f8a3 279c 	strh.w	r2, [r3, #1948]	; 0x79c
  pConfig->stCanInput[19].nHighByte = 0;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f8a3 279e 	strh.w	r2, [r3, #1950]	; 0x79e
  pConfig->stCanInput[19].eOperator = OPER_BITWISE_AND;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2203      	movs	r2, #3
 800604a:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
  pConfig->stCanInput[19].nOnVal = 0x10;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2210      	movs	r2, #16
 8006052:	f8a3 27a2 	strh.w	r2, [r3, #1954]	; 0x7a2
  pConfig->stCanInput[19].eMode = MODE_MOMENTARY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 27a4 	strb.w	r2, [r3, #1956]	; 0x7a4

  pConfig->stCanInput[20].nEnabled = 1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 27b4 	strb.w	r2, [r3, #1972]	; 0x7b4
  pConfig->stCanInput[20].nId = 1622;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f240 6256 	movw	r2, #1622	; 0x656
 800606c:	f8a3 27b6 	strh.w	r2, [r3, #1974]	; 0x7b6
  pConfig->stCanInput[20].nLowByte = 0;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8a3 27b8 	strh.w	r2, [r3, #1976]	; 0x7b8
  pConfig->stCanInput[20].nHighByte = 0;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8a3 27ba 	strh.w	r2, [r3, #1978]	; 0x7ba
  pConfig->stCanInput[20].eOperator = OPER_BITWISE_AND;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2203      	movs	r2, #3
 8006084:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
  pConfig->stCanInput[20].nOnVal = 0x20;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f8a3 27be 	strh.w	r2, [r3, #1982]	; 0x7be
  pConfig->stCanInput[20].eMode = MODE_MOMENTARY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 27c0 	strb.w	r2, [r3, #1984]	; 0x7c0

  pConfig->stCanInput[21].nEnabled = 1;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
  pConfig->stCanInput[21].nId = 1622;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f240 6256 	movw	r2, #1622	; 0x656
 80060a6:	f8a3 27d2 	strh.w	r2, [r3, #2002]	; 0x7d2
  pConfig->stCanInput[21].nLowByte = 0;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8a3 27d4 	strh.w	r2, [r3, #2004]	; 0x7d4
  pConfig->stCanInput[21].nHighByte = 0;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8a3 27d6 	strh.w	r2, [r3, #2006]	; 0x7d6
  pConfig->stCanInput[21].eOperator = OPER_BITWISE_AND;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2203      	movs	r2, #3
 80060be:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
  pConfig->stCanInput[21].nOnVal = 0x40;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2240      	movs	r2, #64	; 0x40
 80060c6:	f8a3 27da 	strh.w	r2, [r3, #2010]	; 0x7da
  pConfig->stCanInput[21].eMode = MODE_MOMENTARY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc

  pConfig->stCanInput[22].nEnabled = 1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
  pConfig->stCanInput[22].nId = 1622;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f240 6256 	movw	r2, #1622	; 0x656
 80060e0:	f8a3 27ee 	strh.w	r2, [r3, #2030]	; 0x7ee
  pConfig->stCanInput[22].nLowByte = 0;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8a3 27f0 	strh.w	r2, [r3, #2032]	; 0x7f0
  pConfig->stCanInput[22].nHighByte = 0;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8a3 27f2 	strh.w	r2, [r3, #2034]	; 0x7f2
  pConfig->stCanInput[22].eOperator = OPER_BITWISE_AND;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2203      	movs	r2, #3
 80060f8:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
  pConfig->stCanInput[22].nOnVal = 0x80;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2280      	movs	r2, #128	; 0x80
 8006100:	f8a3 27f6 	strh.w	r2, [r3, #2038]	; 0x7f6
  pConfig->stCanInput[22].eMode = MODE_MOMENTARY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8

  pConfig->stCanInput[23].nEnabled = 1;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
  pConfig->stCanInput[23].nId = 1622;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f240 6256 	movw	r2, #1622	; 0x656
 800611a:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
  pConfig->stCanInput[23].nLowByte = 1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f8a3 280c 	strh.w	r2, [r3, #2060]	; 0x80c
  pConfig->stCanInput[23].nHighByte = 0;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f8a3 280e 	strh.w	r2, [r3, #2062]	; 0x80e
  pConfig->stCanInput[23].eOperator = OPER_BITWISE_AND;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2203      	movs	r2, #3
 8006132:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
  pConfig->stCanInput[23].nOnVal = 0x01;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
  pConfig->stCanInput[23].eMode = MODE_MOMENTARY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814

  pConfig->stCanInput[24].nEnabled = 1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
  pConfig->stCanInput[24].nId = 1622;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f240 6256 	movw	r2, #1622	; 0x656
 8006154:	f8a3 2826 	strh.w	r2, [r3, #2086]	; 0x826
  pConfig->stCanInput[24].nLowByte = 1;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f8a3 2828 	strh.w	r2, [r3, #2088]	; 0x828
  pConfig->stCanInput[24].nHighByte = 0;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f8a3 282a 	strh.w	r2, [r3, #2090]	; 0x82a
  pConfig->stCanInput[24].eOperator = OPER_BITWISE_AND;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2203      	movs	r2, #3
 800616c:	f883 282c 	strb.w	r2, [r3, #2092]	; 0x82c
  pConfig->stCanInput[24].nOnVal = 0x02;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f8a3 282e 	strh.w	r2, [r3, #2094]	; 0x82e
  pConfig->stCanInput[24].eMode = MODE_MOMENTARY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2830 	strb.w	r2, [r3, #2096]	; 0x830

  pConfig->stCanInput[25].nEnabled = 0;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
  pConfig->stCanInput[25].nId = 0;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f8a3 2842 	strh.w	r2, [r3, #2114]	; 0x842
  pConfig->stCanInput[25].nLowByte = 0;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f8a3 2844 	strh.w	r2, [r3, #2116]	; 0x844
  pConfig->stCanInput[25].nHighByte = 0;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8a3 2846 	strh.w	r2, [r3, #2118]	; 0x846
  pConfig->stCanInput[25].eOperator = OPER_EQUAL;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
  pConfig->stCanInput[25].nOnVal = 0;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8a3 284a 	strh.w	r2, [r3, #2122]	; 0x84a
  pConfig->stCanInput[25].eMode = MODE_MOMENTARY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 284c 	strb.w	r2, [r3, #2124]	; 0x84c

  pConfig->stCanInput[26].nEnabled = 0;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
  pConfig->stCanInput[26].nId = 0;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8a3 285e 	strh.w	r2, [r3, #2142]	; 0x85e
  pConfig->stCanInput[26].nLowByte = 0;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8a3 2860 	strh.w	r2, [r3, #2144]	; 0x860
  pConfig->stCanInput[26].nHighByte = 0;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
  pConfig->stCanInput[26].eOperator = OPER_EQUAL;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
  pConfig->stCanInput[26].nOnVal = 0;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8a3 2866 	strh.w	r2, [r3, #2150]	; 0x866
  pConfig->stCanInput[26].eMode = MODE_MOMENTARY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868

  pConfig->stCanInput[27].nEnabled = 0;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
  pConfig->stCanInput[27].nId = 0;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8a3 287a 	strh.w	r2, [r3, #2170]	; 0x87a
  pConfig->stCanInput[27].nLowByte = 0;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f8a3 287c 	strh.w	r2, [r3, #2172]	; 0x87c
  pConfig->stCanInput[27].nHighByte = 0;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f8a3 287e 	strh.w	r2, [r3, #2174]	; 0x87e
  pConfig->stCanInput[27].eOperator = OPER_EQUAL;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
  pConfig->stCanInput[27].nOnVal = 0;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8a3 2882 	strh.w	r2, [r3, #2178]	; 0x882
  pConfig->stCanInput[27].eMode = MODE_MOMENTARY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884

  pConfig->stCanInput[28].nEnabled = 0;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
  pConfig->stCanInput[28].nId = 0;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f8a3 2896 	strh.w	r2, [r3, #2198]	; 0x896
  pConfig->stCanInput[28].nLowByte = 0;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f8a3 2898 	strh.w	r2, [r3, #2200]	; 0x898
  pConfig->stCanInput[28].nHighByte = 0;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8a3 289a 	strh.w	r2, [r3, #2202]	; 0x89a
  pConfig->stCanInput[28].eOperator = OPER_EQUAL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
  pConfig->stCanInput[28].nOnVal = 0;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f8a3 289e 	strh.w	r2, [r3, #2206]	; 0x89e
  pConfig->stCanInput[28].eMode = MODE_MOMENTARY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0

  pConfig->stCanInput[29].nEnabled = 0;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 28b0 	strb.w	r2, [r3, #2224]	; 0x8b0
  pConfig->stCanInput[29].nId = 0;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8a3 28b2 	strh.w	r2, [r3, #2226]	; 0x8b2
  pConfig->stCanInput[29].nLowByte = 0;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f8a3 28b4 	strh.w	r2, [r3, #2228]	; 0x8b4
  pConfig->stCanInput[29].nHighByte = 0;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f8a3 28b6 	strh.w	r2, [r3, #2230]	; 0x8b6
  pConfig->stCanInput[29].eOperator = OPER_EQUAL;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
  pConfig->stCanInput[29].nOnVal = 0;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8a3 28ba 	strh.w	r2, [r3, #2234]	; 0x8ba
  pConfig->stCanInput[29].eMode = MODE_MOMENTARY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc

  //CAN Output
  pConfig->stCanOutput.nEnabled = 1;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
  pConfig->stCanOutput.nBaseId = 2000;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80062a6:	f8a3 28ce 	strh.w	r2, [r3, #2254]	; 0x8ce
  pConfig->stCanOutput.nUpdateTime = 50;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2232      	movs	r2, #50	; 0x32
 80062ae:	f8a3 28d0 	strh.w	r2, [r3, #2256]	; 0x8d0
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <EvaluateInput>:
 */

#include "pdm_input.h"

void EvaluateInput(PdmConfig_Input_t *pIn, uint16_t* pResult)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b086      	sub	sp, #24
 80062c2:	af02      	add	r7, sp, #8
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d017      	beq.n	8006300 <EvaluateInput+0x42>
    return;

  uint16_t nLogicResult;

  nLogicResult = *pIn->pInput > pIn->nOnLevel;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	881a      	ldrh	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	8b1b      	ldrh	r3, [r3, #24]
 80062da:	429a      	cmp	r2, r3
 80062dc:	bf8c      	ite	hi
 80062de:	2301      	movhi	r3, #1
 80062e0:	2300      	movls	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	81fb      	strh	r3, [r7, #14]

  CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nLogicResult, pResult, pIn->nDebounceTime);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f103 000c 	add.w	r0, r3, #12
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	7a19      	ldrb	r1, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8b5b      	ldrh	r3, [r3, #26]
 80062f4:	89fa      	ldrh	r2, [r7, #14]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f001 fc41 	bl	8007b80 <CheckPushbutton>
 80062fe:	e000      	b.n	8006302 <EvaluateInput+0x44>
    return;
 8006300:	bf00      	nop
}
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <EvaluateStarter>:
 */

#include "starter.h"

void EvaluateStarter(PdmConfig_Starter_t *pStarter, uint8_t nIndex, uint16_t* pResult)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	460b      	mov	r3, r1
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	72fb      	strb	r3, [r7, #11]
    if(!pStarter->nEnabled)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d103      	bne.n	8006326 <EvaluateStarter+0x1e>
      *pResult = 1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	801a      	strh	r2, [r3, #0]
    else
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
}
 8006324:	e010      	b.n	8006348 <EvaluateStarter+0x40>
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	7a1b      	ldrb	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d004      	beq.n	800633c <EvaluateStarter+0x34>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <EvaluateStarter+0x38>
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <EvaluateStarter+0x3a>
 8006340:	2300      	movs	r3, #0
 8006342:	b29a      	uxth	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	801a      	strh	r2, [r3, #0]
}
 8006348:	bf00      	nop
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800635a:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <HAL_MspInit+0x4c>)
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	4a10      	ldr	r2, [pc, #64]	; (80063a0 <HAL_MspInit+0x4c>)
 8006360:	f043 0301 	orr.w	r3, r3, #1
 8006364:	6193      	str	r3, [r2, #24]
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <HAL_MspInit+0x4c>)
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	607b      	str	r3, [r7, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <HAL_MspInit+0x4c>)
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	4a0a      	ldr	r2, [pc, #40]	; (80063a0 <HAL_MspInit+0x4c>)
 8006378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637c:	61d3      	str	r3, [r2, #28]
 800637e:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <HAL_MspInit+0x4c>)
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800638a:	2200      	movs	r2, #0
 800638c:	210f      	movs	r1, #15
 800638e:	f06f 0001 	mvn.w	r0, #1
 8006392:	f004 f92b 	bl	800a5ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40021000 	.word	0x40021000

080063a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08a      	sub	sp, #40	; 0x28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063ac:	f107 0314 	add.w	r3, r7, #20
 80063b0:	2200      	movs	r2, #0
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	605a      	str	r2, [r3, #4]
 80063b6:	609a      	str	r2, [r3, #8]
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063c4:	d134      	bne.n	8006430 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80063c6:	4b45      	ldr	r3, [pc, #276]	; (80064dc <HAL_ADC_MspInit+0x138>)
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	4a44      	ldr	r2, [pc, #272]	; (80064dc <HAL_ADC_MspInit+0x138>)
 80063cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d0:	6153      	str	r3, [r2, #20]
 80063d2:	4b42      	ldr	r3, [pc, #264]	; (80064dc <HAL_ADC_MspInit+0x138>)
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063da:	613b      	str	r3, [r7, #16]
 80063dc:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80063de:	4b40      	ldr	r3, [pc, #256]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 80063e0:	4a40      	ldr	r2, [pc, #256]	; (80064e4 <HAL_ADC_MspInit+0x140>)
 80063e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063e4:	4b3e      	ldr	r3, [pc, #248]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80063ea:	4b3d      	ldr	r3, [pc, #244]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80063f0:	4b3b      	ldr	r3, [pc, #236]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 80063f2:	2280      	movs	r2, #128	; 0x80
 80063f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80063f6:	4b3a      	ldr	r3, [pc, #232]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 80063f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80063fe:	4b38      	ldr	r3, [pc, #224]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 8006400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006404:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006406:	4b36      	ldr	r3, [pc, #216]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 8006408:	2220      	movs	r2, #32
 800640a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800640c:	4b34      	ldr	r3, [pc, #208]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 800640e:	2200      	movs	r2, #0
 8006410:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006412:	4833      	ldr	r0, [pc, #204]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 8006414:	f004 f9fe 	bl	800a814 <HAL_DMA_Init>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 800641e:	f7fd f9fb 	bl	8003818 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a2e      	ldr	r2, [pc, #184]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
 8006428:	4a2d      	ldr	r2, [pc, #180]	; (80064e0 <HAL_ADC_MspInit+0x13c>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800642e:	e051      	b.n	80064d4 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC4)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2c      	ldr	r2, [pc, #176]	; (80064e8 <HAL_ADC_MspInit+0x144>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d14c      	bne.n	80064d4 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800643a:	4b28      	ldr	r3, [pc, #160]	; (80064dc <HAL_ADC_MspInit+0x138>)
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4a27      	ldr	r2, [pc, #156]	; (80064dc <HAL_ADC_MspInit+0x138>)
 8006440:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006444:	6153      	str	r3, [r2, #20]
 8006446:	4b25      	ldr	r3, [pc, #148]	; (80064dc <HAL_ADC_MspInit+0x138>)
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006452:	4b22      	ldr	r3, [pc, #136]	; (80064dc <HAL_ADC_MspInit+0x138>)
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	4a21      	ldr	r2, [pc, #132]	; (80064dc <HAL_ADC_MspInit+0x138>)
 8006458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800645c:	6153      	str	r3, [r2, #20]
 800645e:	4b1f      	ldr	r3, [pc, #124]	; (80064dc <HAL_ADC_MspInit+0x138>)
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006466:	60bb      	str	r3, [r7, #8]
 8006468:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 800646a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800646e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006470:	2303      	movs	r3, #3
 8006472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8006478:	f107 0314 	add.w	r3, r7, #20
 800647c:	4619      	mov	r1, r3
 800647e:	481b      	ldr	r0, [pc, #108]	; (80064ec <HAL_ADC_MspInit+0x148>)
 8006480:	f004 fb7c 	bl	800ab7c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8006484:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 8006486:	4a1b      	ldr	r2, [pc, #108]	; (80064f4 <HAL_ADC_MspInit+0x150>)
 8006488:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800648a:	4b19      	ldr	r3, [pc, #100]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 800648c:	2200      	movs	r2, #0
 800648e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8006490:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8006496:	4b16      	ldr	r3, [pc, #88]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 8006498:	2280      	movs	r2, #128	; 0x80
 800649a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800649c:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 800649e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064a2:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80064a4:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 80064a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064aa:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80064ac:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 80064ae:	2220      	movs	r2, #32
 80064b0:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80064b2:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80064b8:	480d      	ldr	r0, [pc, #52]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 80064ba:	f004 f9ab 	bl	800a814 <HAL_DMA_Init>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_ADC_MspInit+0x124>
      Error_Handler();
 80064c4:	f7fd f9a8 	bl	8003818 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a09      	ldr	r2, [pc, #36]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38
 80064ce:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <HAL_ADC_MspInit+0x14c>)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80064d4:	bf00      	nop
 80064d6:	3728      	adds	r7, #40	; 0x28
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40021000 	.word	0x40021000
 80064e0:	2000245c 	.word	0x2000245c
 80064e4:	40020008 	.word	0x40020008
 80064e8:	50000500 	.word	0x50000500
 80064ec:	48000400 	.word	0x48000400
 80064f0:	200024a0 	.word	0x200024a0
 80064f4:	4002041c 	.word	0x4002041c

080064f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006500:	f107 0314 	add.w	r3, r7, #20
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	609a      	str	r2, [r3, #8]
 800650c:	60da      	str	r2, [r3, #12]
 800650e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <HAL_CAN_MspInit+0x8c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d130      	bne.n	800657c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800651a:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <HAL_CAN_MspInit+0x90>)
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	4a1a      	ldr	r2, [pc, #104]	; (8006588 <HAL_CAN_MspInit+0x90>)
 8006520:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006524:	61d3      	str	r3, [r2, #28]
 8006526:	4b18      	ldr	r3, [pc, #96]	; (8006588 <HAL_CAN_MspInit+0x90>)
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006532:	4b15      	ldr	r3, [pc, #84]	; (8006588 <HAL_CAN_MspInit+0x90>)
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	4a14      	ldr	r2, [pc, #80]	; (8006588 <HAL_CAN_MspInit+0x90>)
 8006538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800653c:	6153      	str	r3, [r2, #20]
 800653e:	4b12      	ldr	r3, [pc, #72]	; (8006588 <HAL_CAN_MspInit+0x90>)
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800654a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800654e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006550:	2302      	movs	r3, #2
 8006552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006554:	2300      	movs	r3, #0
 8006556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006558:	2303      	movs	r3, #3
 800655a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800655c:	2309      	movs	r3, #9
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006560:	f107 0314 	add.w	r3, r7, #20
 8006564:	4619      	mov	r1, r3
 8006566:	4809      	ldr	r0, [pc, #36]	; (800658c <HAL_CAN_MspInit+0x94>)
 8006568:	f004 fb08 	bl	800ab7c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800656c:	2200      	movs	r2, #0
 800656e:	2105      	movs	r1, #5
 8006570:	2014      	movs	r0, #20
 8006572:	f004 f83b 	bl	800a5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8006576:	2014      	movs	r0, #20
 8006578:	f004 f854 	bl	800a624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800657c:	bf00      	nop
 800657e:	3728      	adds	r7, #40	; 0x28
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40006400 	.word	0x40006400
 8006588:	40021000 	.word	0x40021000
 800658c:	48000400 	.word	0x48000400

08006590 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a0a      	ldr	r2, [pc, #40]	; (80065c8 <HAL_CRC_MspInit+0x38>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d10b      	bne.n	80065ba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80065a2:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <HAL_CRC_MspInit+0x3c>)
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	4a09      	ldr	r2, [pc, #36]	; (80065cc <HAL_CRC_MspInit+0x3c>)
 80065a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ac:	6153      	str	r3, [r2, #20]
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <HAL_CRC_MspInit+0x3c>)
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40023000 	.word	0x40023000
 80065cc:	40021000 	.word	0x40021000

080065d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08c      	sub	sp, #48	; 0x30
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065d8:	f107 031c 	add.w	r3, r7, #28
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	609a      	str	r2, [r3, #8]
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a2f      	ldr	r2, [pc, #188]	; (80066ac <HAL_I2C_MspInit+0xdc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d128      	bne.n	8006644 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065f2:	4b2f      	ldr	r3, [pc, #188]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	4a2e      	ldr	r2, [pc, #184]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 80065f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065fc:	6153      	str	r3, [r2, #20]
 80065fe:	4b2c      	ldr	r3, [pc, #176]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006606:	61bb      	str	r3, [r7, #24]
 8006608:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800660a:	23c0      	movs	r3, #192	; 0xc0
 800660c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800660e:	2312      	movs	r3, #18
 8006610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006612:	2301      	movs	r3, #1
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006616:	2303      	movs	r3, #3
 8006618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800661a:	2304      	movs	r3, #4
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800661e:	f107 031c 	add.w	r3, r7, #28
 8006622:	4619      	mov	r1, r3
 8006624:	4823      	ldr	r0, [pc, #140]	; (80066b4 <HAL_I2C_MspInit+0xe4>)
 8006626:	f004 faa9 	bl	800ab7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800662a:	4b21      	ldr	r3, [pc, #132]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	4a20      	ldr	r2, [pc, #128]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 8006630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006634:	61d3      	str	r3, [r2, #28]
 8006636:	4b1e      	ldr	r3, [pc, #120]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006642:	e02e      	b.n	80066a2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1b      	ldr	r2, [pc, #108]	; (80066b8 <HAL_I2C_MspInit+0xe8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d129      	bne.n	80066a2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800664e:	4b18      	ldr	r3, [pc, #96]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	4a17      	ldr	r2, [pc, #92]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 8006654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006658:	6153      	str	r3, [r2, #20]
 800665a:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006666:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800666a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800666c:	2312      	movs	r3, #18
 800666e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006670:	2301      	movs	r3, #1
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006674:	2303      	movs	r3, #3
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006678:	2304      	movs	r3, #4
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800667c:	f107 031c 	add.w	r3, r7, #28
 8006680:	4619      	mov	r1, r3
 8006682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006686:	f004 fa79 	bl	800ab7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800668a:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 8006690:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006694:	61d3      	str	r3, [r2, #28]
 8006696:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <HAL_I2C_MspInit+0xe0>)
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
}
 80066a2:	bf00      	nop
 80066a4:	3730      	adds	r7, #48	; 0x30
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	40005400 	.word	0x40005400
 80066b0:	40021000 	.word	0x40021000
 80066b4:	48000400 	.word	0x48000400
 80066b8:	40005800 	.word	0x40005800

080066bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a0d      	ldr	r2, [pc, #52]	; (8006700 <HAL_RTC_MspInit+0x44>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d111      	bne.n	80066f2 <HAL_RTC_MspInit+0x36>
 80066ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	fa93 f3a3 	rbit	r3, r3
 80066da:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066dc:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80066de:	fab3 f383 	clz	r3, r3
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	4b07      	ldr	r3, [pc, #28]	; (8006704 <HAL_RTC_MspInit+0x48>)
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	461a      	mov	r2, r3
 80066ee:	2301      	movs	r3, #1
 80066f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40002800 	.word	0x40002800
 8006704:	10908100 	.word	0x10908100

08006708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08a      	sub	sp, #40	; 0x28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006710:	f107 0314 	add.w	r3, r7, #20
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	605a      	str	r2, [r3, #4]
 800671a:	609a      	str	r2, [r3, #8]
 800671c:	60da      	str	r2, [r3, #12]
 800671e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a17      	ldr	r2, [pc, #92]	; (8006784 <HAL_SPI_MspInit+0x7c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d128      	bne.n	800677c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800672a:	4b17      	ldr	r3, [pc, #92]	; (8006788 <HAL_SPI_MspInit+0x80>)
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	4a16      	ldr	r2, [pc, #88]	; (8006788 <HAL_SPI_MspInit+0x80>)
 8006730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006734:	6193      	str	r3, [r2, #24]
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <HAL_SPI_MspInit+0x80>)
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006742:	4b11      	ldr	r3, [pc, #68]	; (8006788 <HAL_SPI_MspInit+0x80>)
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	4a10      	ldr	r2, [pc, #64]	; (8006788 <HAL_SPI_MspInit+0x80>)
 8006748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674c:	6153      	str	r3, [r2, #20]
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <HAL_SPI_MspInit+0x80>)
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800675a:	23e0      	movs	r3, #224	; 0xe0
 800675c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800675e:	2302      	movs	r3, #2
 8006760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006762:	2300      	movs	r3, #0
 8006764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006766:	2303      	movs	r3, #3
 8006768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800676a:	2305      	movs	r3, #5
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800676e:	f107 0314 	add.w	r3, r7, #20
 8006772:	4619      	mov	r1, r3
 8006774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006778:	f004 fa00 	bl	800ab7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800677c:	bf00      	nop
 800677e:	3728      	adds	r7, #40	; 0x28
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40013000 	.word	0x40013000
 8006788:	40021000 	.word	0x40021000

0800678c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08c      	sub	sp, #48	; 0x30
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800679c:	2200      	movs	r2, #0
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	2036      	movs	r0, #54	; 0x36
 80067a2:	f003 ff23 	bl	800a5ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80067a6:	2036      	movs	r0, #54	; 0x36
 80067a8:	f003 ff3c 	bl	800a624 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80067ac:	4b1f      	ldr	r3, [pc, #124]	; (800682c <HAL_InitTick+0xa0>)
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	4a1e      	ldr	r2, [pc, #120]	; (800682c <HAL_InitTick+0xa0>)
 80067b2:	f043 0310 	orr.w	r3, r3, #16
 80067b6:	61d3      	str	r3, [r2, #28]
 80067b8:	4b1c      	ldr	r3, [pc, #112]	; (800682c <HAL_InitTick+0xa0>)
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80067c4:	f107 0210 	add.w	r2, r7, #16
 80067c8:	f107 0314 	add.w	r3, r7, #20
 80067cc:	4611      	mov	r1, r2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f008 fabc 	bl	800ed4c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80067d4:	f008 fa98 	bl	800ed08 <HAL_RCC_GetPCLK1Freq>
 80067d8:	4603      	mov	r3, r0
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	4a13      	ldr	r2, [pc, #76]	; (8006830 <HAL_InitTick+0xa4>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	0c9b      	lsrs	r3, r3, #18
 80067e8:	3b01      	subs	r3, #1
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80067ec:	4b11      	ldr	r3, [pc, #68]	; (8006834 <HAL_InitTick+0xa8>)
 80067ee:	4a12      	ldr	r2, [pc, #72]	; (8006838 <HAL_InitTick+0xac>)
 80067f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80067f2:	4b10      	ldr	r3, [pc, #64]	; (8006834 <HAL_InitTick+0xa8>)
 80067f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80067f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80067fa:	4a0e      	ldr	r2, [pc, #56]	; (8006834 <HAL_InitTick+0xa8>)
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006800:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <HAL_InitTick+0xa8>)
 8006802:	2200      	movs	r2, #0
 8006804:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006806:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <HAL_InitTick+0xa8>)
 8006808:	2200      	movs	r2, #0
 800680a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800680c:	4809      	ldr	r0, [pc, #36]	; (8006834 <HAL_InitTick+0xa8>)
 800680e:	f009 f85c 	bl	800f8ca <HAL_TIM_Base_Init>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006818:	4806      	ldr	r0, [pc, #24]	; (8006834 <HAL_InitTick+0xa8>)
 800681a:	f009 f8b7 	bl	800f98c <HAL_TIM_Base_Start_IT>
 800681e:	4603      	mov	r3, r0
 8006820:	e000      	b.n	8006824 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
}
 8006824:	4618      	mov	r0, r3
 8006826:	3730      	adds	r7, #48	; 0x30
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40021000 	.word	0x40021000
 8006830:	431bde83 	.word	0x431bde83
 8006834:	20002690 	.word	0x20002690
 8006838:	40001000 	.word	0x40001000

0800683c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  __NOP();
 8006840:	bf00      	nop
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006842:	bf00      	nop
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006850:	e7fe      	b.n	8006850 <HardFault_Handler+0x4>

08006852 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006852:	b480      	push	{r7}
 8006854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006856:	e7fe      	b.n	8006856 <MemManage_Handler+0x4>

08006858 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800685c:	e7fe      	b.n	800685c <BusFault_Handler+0x4>

0800685e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800685e:	b480      	push	{r7}
 8006860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006862:	e7fe      	b.n	8006862 <UsageFault_Handler+0x4>

08006864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006868:	bf00      	nop
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
	...

08006874 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006878:	4802      	ldr	r0, [pc, #8]	; (8006884 <DMA1_Channel1_IRQHandler+0x10>)
 800687a:	f004 f871 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800687e:	bf00      	nop
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	2000245c 	.word	0x2000245c

08006888 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800688c:	4802      	ldr	r0, [pc, #8]	; (8006898 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800688e:	f003 fbc5 	bl	800a01c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8006892:	bf00      	nop
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	200024e4 	.word	0x200024e4

0800689c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80068a0:	4802      	ldr	r0, [pc, #8]	; (80068ac <TIM6_DAC_IRQHandler+0x10>)
 80068a2:	f009 f8dd 	bl	800fa60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80068a6:	bf00      	nop
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20002690 	.word	0x20002690

080068b0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80068b4:	4802      	ldr	r0, [pc, #8]	; (80068c0 <DMA2_Channel2_IRQHandler+0x10>)
 80068b6:	f004 f853 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80068ba:	bf00      	nop
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	200024a0 	.word	0x200024a0

080068c4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80068c8:	4802      	ldr	r0, [pc, #8]	; (80068d4 <USB_LP_IRQHandler+0x10>)
 80068ca:	f005 fbc4 	bl	800c056 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80068ce:	bf00      	nop
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20004e24 	.word	0x20004e24

080068d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068e4:	2300      	movs	r3, #0
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e00a      	b.n	8006900 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80068ea:	f3af 8000 	nop.w
 80068ee:	4601      	mov	r1, r0
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	60ba      	str	r2, [r7, #8]
 80068f6:	b2ca      	uxtb	r2, r1
 80068f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	3301      	adds	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	dbf0      	blt.n	80068ea <_read+0x12>
	}

return len;
 8006908:	687b      	ldr	r3, [r7, #4]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
	return -1;
 800691a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800693a:	605a      	str	r2, [r3, #4]
	return 0;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <_isatty>:

int _isatty(int file)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
	return 1;
 8006952:	2301      	movs	r3, #1
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
	return 0;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
	...

0800697c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006984:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <_sbrk+0x5c>)
 8006986:	4b15      	ldr	r3, [pc, #84]	; (80069dc <_sbrk+0x60>)
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006990:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <_sbrk+0x64>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d102      	bne.n	800699e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006998:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <_sbrk+0x64>)
 800699a:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <_sbrk+0x68>)
 800699c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <_sbrk+0x64>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4413      	add	r3, r2
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d207      	bcs.n	80069bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069ac:	f010 fae8 	bl	8016f80 <__errno>
 80069b0:	4603      	mov	r3, r0
 80069b2:	220c      	movs	r2, #12
 80069b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069b6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ba:	e009      	b.n	80069d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069bc:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <_sbrk+0x64>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <_sbrk+0x64>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4413      	add	r3, r2
 80069ca:	4a05      	ldr	r2, [pc, #20]	; (80069e0 <_sbrk+0x64>)
 80069cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069ce:	68fb      	ldr	r3, [r7, #12]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	2000a000 	.word	0x2000a000
 80069dc:	00000400 	.word	0x00000400
 80069e0:	200026dc 	.word	0x200026dc
 80069e4:	20005340 	.word	0x20005340

080069e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069ec:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <SystemInit+0x28>)
 80069ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f2:	4a07      	ldr	r2, [pc, #28]	; (8006a10 <SystemInit+0x28>)
 80069f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069fc:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <SystemInit+0x28>)
 80069fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a02:	609a      	str	r2, [r3, #8]
#endif
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	e000ed00 	.word	0xe000ed00

08006a14 <EvaluateVirtInput>:
 */

#include "virtual_input.h"

void EvaluateVirtInput(PdmConfig_VirtualInput_t *pIn, uint16_t* pResult)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 80be 	beq.w	8006ba4 <EvaluateVirtInput+0x190>
    return;
  if((pIn->pVar0 == 0) || (pIn->pVar1 == 0))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80bb 	beq.w	8006ba8 <EvaluateVirtInput+0x194>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 80b6 	beq.w	8006ba8 <EvaluateVirtInput+0x194>
    return;

  uint8_t nResult0, nResult1, nResult2, nResultSec0;

  nResult0 = *pIn->pVar0;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	73fb      	strb	r3, [r7, #15]
  if(pIn->nNot0)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d006      	beq.n	8006a5a <EvaluateVirtInput+0x46>
    nResult0 = !nResult0;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	73fb      	strb	r3, [r7, #15]

  nResult1 = *pIn->pVar1;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	73bb      	strb	r3, [r7, #14]
  if(pIn->nNot1)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7a5b      	ldrb	r3, [r3, #9]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d006      	beq.n	8006a78 <EvaluateVirtInput+0x64>
    nResult1 = !nResult1;
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	73bb      	strb	r3, [r7, #14]

  switch(pIn->eCond0)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7a1b      	ldrb	r3, [r3, #8]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d01c      	beq.n	8006aba <EvaluateVirtInput+0xa6>
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	dc25      	bgt.n	8006ad0 <EvaluateVirtInput+0xbc>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <EvaluateVirtInput+0x7a>
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d00b      	beq.n	8006aa4 <EvaluateVirtInput+0x90>
 8006a8c:	e020      	b.n	8006ad0 <EvaluateVirtInput+0xbc>
  {
  case COND_AND:
    nResultSec0 = nResult0 && nResult1;
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <EvaluateVirtInput+0x8a>
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <EvaluateVirtInput+0x8a>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <EvaluateVirtInput+0x8c>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	733b      	strb	r3, [r7, #12]
    break;
 8006aa2:	e015      	b.n	8006ad0 <EvaluateVirtInput+0xbc>
  case COND_OR:
    nResultSec0 = nResult0 || nResult1;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d102      	bne.n	8006ab0 <EvaluateVirtInput+0x9c>
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <EvaluateVirtInput+0xa0>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <EvaluateVirtInput+0xa2>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	733b      	strb	r3, [r7, #12]
    break;
 8006ab8:	e00a      	b.n	8006ad0 <EvaluateVirtInput+0xbc>
  case COND_NOR:
    nResultSec0 = !nResult0 || !nResult1;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <EvaluateVirtInput+0xb2>
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <EvaluateVirtInput+0xb6>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <EvaluateVirtInput+0xb8>
 8006aca:	2300      	movs	r3, #0
 8006acc:	733b      	strb	r3, [r7, #12]
    break;
 8006ace:	bf00      	nop
  }

  //Only 2 conditions
  if(pIn->nVar2 == 0)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	7c9b      	ldrb	r3, [r3, #18]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10c      	bne.n	8006af2 <EvaluateVirtInput+0xde>
  {
    CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0, pResult, NO_DEBOUNCE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f103 001c 	add.w	r0, r3, #28
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	7e19      	ldrb	r1, [r3, #24]
 8006ae2:	7b3b      	ldrb	r3, [r7, #12]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	f001 f848 	bl	8007b80 <CheckPushbutton>
    return;
 8006af0:	e05b      	b.n	8006baa <EvaluateVirtInput+0x196>
  }
  else
  {
    nResult2 = *pIn->pVar2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	737b      	strb	r3, [r7, #13]
    if(pIn->nNot2)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	7c5b      	ldrb	r3, [r3, #17]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d006      	beq.n	8006b10 <EvaluateVirtInput+0xfc>
      nResult2 = !nResult2;
 8006b02:	7b7b      	ldrb	r3, [r7, #13]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bf0c      	ite	eq
 8006b08:	2301      	moveq	r3, #1
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	737b      	strb	r3, [r7, #13]

    switch(pIn->eCond0)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7a1b      	ldrb	r3, [r3, #8]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d030      	beq.n	8006b7a <EvaluateVirtInput+0x166>
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	dc46      	bgt.n	8006baa <EvaluateVirtInput+0x196>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <EvaluateVirtInput+0x112>
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d015      	beq.n	8006b50 <EvaluateVirtInput+0x13c>
 8006b24:	e041      	b.n	8006baa <EvaluateVirtInput+0x196>
    {
    case COND_AND:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 && nResult2, pResult, NO_DEBOUNCE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f103 001c 	add.w	r0, r3, #28
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	7e19      	ldrb	r1, [r3, #24]
 8006b30:	7b3b      	ldrb	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <EvaluateVirtInput+0x12c>
 8006b36:	7b7b      	ldrb	r3, [r7, #13]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <EvaluateVirtInput+0x12c>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <EvaluateVirtInput+0x12e>
 8006b40:	2300      	movs	r3, #0
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	2300      	movs	r3, #0
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f001 f819 	bl	8007b80 <CheckPushbutton>
      return;
 8006b4e:	e02c      	b.n	8006baa <EvaluateVirtInput+0x196>
    case COND_OR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 || nResult2, pResult, NO_DEBOUNCE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f103 001c 	add.w	r0, r3, #28
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	7e19      	ldrb	r1, [r3, #24]
 8006b5a:	7b3b      	ldrb	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d102      	bne.n	8006b66 <EvaluateVirtInput+0x152>
 8006b60:	7b7b      	ldrb	r3, [r7, #13]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <EvaluateVirtInput+0x156>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <EvaluateVirtInput+0x158>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f001 f804 	bl	8007b80 <CheckPushbutton>
      return;
 8006b78:	e017      	b.n	8006baa <EvaluateVirtInput+0x196>
    case COND_NOR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, !nResultSec0 || !nResult2, pResult, NO_DEBOUNCE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f103 001c 	add.w	r0, r3, #28
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	7e19      	ldrb	r1, [r3, #24]
 8006b84:	7b3b      	ldrb	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <EvaluateVirtInput+0x17c>
 8006b8a:	7b7b      	ldrb	r3, [r7, #13]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <EvaluateVirtInput+0x180>
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <EvaluateVirtInput+0x182>
 8006b94:	2300      	movs	r3, #0
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f000 ffef 	bl	8007b80 <CheckPushbutton>
      return;
 8006ba2:	e002      	b.n	8006baa <EvaluateVirtInput+0x196>
    return;
 8006ba4:	bf00      	nop
 8006ba6:	e000      	b.n	8006baa <EvaluateVirtInput+0x196>
    return;
 8006ba8:	bf00      	nop
    }
  }

}
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006be8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006bb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006bb6:	e003      	b.n	8006bc0 <LoopCopyDataInit>

08006bb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006bb8:	4b0c      	ldr	r3, [pc, #48]	; (8006bec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006bba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006bbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006bbe:	3104      	adds	r1, #4

08006bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006bc0:	480b      	ldr	r0, [pc, #44]	; (8006bf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006bc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006bc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006bc8:	d3f6      	bcc.n	8006bb8 <CopyDataInit>
	ldr	r2, =_sbss
 8006bca:	4a0b      	ldr	r2, [pc, #44]	; (8006bf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006bcc:	e002      	b.n	8006bd4 <LoopFillZerobss>

08006bce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006bce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006bd0:	f842 3b04 	str.w	r3, [r2], #4

08006bd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <LoopForever+0x16>)
	cmp	r2, r3
 8006bd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006bd8:	d3f9      	bcc.n	8006bce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006bda:	f7ff ff05 	bl	80069e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bde:	f010 f9d5 	bl	8016f8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006be2:	f7fc f9b9 	bl	8002f58 <main>

08006be6 <LoopForever>:

LoopForever:
    b LoopForever
 8006be6:	e7fe      	b.n	8006be6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006be8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8006bec:	080181d0 	.word	0x080181d0
	ldr	r0, =_sdata
 8006bf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006bf4:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8006bf8:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8006bfc:	20005340 	.word	0x20005340

08006c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006c00:	e7fe      	b.n	8006c00 <ADC1_2_IRQHandler>
	...

08006c04 <ADS1x15_SendRegs>:
 */

#include "ads1x15.h"

void ADS1x15_SendRegs(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings, uint8_t channel)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	460b      	mov	r3, r1
 8006c12:	817b      	strh	r3, [r7, #10]
 8006c14:	4613      	mov	r3, r2
 8006c16:	727b      	strb	r3, [r7, #9]
	if(channel > 3) return;
 8006c18:	7a7b      	ldrb	r3, [r7, #9]
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d859      	bhi.n	8006cd2 <ADS1x15_SendRegs+0xce>

	uint16_t config =
 8006c1e:	f240 1303 	movw	r3, #259	; 0x103
 8006c22:	82fb      	strh	r3, [r7, #22]
				ADS1015_REG_CONFIG_CLAT_NONLAT |  // Non-latching (default val)
				ADS1015_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
				ADS1015_REG_CONFIG_CMODE_TRAD |   // Traditional comparator (default val)
				ADS1015_REG_CONFIG_MODE_SINGLE;

	config |= settings->dataRate;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	791b      	ldrb	r3, [r3, #4]
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	8afb      	ldrh	r3, [r7, #22]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	82fb      	strh	r3, [r7, #22]
	config |= settings->gain;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	885a      	ldrh	r2, [r3, #2]
 8006c34:	8afb      	ldrh	r3, [r7, #22]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	82fb      	strh	r3, [r7, #22]

	switch(channel){
 8006c3a:	7a7b      	ldrb	r3, [r7, #9]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d81f      	bhi.n	8006c80 <ADS1x15_SendRegs+0x7c>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <ADS1x15_SendRegs+0x44>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006c63 	.word	0x08006c63
 8006c50:	08006c6d 	.word	0x08006c6d
 8006c54:	08006c77 	.word	0x08006c77
	case (0):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8006c58:	8afb      	ldrh	r3, [r7, #22]
 8006c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c5e:	82fb      	strh	r3, [r7, #22]
		break;
 8006c60:	e00e      	b.n	8006c80 <ADS1x15_SendRegs+0x7c>
	case (1):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8006c62:	8afb      	ldrh	r3, [r7, #22]
 8006c64:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8006c68:	82fb      	strh	r3, [r7, #22]
		break;
 8006c6a:	e009      	b.n	8006c80 <ADS1x15_SendRegs+0x7c>
	case (2):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8006c6c:	8afb      	ldrh	r3, [r7, #22]
 8006c6e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8006c72:	82fb      	strh	r3, [r7, #22]
		break;
 8006c74:	e004      	b.n	8006c80 <ADS1x15_SendRegs+0x7c>
	case (3):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8006c76:	8afb      	ldrh	r3, [r7, #22]
 8006c78:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006c7c:	82fb      	strh	r3, [r7, #22]
		break;
 8006c7e:	bf00      	nop
	}

	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8006c80:	8afb      	ldrh	r3, [r7, #22]
 8006c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8a:	82fb      	strh	r3, [r7, #22]

	uint8_t writeVals[3];

	writeVals[0] = ADS1015_REG_POINTER_CONFIG;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	743b      	strb	r3, [r7, #16]
	writeVals[1] = config >> 8;
 8006c90:	8afb      	ldrh	r3, [r7, #22]
 8006c92:	0a1b      	lsrs	r3, r3, #8
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	747b      	strb	r3, [r7, #17]
	writeVals[2] = config & 0xFF;
 8006c9a:	8afb      	ldrh	r3, [r7, #22]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	74bb      	strb	r3, [r7, #18]

	HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, 100);
 8006ca0:	897b      	ldrh	r3, [r7, #10]
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	b299      	uxth	r1, r3
 8006ca6:	f107 0210 	add.w	r2, r7, #16
 8006caa:	2364      	movs	r3, #100	; 0x64
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	2303      	movs	r3, #3
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f004 f985 	bl	800afc0 <HAL_I2C_Master_Transmit>

	//Send convert register
	writeVals[0] = ADS1015_REG_POINTER_CONVERT;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	743b      	strb	r3, [r7, #16]

  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, 100);
 8006cba:	897b      	ldrh	r3, [r7, #10]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	b299      	uxth	r1, r3
 8006cc0:	f107 0210 	add.w	r2, r7, #16
 8006cc4:	2364      	movs	r3, #100	; 0x64
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2301      	movs	r3, #1
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f004 f978 	bl	800afc0 <HAL_I2C_Master_Transmit>
 8006cd0:	e000      	b.n	8006cd4 <ADS1x15_SendRegs+0xd0>
	if(channel > 3) return;
 8006cd2:	bf00      	nop
}
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop

08006cdc <ADS1x15_ReadADC>:

uint16_t ADS1x15_ReadADC(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	817b      	strh	r3, [r7, #10]
  //Read received values
	uint8_t readVals[2];

	//Msg received - comms OK
	settings->commsOk = 1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	719a      	strb	r2, [r3, #6]

	HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, 100);
 8006cf0:	897b      	ldrh	r3, [r7, #10]
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	b299      	uxth	r1, r3
 8006cf6:	f107 0214 	add.w	r2, r7, #20
 8006cfa:	2364      	movs	r3, #100	; 0x64
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	2302      	movs	r3, #2
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f004 fa51 	bl	800b1a8 <HAL_I2C_Master_Receive>

	uint16_t valRead = (readVals[0] << 8 | readVals[1]) >> settings->bitShift;
 8006d06:	7d3b      	ldrb	r3, [r7, #20]
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	7d7a      	ldrb	r2, [r7, #21]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	7952      	ldrb	r2, [r2, #5]
 8006d12:	4113      	asrs	r3, r2
 8006d14:	82fb      	strh	r3, [r7, #22]

	if (settings->deviceType == ADS1115) {
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <ADS1x15_ReadADC+0x46>
	  return valRead;
 8006d1e:	8afb      	ldrh	r3, [r7, #22]
 8006d20:	e00a      	b.n	8006d38 <ADS1x15_ReadADC+0x5c>
  }
	else {
    // Shift 12-bit results right 4 bits for the ADS1015,
    // making sure we keep the sign bit intact
    if (valRead > 0x07FF) {
 8006d22:	8afb      	ldrh	r3, [r7, #22]
 8006d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d28:	d305      	bcc.n	8006d36 <ADS1x15_ReadADC+0x5a>
      // negative number - extend the sign to 16th bit
      valRead |= 0xF000;
 8006d2a:	8afb      	ldrh	r3, [r7, #22]
 8006d2c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8006d30:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8006d34:	82fb      	strh	r3, [r7, #22]
    }
    return valRead;
 8006d36:	8afb      	ldrh	r3, [r7, #22]
  }
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <CANBoardCheckConnection>:
  rx->nHeartbeat = msg[7];
  rx->nLastHeartbeatTime = HAL_GetTick();
}

void CANBoardCheckConnection(volatile CANBoard_RX_t* rx)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d10c      	bne.n	8006d76 <CANBoardCheckConnection+0x36>
      ((HAL_GetTick() - rx->nLastHeartbeatTime) > (CANBOARD_TX_DELAY * 4)))
 8006d5c:	f001 fd0e 	bl	800877c <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	1ad3      	subs	r3, r2, r3
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 8006d68:	2bc8      	cmp	r3, #200	; 0xc8
 8006d6a:	d904      	bls.n	8006d76 <CANBoardCheckConnection+0x36>
  {
    rx->nConnected = 0;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006d74:	e003      	b.n	8006d7e <CANBoardCheckConnection+0x3e>
  }
  else
  {
    rx->nConnected = 1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }
  rx->nLastHeartbeat = rx->nHeartbeat;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <MB85RC_GetId>:
 */

#include "mb85rc.h"

void MB85RC_GetId(I2C_HandleTypeDef* hi2c, uint8_t nAddr, uint16_t* nManufId, uint16_t* nProdId)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af04      	add	r7, sp, #16
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	460b      	mov	r3, r1
 8006da2:	72fb      	strb	r3, [r7, #11]
  uint8_t nReadVals[3];

  HAL_I2C_Mem_Read(hi2c, MB85RC_SLAVE_ID, nAddr << 1, I2C_MEMADD_SIZE_8BIT, &nReadVals[0], 3, 100);
 8006da4:	7afb      	ldrb	r3, [r7, #11]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	2364      	movs	r3, #100	; 0x64
 8006dae:	9302      	str	r3, [sp, #8]
 8006db0:	2303      	movs	r3, #3
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	f107 0314 	add.w	r3, r7, #20
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	2301      	movs	r3, #1
 8006dbc:	21f8      	movs	r1, #248	; 0xf8
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f004 fbfc 	bl	800b5bc <HAL_I2C_Mem_Read>

  *nManufId = (nReadVals[0] << 4) + (nReadVals[1] >> 4);
 8006dc4:	7d3b      	ldrb	r3, [r7, #20]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	7d7b      	ldrb	r3, [r7, #21]
 8006dce:	091b      	lsrs	r3, r3, #4
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	4413      	add	r3, r2
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	801a      	strh	r2, [r3, #0]
  *nProdId = ((nReadVals[1] & 0x0F) << 8) + nReadVals[2];
 8006ddc:	7d7b      	ldrb	r3, [r7, #21]
 8006dde:	021b      	lsls	r3, r3, #8
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	7dbb      	ldrb	r3, [r7, #22]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	4413      	add	r3, r2
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	801a      	strh	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <MB85RC_CheckId>:

uint8_t MB85RC_CheckId(I2C_HandleTypeDef* hi2c, uint8_t nAddr)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  uint16_t nManufId, nProdId;

  MB85RC_GetId(hi2c, nAddr, &nManufId, &nProdId);
 8006e08:	f107 030c 	add.w	r3, r7, #12
 8006e0c:	f107 020e 	add.w	r2, r7, #14
 8006e10:	78f9      	ldrb	r1, [r7, #3]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff ffbe 	bl	8006d94 <MB85RC_GetId>

  if(nManufId != MB85RC_MANUF_ID)
 8006e18:	89fb      	ldrh	r3, [r7, #14]
 8006e1a:	2b0a      	cmp	r3, #10
 8006e1c:	d001      	beq.n	8006e22 <MB85RC_CheckId+0x26>
    return 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e006      	b.n	8006e30 <MB85RC_CheckId+0x34>
  if(nProdId != MB85RC_PROD_ID)
 8006e22:	89bb      	ldrh	r3, [r7, #12]
 8006e24:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8006e28:	d001      	beq.n	8006e2e <MB85RC_CheckId+0x32>
    return 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e000      	b.n	8006e30 <MB85RC_CheckId+0x34>

  return 1;
 8006e2e:	2301      	movs	r3, #1
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <MB85RC_Read>:

void MB85RC_Read(I2C_HandleTypeDef* hi2c, uint8_t nAddr, uint16_t nMemAddr, uint8_t* pData, uint16_t nByteLen)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af04      	add	r7, sp, #16
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	607b      	str	r3, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	72fb      	strb	r3, [r7, #11]
 8006e46:	4613      	mov	r3, r2
 8006e48:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(hi2c, nAddr << 1, (uint16_t)nMemAddr, I2C_MEMADD_SIZE_16BIT, pData, nByteLen, HAL_MAX_DELAY);
 8006e4a:	7afb      	ldrb	r3, [r7, #11]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	b299      	uxth	r1, r3
 8006e52:	893a      	ldrh	r2, [r7, #8]
 8006e54:	f04f 33ff 	mov.w	r3, #4294967295
 8006e58:	9302      	str	r3, [sp, #8]
 8006e5a:	8b3b      	ldrh	r3, [r7, #24]
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	2302      	movs	r3, #2
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f004 fba9 	bl	800b5bc <HAL_I2C_Mem_Read>
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <MB85RC_Write>:

void MB85RC_Write(I2C_HandleTypeDef* hi2c, uint8_t nAddr, uint16_t nMemAddr, uint8_t* nMemVals, uint16_t nByteLen)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b088      	sub	sp, #32
 8006e76:	af04      	add	r7, sp, #16
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	607b      	str	r3, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	72fb      	strb	r3, [r7, #11]
 8006e80:	4613      	mov	r3, r2
 8006e82:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(hi2c, nAddr << 1, (uint16_t)nMemAddr, I2C_MEMADD_SIZE_16BIT, nMemVals, nByteLen, HAL_MAX_DELAY);
 8006e84:	7afb      	ldrb	r3, [r7, #11]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	b299      	uxth	r1, r3
 8006e8c:	893a      	ldrh	r2, [r7, #8]
 8006e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e92:	9302      	str	r3, [sp, #8]
 8006e94:	8b3b      	ldrh	r3, [r7, #24]
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f004 fa78 	bl	800b394 <HAL_I2C_Mem_Write>
}
 8006ea4:	bf00      	nop
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <MCP9808_Init>:
#include "mcp9808.h"

uint8_t MCP9808_Overtemp, MCP9808_Undertemp, MCP9808_CriticalTemp;

uint8_t MCP9808_Init(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	807b      	strh	r3, [r7, #2]
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_MANUF_ID) != 0x0054)
 8006eb8:	887b      	ldrh	r3, [r7, #2]
 8006eba:	2206      	movs	r2, #6
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f989 	bl	80071d6 <MCP9808_Read16>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b54      	cmp	r3, #84	; 0x54
 8006ec8:	d001      	beq.n	8006ece <MCP9808_Init+0x22>
    return 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e015      	b.n	8006efa <MCP9808_Init+0x4e>
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_DEVICE_ID) != 0x0400)
 8006ece:	887b      	ldrh	r3, [r7, #2]
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f97e 	bl	80071d6 <MCP9808_Read16>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee0:	d001      	beq.n	8006ee6 <MCP9808_Init+0x3a>
    return 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e009      	b.n	8006efa <MCP9808_Init+0x4e>
  //B6 = 0 (Tupper Tlower window unlocked)
  //B7 = 0 (Tcrit unlocked)
  //B8 = 0 (continous conversion)
  //B9-10 = 01 (Tupper Tlower hysterisis +1.5 deg C)
  //B11-15 = 00000 (not used)
  uint16_t config = (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_HYST_1_5);
 8006ee6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006eea:	81fb      	strh	r3, [r7, #14]
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, config);
 8006eec:	89fb      	ldrh	r3, [r7, #14]
 8006eee:	8879      	ldrh	r1, [r7, #2]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f948 	bl	8007188 <MCP9808_Write16>
  return 1;
 8006ef8:	2301      	movs	r3, #1
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <MCP9808_ReadTempC>:

float MCP9808_ReadTempC(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	807b      	strh	r3, [r7, #2]
  float temp = 0.0;
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	60fb      	str	r3, [r7, #12]
  uint16_t t = MCP9808_Read16(hi2c, addr, MCP9808_REG_AMBIENT_TEMP);
 8006f16:	887b      	ldrh	r3, [r7, #2]
 8006f18:	2205      	movs	r2, #5
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f95a 	bl	80071d6 <MCP9808_Read16>
 8006f22:	4603      	mov	r3, r0
 8006f24:	817b      	strh	r3, [r7, #10]

  MCP9808_MapLimitBits(t);
 8006f26:	897b      	ldrh	r3, [r7, #10]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f905 	bl	8007138 <MCP9808_MapLimitBits>

  if (t != 0xFFFF) {
 8006f2e:	897b      	ldrh	r3, [r7, #10]
 8006f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d01d      	beq.n	8006f74 <MCP9808_ReadTempC+0x70>
    temp = t & 0x0FFF;
 8006f38:	897b      	ldrh	r3, [r7, #10]
 8006f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f46:	edc7 7a03 	vstr	s15, [r7, #12]
    temp /= 16.0;
 8006f4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f4e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8006f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f56:	edc7 7a03 	vstr	s15, [r7, #12]
    if (t & 0x1000)
 8006f5a:	897b      	ldrh	r3, [r7, #10]
 8006f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <MCP9808_ReadTempC+0x70>
      temp -= 256;
 8006f64:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f68:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006f84 <MCP9808_ReadTempC+0x80>
 8006f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f70:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  return temp;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	ee07 3a90 	vmov	s15, r3
}
 8006f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	43800000 	.word	0x43800000

08006f88 <MCP9808_ConvertToF>:
  }

  return temp;
}

float MCP9808_ConvertToF(float degC){
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	ed87 0a01 	vstr	s0, [r7, #4]
  return degC * 9.0 / 5.0 + 32;
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7f9 fa80 	bl	8000498 <__aeabi_f2d>
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	4b11      	ldr	r3, [pc, #68]	; (8006fe4 <MCP9808_ConvertToF+0x5c>)
 8006f9e:	f7f9 fad3 	bl	8000548 <__aeabi_dmul>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	4619      	mov	r1, r3
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <MCP9808_ConvertToF+0x60>)
 8006fb0:	f7f9 fbf4 	bl	800079c <__aeabi_ddiv>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <MCP9808_ConvertToF+0x64>)
 8006fc2:	f7f9 f90b 	bl	80001dc <__adddf3>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4610      	mov	r0, r2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	f7f9 fced 	bl	80009ac <__aeabi_d2f>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	ee07 3a90 	vmov	s15, r3
}
 8006fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40220000 	.word	0x40220000
 8006fe8:	40140000 	.word	0x40140000
 8006fec:	40400000 	.word	0x40400000

08006ff0 <MCP9808_SetResolution>:
{
  return MCP9808_Read8(hi2c, addr, MCP9808_REG_RESOLUTION);
}

void MCP9808_SetResolution(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t val)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	807b      	strh	r3, [r7, #2]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	707b      	strb	r3, [r7, #1]
  MCP9808_Write8(hi2c, addr, MCP9808_REG_RESOLUTION, val);
 8007000:	787b      	ldrb	r3, [r7, #1]
 8007002:	b29b      	uxth	r3, r3
 8007004:	8879      	ldrh	r1, [r7, #2]
 8007006:	2208      	movs	r2, #8
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f916 	bl	800723a <MCP9808_Write8>
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <MCP9808_SetLimit>:
  conf_shutdown = conf_register & ~MCP9808_REG_CONFIG_SHUTDOWN;
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, conf_shutdown);
}

uint8_t MCP9808_SetLimit(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, float val)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	460b      	mov	r3, r1
 8007022:	ed87 0a01 	vstr	s0, [r7, #4]
 8007026:	817b      	strh	r3, [r7, #10]
 8007028:	4613      	mov	r3, r2
 800702a:	727b      	strb	r3, [r7, #9]
  uint16_t newVal = val * 16.0;
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7f9 fa33 	bl	8000498 <__aeabi_f2d>
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	4b23      	ldr	r3, [pc, #140]	; (80070c4 <MCP9808_SetLimit+0xac>)
 8007038:	f7f9 fa86 	bl	8000548 <__aeabi_dmul>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4610      	mov	r0, r2
 8007042:	4619      	mov	r1, r3
 8007044:	f7f9 fc92 	bl	800096c <__aeabi_d2uiz>
 8007048:	4603      	mov	r3, r0
 800704a:	82fb      	strh	r3, [r7, #22]
  if(val < 0)
 800704c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007058:	d503      	bpl.n	8007062 <MCP9808_SetLimit+0x4a>
    newVal += 256;
 800705a:	8afb      	ldrh	r3, [r7, #22]
 800705c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007060:	82fb      	strh	r3, [r7, #22]
  MCP9808_Write16(hi2c, addr, reg, val * 16.0);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7f9 fa18 	bl	8000498 <__aeabi_f2d>
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <MCP9808_SetLimit+0xac>)
 800706e:	f7f9 fa6b 	bl	8000548 <__aeabi_dmul>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4610      	mov	r0, r2
 8007078:	4619      	mov	r1, r3
 800707a:	f7f9 fc77 	bl	800096c <__aeabi_d2uiz>
 800707e:	4603      	mov	r3, r0
 8007080:	b29b      	uxth	r3, r3
 8007082:	7a7a      	ldrb	r2, [r7, #9]
 8007084:	8979      	ldrh	r1, [r7, #10]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 f87e 	bl	8007188 <MCP9808_Write16>

  float temp = MCP9808_RawToTemp(MCP9808_Read16(hi2c, addr, reg));
 800708c:	7a7a      	ldrb	r2, [r7, #9]
 800708e:	897b      	ldrh	r3, [r7, #10]
 8007090:	4619      	mov	r1, r3
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 f89f 	bl	80071d6 <MCP9808_Read16>
 8007098:	4603      	mov	r3, r0
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f814 	bl	80070c8 <MCP9808_RawToTemp>
 80070a0:	ed87 0a04 	vstr	s0, [r7, #16]

  if(val == temp)
 80070a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80070a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80070ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80070b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b4:	d101      	bne.n	80070ba <MCP9808_SetLimit+0xa2>
    return 1;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e000      	b.n	80070bc <MCP9808_SetLimit+0xa4>
  return 0;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40300000 	.word	0x40300000

080070c8 <MCP9808_RawToTemp>:

float MCP9808_RawToTemp(uint16_t raw)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	80fb      	strh	r3, [r7, #6]
  float temp = 0.0;
 80070d2:	f04f 0300 	mov.w	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]
  if (raw != 0xFFFF) {
 80070d8:	88fb      	ldrh	r3, [r7, #6]
 80070da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070de:	4293      	cmp	r3, r2
 80070e0:	d01d      	beq.n	800711e <MCP9808_RawToTemp+0x56>
    temp = raw & 0x0FFF;
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e8:	ee07 3a90 	vmov	s15, r3
 80070ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070f0:	edc7 7a03 	vstr	s15, [r7, #12]
    temp /= 16.0;
 80070f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80070f8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80070fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007100:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw & 0x1000)
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d007      	beq.n	800711e <MCP9808_RawToTemp+0x56>
      temp -= 256;
 800710e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007112:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007134 <MCP9808_RawToTemp+0x6c>
 8007116:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800711a:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return temp;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	ee07 3a90 	vmov	s15, r3
}
 8007124:	eeb0 0a67 	vmov.f32	s0, s15
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	43800000 	.word	0x43800000

08007138 <MCP9808_MapLimitBits>:

void MCP9808_MapLimitBits(uint16_t raw)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	80fb      	strh	r3, [r7, #6]
  MCP9808_Overtemp     = (raw & MCP9808_REG_OVERTEMP) >> MCP9808_POS_OVERTEMP;
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	139b      	asrs	r3, r3, #14
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	b2da      	uxtb	r2, r3
 800714e:	4b0b      	ldr	r3, [pc, #44]	; (800717c <MCP9808_MapLimitBits+0x44>)
 8007150:	701a      	strb	r2, [r3, #0]
  MCP9808_Undertemp    = (raw & MCP9808_REG_UNDERTEMP) >> MCP9808_POS_UNDERTEMP;
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	135b      	asrs	r3, r3, #13
 8007156:	b2db      	uxtb	r3, r3
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	b2da      	uxtb	r2, r3
 800715e:	4b08      	ldr	r3, [pc, #32]	; (8007180 <MCP9808_MapLimitBits+0x48>)
 8007160:	701a      	strb	r2, [r3, #0]
  MCP9808_CriticalTemp = (raw & MCP9808_REG_CRITICALTEMP) >> MCP9808_POS_CRITICALTEMP;
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	0bdb      	lsrs	r3, r3, #15
 8007166:	b29b      	uxth	r3, r3
 8007168:	b2da      	uxtb	r2, r3
 800716a:	4b06      	ldr	r3, [pc, #24]	; (8007184 <MCP9808_MapLimitBits+0x4c>)
 800716c:	701a      	strb	r2, [r3, #0]
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	200026e0 	.word	0x200026e0
 8007180:	200026e1 	.word	0x200026e1
 8007184:	200026e2 	.word	0x200026e2

08007188 <MCP9808_Write16>:

void MCP9808_Write16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val){
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	4608      	mov	r0, r1
 8007192:	4611      	mov	r1, r2
 8007194:	461a      	mov	r2, r3
 8007196:	4603      	mov	r3, r0
 8007198:	817b      	strh	r3, [r7, #10]
 800719a:	460b      	mov	r3, r1
 800719c:	727b      	strb	r3, [r7, #9]
 800719e:	4613      	mov	r3, r2
 80071a0:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 80071a2:	7a7b      	ldrb	r3, [r7, #9]
 80071a4:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val >> 8;
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val & 0xFF;
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, HAL_MAX_DELAY);
 80071b6:	897b      	ldrh	r3, [r7, #10]
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	b299      	uxth	r1, r3
 80071bc:	f107 0214 	add.w	r2, r7, #20
 80071c0:	f04f 33ff 	mov.w	r3, #4294967295
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	2303      	movs	r3, #3
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f003 fef9 	bl	800afc0 <HAL_I2C_Master_Transmit>
}
 80071ce:	bf00      	nop
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <MCP9808_Read16>:
uint16_t MCP9808_Read16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b086      	sub	sp, #24
 80071da:	af02      	add	r7, sp, #8
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	807b      	strh	r3, [r7, #2]
 80071e2:	4613      	mov	r3, r2
 80071e4:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[1];
  uint8_t readVals[2];
  uint16_t val = 0xFFFF;
 80071e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071ea:	81fb      	strh	r3, [r7, #14]

  writeVals[0] = reg;
 80071ec:	787b      	ldrb	r3, [r7, #1]
 80071ee:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, HAL_MAX_DELAY);
 80071f0:	887b      	ldrh	r3, [r7, #2]
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	b299      	uxth	r1, r3
 80071f6:	f107 020c 	add.w	r2, r7, #12
 80071fa:	f04f 33ff 	mov.w	r3, #4294967295
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	2301      	movs	r3, #1
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f003 fedc 	bl	800afc0 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, HAL_MAX_DELAY);
 8007208:	887b      	ldrh	r3, [r7, #2]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	b299      	uxth	r1, r3
 800720e:	f107 0208 	add.w	r2, r7, #8
 8007212:	f04f 33ff 	mov.w	r3, #4294967295
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2302      	movs	r3, #2
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f003 ffc4 	bl	800b1a8 <HAL_I2C_Master_Receive>

  val = (readVals[0] << 8 | readVals[1]);
 8007220:	7a3b      	ldrb	r3, [r7, #8]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	b21a      	sxth	r2, r3
 8007226:	7a7b      	ldrb	r3, [r7, #9]
 8007228:	b21b      	sxth	r3, r3
 800722a:	4313      	orrs	r3, r2
 800722c:	b21b      	sxth	r3, r3
 800722e:	81fb      	strh	r3, [r7, #14]

  return val;
 8007230:	89fb      	ldrh	r3, [r7, #14]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <MCP9808_Write8>:

void MCP9808_Write8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b088      	sub	sp, #32
 800723e:	af02      	add	r7, sp, #8
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	4608      	mov	r0, r1
 8007244:	4611      	mov	r1, r2
 8007246:	461a      	mov	r2, r3
 8007248:	4603      	mov	r3, r0
 800724a:	817b      	strh	r3, [r7, #10]
 800724c:	460b      	mov	r3, r1
 800724e:	727b      	strb	r3, [r7, #9]
 8007250:	4613      	mov	r3, r2
 8007252:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 8007254:	7a7b      	ldrb	r3, [r7, #9]
 8007256:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val;
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	757b      	strb	r3, [r7, #21]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 800725e:	897b      	ldrh	r3, [r7, #10]
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	b299      	uxth	r1, r3
 8007264:	f107 0214 	add.w	r2, r7, #20
 8007268:	f04f 33ff 	mov.w	r3, #4294967295
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	2302      	movs	r3, #2
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f003 fea5 	bl	800afc0 <HAL_I2C_Master_Transmit>
}
 8007276:	bf00      	nop
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <MCP9808_GetCriticalTemp>:

  return val;
}

uint8_t MCP9808_GetCriticalTemp()
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  return MCP9808_CriticalTemp;
 8007284:	4b03      	ldr	r3, [pc, #12]	; (8007294 <MCP9808_GetCriticalTemp+0x14>)
 8007286:	781b      	ldrb	r3, [r3, #0]
}
 8007288:	4618      	mov	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	200026e2 	.word	0x200026e2

08007298 <MCP9808_GetOvertemp>:

uint8_t MCP9808_GetOvertemp()
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return MCP9808_Overtemp;
 800729c:	4b03      	ldr	r3, [pc, #12]	; (80072ac <MCP9808_GetOvertemp+0x14>)
 800729e:	781b      	ldrb	r3, [r3, #0]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	200026e0 	.word	0x200026e0

080072b0 <PCA9555_WriteReg16>:

  return val;
}

void PCA9555_WriteReg16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	461a      	mov	r2, r3
 80072be:	4603      	mov	r3, r0
 80072c0:	817b      	strh	r3, [r7, #10]
 80072c2:	460b      	mov	r3, r1
 80072c4:	727b      	strb	r3, [r7, #9]
 80072c6:	4613      	mov	r3, r2
 80072c8:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 80072ca:	7a7b      	ldrb	r3, [r7, #9]
 80072cc:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val & 0xFF;
 80072ce:	88fb      	ldrh	r3, [r7, #6]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val >> 8;
 80072d4:	88fb      	ldrh	r3, [r7, #6]
 80072d6:	0a1b      	lsrs	r3, r3, #8
 80072d8:	b29b      	uxth	r3, r3
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, HAL_MAX_DELAY);
 80072de:	897b      	ldrh	r3, [r7, #10]
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	b299      	uxth	r1, r3
 80072e4:	f107 0214 	add.w	r2, r7, #20
 80072e8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	2303      	movs	r3, #3
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f003 fe65 	bl	800afc0 <HAL_I2C_Master_Transmit>
}
 80072f6:	bf00      	nop
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <PCA9635_Init>:


#include <pca9635.h>

void PCA9635_Init(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t blinking)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af02      	add	r7, sp, #8
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	807b      	strh	r3, [r7, #2]
 800730a:	4613      	mov	r3, r2
 800730c:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];

  writeVals[0] = PCA9635_REG_MODE1;
 800730e:	2300      	movs	r3, #0
 8007310:	733b      	strb	r3, [r7, #12]
  writeVals[1] = (PCA9635_MODE1_ALLCALL | PCA9635_MODE1_AI2); //Auto increment all registers
 8007312:	2381      	movs	r3, #129	; 0x81
 8007314:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 8007316:	887b      	ldrh	r3, [r7, #2]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	b299      	uxth	r1, r3
 800731c:	f107 020c 	add.w	r2, r7, #12
 8007320:	f04f 33ff 	mov.w	r3, #4294967295
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	2302      	movs	r3, #2
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f003 fe49 	bl	800afc0 <HAL_I2C_Master_Transmit>

  if(blinking > 0){
 800732e:	787b      	ldrb	r3, [r7, #1]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00f      	beq.n	8007354 <PCA9635_Init+0x56>
    writeVals[0] = PCA9635_REG_MODE2;
 8007334:	2301      	movs	r3, #1
 8007336:	733b      	strb	r3, [r7, #12]
    writeVals[1] = (PCA9635_MODE2_OUTNE | PCA9635_MODE2_OUTDRV | PCA9635_MODE2_DMBLNK);
 8007338:	2325      	movs	r3, #37	; 0x25
 800733a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 800733c:	887b      	ldrh	r3, [r7, #2]
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	b299      	uxth	r1, r3
 8007342:	f107 020c 	add.w	r2, r7, #12
 8007346:	f04f 33ff 	mov.w	r3, #4294967295
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	2302      	movs	r3, #2
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f003 fe36 	bl	800afc0 <HAL_I2C_Master_Transmit>
  }
}
 8007354:	bf00      	nop
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <PCA9635_SetPWM>:

void PCA9635_SetPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t channel, uint8_t value)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af02      	add	r7, sp, #8
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	4608      	mov	r0, r1
 8007366:	4611      	mov	r1, r2
 8007368:	461a      	mov	r2, r3
 800736a:	4603      	mov	r3, r0
 800736c:	807b      	strh	r3, [r7, #2]
 800736e:	460b      	mov	r3, r1
 8007370:	707b      	strb	r3, [r7, #1]
 8007372:	4613      	mov	r3, r2
 8007374:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  if((channel >= 0) && (channel < 16)){
 8007376:	787b      	ldrb	r3, [r7, #1]
 8007378:	2b0f      	cmp	r3, #15
 800737a:	d811      	bhi.n	80073a0 <PCA9635_SetPWM+0x44>
    writeVals[0] = PCA9635_REG_PWM(channel);
 800737c:	787b      	ldrb	r3, [r7, #1]
 800737e:	3302      	adds	r3, #2
 8007380:	b2db      	uxtb	r3, r3
 8007382:	733b      	strb	r3, [r7, #12]
    writeVals[1] = value;
 8007384:	783b      	ldrb	r3, [r7, #0]
 8007386:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 8007388:	887b      	ldrh	r3, [r7, #2]
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	b299      	uxth	r1, r3
 800738e:	f107 020c 	add.w	r2, r7, #12
 8007392:	f04f 33ff 	mov.w	r3, #4294967295
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	2302      	movs	r3, #2
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f003 fe10 	bl	800afc0 <HAL_I2C_Master_Transmit>
  }
}
 80073a0:	bf00      	nop
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <PCA9635_SetGroupPWM>:

void PCA9635_SetGroupPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	807b      	strh	r3, [r7, #2]
 80073b4:	4613      	mov	r3, r2
 80073b6:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPPWM;
 80073b8:	2312      	movs	r3, #18
 80073ba:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 80073bc:	787b      	ldrb	r3, [r7, #1]
 80073be:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 80073c0:	887b      	ldrh	r3, [r7, #2]
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	b299      	uxth	r1, r3
 80073c6:	f107 020c 	add.w	r2, r7, #12
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	2302      	movs	r3, #2
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f003 fdf4 	bl	800afc0 <HAL_I2C_Master_Transmit>
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <PCA9635_SetGroupFreq>:

void PCA9635_SetGroupFreq(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	807b      	strh	r3, [r7, #2]
 80073ec:	4613      	mov	r3, r2
 80073ee:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPFREQ;
 80073f0:	2313      	movs	r3, #19
 80073f2:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 80073f4:	787b      	ldrb	r3, [r7, #1]
 80073f6:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 80073f8:	887b      	ldrh	r3, [r7, #2]
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	b299      	uxth	r1, r3
 80073fe:	f107 020c 	add.w	r2, r7, #12
 8007402:	f04f 33ff 	mov.w	r3, #4294967295
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	2302      	movs	r3, #2
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f003 fdd8 	bl	800afc0 <HAL_I2C_Master_Transmit>
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <PCA9635_SetAllNum>:

void PCA9635_SetAllNum(I2C_HandleTypeDef* hi2c, uint16_t addr, uint32_t values)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	460b      	mov	r3, r1
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 8007426:	2394      	movs	r3, #148	; 0x94
 8007428:	743b      	strb	r3, [r7, #16]
  writeVals[1] = values & 0xFF;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	747b      	strb	r3, [r7, #17]
  writeVals[2] = (values >> 8) ;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	b2db      	uxtb	r3, r3
 8007436:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = (values >> 16);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	0c1b      	lsrs	r3, r3, #16
 800743c:	b2db      	uxtb	r3, r3
 800743e:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = (values >> 24);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	0e1b      	lsrs	r3, r3, #24
 8007444:	b2db      	uxtb	r3, r3
 8007446:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, HAL_MAX_DELAY);
 8007448:	897b      	ldrh	r3, [r7, #10]
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	b299      	uxth	r1, r3
 800744e:	f107 0210 	add.w	r2, r7, #16
 8007452:	f04f 33ff 	mov.w	r3, #4294967295
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	2305      	movs	r3, #5
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f003 fdb0 	bl	800afc0 <HAL_I2C_Master_Transmit>
}
 8007460:	bf00      	nop
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <PCA9635_SetAll>:

void PCA9635_SetAll(I2C_HandleTypeDef* hi2c, uint16_t addr, PCA9635_LEDOnState_t state[16])
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af02      	add	r7, sp, #8
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	460b      	mov	r3, r1
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 8007476:	2394      	movs	r3, #148	; 0x94
 8007478:	743b      	strb	r3, [r7, #16]
  writeVals[1] = state[0] + (state[1] << 2) + (state[2] << 4) + (state[3] << 6);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	781a      	ldrb	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3301      	adds	r3, #1
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	b2db      	uxtb	r3, r3
 8007488:	4413      	add	r3, r2
 800748a:	b2da      	uxtb	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3302      	adds	r3, #2
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	b2db      	uxtb	r3, r3
 8007496:	4413      	add	r3, r2
 8007498:	b2da      	uxtb	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3303      	adds	r3, #3
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	019b      	lsls	r3, r3, #6
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	4413      	add	r3, r2
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	747b      	strb	r3, [r7, #17]
  writeVals[2] = state[4] + (state[5] << 2) + (state[6] << 4) + (state[7] << 6);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3304      	adds	r3, #4
 80074ae:	781a      	ldrb	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3305      	adds	r3, #5
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	4413      	add	r3, r2
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3306      	adds	r3, #6
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	4413      	add	r3, r2
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3307      	adds	r3, #7
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	019b      	lsls	r3, r3, #6
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = state[8] + (state[9] << 2) + (state[10] << 4) + (state[11] << 6);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3308      	adds	r3, #8
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3309      	adds	r3, #9
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	330a      	adds	r3, #10
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	4413      	add	r3, r2
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	330b      	adds	r3, #11
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	019b      	lsls	r3, r3, #6
 8007506:	b2db      	uxtb	r3, r3
 8007508:	4413      	add	r3, r2
 800750a:	b2db      	uxtb	r3, r3
 800750c:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = state[12] + (state[13] << 2) + (state[14] << 4) + (state[15] << 6);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	330c      	adds	r3, #12
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	330d      	adds	r3, #13
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	b2db      	uxtb	r3, r3
 800751e:	4413      	add	r3, r2
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	330e      	adds	r3, #14
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	b2db      	uxtb	r3, r3
 800752c:	4413      	add	r3, r2
 800752e:	b2da      	uxtb	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	330f      	adds	r3, #15
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	019b      	lsls	r3, r3, #6
 8007538:	b2db      	uxtb	r3, r3
 800753a:	4413      	add	r3, r2
 800753c:	b2db      	uxtb	r3, r3
 800753e:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, HAL_MAX_DELAY);
 8007540:	897b      	ldrh	r3, [r7, #10]
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	b299      	uxth	r1, r3
 8007546:	f107 0210 	add.w	r2, r7, #16
 800754a:	f04f 33ff 	mov.w	r3, #4294967295
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	2305      	movs	r3, #5
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f003 fd34 	bl	800afc0 <HAL_I2C_Master_Transmit>
}
 8007558:	bf00      	nop
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <TurningOff>:

#include "profet.h"

//Transient state
static void TurningOff(volatile ProfetTypeDef *profet)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	899b      	ldrh	r3, [r3, #12]
 800756c:	b29b      	uxth	r3, r3
 800756e:	43da      	mvns	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	8819      	ldrh	r1, [r3, #0]
 8007576:	b209      	sxth	r1, r1
 8007578:	b212      	sxth	r2, r2
 800757a:	400a      	ands	r2, r1
 800757c:	b212      	sxth	r2, r2
 800757e:	b292      	uxth	r2, r2
 8007580:	801a      	strh	r2, [r3, #0]
  profet->eState = OFF;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	705a      	strb	r2, [r3, #1]
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <Off>:

static void Off(volatile ProfetTypeDef *profet)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  profet->cState = 'O';
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	224f      	movs	r2, #79	; 0x4f
 80075a0:	70da      	strb	r2, [r3, #3]

  //Short circuit to battery check
  //TODO: Collapsing field will trigger this
  if (profet->nIL > 0.1) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    //profet->eState = SHORT_CIRCUITING;
  }

  //Check for turn on
  if (profet->eReqState == ON) {
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	789b      	ldrb	r3, [r3, #2]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d102      	bne.n	80075b6 <Off+0x22>
    profet->eState = TURNING_ON;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2208      	movs	r2, #8
 80075b4:	705a      	strb	r2, [r3, #1]
  }
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <InRushing>:

//Transient state
static void InRushing(volatile ProfetTypeDef *profet)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	899b      	ldrh	r3, [r3, #12]
 80075ce:	b299      	uxth	r1, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	881a      	ldrh	r2, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	b292      	uxth	r2, r2
 80075da:	801a      	strh	r2, [r3, #0]
  profet->nIL_On_Time = HAL_GetTick();
 80075dc:	f001 f8ce 	bl	800877c <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	625a      	str	r2, [r3, #36]	; 0x24
  profet->eState  = IN_RUSH;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	705a      	strb	r2, [r3, #1]
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <InRush>:

static void InRush(volatile ProfetTypeDef *profet)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  if (profet->nIL > profet->nIL_InRush_Limit) {
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8bdb      	ldrh	r3, [r3, #30]
 8007606:	b29b      	uxth	r3, r3
 8007608:	429a      	cmp	r2, r3
 800760a:	d902      	bls.n	8007612 <InRush+0x1e>
    profet->eState = OVERCURRENTING;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	220b      	movs	r2, #11
 8007610:	705a      	strb	r2, [r3, #1]
  }
  if((HAL_GetTick() - profet->nIL_On_Time) > profet->nIL_InRush_Time){
 8007612:	f001 f8b3 	bl	800877c <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	8c12      	ldrh	r2, [r2, #32]
 8007622:	b292      	uxth	r2, r2
 8007624:	4293      	cmp	r3, r2
 8007626:	d902      	bls.n	800762e <InRush+0x3a>
    profet->eState = TURNING_ON;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2208      	movs	r2, #8
 800762c:	705a      	strb	r2, [r3, #1]
  }
  //Check for turn off
  if (profet->eReqState == OFF) {
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	789b      	ldrb	r3, [r3, #2]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d102      	bne.n	800763e <InRush+0x4a>
    profet->eState = TURNING_OFF;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2207      	movs	r2, #7
 800763c:	705a      	strb	r2, [r3, #1]
  }
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <TurningOn>:

//Transient state
static void TurningOn(volatile ProfetTypeDef *profet)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	899b      	ldrh	r3, [r3, #12]
 8007652:	b299      	uxth	r1, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	881a      	ldrh	r2, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	b292      	uxth	r2, r2
 800765e:	801a      	strh	r2, [r3, #0]
  profet->eState = ON;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	705a      	strb	r2, [r3, #1]
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <On>:

static void On(volatile ProfetTypeDef *profet)
{
 8007672:	b590      	push	{r4, r7, lr}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  profet->cState = '|';
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	227c      	movs	r2, #124	; 0x7c
 800767e:	70da      	strb	r2, [r3, #3]

  //TODO: Dead short vs open load
  //Dead short will register no current
  //How to differentiate between open load?
  if (profet->nIL == 0) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  }

  //Check for fault (device overcurrent/overtemp/short)
  //IL will be very high
  //TODO: Calculate value from datasheet
  if (profet->nIS_Avg > 30000) {
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	8adb      	ldrh	r3, [r3, #22]
 8007688:	b29b      	uxth	r3, r3
 800768a:	f247 5230 	movw	r2, #30000	; 0x7530
 800768e:	4293      	cmp	r3, r2
 8007690:	d902      	bls.n	8007698 <On+0x26>
    profet->eState = FAULTING;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	220c      	movs	r2, #12
 8007696:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	789b      	ldrb	r3, [r3, #2]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <On+0x36>
    profet->eState = TURNING_OFF;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2207      	movs	r2, #7
 80076a6:	705a      	strb	r2, [r3, #1]
  }

  if ((profet->nIL > profet->nIL_Limit) && (profet->nOC_Detected == 0)){
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8b9b      	ldrh	r3, [r3, #28]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d90e      	bls.n	80076d6 <On+0x64>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d108      	bne.n	80076d6 <On+0x64>
    profet->nIL_On_Time = HAL_GetTick();
 80076c4:	f001 f85a 	bl	800877c <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	625a      	str	r2, [r3, #36]	; 0x24
    profet->nOC_Detected = 1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }

  if ((profet->nIL < profet->nIL_Limit) && (profet->nOC_Detected > 0)){
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076da:	b29a      	uxth	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	8b9b      	ldrh	r3, [r3, #28]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d209      	bcs.n	80076fa <On+0x88>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <On+0x88>
    profet->nOC_Detected = 0;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }

  if(profet->nOC_Detected > 0){
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d017      	beq.n	8007736 <On+0xc4>
    if((HAL_GetTick() - profet->nIL_On_Time) > GetTripTime(profet->eModel, profet->nIL, profet->nIL_Limit)){
 8007706:	f001 f839 	bl	800877c <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	1ad4      	subs	r4, r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b2d8      	uxtb	r0, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771c:	b299      	uxth	r1, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	8b9b      	ldrh	r3, [r3, #28]
 8007722:	b29b      	uxth	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	f000 f9b1 	bl	8007a8c <GetTripTime>
 800772a:	4603      	mov	r3, r0
 800772c:	429c      	cmp	r4, r3
 800772e:	d902      	bls.n	8007736 <On+0xc4>
      profet->eState = OVERCURRENTING;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	220b      	movs	r2, #11
 8007734:	705a      	strb	r2, [r3, #1]
    }
  }
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	bd90      	pop	{r4, r7, pc}

0800773e <Overcurrenting>:

//Transient state
static void Overcurrenting(volatile ProfetTypeDef *profet)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	859a      	strh	r2, [r3, #44]	; 0x2c
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	899b      	ldrh	r3, [r3, #12]
 8007754:	b29b      	uxth	r3, r3
 8007756:	43da      	mvns	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	8819      	ldrh	r1, [r3, #0]
 800775e:	b209      	sxth	r1, r1
 8007760:	b212      	sxth	r2, r2
 8007762:	400a      	ands	r2, r1
 8007764:	b212      	sxth	r2, r2
 8007766:	b292      	uxth	r2, r2
 8007768:	801a      	strh	r2, [r3, #0]
  profet->nOC_TriggerTime = HAL_GetTick();
 800776a:	f001 f807 	bl	800877c <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	635a      	str	r2, [r3, #52]	; 0x34
  profet->nOC_ResetCount++;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800777a:	b2db      	uxtb	r3, r3
 800777c:	3301      	adds	r3, #1
 800777e:	b2da      	uxtb	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  profet->eState = OVERCURRENT;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2204      	movs	r2, #4
 800778a:	705a      	strb	r2, [r3, #1]
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <Overcurrent>:

static void Overcurrent(volatile ProfetTypeDef *profet)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  profet->cState = 'C';
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2243      	movs	r2, #67	; 0x43
 80077a0:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	899b      	ldrh	r3, [r3, #12]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	43da      	mvns	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	8819      	ldrh	r1, [r3, #0]
 80077b0:	b209      	sxth	r1, r1
 80077b2:	b212      	sxth	r2, r2
 80077b4:	400a      	ands	r2, r1
 80077b6:	b212      	sxth	r2, r2
 80077b8:	b292      	uxth	r2, r2
 80077ba:	801a      	strh	r2, [r3, #0]
  if(profet->nOC_ResetCount <= profet->nOC_ResetLimit){
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d80e      	bhi.n	80077ee <Overcurrent+0x5a>
    if((HAL_GetTick() - profet->nOC_TriggerTime) > profet->nOC_ResetTime){
 80077d0:	f000 ffd4 	bl	800877c <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80077e0:	b292      	uxth	r2, r2
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d906      	bls.n	80077f4 <Overcurrent+0x60>
      profet->eState = IN_RUSHING;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2209      	movs	r2, #9
 80077ea:	705a      	strb	r2, [r3, #1]
 80077ec:	e002      	b.n	80077f4 <Overcurrent+0x60>
    }
  }
  else{
    profet->eState = SUSPENDING;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	220d      	movs	r2, #13
 80077f2:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	789b      	ldrb	r3, [r3, #2]
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <Overcurrent+0x78>
    profet->nOC_ResetCount = 0;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    profet->eState = TURNING_OFF;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2207      	movs	r2, #7
 800780a:	705a      	strb	r2, [r3, #1]
  }
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <ShortCircuiting>:

//Transient state
static void ShortCircuiting(volatile ProfetTypeDef *profet)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007820:	b29a      	uxth	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	859a      	strh	r2, [r3, #44]	; 0x2c
  profet->eState = SHORT_CIRCUIT;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2203      	movs	r2, #3
 800782a:	705a      	strb	r2, [r3, #1]
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <ShortCircuit>:

static void ShortCircuit(volatile ProfetTypeDef *profet)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  profet->cState = 'S';
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2253      	movs	r2, #83	; 0x53
 8007844:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	899b      	ldrh	r3, [r3, #12]
 800784a:	b29b      	uxth	r3, r3
 800784c:	43da      	mvns	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	8819      	ldrh	r1, [r3, #0]
 8007854:	b209      	sxth	r1, r1
 8007856:	b212      	sxth	r2, r2
 8007858:	400a      	ands	r2, r1
 800785a:	b212      	sxth	r2, r2
 800785c:	b292      	uxth	r2, r2
 800785e:	801a      	strh	r2, [r3, #0]
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <Suspending>:

//Transient state
static void Suspending(volatile ProfetTypeDef *profet)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	899b      	ldrh	r3, [r3, #12]
 8007878:	b29b      	uxth	r3, r3
 800787a:	43da      	mvns	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	8819      	ldrh	r1, [r3, #0]
 8007882:	b209      	sxth	r1, r1
 8007884:	b212      	sxth	r2, r2
 8007886:	400a      	ands	r2, r1
 8007888:	b212      	sxth	r2, r2
 800788a:	b292      	uxth	r2, r2
 800788c:	801a      	strh	r2, [r3, #0]
  profet->eState = SUSPENDED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2206      	movs	r2, #6
 8007892:	705a      	strb	r2, [r3, #1]
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <Suspended>:

static void Suspended(volatile ProfetTypeDef *profet)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  profet->cState = 'X';
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2258      	movs	r2, #88	; 0x58
 80078ac:	70da      	strb	r2, [r3, #3]
  //TODO: replace with a reset
  if (profet->eReqState == OFF){
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	789b      	ldrb	r3, [r3, #2]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d106      	bne.n	80078c6 <Suspended+0x26>
    profet->nOC_ResetCount = 0;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    profet->eState = TURNING_OFF;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2207      	movs	r2, #7
 80078c4:	705a      	strb	r2, [r3, #1]
  }
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <Faulting>:

//Transient state
static void Faulting(volatile ProfetTypeDef *profet)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	899b      	ldrh	r3, [r3, #12]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	43da      	mvns	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	8819      	ldrh	r1, [r3, #0]
 80078e8:	b209      	sxth	r1, r1
 80078ea:	b212      	sxth	r2, r2
 80078ec:	400a      	ands	r2, r1
 80078ee:	b212      	sxth	r2, r2
 80078f0:	b292      	uxth	r2, r2
 80078f2:	801a      	strh	r2, [r3, #0]
  profet->eState = FAULT;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2205      	movs	r2, #5
 80078f8:	705a      	strb	r2, [r3, #1]
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <Fault>:

static void Fault(volatile ProfetTypeDef *profet)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  profet->cState = 'F';
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2246      	movs	r2, #70	; 0x46
 8007912:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	899b      	ldrh	r3, [r3, #12]
 8007918:	b29b      	uxth	r3, r3
 800791a:	43da      	mvns	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	8819      	ldrh	r1, [r3, #0]
 8007922:	b209      	sxth	r1, r1
 8007924:	b212      	sxth	r2, r2
 8007926:	400a      	ands	r2, r1
 8007928:	b212      	sxth	r2, r2
 800792a:	b292      	uxth	r2, r2
 800792c:	801a      	strh	r2, [r3, #0]
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
	...

0800793c <Profet_SM>:

void Profet_SM(volatile ProfetTypeDef *profet) {
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]

  switch (profet->eState) {
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b0d      	cmp	r3, #13
 800794c:	d856      	bhi.n	80079fc <Profet_SM+0xc0>
 800794e:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <Profet_SM+0x18>)
 8007950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007954:	08007995 	.word	0x08007995
 8007958:	080079b5 	.word	0x080079b5
 800795c:	080079a5 	.word	0x080079a5
 8007960:	080079c5 	.word	0x080079c5
 8007964:	080079d5 	.word	0x080079d5
 8007968:	080079e5 	.word	0x080079e5
 800796c:	080079f5 	.word	0x080079f5
 8007970:	0800798d 	.word	0x0800798d
 8007974:	080079ad 	.word	0x080079ad
 8007978:	0800799d 	.word	0x0800799d
 800797c:	080079bd 	.word	0x080079bd
 8007980:	080079cd 	.word	0x080079cd
 8007984:	080079dd 	.word	0x080079dd
 8007988:	080079ed 	.word	0x080079ed
  case TURNING_OFF:
    TurningOff(profet);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fde7 	bl	8007560 <TurningOff>
    break;
 8007992:	e033      	b.n	80079fc <Profet_SM+0xc0>

  case OFF:
    Off(profet);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff fdfd 	bl	8007594 <Off>
    break;
 800799a:	e02f      	b.n	80079fc <Profet_SM+0xc0>

  case IN_RUSHING:
    InRushing(profet);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fe10 	bl	80075c2 <InRushing>
    break;
 80079a2:	e02b      	b.n	80079fc <Profet_SM+0xc0>

  case IN_RUSH:
    InRush(profet);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff fe25 	bl	80075f4 <InRush>
    break;
 80079aa:	e027      	b.n	80079fc <Profet_SM+0xc0>

  case TURNING_ON:
    TurningOn(profet);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fe4a 	bl	8007646 <TurningOn>
    break;
 80079b2:	e023      	b.n	80079fc <Profet_SM+0xc0>

  case ON:
    On(profet);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fe5c 	bl	8007672 <On>
    break;
 80079ba:	e01f      	b.n	80079fc <Profet_SM+0xc0>

  case SHORT_CIRCUITING:
    ShortCircuiting(profet);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ff29 	bl	8007814 <ShortCircuiting>
    break;
 80079c2:	e01b      	b.n	80079fc <Profet_SM+0xc0>

  case SHORT_CIRCUIT:
    ShortCircuit(profet);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff ff37 	bl	8007838 <ShortCircuit>
    break;
 80079ca:	e017      	b.n	80079fc <Profet_SM+0xc0>

  case OVERCURRENTING:
    Overcurrenting(profet);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff feb6 	bl	800773e <Overcurrenting>
    break;
 80079d2:	e013      	b.n	80079fc <Profet_SM+0xc0>

  case OVERCURRENT:
    Overcurrent(profet);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff fedd 	bl	8007794 <Overcurrent>
    break;
 80079da:	e00f      	b.n	80079fc <Profet_SM+0xc0>

  case FAULTING:
    Faulting(profet);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff ff78 	bl	80078d2 <Faulting>
    break;
 80079e2:	e00b      	b.n	80079fc <Profet_SM+0xc0>

  case FAULT:
    Fault(profet);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff ff8e 	bl	8007906 <Fault>
    break;
 80079ea:	e007      	b.n	80079fc <Profet_SM+0xc0>

  case SUSPENDING:
    Suspending(profet);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff3d 	bl	800786c <Suspending>
    break;
 80079f2:	e003      	b.n	80079fc <Profet_SM+0xc0>

  case SUSPENDED:
    Suspended(profet);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff ff53 	bl	80078a0 <Suspended>
    break;
 80079fa:	bf00      	nop

  }
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <Profet_UpdateIS>:

void Profet_UpdateIS(volatile ProfetTypeDef *profet, uint16_t newVal)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	807b      	strh	r3, [r7, #2]
  //Moving average without array or dividing
  //Store the new val, incase we need a non-filtered val elsewhere
  profet->nIS = newVal;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	887a      	ldrh	r2, [r7, #2]
 8007a14:	855a      	strh	r2, [r3, #42]	; 0x2a
  //Add new value to old sum
  profet->nIS_Sum += profet->nIS;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	441a      	add	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	619a      	str	r2, [r3, #24]
  //Shift sum by 1 which is equal to dividing by 2
  profet->nIS_Avg = profet->nIS_Sum >> 1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	085b      	lsrs	r3, r3, #1
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	82da      	strh	r2, [r3, #22]
  //Remove the average from the sum, otherwise sum always goes up never down
  profet->nIS_Sum -= profet->nIS_Avg;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	8adb      	ldrh	r3, [r3, #22]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	1a9a      	subs	r2, r3, r2
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	619a      	str	r2, [r3, #24]

  //Convert IS to IL (actual current)
  profet->nIL = (uint16_t)(((float)profet->nIS_Avg * profet->fKilis) / 100.0);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	8adb      	ldrh	r3, [r3, #22]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	ee07 3a90 	vmov	s15, r3
 8007a4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	ee17 0a90 	vmov	r0, s15
 8007a5e:	f7f8 fd1b 	bl	8000498 <__aeabi_f2d>
 8007a62:	f04f 0200 	mov.w	r2, #0
 8007a66:	4b08      	ldr	r3, [pc, #32]	; (8007a88 <Profet_UpdateIS+0x84>)
 8007a68:	f7f8 fe98 	bl	800079c <__aeabi_ddiv>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4610      	mov	r0, r2
 8007a72:	4619      	mov	r1, r3
 8007a74:	f7f8 ff7a 	bl	800096c <__aeabi_d2uiz>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	40590000 	.word	0x40590000

08007a8c <GetTripTime>:

uint32_t GetTripTime(ProfetModelTypeDef eModel, uint16_t nIL, uint16_t nMaxIL)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	71fb      	strb	r3, [r7, #7]
 8007a96:	460b      	mov	r3, r1
 8007a98:	80bb      	strh	r3, [r7, #4]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	807b      	strh	r3, [r7, #2]
  //Multiply by 10 to include first decimal point
  // 25A / 5A = 5
  // 5 * 10 = 50 nOCMult
  //Subtract 10 to start at index 0
  // nOCMult = 40
  uint8_t nOCMult = (uint8_t)(((float)nIL / (float)nMaxIL) * 10.0);
 8007a9e:	88bb      	ldrh	r3, [r7, #4]
 8007aa0:	ee07 3a90 	vmov	s15, r3
 8007aa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007aa8:	887b      	ldrh	r3, [r7, #2]
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007ab6:	ee16 0a90 	vmov	r0, s13
 8007aba:	f7f8 fced 	bl	8000498 <__aeabi_f2d>
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	4b2b      	ldr	r3, [pc, #172]	; (8007b70 <GetTripTime+0xe4>)
 8007ac4:	f7f8 fd40 	bl	8000548 <__aeabi_dmul>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4610      	mov	r0, r2
 8007ace:	4619      	mov	r1, r3
 8007ad0:	f7f8 ff4c 	bl	800096c <__aeabi_d2uiz>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	75fb      	strb	r3, [r7, #23]
  nOCMult -= 10; //Subtract 10 to start at index 0
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	3b0a      	subs	r3, #10
 8007adc:	75fb      	strb	r3, [r7, #23]

  if(nOCMult < 0)
    nOCMult = 0;
  if(nOCMult > 91)
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	2b5b      	cmp	r3, #91	; 0x5b
 8007ae2:	d901      	bls.n	8007ae8 <GetTripTime+0x5c>
    nOCMult = 91;
 8007ae4:	235b      	movs	r3, #91	; 0x5b
 8007ae6:	75fb      	strb	r3, [r7, #23]
      0x0273U,0x0260U,0x024EU,0x023DU,0x022DU,0x021DU,0x020EU,0x0200U,0x01F2U,0x01E5U,0x01D8U,
      0x01CBU,0x01C0U,0x01B4U,0x01A9U,0x019EU,0x0194U,0x018AU,0x0181U,0x0177U,0x016EU,0x0166U,
      0x015DU,0x0155U,0x014EU
  };

  uint16_t nTripTimeRaw = fTripTimeLookupTable[nOCMult];
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	4a22      	ldr	r2, [pc, #136]	; (8007b74 <GetTripTime+0xe8>)
 8007aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007af0:	81fb      	strh	r3, [r7, #14]
       0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,
       1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,
       1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.40
   };

  uint32_t nTripTime = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60bb      	str	r3, [r7, #8]
  float fTripTimeMult = 0.0;
 8007af6:	f04f 0300 	mov.w	r3, #0
 8007afa:	613b      	str	r3, [r7, #16]

  switch(eModel){
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <GetTripTime+0x82>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	db21      	blt.n	8007b4a <GetTripTime+0xbe>
 8007b06:	3b01      	subs	r3, #1
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d81e      	bhi.n	8007b4a <GetTripTime+0xbe>
 8007b0c:	e00e      	b.n	8007b2c <GetTripTime+0xa0>
  case BTS7002_1EPP:
    if(nMaxIL < 200)
 8007b0e:	887b      	ldrh	r3, [r7, #2]
 8007b10:	2bc7      	cmp	r3, #199	; 0xc7
 8007b12:	d806      	bhi.n	8007b22 <GetTripTime+0x96>
      fTripTimeMult = fTripTimeMult_7002[nMaxIL];
 8007b14:	887b      	ldrh	r3, [r7, #2]
 8007b16:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <GetTripTime+0xec>)
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7002[199];
    break;
 8007b20:	e013      	b.n	8007b4a <GetTripTime+0xbe>
      fTripTimeMult = fTripTimeMult_7002[199];
 8007b22:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <GetTripTime+0xec>)
 8007b24:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 8007b28:	613b      	str	r3, [r7, #16]
    break;
 8007b2a:	e00e      	b.n	8007b4a <GetTripTime+0xbe>

  case BTS7008_2EPA_CH1:
  case BTS7008_2EPA_CH2:
    if(nMaxIL < 80)
 8007b2c:	887b      	ldrh	r3, [r7, #2]
 8007b2e:	2b4f      	cmp	r3, #79	; 0x4f
 8007b30:	d806      	bhi.n	8007b40 <GetTripTime+0xb4>
      fTripTimeMult = fTripTimeMult_7008[nMaxIL];
 8007b32:	887b      	ldrh	r3, [r7, #2]
 8007b34:	4a11      	ldr	r2, [pc, #68]	; (8007b7c <GetTripTime+0xf0>)
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7008[79];
    break;
 8007b3e:	e003      	b.n	8007b48 <GetTripTime+0xbc>
      fTripTimeMult = fTripTimeMult_7008[79];
 8007b40:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <GetTripTime+0xf0>)
 8007b42:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8007b46:	613b      	str	r3, [r7, #16]
    break;
 8007b48:	bf00      	nop
  }

  nTripTime = (uint32_t)(nTripTimeRaw * fTripTimeMult);
 8007b4a:	89fb      	ldrh	r3, [r7, #14]
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8007b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b60:	ee17 3a90 	vmov	r3, s15
 8007b64:	60bb      	str	r3, [r7, #8]

  return nTripTime;
 8007b66:	68bb      	ldr	r3, [r7, #8]

}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40240000 	.word	0x40240000
 8007b74:	08017c2c 	.word	0x08017c2c
 8007b78:	08017ce4 	.word	0x08017ce4
 8007b7c:	08018004 	.word	0x08018004

08007b80 <CheckPushbutton>:
 */

#include "pushbutton.h"

void CheckPushbutton(PushbuttonConfig_t* pb, PushbuttonMode_t mode, uint16_t nInput, uint16_t* nOutput, uint16_t nDebounceTime)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	607b      	str	r3, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	72fb      	strb	r3, [r7, #11]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	813b      	strh	r3, [r7, #8]
  //=======================================================
  //Debounce and latch logic
  //=======================================================

  if(mode == MODE_MOMENTARY)
 8007b92:	7afb      	ldrb	r3, [r7, #11]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d132      	bne.n	8007bfe <CheckPushbutton+0x7e>
  {
    //Check for button change
    //Store trigger time
    if(nInput != pb->nLastState)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	893a      	ldrh	r2, [r7, #8]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d015      	beq.n	8007bd0 <CheckPushbutton+0x50>
    {
      if(    ((nInput == 1) && (*nOutput == 0)) //Rising
 8007ba4:	893b      	ldrh	r3, [r7, #8]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d103      	bne.n	8007bb2 <CheckPushbutton+0x32>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d006      	beq.n	8007bc0 <CheckPushbutton+0x40>
          || ((nInput == 0) && (*nOutput == 1))) //Falling
 8007bb2:	893b      	ldrh	r3, [r7, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10b      	bne.n	8007bd0 <CheckPushbutton+0x50>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d107      	bne.n	8007bd0 <CheckPushbutton+0x50>
      {
        pb->nLastTrigTime = HAL_GetTick();
 8007bc0:	f000 fddc 	bl	800877c <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	605a      	str	r2, [r3, #4]
        pb->nCheckTime = 1;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	721a      	strb	r2, [r3, #8]
      }
    }

    pb->nLastState = nInput;
 8007bd0:	893b      	ldrh	r3, [r7, #8]
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	7a1b      	ldrb	r3, [r3, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00e      	beq.n	8007bfe <CheckPushbutton+0x7e>
 8007be0:	f000 fdcc 	bl	800877c <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	1ad2      	subs	r2, r2, r3
 8007bec:	8b3b      	ldrh	r3, [r7, #24]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d905      	bls.n	8007bfe <CheckPushbutton+0x7e>
    {
      pb->nCheckTime = 0;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	721a      	strb	r2, [r3, #8]
      *nOutput = nInput;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	893a      	ldrh	r2, [r7, #8]
 8007bfc:	801a      	strh	r2, [r3, #0]
    }

    //Don't change output
  }

  if(mode == MODE_LATCHING)
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d12e      	bne.n	8007c62 <CheckPushbutton+0xe2>
  {
    //Check for rising trigger
    //Store trigger time
    if((nInput != pb->nLastState) && (nInput == 1))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	893a      	ldrh	r2, [r7, #8]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d00a      	beq.n	8007c26 <CheckPushbutton+0xa6>
 8007c10:	893b      	ldrh	r3, [r7, #8]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d107      	bne.n	8007c26 <CheckPushbutton+0xa6>
    {
      pb->nLastTrigTime = HAL_GetTick();
 8007c16:	f000 fdb1 	bl	800877c <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	605a      	str	r2, [r3, #4]
      pb->nCheckTime = 1;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	721a      	strb	r2, [r3, #8]
    }

    pb->nLastState = nInput;
 8007c26:	893b      	ldrh	r3, [r7, #8]
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	7a1b      	ldrb	r3, [r3, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d015      	beq.n	8007c62 <CheckPushbutton+0xe2>
 8007c36:	f000 fda1 	bl	800877c <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	1ad2      	subs	r2, r2, r3
 8007c42:	8b3b      	ldrh	r3, [r7, #24]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d90c      	bls.n	8007c62 <CheckPushbutton+0xe2>
    {
      pb->nCheckTime = 0;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	721a      	strb	r2, [r3, #8]
      *nOutput = !*nOutput;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	bf0c      	ite	eq
 8007c56:	2301      	moveq	r3, #1
 8007c58:	2300      	movne	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8007c62:	bf00      	nop
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <Parked>:
 */

#include "wipers.h"

static void Parked(Wiper_t* wiper)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  //Set motor to off
  wiper->nSlowOut = 0;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 0;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	809a      	strh	r2, [r3, #4]

  switch(wiper->eMode){
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d070      	beq.n	8007d6a <Parked+0xfe>
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	f300 80b4 	bgt.w	8007df6 <Parked+0x18a>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <Parked+0x2c>
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d02c      	beq.n	8007cf0 <Parked+0x84>
 8007c96:	e0ae      	b.n	8007df6 <Parked+0x18a>
  case MODE_DIG_IN:
    if(*wiper->pInterInput){
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d008      	beq.n	8007cb4 <Parked+0x48>
      wiper->nSlowOut = 1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	809a      	strh	r2, [r3, #4]
      wiper->eState = INTER_ON;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2205      	movs	r2, #5
 8007cb2:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pSlowInput){
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <Parked+0x64>
      wiper->nSlowOut = 1;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2202      	movs	r2, #2
 8007cce:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pFastInput){
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8088 	beq.w	8007dec <Parked+0x180>
      wiper->nSlowOut = 1;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2203      	movs	r2, #3
 8007cec:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007cee:	e07d      	b.n	8007dec <Parked+0x180>

  case MODE_INT_IN:
    //Set on based on selected speed
    switch(wiper->eSelectedSpeed)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d87a      	bhi.n	8007df0 <Parked+0x184>
 8007cfa:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <Parked+0x94>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d25 	.word	0x08007d25
 8007d04:	08007d2d 	.word	0x08007d2d
 8007d08:	08007d41 	.word	0x08007d41
 8007d0c:	08007d55 	.word	0x08007d55
 8007d10:	08007d55 	.word	0x08007d55
 8007d14:	08007d55 	.word	0x08007d55
 8007d18:	08007d55 	.word	0x08007d55
 8007d1c:	08007d55 	.word	0x08007d55
 8007d20:	08007d55 	.word	0x08007d55
    {
    case PARK:
      wiper->eState = PARKING;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	705a      	strb	r2, [r3, #1]
      break;
 8007d2a:	e01d      	b.n	8007d68 <Parked+0xfc>

    case SLOW:
      wiper->nSlowOut = 1;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	705a      	strb	r2, [r3, #1]
      break;
 8007d3e:	e013      	b.n	8007d68 <Parked+0xfc>

    case FAST:
      wiper->nSlowOut = 1;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2203      	movs	r2, #3
 8007d50:	705a      	strb	r2, [r3, #1]
      break;
 8007d52:	e009      	b.n	8007d68 <Parked+0xfc>

    case INTER_1 ... INTER_6:
      wiper->nSlowOut = 1;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	809a      	strh	r2, [r3, #4]
      wiper->eState = INTER_ON;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2205      	movs	r2, #5
 8007d64:	705a      	strb	r2, [r3, #1]
      break;
 8007d66:	bf00      	nop
    }
    break;
 8007d68:	e042      	b.n	8007df0 <Parked+0x184>

  case MODE_MIX_IN:
    //Switched on
    if(*wiper->pOnSw){
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d037      	beq.n	8007de4 <Parked+0x178>
      //Set on based on selected speed
      switch(wiper->eSelectedSpeed)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d83a      	bhi.n	8007df4 <Parked+0x188>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <Parked+0x118>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007de9 	.word	0x08007de9
 8007d88:	08007da9 	.word	0x08007da9
 8007d8c:	08007dbd 	.word	0x08007dbd
 8007d90:	08007dd1 	.word	0x08007dd1
 8007d94:	08007dd1 	.word	0x08007dd1
 8007d98:	08007dd1 	.word	0x08007dd1
 8007d9c:	08007dd1 	.word	0x08007dd1
 8007da0:	08007dd1 	.word	0x08007dd1
 8007da4:	08007dd1 	.word	0x08007dd1
      case PARK:
        //Do nothing
        break;

      case SLOW:
        wiper->nSlowOut = 1;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	805a      	strh	r2, [r3, #2]
        wiper->nFastOut = 0;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	809a      	strh	r2, [r3, #4]
        wiper->eState = SLOW_ON;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	705a      	strb	r2, [r3, #1]
        break;
 8007dba:	e016      	b.n	8007dea <Parked+0x17e>

      case FAST:
        wiper->nSlowOut = 1;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	805a      	strh	r2, [r3, #2]
        wiper->nFastOut = 1;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	809a      	strh	r2, [r3, #4]
        wiper->eState = FAST_ON;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2203      	movs	r2, #3
 8007dcc:	705a      	strb	r2, [r3, #1]
        break;
 8007dce:	e00c      	b.n	8007dea <Parked+0x17e>

      case INTER_1 ... INTER_6:
        wiper->nSlowOut = 1;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	805a      	strh	r2, [r3, #2]
        wiper->nFastOut = 0;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	809a      	strh	r2, [r3, #4]
        wiper->eState = INTER_ON;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2205      	movs	r2, #5
 8007de0:	705a      	strb	r2, [r3, #1]
        break;
 8007de2:	e002      	b.n	8007dea <Parked+0x17e>
      }
    }
 8007de4:	bf00      	nop
 8007de6:	e005      	b.n	8007df4 <Parked+0x188>
        break;
 8007de8:	bf00      	nop
    break;
 8007dea:	e003      	b.n	8007df4 <Parked+0x188>
    break;
 8007dec:	bf00      	nop
 8007dee:	e002      	b.n	8007df6 <Parked+0x18a>
    break;
 8007df0:	bf00      	nop
 8007df2:	e000      	b.n	8007df6 <Parked+0x18a>
    break;
 8007df4:	bf00      	nop
  }

  if(*wiper->pWashInput){
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d006      	beq.n	8007e0e <Parked+0x1a2>
     wiper->eStatePreWash = PARKED;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
     wiper->eState = WASH;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2206      	movs	r2, #6
 8007e0c:	705a      	strb	r2, [r3, #1]
  }

  if(*wiper->pSwipeInput){
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <Parked+0x1b2>
    wiper->eState = SWIPE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2207      	movs	r2, #7
 8007e1c:	705a      	strb	r2, [r3, #1]
  }

}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop

08007e2c <Parking>:

static void Parking(Wiper_t* wiper)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  //Set to last state in case park is missed
  switch(wiper->eLastState)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007e3a:	2b07      	cmp	r3, #7
 8007e3c:	d835      	bhi.n	8007eaa <Parking+0x7e>
 8007e3e:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <Parking+0x18>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007eab 	.word	0x08007eab
 8007e48:	08007eab 	.word	0x08007eab
 8007e4c:	08007e65 	.word	0x08007e65
 8007e50:	08007e73 	.word	0x08007e73
 8007e54:	08007eab 	.word	0x08007eab
 8007e58:	08007e81 	.word	0x08007e81
 8007e5c:	08007e8f 	.word	0x08007e8f
 8007e60:	08007e9d 	.word	0x08007e9d
    break;
  case PARKING:
    //Do nothing
    break;
  case SLOW_ON:
    wiper->nSlowOut = 1;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	809a      	strh	r2, [r3, #4]
    break;
 8007e70:	e01b      	b.n	8007eaa <Parking+0x7e>
  case FAST_ON:
    wiper->nSlowOut = 1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 1;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	809a      	strh	r2, [r3, #4]
    break;
 8007e7e:	e014      	b.n	8007eaa <Parking+0x7e>
  case INTER_ON:
    wiper->nSlowOut = 1;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	809a      	strh	r2, [r3, #4]
    break;
 8007e8c:	e00d      	b.n	8007eaa <Parking+0x7e>
  case INTER_PAUSE:
    //Do nothing
    break;
  case WASH:
    wiper->nSlowOut = 1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	809a      	strh	r2, [r3, #4]
    break;
 8007e9a:	e006      	b.n	8007eaa <Parking+0x7e>
  case SWIPE:
    wiper->nSlowOut = 1;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 1;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	809a      	strh	r2, [r3, #4]
    break;
 8007ea8:	bf00      	nop
  }

  //Park detected - stop motor
  if(!(*wiper->pParkSw))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d108      	bne.n	8007ec6 <Parking+0x9a>
  {
    wiper->nSlowOut = 0;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	809a      	strh	r2, [r3, #4]
    wiper->eState = PARKED;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	705a      	strb	r2, [r3, #1]
  }

  //Wash turned on
  if(*wiper->pWashInput)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d006      	beq.n	8007ede <Parking+0xb2>
  {
    wiper->eStatePreWash = PARKING;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    wiper->eState = WASH;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2206      	movs	r2, #6
 8007edc:	705a      	strb	r2, [r3, #1]
  }
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop

08007eec <SlowOn>:

static void SlowOn(Wiper_t* wiper)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	785a      	ldrb	r2, [r3, #1]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  //Set motor to slow speed
  wiper->nSlowOut = 1;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 0;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	809a      	strh	r2, [r3, #4]

  switch(wiper->eMode){
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d054      	beq.n	8007fbc <SlowOn+0xd0>
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	f300 8089 	bgt.w	800802a <SlowOn+0x13e>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <SlowOn+0x36>
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d01f      	beq.n	8007f60 <SlowOn+0x74>
 8007f20:	e083      	b.n	800802a <SlowOn+0x13e>
  case MODE_DIG_IN:
    if(!(*wiper->pSlowInput))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d102      	bne.n	8007f32 <SlowOn+0x46>
      wiper->eState = PARKING;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	705a      	strb	r2, [r3, #1]

    if(*wiper->pInterInput){
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <SlowOn+0x56>
      wiper->eState = INTER_ON;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2205      	movs	r2, #5
 8007f40:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pFastInput){
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d069      	beq.n	8008020 <SlowOn+0x134>
      wiper->nSlowOut = 1;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	705a      	strb	r2, [r3, #1]
    }

    break;
 8007f5e:	e05f      	b.n	8008020 <SlowOn+0x134>

  case MODE_INT_IN:
    //Speed changed
    switch(wiper->eSelectedSpeed)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f66:	2b08      	cmp	r3, #8
 8007f68:	d85c      	bhi.n	8008024 <SlowOn+0x138>
 8007f6a:	a201      	add	r2, pc, #4	; (adr r2, 8007f70 <SlowOn+0x84>)
 8007f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f70:	08007f95 	.word	0x08007f95
 8007f74:	08007fb9 	.word	0x08007fb9
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	08007fb1 	.word	0x08007fb1
 8007f80:	08007fb1 	.word	0x08007fb1
 8007f84:	08007fb1 	.word	0x08007fb1
 8007f88:	08007fb1 	.word	0x08007fb1
 8007f8c:	08007fb1 	.word	0x08007fb1
 8007f90:	08007fb1 	.word	0x08007fb1
    {
    case PARK:
      wiper->eState = PARKING;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	705a      	strb	r2, [r3, #1]
      break;
 8007f9a:	e00e      	b.n	8007fba <SlowOn+0xce>
    case SLOW:
      //Do nothing
      break;

    case FAST:
      wiper->nSlowOut = 1;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2203      	movs	r2, #3
 8007fac:	705a      	strb	r2, [r3, #1]
      break;
 8007fae:	e004      	b.n	8007fba <SlowOn+0xce>

    case INTER_1 ... INTER_6:
      wiper->eState = INTER_ON;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2205      	movs	r2, #5
 8007fb4:	705a      	strb	r2, [r3, #1]
      break;
 8007fb6:	e000      	b.n	8007fba <SlowOn+0xce>
      break;
 8007fb8:	bf00      	nop
    }
    break;
 8007fba:	e033      	b.n	8008024 <SlowOn+0x138>

  case MODE_MIX_IN:
    //Wipers turned off - park
    if(!(*wiper->pOnSw))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d102      	bne.n	8007fcc <SlowOn+0xe0>
    {
      wiper->eState = PARKING;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	705a      	strb	r2, [r3, #1]
    }

    //Speed changed
    switch(wiper->eSelectedSpeed)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d828      	bhi.n	8008028 <SlowOn+0x13c>
 8007fd6:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <SlowOn+0xf0>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	0800801d 	.word	0x0800801d
 8007fe0:	0800801d 	.word	0x0800801d
 8007fe4:	08008001 	.word	0x08008001
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	08008015 	.word	0x08008015
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	08008015 	.word	0x08008015
 8007ff8:	08008015 	.word	0x08008015
 8007ffc:	08008015 	.word	0x08008015
    case SLOW:
      //Do nothing
      break;

    case FAST:
      wiper->nSlowOut = 1;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2203      	movs	r2, #3
 8008010:	705a      	strb	r2, [r3, #1]
      break;
 8008012:	e004      	b.n	800801e <SlowOn+0x132>

    case INTER_1 ... INTER_6:
      wiper->eState = INTER_ON;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2205      	movs	r2, #5
 8008018:	705a      	strb	r2, [r3, #1]
      break;
 800801a:	e000      	b.n	800801e <SlowOn+0x132>
      break;
 800801c:	bf00      	nop
    }
    break;
 800801e:	e003      	b.n	8008028 <SlowOn+0x13c>
    break;
 8008020:	bf00      	nop
 8008022:	e002      	b.n	800802a <SlowOn+0x13e>
    break;
 8008024:	bf00      	nop
 8008026:	e000      	b.n	800802a <SlowOn+0x13e>
    break;
 8008028:	bf00      	nop
  }

  //Wash turned on
  if(*wiper->pWashInput)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d006      	beq.n	8008042 <SlowOn+0x156>
  {
    wiper->eStatePreWash = INTER_PAUSE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2204      	movs	r2, #4
 8008038:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    wiper->eState = WASH;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2206      	movs	r2, #6
 8008040:	705a      	strb	r2, [r3, #1]
  }

}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop

08008050 <FastOn>:

static void FastOn(Wiper_t* wiper)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	785a      	ldrb	r2, [r3, #1]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  //Set motor to fast speed
  wiper->nSlowOut = 1;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 1;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	809a      	strh	r2, [r3, #4]

  switch(wiper->eMode){
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d054      	beq.n	8008120 <FastOn+0xd0>
 8008076:	2b02      	cmp	r3, #2
 8008078:	f300 8089 	bgt.w	800818e <FastOn+0x13e>
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <FastOn+0x36>
 8008080:	2b01      	cmp	r3, #1
 8008082:	d01f      	beq.n	80080c4 <FastOn+0x74>
 8008084:	e083      	b.n	800818e <FastOn+0x13e>
  case MODE_DIG_IN:
    if(!(*wiper->pFastInput))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <FastOn+0x46>
      wiper->eState = PARKING;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	705a      	strb	r2, [r3, #1]

    if(*wiper->pInterInput){
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <FastOn+0x56>
      wiper->eState = INTER_ON;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2205      	movs	r2, #5
 80080a4:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pSlowInput){
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d069      	beq.n	8008184 <FastOn+0x134>
      wiper->nSlowOut = 1;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	705a      	strb	r2, [r3, #1]
    }
    break;
 80080c2:	e05f      	b.n	8008184 <FastOn+0x134>

  case MODE_INT_IN:
    //Speed changed
    switch(wiper->eSelectedSpeed)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d85c      	bhi.n	8008188 <FastOn+0x138>
 80080ce:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <FastOn+0x84>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008101 	.word	0x08008101
 80080dc:	0800811d 	.word	0x0800811d
 80080e0:	08008115 	.word	0x08008115
 80080e4:	08008115 	.word	0x08008115
 80080e8:	08008115 	.word	0x08008115
 80080ec:	08008115 	.word	0x08008115
 80080f0:	08008115 	.word	0x08008115
 80080f4:	08008115 	.word	0x08008115
    {
    case PARK:
      wiper->eState = PARKING;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	705a      	strb	r2, [r3, #1]
      break;
 80080fe:	e00e      	b.n	800811e <FastOn+0xce>

    case SLOW:
      wiper->nSlowOut = 1;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	705a      	strb	r2, [r3, #1]
      break;
 8008112:	e004      	b.n	800811e <FastOn+0xce>
    case FAST:
      //Do nothing
      break;

    case INTER_1 ... INTER_6:
      wiper->eState = INTER_ON;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2205      	movs	r2, #5
 8008118:	705a      	strb	r2, [r3, #1]
      break;
 800811a:	e000      	b.n	800811e <FastOn+0xce>
      break;
 800811c:	bf00      	nop
    }
    break;
 800811e:	e033      	b.n	8008188 <FastOn+0x138>

  case MODE_MIX_IN:
    //Wipers turned off - park
    if(!(*wiper->pOnSw))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d102      	bne.n	8008130 <FastOn+0xe0>
    {
      wiper->eState = PARKING;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	705a      	strb	r2, [r3, #1]
    }

    //Speed changed
    switch(wiper->eSelectedSpeed)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008136:	2b08      	cmp	r3, #8
 8008138:	d828      	bhi.n	800818c <FastOn+0x13c>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <FastOn+0xf0>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008181 	.word	0x08008181
 8008144:	08008165 	.word	0x08008165
 8008148:	08008181 	.word	0x08008181
 800814c:	08008179 	.word	0x08008179
 8008150:	08008179 	.word	0x08008179
 8008154:	08008179 	.word	0x08008179
 8008158:	08008179 	.word	0x08008179
 800815c:	08008179 	.word	0x08008179
 8008160:	08008179 	.word	0x08008179
    {
    case PARK:
      //Do nothing
      break;
    case SLOW:
      wiper->nSlowOut = 1;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	705a      	strb	r2, [r3, #1]
      break;
 8008176:	e004      	b.n	8008182 <FastOn+0x132>
    case FAST:
      //Do nothing
      break;

    case INTER_1 ... INTER_6:
      wiper->eState = INTER_ON;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2205      	movs	r2, #5
 800817c:	705a      	strb	r2, [r3, #1]
      break;
 800817e:	e000      	b.n	8008182 <FastOn+0x132>
      break;
 8008180:	bf00      	nop
    }
    break;
 8008182:	e003      	b.n	800818c <FastOn+0x13c>
    break;
 8008184:	bf00      	nop
 8008186:	e002      	b.n	800818e <FastOn+0x13e>
    break;
 8008188:	bf00      	nop
 800818a:	e000      	b.n	800818e <FastOn+0x13e>
    break;
 800818c:	bf00      	nop
  }

  //Wash turned on
  if(*wiper->pWashInput)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d006      	beq.n	80081a6 <FastOn+0x156>
  {
    wiper->eStatePreWash = INTER_PAUSE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2204      	movs	r2, #4
 800819c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    wiper->eState = WASH;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2206      	movs	r2, #6
 80081a4:	705a      	strb	r2, [r3, #1]
  }
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop

080081b4 <InterOn>:

static void InterOn(Wiper_t* wiper)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	785a      	ldrb	r2, [r3, #1]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  //Set motor to slow speed
  wiper->nSlowOut = 1;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 0;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	809a      	strh	r2, [r3, #4]

  switch(wiper->eMode){
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d060      	beq.n	800829c <InterOn+0xe8>
 80081da:	2b02      	cmp	r3, #2
 80081dc:	f300 809b 	bgt.w	8008316 <InterOn+0x162>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <InterOn+0x36>
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d025      	beq.n	8008234 <InterOn+0x80>
 80081e8:	e095      	b.n	8008316 <InterOn+0x162>
  case MODE_DIG_IN:
    if(!(*wiper->pInterInput)){
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <InterOn+0x46>
      wiper->eState = PARKING;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pSlowInput){
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d008      	beq.n	8008216 <InterOn+0x62>
      wiper->nSlowOut = 1;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pFastInput){
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d075      	beq.n	800830c <InterOn+0x158>
      wiper->nSlowOut = 1;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2203      	movs	r2, #3
 8008230:	705a      	strb	r2, [r3, #1]
    }

    break;
 8008232:	e06b      	b.n	800830c <InterOn+0x158>

  case MODE_INT_IN:
    //Speed changed
    switch(wiper->eSelectedSpeed)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800823a:	2b08      	cmp	r3, #8
 800823c:	d868      	bhi.n	8008310 <InterOn+0x15c>
 800823e:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <InterOn+0x90>)
 8008240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008244:	08008269 	.word	0x08008269
 8008248:	08008271 	.word	0x08008271
 800824c:	08008285 	.word	0x08008285
 8008250:	08008299 	.word	0x08008299
 8008254:	08008299 	.word	0x08008299
 8008258:	08008299 	.word	0x08008299
 800825c:	08008299 	.word	0x08008299
 8008260:	08008299 	.word	0x08008299
 8008264:	08008299 	.word	0x08008299
    {
    case PARK:
      wiper->eState = PARKING;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	705a      	strb	r2, [r3, #1]
      break;
 800826e:	e014      	b.n	800829a <InterOn+0xe6>

    case SLOW:
      wiper->nSlowOut = 1;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	705a      	strb	r2, [r3, #1]
      break;
 8008282:	e00a      	b.n	800829a <InterOn+0xe6>

    case FAST:
      wiper->nSlowOut = 1;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2203      	movs	r2, #3
 8008294:	705a      	strb	r2, [r3, #1]
      break;
 8008296:	e000      	b.n	800829a <InterOn+0xe6>

    case INTER_1 ... INTER_6:
      //Do nothing
      break;
 8008298:	bf00      	nop
    }
    break;
 800829a:	e039      	b.n	8008310 <InterOn+0x15c>

  case MODE_MIX_IN:
    //Wipers turned off - park
    if(!(*wiper->pOnSw))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d102      	bne.n	80082ac <InterOn+0xf8>
    {
      wiper->eState = PARKING;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	705a      	strb	r2, [r3, #1]
    }

    //Speed changed
    switch(wiper->eSelectedSpeed)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b2:	2b08      	cmp	r3, #8
 80082b4:	d82e      	bhi.n	8008314 <InterOn+0x160>
 80082b6:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <InterOn+0x108>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	08008309 	.word	0x08008309
 80082c0:	080082e1 	.word	0x080082e1
 80082c4:	080082f5 	.word	0x080082f5
 80082c8:	08008309 	.word	0x08008309
 80082cc:	08008309 	.word	0x08008309
 80082d0:	08008309 	.word	0x08008309
 80082d4:	08008309 	.word	0x08008309
 80082d8:	08008309 	.word	0x08008309
 80082dc:	08008309 	.word	0x08008309
    {
    case PARK:
      //Do nothing
      break;
    case SLOW:
      wiper->nSlowOut = 1;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	705a      	strb	r2, [r3, #1]
      break;
 80082f2:	e00a      	b.n	800830a <InterOn+0x156>

    case FAST:
      wiper->nSlowOut = 1;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2203      	movs	r2, #3
 8008304:	705a      	strb	r2, [r3, #1]
      break;
 8008306:	e000      	b.n	800830a <InterOn+0x156>
      break;
 8008308:	bf00      	nop

    case INTER_1 ... INTER_6:
      //Do nothing
      break;
    }
    break;
 800830a:	e003      	b.n	8008314 <InterOn+0x160>
    break;
 800830c:	bf00      	nop
 800830e:	e002      	b.n	8008316 <InterOn+0x162>
    break;
 8008310:	bf00      	nop
 8008312:	e000      	b.n	8008316 <InterOn+0x162>
    break;
 8008314:	bf00      	nop
  }

  //Park detected
  //Stop motor
  //Save time - pause for set time
  if(!(*wiper->pParkSw))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10d      	bne.n	800833c <InterOn+0x188>
  {
    wiper->nSlowOut = 0;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	809a      	strh	r2, [r3, #4]
    wiper->nInterPauseStartTime = HAL_GetTick();
 800832c:	f000 fa26 	bl	800877c <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	645a      	str	r2, [r3, #68]	; 0x44
    wiper->eState = INTER_PAUSE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2204      	movs	r2, #4
 800833a:	705a      	strb	r2, [r3, #1]
  }

  //Wash turned on
  if(*wiper->pWashInput)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d006      	beq.n	8008354 <InterOn+0x1a0>
  {
    wiper->eStatePreWash = INTER_ON;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2205      	movs	r2, #5
 800834a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    wiper->eState = WASH;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2206      	movs	r2, #6
 8008352:	705a      	strb	r2, [r3, #1]
  }
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <InterPause>:

static void InterPause(Wiper_t* wiper)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	785a      	ldrb	r2, [r3, #1]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  //Stop motor
  wiper->nSlowOut = 0;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 0;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	809a      	strh	r2, [r3, #4]

  switch(wiper->eMode){
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b02      	cmp	r3, #2
 8008380:	d060      	beq.n	8008444 <InterPause+0xe8>
 8008382:	2b02      	cmp	r3, #2
 8008384:	f300 809b 	bgt.w	80084be <InterPause+0x162>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <InterPause+0x36>
 800838c:	2b01      	cmp	r3, #1
 800838e:	d025      	beq.n	80083dc <InterPause+0x80>
 8008390:	e095      	b.n	80084be <InterPause+0x162>
  case MODE_DIG_IN:
    if(!(*wiper->pInterInput)){
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d102      	bne.n	80083a2 <InterPause+0x46>
      wiper->eState = PARKING;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pSlowInput){
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d008      	beq.n	80083be <InterPause+0x62>
      wiper->nSlowOut = 1;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pFastInput){
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d075      	beq.n	80084b4 <InterPause+0x158>
      wiper->nSlowOut = 1;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2203      	movs	r2, #3
 80083d8:	705a      	strb	r2, [r3, #1]
    }

    break;
 80083da:	e06b      	b.n	80084b4 <InterPause+0x158>

  case MODE_INT_IN:
    //Speed changed
    switch(wiper->eSelectedSpeed)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d868      	bhi.n	80084b8 <InterPause+0x15c>
 80083e6:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <InterPause+0x90>)
 80083e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008419 	.word	0x08008419
 80083f4:	0800842d 	.word	0x0800842d
 80083f8:	08008441 	.word	0x08008441
 80083fc:	08008441 	.word	0x08008441
 8008400:	08008441 	.word	0x08008441
 8008404:	08008441 	.word	0x08008441
 8008408:	08008441 	.word	0x08008441
 800840c:	08008441 	.word	0x08008441
    {
    case PARK:
      wiper->eState = PARKING;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	705a      	strb	r2, [r3, #1]
      break;
 8008416:	e014      	b.n	8008442 <InterPause+0xe6>

    case SLOW:
      wiper->nSlowOut = 1;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	705a      	strb	r2, [r3, #1]
      break;
 800842a:	e00a      	b.n	8008442 <InterPause+0xe6>

    case FAST:
      wiper->nSlowOut = 1;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2203      	movs	r2, #3
 800843c:	705a      	strb	r2, [r3, #1]
      break;
 800843e:	e000      	b.n	8008442 <InterPause+0xe6>

    case INTER_1 ... INTER_6:
      //Do nothing
      break;
 8008440:	bf00      	nop
    }
    break;
 8008442:	e039      	b.n	80084b8 <InterPause+0x15c>

  case MODE_MIX_IN:
    //Wipers turned off - park (should already be parked)
    if(!(*wiper->pOnSw))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <InterPause+0xf8>
    {
      wiper->eState = PARKING;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	705a      	strb	r2, [r3, #1]
    }

    //Speed changed
    switch(wiper->eSelectedSpeed)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800845a:	2b08      	cmp	r3, #8
 800845c:	d82e      	bhi.n	80084bc <InterPause+0x160>
 800845e:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <InterPause+0x108>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	080084b1 	.word	0x080084b1
 8008468:	08008489 	.word	0x08008489
 800846c:	0800849d 	.word	0x0800849d
 8008470:	080084b1 	.word	0x080084b1
 8008474:	080084b1 	.word	0x080084b1
 8008478:	080084b1 	.word	0x080084b1
 800847c:	080084b1 	.word	0x080084b1
 8008480:	080084b1 	.word	0x080084b1
 8008484:	080084b1 	.word	0x080084b1
    {
    case PARK:
      //Do nothing
      break;
    case SLOW:
      wiper->nSlowOut = 1;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	705a      	strb	r2, [r3, #1]
      break;
 800849a:	e00a      	b.n	80084b2 <InterPause+0x156>

    case FAST:
      wiper->nSlowOut = 1;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2203      	movs	r2, #3
 80084ac:	705a      	strb	r2, [r3, #1]
      break;
 80084ae:	e000      	b.n	80084b2 <InterPause+0x156>
      break;
 80084b0:	bf00      	nop

    case INTER_1 ... INTER_6:
      //Do nothing
      break;
    }
    break;
 80084b2:	e003      	b.n	80084bc <InterPause+0x160>
    break;
 80084b4:	bf00      	nop
 80084b6:	e002      	b.n	80084be <InterPause+0x162>
    break;
 80084b8:	bf00      	nop
 80084ba:	e000      	b.n	80084be <InterPause+0x162>
    break;
 80084bc:	bf00      	nop
  }

  //Copy inter delay to local variable
  uint16_t nDelay;
  switch(wiper->eSelectedSpeed)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d82d      	bhi.n	8008524 <InterPause+0x1c8>
 80084c8:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <InterPause+0x174>)
 80084ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	08008525 	.word	0x08008525
 80084d4:	08008525 	.word	0x08008525
 80084d8:	08008525 	.word	0x08008525
 80084dc:	080084f5 	.word	0x080084f5
 80084e0:	080084fd 	.word	0x080084fd
 80084e4:	08008505 	.word	0x08008505
 80084e8:	0800850d 	.word	0x0800850d
 80084ec:	08008515 	.word	0x08008515
 80084f0:	0800851d 	.word	0x0800851d
    break;
  case FAST:
    //Do nothing
    break;
  case INTER_1:
    nDelay = wiper->nInterDelays[0];
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	899b      	ldrh	r3, [r3, #12]
 80084f8:	81fb      	strh	r3, [r7, #14]
    break;
 80084fa:	e013      	b.n	8008524 <InterPause+0x1c8>
  case INTER_2:
    nDelay = wiper->nInterDelays[1];
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	89db      	ldrh	r3, [r3, #14]
 8008500:	81fb      	strh	r3, [r7, #14]
    break;
 8008502:	e00f      	b.n	8008524 <InterPause+0x1c8>
  case INTER_3:
    nDelay = wiper->nInterDelays[2];
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	8a1b      	ldrh	r3, [r3, #16]
 8008508:	81fb      	strh	r3, [r7, #14]
    break;
 800850a:	e00b      	b.n	8008524 <InterPause+0x1c8>
  case INTER_4:
    nDelay = wiper->nInterDelays[3];
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	8a5b      	ldrh	r3, [r3, #18]
 8008510:	81fb      	strh	r3, [r7, #14]
    break;
 8008512:	e007      	b.n	8008524 <InterPause+0x1c8>
  case INTER_5:
    nDelay = wiper->nInterDelays[4];
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	8a9b      	ldrh	r3, [r3, #20]
 8008518:	81fb      	strh	r3, [r7, #14]
    break;
 800851a:	e003      	b.n	8008524 <InterPause+0x1c8>
  case INTER_6:
    nDelay = wiper->nInterDelays[5];
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	8adb      	ldrh	r3, [r3, #22]
 8008520:	81fb      	strh	r3, [r7, #14]
    break;
 8008522:	bf00      	nop
  }

  //Pause for inter delay
  if((HAL_GetTick() - wiper->nInterPauseStartTime) > nDelay)
 8008524:	f000 f92a 	bl	800877c <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	89fb      	ldrh	r3, [r7, #14]
 8008532:	429a      	cmp	r2, r3
 8008534:	d908      	bls.n	8008548 <InterPause+0x1ec>
  {
    wiper->nSlowOut = 1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	809a      	strh	r2, [r3, #4]
    wiper->eState = INTER_ON;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2205      	movs	r2, #5
 8008546:	705a      	strb	r2, [r3, #1]
  }

  //Wash turned on
  if(*wiper->pWashInput)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d006      	beq.n	8008560 <InterPause+0x204>
  {
    wiper->eStatePreWash = INTER_PAUSE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2204      	movs	r2, #4
 8008556:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    wiper->eState = WASH;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2206      	movs	r2, #6
 800855e:	705a      	strb	r2, [r3, #1]
  }

}
 8008560:	bf00      	nop
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <Wash>:

static void Wash(Wiper_t* wiper)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	785a      	ldrb	r2, [r3, #1]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  if(wiper->eStatePreWash == FAST_ON){
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008580:	2b03      	cmp	r3, #3
 8008582:	d106      	bne.n	8008592 <Wash+0x2a>
    wiper->nSlowOut = 1;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	809a      	strh	r2, [r3, #4]
 8008590:	e005      	b.n	800859e <Wash+0x36>
  }else{
    wiper->nSlowOut = 1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	809a      	strh	r2, [r3, #4]
  }

  if(*wiper->pWashInput){
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d004      	beq.n	80085b2 <Wash+0x4a>
    wiper->nWashWipeCount = 0;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80085b0:	e046      	b.n	8008640 <Wash+0xd8>
  }
  else{
    if(!(*wiper->pParkSw) && (*wiper->pParkSw != wiper->nLastParkSw))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10f      	bne.n	80085dc <Wash+0x74>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	881a      	ldrh	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d007      	beq.n	80085dc <Wash+0x74>
    {
      wiper->nWashWipeCount++;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085d2:	3301      	adds	r3, #1
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    if(wiper->nWashWipeCount >= wiper->nWashWipeCycles){
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d329      	bcc.n	8008640 <Wash+0xd8>
      if(wiper->eStatePreWash == PARKED || wiper->eStatePreWash == PARKING)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d004      	beq.n	8008600 <Wash+0x98>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d102      	bne.n	8008606 <Wash+0x9e>
        wiper->eState = PARKING;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	705a      	strb	r2, [r3, #1]
      if(wiper->eStatePreWash == INTER_PAUSE || wiper->eStatePreWash == INTER_ON)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800860c:	2b04      	cmp	r3, #4
 800860e:	d004      	beq.n	800861a <Wash+0xb2>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008616:	2b05      	cmp	r3, #5
 8008618:	d102      	bne.n	8008620 <Wash+0xb8>
        wiper->eState = INTER_ON;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2205      	movs	r2, #5
 800861e:	705a      	strb	r2, [r3, #1]
      if(wiper->eStatePreWash == SLOW_ON)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008626:	2b02      	cmp	r3, #2
 8008628:	d102      	bne.n	8008630 <Wash+0xc8>
        wiper->eState = SLOW_ON;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2202      	movs	r2, #2
 800862e:	705a      	strb	r2, [r3, #1]
      if(wiper->eStatePreWash == FAST_ON)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008636:	2b03      	cmp	r3, #3
 8008638:	d102      	bne.n	8008640 <Wash+0xd8>
        wiper->eState = FAST_ON;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2203      	movs	r2, #3
 800863e:	705a      	strb	r2, [r3, #1]
    }
  }
  wiper->nLastParkSw = *wiper->pParkSw;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	881a      	ldrh	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <Swipe>:

static void Swipe(Wiper_t* wiper)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	785a      	ldrb	r2, [r3, #1]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  //Swipe fast
  wiper->nSlowOut = 1;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 1;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	809a      	strh	r2, [r3, #4]

  //Park switch high
  //Moved past park position
  if(*wiper->pParkSw){
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <Swipe+0x2e>
    wiper->eState = PARKING;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	705a      	strb	r2, [r3, #1]
  }


}
 8008686:	bf00      	nop
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
	...

08008694 <WiperSM>:

void WiperSM(Wiper_t* wiper)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  wiper->eSelectedSpeed = wiper->eSpeedMap[*wiper->pSpeedInput];
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4413      	add	r3, r2
 80086a8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch(wiper->eState)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	785b      	ldrb	r3, [r3, #1]
 80086b6:	2b07      	cmp	r3, #7
 80086b8:	d832      	bhi.n	8008720 <WiperSM+0x8c>
 80086ba:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <WiperSM+0x2c>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	080086e1 	.word	0x080086e1
 80086c4:	080086e9 	.word	0x080086e9
 80086c8:	080086f1 	.word	0x080086f1
 80086cc:	080086f9 	.word	0x080086f9
 80086d0:	08008709 	.word	0x08008709
 80086d4:	08008701 	.word	0x08008701
 80086d8:	08008711 	.word	0x08008711
 80086dc:	08008719 	.word	0x08008719
  {
  case PARKED:
    Parked(wiper);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff fac3 	bl	8007c6c <Parked>
    break;
 80086e6:	e01b      	b.n	8008720 <WiperSM+0x8c>

  case PARKING:
    Parking(wiper);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff fb9f 	bl	8007e2c <Parking>
    break;
 80086ee:	e017      	b.n	8008720 <WiperSM+0x8c>

  case SLOW_ON:
    SlowOn(wiper);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff fbfb 	bl	8007eec <SlowOn>
    break;
 80086f6:	e013      	b.n	8008720 <WiperSM+0x8c>

  case FAST_ON:
    FastOn(wiper);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff fca9 	bl	8008050 <FastOn>
    break;
 80086fe:	e00f      	b.n	8008720 <WiperSM+0x8c>

  case INTER_ON:
    InterOn(wiper);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff fd57 	bl	80081b4 <InterOn>
    break;
 8008706:	e00b      	b.n	8008720 <WiperSM+0x8c>

  case INTER_PAUSE:
    InterPause(wiper);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fe27 	bl	800835c <InterPause>
    break;
 800870e:	e007      	b.n	8008720 <WiperSM+0x8c>

  case WASH:
    Wash(wiper);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff ff29 	bl	8008568 <Wash>
    break;
 8008716:	e003      	b.n	8008720 <WiperSM+0x8c>

  case SWIPE:
    Swipe(wiper);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff ff9d 	bl	8008658 <Swipe>
    break;
 800871e:	bf00      	nop
  }
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800872c:	4b08      	ldr	r3, [pc, #32]	; (8008750 <HAL_Init+0x28>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a07      	ldr	r2, [pc, #28]	; (8008750 <HAL_Init+0x28>)
 8008732:	f043 0310 	orr.w	r3, r3, #16
 8008736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008738:	2003      	movs	r0, #3
 800873a:	f001 ff4c 	bl	800a5d6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800873e:	2000      	movs	r0, #0
 8008740:	f7fe f824 	bl	800678c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008744:	f7fd fe06 	bl	8006354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	40022000 	.word	0x40022000

08008754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008758:	4b06      	ldr	r3, [pc, #24]	; (8008774 <HAL_IncTick+0x20>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	4b06      	ldr	r3, [pc, #24]	; (8008778 <HAL_IncTick+0x24>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4413      	add	r3, r2
 8008764:	4a04      	ldr	r2, [pc, #16]	; (8008778 <HAL_IncTick+0x24>)
 8008766:	6013      	str	r3, [r2, #0]
}
 8008768:	bf00      	nop
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20000018 	.word	0x20000018
 8008778:	200026e4 	.word	0x200026e4

0800877c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800877c:	b480      	push	{r7}
 800877e:	af00      	add	r7, sp, #0
  return uwTick;  
 8008780:	4b03      	ldr	r3, [pc, #12]	; (8008790 <HAL_GetTick+0x14>)
 8008782:	681b      	ldr	r3, [r3, #0]
}
 8008784:	4618      	mov	r0, r3
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	200026e4 	.word	0x200026e4

08008794 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b09a      	sub	sp, #104	; 0x68
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e1c9      	b.n	8008b84 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	f003 0310 	and.w	r3, r3, #16
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d176      	bne.n	80088f0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	2b00      	cmp	r3, #0
 8008808:	d152      	bne.n	80088b0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7fd fdbd 	bl	80063a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d13b      	bne.n	80088b0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 ff6d 	bl	8009718 <ADC_Disable>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	f003 0310 	and.w	r3, r3, #16
 800884c:	2b00      	cmp	r3, #0
 800884e:	d12f      	bne.n	80088b0 <HAL_ADC_Init+0xe0>
 8008850:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008854:	2b00      	cmp	r3, #0
 8008856:	d12b      	bne.n	80088b0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008860:	f023 0302 	bic.w	r3, r3, #2
 8008864:	f043 0202 	orr.w	r2, r3, #2
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689a      	ldr	r2, [r3, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800887a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800888a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800888c:	4b86      	ldr	r3, [pc, #536]	; (8008aa8 <HAL_ADC_Init+0x2d8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a86      	ldr	r2, [pc, #536]	; (8008aac <HAL_ADC_Init+0x2dc>)
 8008892:	fba2 2303 	umull	r2, r3, r2, r3
 8008896:	0c9a      	lsrs	r2, r3, #18
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80088a2:	e002      	b.n	80088aa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f9      	bne.n	80088a4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d007      	beq.n	80088ce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80088c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088cc:	d110      	bne.n	80088f0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	f023 0312 	bic.w	r3, r3, #18
 80088d6:	f043 0210 	orr.w	r2, r3, #16
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e2:	f043 0201 	orr.w	r2, r3, #1
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f4:	f003 0310 	and.w	r3, r3, #16
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f040 8136 	bne.w	8008b6a <HAL_ADC_Init+0x39a>
 80088fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008902:	2b00      	cmp	r3, #0
 8008904:	f040 8131 	bne.w	8008b6a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8008912:	2b00      	cmp	r3, #0
 8008914:	f040 8129 	bne.w	8008b6a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008920:	f043 0202 	orr.w	r2, r3, #2
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008930:	d004      	beq.n	800893c <HAL_ADC_Init+0x16c>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a5e      	ldr	r2, [pc, #376]	; (8008ab0 <HAL_ADC_Init+0x2e0>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d101      	bne.n	8008940 <HAL_ADC_Init+0x170>
 800893c:	4b5d      	ldr	r3, [pc, #372]	; (8008ab4 <HAL_ADC_Init+0x2e4>)
 800893e:	e000      	b.n	8008942 <HAL_ADC_Init+0x172>
 8008940:	4b5d      	ldr	r3, [pc, #372]	; (8008ab8 <HAL_ADC_Init+0x2e8>)
 8008942:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800894c:	d102      	bne.n	8008954 <HAL_ADC_Init+0x184>
 800894e:	4b58      	ldr	r3, [pc, #352]	; (8008ab0 <HAL_ADC_Init+0x2e0>)
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	e01a      	b.n	800898a <HAL_ADC_Init+0x1ba>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a55      	ldr	r2, [pc, #340]	; (8008ab0 <HAL_ADC_Init+0x2e0>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d103      	bne.n	8008966 <HAL_ADC_Init+0x196>
 800895e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	e011      	b.n	800898a <HAL_ADC_Init+0x1ba>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a54      	ldr	r2, [pc, #336]	; (8008abc <HAL_ADC_Init+0x2ec>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d102      	bne.n	8008976 <HAL_ADC_Init+0x1a6>
 8008970:	4b53      	ldr	r3, [pc, #332]	; (8008ac0 <HAL_ADC_Init+0x2f0>)
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	e009      	b.n	800898a <HAL_ADC_Init+0x1ba>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a51      	ldr	r2, [pc, #324]	; (8008ac0 <HAL_ADC_Init+0x2f0>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d102      	bne.n	8008986 <HAL_ADC_Init+0x1b6>
 8008980:	4b4e      	ldr	r3, [pc, #312]	; (8008abc <HAL_ADC_Init+0x2ec>)
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	e001      	b.n	800898a <HAL_ADC_Init+0x1ba>
 8008986:	2300      	movs	r3, #0
 8008988:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 0303 	and.w	r3, r3, #3
 8008994:	2b01      	cmp	r3, #1
 8008996:	d108      	bne.n	80089aa <HAL_ADC_Init+0x1da>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d101      	bne.n	80089aa <HAL_ADC_Init+0x1da>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e000      	b.n	80089ac <HAL_ADC_Init+0x1dc>
 80089aa:	2300      	movs	r3, #0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d11c      	bne.n	80089ea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80089b0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d010      	beq.n	80089d8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d107      	bne.n	80089d2 <HAL_ADC_Init+0x202>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d101      	bne.n	80089d2 <HAL_ADC_Init+0x202>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e000      	b.n	80089d4 <HAL_ADC_Init+0x204>
 80089d2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d108      	bne.n	80089ea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80089d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089e8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	7e5b      	ldrb	r3, [r3, #25]
 80089ee:	035b      	lsls	r3, r3, #13
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80089f4:	2a01      	cmp	r2, #1
 80089f6:	d002      	beq.n	80089fe <HAL_ADC_Init+0x22e>
 80089f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80089fc:	e000      	b.n	8008a00 <HAL_ADC_Init+0x230>
 80089fe:	2200      	movs	r2, #0
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	431a      	orrs	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a10:	4313      	orrs	r3, r2
 8008a12:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d11b      	bne.n	8008a56 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	7e5b      	ldrb	r3, [r3, #25]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d109      	bne.n	8008a3a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	045a      	lsls	r2, r3, #17
 8008a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a30:	4313      	orrs	r3, r2
 8008a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a36:	663b      	str	r3, [r7, #96]	; 0x60
 8008a38:	e00d      	b.n	8008a56 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008a42:	f043 0220 	orr.w	r2, r3, #32
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4e:	f043 0201 	orr.w	r2, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d03a      	beq.n	8008ad4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a16      	ldr	r2, [pc, #88]	; (8008abc <HAL_ADC_Init+0x2ec>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d004      	beq.n	8008a72 <HAL_ADC_Init+0x2a2>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a14      	ldr	r2, [pc, #80]	; (8008ac0 <HAL_ADC_Init+0x2f0>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d128      	bne.n	8008ac4 <HAL_ADC_Init+0x2f4>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8008a7a:	d012      	beq.n	8008aa2 <HAL_ADC_Init+0x2d2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a84:	d00a      	beq.n	8008a9c <HAL_ADC_Init+0x2cc>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8008a8e:	d002      	beq.n	8008a96 <HAL_ADC_Init+0x2c6>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	e018      	b.n	8008ac8 <HAL_ADC_Init+0x2f8>
 8008a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a9a:	e015      	b.n	8008ac8 <HAL_ADC_Init+0x2f8>
 8008a9c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8008aa0:	e012      	b.n	8008ac8 <HAL_ADC_Init+0x2f8>
 8008aa2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8008aa6:	e00f      	b.n	8008ac8 <HAL_ADC_Init+0x2f8>
 8008aa8:	20000010 	.word	0x20000010
 8008aac:	431bde83 	.word	0x431bde83
 8008ab0:	50000100 	.word	0x50000100
 8008ab4:	50000300 	.word	0x50000300
 8008ab8:	50000700 	.word	0x50000700
 8008abc:	50000400 	.word	0x50000400
 8008ac0:	50000500 	.word	0x50000500
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008acc:	4313      	orrs	r3, r2
 8008ace:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 030c 	and.w	r3, r3, #12
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d114      	bne.n	8008b0c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	6812      	ldr	r2, [r2, #0]
 8008aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008af0:	f023 0302 	bic.w	r3, r3, #2
 8008af4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7e1b      	ldrb	r3, [r3, #24]
 8008afa:	039a      	lsls	r2, r3, #14
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	4313      	orrs	r3, r2
 8008b06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	4b1e      	ldr	r3, [pc, #120]	; (8008b8c <HAL_ADC_Init+0x3bc>)
 8008b14:	4013      	ands	r3, r2
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008b1c:	430b      	orrs	r3, r1
 8008b1e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d10c      	bne.n	8008b42 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2e:	f023 010f 	bic.w	r1, r3, #15
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	1e5a      	subs	r2, r3, #1
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8008b40:	e007      	b.n	8008b52 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f022 020f 	bic.w	r2, r2, #15
 8008b50:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5c:	f023 0303 	bic.w	r3, r3, #3
 8008b60:	f043 0201 	orr.w	r2, r3, #1
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	641a      	str	r2, [r3, #64]	; 0x40
 8008b68:	e00a      	b.n	8008b80 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6e:	f023 0312 	bic.w	r3, r3, #18
 8008b72:	f043 0210 	orr.w	r2, r3, #16
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8008b80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3768      	adds	r7, #104	; 0x68
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	fff0c007 	.word	0xfff0c007

08008b90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 0304 	and.w	r3, r3, #4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f040 80f7 	bne.w	8008d9e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d101      	bne.n	8008bbe <HAL_ADC_Start_DMA+0x2e>
 8008bba:	2302      	movs	r3, #2
 8008bbc:	e0f2      	b.n	8008da4 <HAL_ADC_Start_DMA+0x214>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bce:	d004      	beq.n	8008bda <HAL_ADC_Start_DMA+0x4a>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a75      	ldr	r2, [pc, #468]	; (8008dac <HAL_ADC_Start_DMA+0x21c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d109      	bne.n	8008bee <HAL_ADC_Start_DMA+0x5e>
 8008bda:	4b75      	ldr	r3, [pc, #468]	; (8008db0 <HAL_ADC_Start_DMA+0x220>)
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f003 031f 	and.w	r3, r3, #31
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bf0c      	ite	eq
 8008be6:	2301      	moveq	r3, #1
 8008be8:	2300      	movne	r3, #0
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	e008      	b.n	8008c00 <HAL_ADC_Start_DMA+0x70>
 8008bee:	4b71      	ldr	r3, [pc, #452]	; (8008db4 <HAL_ADC_Start_DMA+0x224>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	bf0c      	ite	eq
 8008bfa:	2301      	moveq	r3, #1
 8008bfc:	2300      	movne	r3, #0
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 80c5 	beq.w	8008d90 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 fd22 	bl	8009650 <ADC_Enable>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f040 80b7 	bne.w	8008d86 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c20:	f023 0301 	bic.w	r3, r3, #1
 8008c24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c34:	d004      	beq.n	8008c40 <HAL_ADC_Start_DMA+0xb0>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a5c      	ldr	r2, [pc, #368]	; (8008dac <HAL_ADC_Start_DMA+0x21c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d106      	bne.n	8008c4e <HAL_ADC_Start_DMA+0xbe>
 8008c40:	4b5b      	ldr	r3, [pc, #364]	; (8008db0 <HAL_ADC_Start_DMA+0x220>)
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f003 031f 	and.w	r3, r3, #31
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d010      	beq.n	8008c6e <HAL_ADC_Start_DMA+0xde>
 8008c4c:	e005      	b.n	8008c5a <HAL_ADC_Start_DMA+0xca>
 8008c4e:	4b59      	ldr	r3, [pc, #356]	; (8008db4 <HAL_ADC_Start_DMA+0x224>)
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 031f 	and.w	r3, r3, #31
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <HAL_ADC_Start_DMA+0xde>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c62:	d004      	beq.n	8008c6e <HAL_ADC_Start_DMA+0xde>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a53      	ldr	r2, [pc, #332]	; (8008db8 <HAL_ADC_Start_DMA+0x228>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d115      	bne.n	8008c9a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d036      	beq.n	8008cf6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008c90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8008c98:	e02d      	b.n	8008cf6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cae:	d004      	beq.n	8008cba <HAL_ADC_Start_DMA+0x12a>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a3d      	ldr	r2, [pc, #244]	; (8008dac <HAL_ADC_Start_DMA+0x21c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d10a      	bne.n	8008cd0 <HAL_ADC_Start_DMA+0x140>
 8008cba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bf14      	ite	ne
 8008cc8:	2301      	movne	r3, #1
 8008cca:	2300      	moveq	r3, #0
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	e008      	b.n	8008ce2 <HAL_ADC_Start_DMA+0x152>
 8008cd0:	4b39      	ldr	r3, [pc, #228]	; (8008db8 <HAL_ADC_Start_DMA+0x228>)
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	bf14      	ite	ne
 8008cdc:	2301      	movne	r3, #1
 8008cde:	2300      	moveq	r3, #0
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d007      	beq.n	8008cf6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008cee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d02:	d106      	bne.n	8008d12 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d08:	f023 0206 	bic.w	r2, r3, #6
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	645a      	str	r2, [r3, #68]	; 0x44
 8008d10:	e002      	b.n	8008d18 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d24:	4a25      	ldr	r2, [pc, #148]	; (8008dbc <HAL_ADC_Start_DMA+0x22c>)
 8008d26:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2c:	4a24      	ldr	r2, [pc, #144]	; (8008dc0 <HAL_ADC_Start_DMA+0x230>)
 8008d2e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d34:	4a23      	ldr	r2, [pc, #140]	; (8008dc4 <HAL_ADC_Start_DMA+0x234>)
 8008d36:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	221c      	movs	r2, #28
 8008d3e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f042 0210 	orr.w	r2, r2, #16
 8008d4e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3340      	adds	r3, #64	; 0x40
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f001 fd97 	bl	800a8a2 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0204 	orr.w	r2, r2, #4
 8008d82:	609a      	str	r2, [r3, #8]
 8008d84:	e00d      	b.n	8008da2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d8e:	e008      	b.n	8008da2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d9c:	e001      	b.n	8008da2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	50000100 	.word	0x50000100
 8008db0:	50000300 	.word	0x50000300
 8008db4:	50000700 	.word	0x50000700
 8008db8:	50000400 	.word	0x50000400
 8008dbc:	08009585 	.word	0x08009585
 8008dc0:	080095ff 	.word	0x080095ff
 8008dc4:	0800961b 	.word	0x0800961b

08008dc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b09b      	sub	sp, #108	; 0x6c
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d101      	bne.n	8008dea <HAL_ADC_ConfigChannel+0x22>
 8008de6:	2302      	movs	r3, #2
 8008de8:	e2ca      	b.n	8009380 <HAL_ADC_ConfigChannel+0x5b8>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f003 0304 	and.w	r3, r3, #4
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f040 82ae 	bne.w	800935e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d81c      	bhi.n	8008e44 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	005b      	lsls	r3, r3, #1
 8008e18:	4413      	add	r3, r2
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	231f      	movs	r3, #31
 8008e20:	4093      	lsls	r3, r2
 8008e22:	43db      	mvns	r3, r3
 8008e24:	4019      	ands	r1, r3
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	4413      	add	r3, r2
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	fa00 f203 	lsl.w	r2, r0, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	631a      	str	r2, [r3, #48]	; 0x30
 8008e42:	e063      	b.n	8008f0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	2b09      	cmp	r3, #9
 8008e4a:	d81e      	bhi.n	8008e8a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	4413      	add	r3, r2
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	3b1e      	subs	r3, #30
 8008e60:	221f      	movs	r2, #31
 8008e62:	fa02 f303 	lsl.w	r3, r2, r3
 8008e66:	43db      	mvns	r3, r3
 8008e68:	4019      	ands	r1, r3
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	6818      	ldr	r0, [r3, #0]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	4613      	mov	r3, r2
 8008e74:	005b      	lsls	r3, r3, #1
 8008e76:	4413      	add	r3, r2
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	3b1e      	subs	r3, #30
 8008e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	430a      	orrs	r2, r1
 8008e86:	635a      	str	r2, [r3, #52]	; 0x34
 8008e88:	e040      	b.n	8008f0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	2b0e      	cmp	r3, #14
 8008e90:	d81e      	bhi.n	8008ed0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	005b      	lsls	r3, r3, #1
 8008ea0:	4413      	add	r3, r2
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	3b3c      	subs	r3, #60	; 0x3c
 8008ea6:	221f      	movs	r2, #31
 8008ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eac:	43db      	mvns	r3, r3
 8008eae:	4019      	ands	r1, r3
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	4413      	add	r3, r2
 8008ebe:	005b      	lsls	r3, r3, #1
 8008ec0:	3b3c      	subs	r3, #60	; 0x3c
 8008ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8008ece:	e01d      	b.n	8008f0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	4613      	mov	r3, r2
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	4413      	add	r3, r2
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	3b5a      	subs	r3, #90	; 0x5a
 8008ee4:	221f      	movs	r2, #31
 8008ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eea:	43db      	mvns	r3, r3
 8008eec:	4019      	ands	r1, r3
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	4413      	add	r3, r2
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	3b5a      	subs	r3, #90	; 0x5a
 8008f00:	fa00 f203 	lsl.w	r2, r0, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f003 030c 	and.w	r3, r3, #12
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f040 80e5 	bne.w	80090e6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	d91c      	bls.n	8008f5e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6999      	ldr	r1, [r3, #24]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	4413      	add	r3, r2
 8008f34:	3b1e      	subs	r3, #30
 8008f36:	2207      	movs	r2, #7
 8008f38:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3c:	43db      	mvns	r3, r3
 8008f3e:	4019      	ands	r1, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	6898      	ldr	r0, [r3, #8]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3b1e      	subs	r3, #30
 8008f50:	fa00 f203 	lsl.w	r2, r0, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	619a      	str	r2, [r3, #24]
 8008f5c:	e019      	b.n	8008f92 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6959      	ldr	r1, [r3, #20]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	4413      	add	r3, r2
 8008f6e:	2207      	movs	r2, #7
 8008f70:	fa02 f303 	lsl.w	r3, r2, r3
 8008f74:	43db      	mvns	r3, r3
 8008f76:	4019      	ands	r1, r3
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	6898      	ldr	r0, [r3, #8]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	4613      	mov	r3, r2
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	4413      	add	r3, r2
 8008f86:	fa00 f203 	lsl.w	r2, r0, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	695a      	ldr	r2, [r3, #20]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	08db      	lsrs	r3, r3, #3
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d84f      	bhi.n	8009054 <HAL_ADC_ConfigChannel+0x28c>
 8008fb4:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <HAL_ADC_ConfigChannel+0x1f4>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08008fcd 	.word	0x08008fcd
 8008fc0:	08008fef 	.word	0x08008fef
 8008fc4:	08009011 	.word	0x08009011
 8008fc8:	08009033 	.word	0x08009033
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008fd2:	4b9a      	ldr	r3, [pc, #616]	; (800923c <HAL_ADC_ConfigChannel+0x474>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	6812      	ldr	r2, [r2, #0]
 8008fda:	0691      	lsls	r1, r2, #26
 8008fdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	431a      	orrs	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008fea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8008fec:	e07e      	b.n	80090ec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008ff4:	4b91      	ldr	r3, [pc, #580]	; (800923c <HAL_ADC_ConfigChannel+0x474>)
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	6812      	ldr	r2, [r2, #0]
 8008ffc:	0691      	lsls	r1, r2, #26
 8008ffe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009000:	430a      	orrs	r2, r1
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800900c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800900e:	e06d      	b.n	80090ec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009016:	4b89      	ldr	r3, [pc, #548]	; (800923c <HAL_ADC_ConfigChannel+0x474>)
 8009018:	4013      	ands	r3, r2
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	6812      	ldr	r2, [r2, #0]
 800901e:	0691      	lsls	r1, r2, #26
 8009020:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009022:	430a      	orrs	r2, r1
 8009024:	431a      	orrs	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800902e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8009030:	e05c      	b.n	80090ec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009038:	4b80      	ldr	r3, [pc, #512]	; (800923c <HAL_ADC_ConfigChannel+0x474>)
 800903a:	4013      	ands	r3, r2
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	6812      	ldr	r2, [r2, #0]
 8009040:	0691      	lsls	r1, r2, #26
 8009042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009044:	430a      	orrs	r2, r1
 8009046:	431a      	orrs	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009050:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8009052:	e04b      	b.n	80090ec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800905a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	069b      	lsls	r3, r3, #26
 8009064:	429a      	cmp	r2, r3
 8009066:	d107      	bne.n	8009078 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009076:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800907e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	069b      	lsls	r3, r3, #26
 8009088:	429a      	cmp	r2, r3
 800908a:	d107      	bne.n	800909c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800909a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	069b      	lsls	r3, r3, #26
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d107      	bne.n	80090c0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80090be:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	069b      	lsls	r3, r3, #26
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d10a      	bne.n	80090ea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80090e2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80090e4:	e001      	b.n	80090ea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80090e6:	bf00      	nop
 80090e8:	e000      	b.n	80090ec <HAL_ADC_ConfigChannel+0x324>
      break;
 80090ea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d108      	bne.n	800910c <HAL_ADC_ConfigChannel+0x344>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b01      	cmp	r3, #1
 8009106:	d101      	bne.n	800910c <HAL_ADC_ConfigChannel+0x344>
 8009108:	2301      	movs	r3, #1
 800910a:	e000      	b.n	800910e <HAL_ADC_ConfigChannel+0x346>
 800910c:	2300      	movs	r3, #0
 800910e:	2b00      	cmp	r3, #0
 8009110:	f040 8130 	bne.w	8009374 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d00f      	beq.n	800913c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2201      	movs	r2, #1
 800912a:	fa02 f303 	lsl.w	r3, r2, r3
 800912e:	43da      	mvns	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	400a      	ands	r2, r1
 8009136:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800913a:	e049      	b.n	80091d0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2201      	movs	r2, #1
 800914a:	409a      	lsls	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b09      	cmp	r3, #9
 800915c:	d91c      	bls.n	8009198 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6999      	ldr	r1, [r3, #24]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	4613      	mov	r3, r2
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	4413      	add	r3, r2
 800916e:	3b1b      	subs	r3, #27
 8009170:	2207      	movs	r2, #7
 8009172:	fa02 f303 	lsl.w	r3, r2, r3
 8009176:	43db      	mvns	r3, r3
 8009178:	4019      	ands	r1, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6898      	ldr	r0, [r3, #8]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4613      	mov	r3, r2
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	4413      	add	r3, r2
 8009188:	3b1b      	subs	r3, #27
 800918a:	fa00 f203 	lsl.w	r2, r0, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	619a      	str	r2, [r3, #24]
 8009196:	e01b      	b.n	80091d0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6959      	ldr	r1, [r3, #20]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	4613      	mov	r3, r2
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	4413      	add	r3, r2
 80091aa:	2207      	movs	r2, #7
 80091ac:	fa02 f303 	lsl.w	r3, r2, r3
 80091b0:	43db      	mvns	r3, r3
 80091b2:	4019      	ands	r1, r3
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	6898      	ldr	r0, [r3, #8]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	4613      	mov	r3, r2
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	4413      	add	r3, r2
 80091c4:	fa00 f203 	lsl.w	r2, r0, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091d8:	d004      	beq.n	80091e4 <HAL_ADC_ConfigChannel+0x41c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a18      	ldr	r2, [pc, #96]	; (8009240 <HAL_ADC_ConfigChannel+0x478>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d101      	bne.n	80091e8 <HAL_ADC_ConfigChannel+0x420>
 80091e4:	4b17      	ldr	r3, [pc, #92]	; (8009244 <HAL_ADC_ConfigChannel+0x47c>)
 80091e6:	e000      	b.n	80091ea <HAL_ADC_ConfigChannel+0x422>
 80091e8:	4b17      	ldr	r3, [pc, #92]	; (8009248 <HAL_ADC_ConfigChannel+0x480>)
 80091ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b10      	cmp	r3, #16
 80091f2:	d105      	bne.n	8009200 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80091f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d015      	beq.n	800922c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8009204:	2b11      	cmp	r3, #17
 8009206:	d105      	bne.n	8009214 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8009208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8009218:	2b12      	cmp	r3, #18
 800921a:	f040 80ab 	bne.w	8009374 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800921e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8009226:	2b00      	cmp	r3, #0
 8009228:	f040 80a4 	bne.w	8009374 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009234:	d10a      	bne.n	800924c <HAL_ADC_ConfigChannel+0x484>
 8009236:	4b02      	ldr	r3, [pc, #8]	; (8009240 <HAL_ADC_ConfigChannel+0x478>)
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	e022      	b.n	8009282 <HAL_ADC_ConfigChannel+0x4ba>
 800923c:	83fff000 	.word	0x83fff000
 8009240:	50000100 	.word	0x50000100
 8009244:	50000300 	.word	0x50000300
 8009248:	50000700 	.word	0x50000700
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a4e      	ldr	r2, [pc, #312]	; (800938c <HAL_ADC_ConfigChannel+0x5c4>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d103      	bne.n	800925e <HAL_ADC_ConfigChannel+0x496>
 8009256:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	e011      	b.n	8009282 <HAL_ADC_ConfigChannel+0x4ba>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a4b      	ldr	r2, [pc, #300]	; (8009390 <HAL_ADC_ConfigChannel+0x5c8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d102      	bne.n	800926e <HAL_ADC_ConfigChannel+0x4a6>
 8009268:	4b4a      	ldr	r3, [pc, #296]	; (8009394 <HAL_ADC_ConfigChannel+0x5cc>)
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	e009      	b.n	8009282 <HAL_ADC_ConfigChannel+0x4ba>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a48      	ldr	r2, [pc, #288]	; (8009394 <HAL_ADC_ConfigChannel+0x5cc>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d102      	bne.n	800927e <HAL_ADC_ConfigChannel+0x4b6>
 8009278:	4b45      	ldr	r3, [pc, #276]	; (8009390 <HAL_ADC_ConfigChannel+0x5c8>)
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	e001      	b.n	8009282 <HAL_ADC_ConfigChannel+0x4ba>
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f003 0303 	and.w	r3, r3, #3
 800928c:	2b01      	cmp	r3, #1
 800928e:	d108      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x4da>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x4da>
 800929e:	2301      	movs	r3, #1
 80092a0:	e000      	b.n	80092a4 <HAL_ADC_ConfigChannel+0x4dc>
 80092a2:	2300      	movs	r3, #0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d150      	bne.n	800934a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80092a8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d010      	beq.n	80092d0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d107      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x502>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d101      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x502>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e000      	b.n	80092cc <HAL_ADC_ConfigChannel+0x504>
 80092ca:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d13c      	bne.n	800934a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b10      	cmp	r3, #16
 80092d6:	d11d      	bne.n	8009314 <HAL_ADC_ConfigChannel+0x54c>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e0:	d118      	bne.n	8009314 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80092e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80092ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092ec:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80092ee:	4b2a      	ldr	r3, [pc, #168]	; (8009398 <HAL_ADC_ConfigChannel+0x5d0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a2a      	ldr	r2, [pc, #168]	; (800939c <HAL_ADC_ConfigChannel+0x5d4>)
 80092f4:	fba2 2303 	umull	r2, r3, r2, r3
 80092f8:	0c9a      	lsrs	r2, r3, #18
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8009304:	e002      	b.n	800930c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	3b01      	subs	r3, #1
 800930a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f9      	bne.n	8009306 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8009312:	e02e      	b.n	8009372 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b11      	cmp	r3, #17
 800931a:	d10b      	bne.n	8009334 <HAL_ADC_ConfigChannel+0x56c>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009324:	d106      	bne.n	8009334 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8009326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800932e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009330:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8009332:	e01e      	b.n	8009372 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b12      	cmp	r3, #18
 800933a:	d11a      	bne.n	8009372 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800933c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009346:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8009348:	e013      	b.n	8009372 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934e:	f043 0220 	orr.w	r2, r3, #32
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800935c:	e00a      	b.n	8009374 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009362:	f043 0220 	orr.w	r2, r3, #32
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009370:	e000      	b.n	8009374 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8009372:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800937c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009380:	4618      	mov	r0, r3
 8009382:	376c      	adds	r7, #108	; 0x6c
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	50000100 	.word	0x50000100
 8009390:	50000400 	.word	0x50000400
 8009394:	50000500 	.word	0x50000500
 8009398:	20000010 	.word	0x20000010
 800939c:	431bde83 	.word	0x431bde83

080093a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b099      	sub	sp, #100	; 0x64
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093b8:	d102      	bne.n	80093c0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80093ba:	4b6d      	ldr	r3, [pc, #436]	; (8009570 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80093bc:	60bb      	str	r3, [r7, #8]
 80093be:	e01a      	b.n	80093f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a6a      	ldr	r2, [pc, #424]	; (8009570 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d103      	bne.n	80093d2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80093ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80093ce:	60bb      	str	r3, [r7, #8]
 80093d0:	e011      	b.n	80093f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a67      	ldr	r2, [pc, #412]	; (8009574 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d102      	bne.n	80093e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80093dc:	4b66      	ldr	r3, [pc, #408]	; (8009578 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80093de:	60bb      	str	r3, [r7, #8]
 80093e0:	e009      	b.n	80093f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a64      	ldr	r2, [pc, #400]	; (8009578 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d102      	bne.n	80093f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80093ec:	4b61      	ldr	r3, [pc, #388]	; (8009574 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80093ee:	60bb      	str	r3, [r7, #8]
 80093f0:	e001      	b.n	80093f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80093f2:	2300      	movs	r3, #0
 80093f4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e0b0      	b.n	8009562 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800940a:	2302      	movs	r3, #2
 800940c:	e0a9      	b.n	8009562 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	f003 0304 	and.w	r3, r3, #4
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 808d 	bne.w	8009540 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f003 0304 	and.w	r3, r3, #4
 800942e:	2b00      	cmp	r3, #0
 8009430:	f040 8086 	bne.w	8009540 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800943c:	d004      	beq.n	8009448 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a4b      	ldr	r2, [pc, #300]	; (8009570 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d101      	bne.n	800944c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8009448:	4b4c      	ldr	r3, [pc, #304]	; (800957c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800944a:	e000      	b.n	800944e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800944c:	4b4c      	ldr	r3, [pc, #304]	; (8009580 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800944e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d040      	beq.n	80094da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8009458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	6859      	ldr	r1, [r3, #4]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800946a:	035b      	lsls	r3, r3, #13
 800946c:	430b      	orrs	r3, r1
 800946e:	431a      	orrs	r2, r3
 8009470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009472:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f003 0303 	and.w	r3, r3, #3
 800947e:	2b01      	cmp	r3, #1
 8009480:	d108      	bne.n	8009494 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8009490:	2301      	movs	r3, #1
 8009492:	e000      	b.n	8009496 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8009494:	2300      	movs	r3, #0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d15c      	bne.n	8009554 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f003 0303 	and.w	r3, r3, #3
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d107      	bne.n	80094b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e000      	b.n	80094b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80094b6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d14b      	bne.n	8009554 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80094bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80094c4:	f023 030f 	bic.w	r3, r3, #15
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	6811      	ldr	r1, [r2, #0]
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	6892      	ldr	r2, [r2, #8]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	431a      	orrs	r2, r3
 80094d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094d6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80094d8:	e03c      	b.n	8009554 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80094da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80094e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094e4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f003 0303 	and.w	r3, r3, #3
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d108      	bne.n	8009506 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d101      	bne.n	8009506 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8009502:	2301      	movs	r3, #1
 8009504:	e000      	b.n	8009508 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009506:	2300      	movs	r3, #0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d123      	bne.n	8009554 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	2b01      	cmp	r3, #1
 8009516:	d107      	bne.n	8009528 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8009524:	2301      	movs	r3, #1
 8009526:	e000      	b.n	800952a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8009528:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800952a:	2b00      	cmp	r3, #0
 800952c:	d112      	bne.n	8009554 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800952e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009536:	f023 030f 	bic.w	r3, r3, #15
 800953a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800953c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800953e:	e009      	b.n	8009554 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009544:	f043 0220 	orr.w	r2, r3, #32
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009552:	e000      	b.n	8009556 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8009554:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800955e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8009562:	4618      	mov	r0, r3
 8009564:	3764      	adds	r7, #100	; 0x64
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	50000100 	.word	0x50000100
 8009574:	50000400 	.word	0x50000400
 8009578:	50000500 	.word	0x50000500
 800957c:	50000300 	.word	0x50000300
 8009580:	50000700 	.word	0x50000700

08009584 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800959a:	2b00      	cmp	r3, #0
 800959c:	d126      	bne.n	80095ec <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d115      	bne.n	80095e4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d111      	bne.n	80095e4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d105      	bne.n	80095e4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	f043 0201 	orr.w	r2, r3, #1
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff f8d5 	bl	8008794 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80095ea:	e004      	b.n	80095f6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
}
 80095f6:	bf00      	nop
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff f8cb 	bl	80087a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8009612:	bf00      	nop
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009638:	f043 0204 	orr.w	r2, r3, #4
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f7ff f8bb 	bl	80087bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009646:	bf00      	nop
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f003 0303 	and.w	r3, r3, #3
 8009666:	2b01      	cmp	r3, #1
 8009668:	d108      	bne.n	800967c <ADC_Enable+0x2c>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b01      	cmp	r3, #1
 8009676:	d101      	bne.n	800967c <ADC_Enable+0x2c>
 8009678:	2301      	movs	r3, #1
 800967a:	e000      	b.n	800967e <ADC_Enable+0x2e>
 800967c:	2300      	movs	r3, #0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d143      	bne.n	800970a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	4b22      	ldr	r3, [pc, #136]	; (8009714 <ADC_Enable+0xc4>)
 800968a:	4013      	ands	r3, r2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00d      	beq.n	80096ac <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009694:	f043 0210 	orr.w	r2, r3, #16
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a0:	f043 0201 	orr.w	r2, r3, #1
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e02f      	b.n	800970c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689a      	ldr	r2, [r3, #8]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f042 0201 	orr.w	r2, r2, #1
 80096ba:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80096bc:	f7ff f85e 	bl	800877c <HAL_GetTick>
 80096c0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80096c2:	e01b      	b.n	80096fc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80096c4:	f7ff f85a 	bl	800877c <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d914      	bls.n	80096fc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d00d      	beq.n	80096fc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e4:	f043 0210 	orr.w	r2, r3, #16
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f0:	f043 0201 	orr.w	r2, r3, #1
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e007      	b.n	800970c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b01      	cmp	r3, #1
 8009708:	d1dc      	bne.n	80096c4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	8000003f 	.word	0x8000003f

08009718 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f003 0303 	and.w	r3, r3, #3
 800972e:	2b01      	cmp	r3, #1
 8009730:	d108      	bne.n	8009744 <ADC_Disable+0x2c>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <ADC_Disable+0x2c>
 8009740:	2301      	movs	r3, #1
 8009742:	e000      	b.n	8009746 <ADC_Disable+0x2e>
 8009744:	2300      	movs	r3, #0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d047      	beq.n	80097da <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f003 030d 	and.w	r3, r3, #13
 8009754:	2b01      	cmp	r3, #1
 8009756:	d10f      	bne.n	8009778 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0202 	orr.w	r2, r2, #2
 8009766:	609a      	str	r2, [r3, #8]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2203      	movs	r2, #3
 800976e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8009770:	f7ff f804 	bl	800877c <HAL_GetTick>
 8009774:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8009776:	e029      	b.n	80097cc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	f043 0210 	orr.w	r2, r3, #16
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009788:	f043 0201 	orr.w	r2, r3, #1
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e023      	b.n	80097dc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009794:	f7fe fff2 	bl	800877c <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d914      	bls.n	80097cc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f003 0301 	and.w	r3, r3, #1
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d10d      	bne.n	80097cc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b4:	f043 0210 	orr.w	r2, r3, #16
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c0:	f043 0201 	orr.w	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e007      	b.n	80097dc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d0dc      	beq.n	8009794 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e0ed      	b.n	80099d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d102      	bne.n	8009808 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7fc fe78 	bl	80064f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0201 	orr.w	r2, r2, #1
 8009816:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009818:	f7fe ffb0 	bl	800877c <HAL_GetTick>
 800981c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800981e:	e012      	b.n	8009846 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009820:	f7fe ffac 	bl	800877c <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	2b0a      	cmp	r3, #10
 800982c:	d90b      	bls.n	8009846 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2205      	movs	r2, #5
 800983e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e0c5      	b.n	80099d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0e5      	beq.n	8009820 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0202 	bic.w	r2, r2, #2
 8009862:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009864:	f7fe ff8a 	bl	800877c <HAL_GetTick>
 8009868:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800986a:	e012      	b.n	8009892 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800986c:	f7fe ff86 	bl	800877c <HAL_GetTick>
 8009870:	4602      	mov	r2, r0
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2b0a      	cmp	r3, #10
 8009878:	d90b      	bls.n	8009892 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2205      	movs	r2, #5
 800988a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e09f      	b.n	80099d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f003 0302 	and.w	r3, r3, #2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e5      	bne.n	800986c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	7e1b      	ldrb	r3, [r3, #24]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d108      	bne.n	80098ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	e007      	b.n	80098ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	7e5b      	ldrb	r3, [r3, #25]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d108      	bne.n	80098e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	e007      	b.n	80098f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	7e9b      	ldrb	r3, [r3, #26]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d108      	bne.n	800990e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0220 	orr.w	r2, r2, #32
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	e007      	b.n	800991e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f022 0220 	bic.w	r2, r2, #32
 800991c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	7edb      	ldrb	r3, [r3, #27]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d108      	bne.n	8009938 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 0210 	bic.w	r2, r2, #16
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	e007      	b.n	8009948 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f042 0210 	orr.w	r2, r2, #16
 8009946:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	7f1b      	ldrb	r3, [r3, #28]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d108      	bne.n	8009962 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f042 0208 	orr.w	r2, r2, #8
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	e007      	b.n	8009972 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0208 	bic.w	r2, r2, #8
 8009970:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	7f5b      	ldrb	r3, [r3, #29]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d108      	bne.n	800998c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f042 0204 	orr.w	r2, r2, #4
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	e007      	b.n	800999c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0204 	bic.w	r2, r2, #4
 800999a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	431a      	orrs	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	431a      	orrs	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	ea42 0103 	orr.w	r1, r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	1e5a      	subs	r2, r3, #1
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80099da:	b480      	push	{r7}
 80099dc:	b087      	sub	sp, #28
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099f0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80099f2:	7cfb      	ldrb	r3, [r7, #19]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d003      	beq.n	8009a00 <HAL_CAN_ConfigFilter+0x26>
 80099f8:	7cfb      	ldrb	r3, [r7, #19]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	f040 80aa 	bne.w	8009b54 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a06:	f043 0201 	orr.w	r2, r3, #1
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	f003 031f 	and.w	r3, r3, #31
 8009a18:	2201      	movs	r2, #1
 8009a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	43db      	mvns	r3, r3
 8009a2a:	401a      	ands	r2, r3
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d123      	bne.n	8009a82 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	43db      	mvns	r3, r3
 8009a44:	401a      	ands	r2, r3
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009a58:	683a      	ldr	r2, [r7, #0]
 8009a5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009a5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	3248      	adds	r2, #72	; 0x48
 8009a62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009a76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009a78:	6979      	ldr	r1, [r7, #20]
 8009a7a:	3348      	adds	r3, #72	; 0x48
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	440b      	add	r3, r1
 8009a80:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d122      	bne.n	8009ad0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	431a      	orrs	r2, r3
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009aaa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	3248      	adds	r2, #72	; 0x48
 8009ab0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009ac4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009ac6:	6979      	ldr	r1, [r7, #20]
 8009ac8:	3348      	adds	r3, #72	; 0x48
 8009aca:	00db      	lsls	r3, r3, #3
 8009acc:	440b      	add	r3, r1
 8009ace:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d109      	bne.n	8009aec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	401a      	ands	r2, r3
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009aea:	e007      	b.n	8009afc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	431a      	orrs	r2, r3
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d109      	bne.n	8009b18 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	43db      	mvns	r3, r3
 8009b0e:	401a      	ands	r2, r3
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009b16:	e007      	b.n	8009b28 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	431a      	orrs	r2, r3
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	6a1b      	ldr	r3, [r3, #32]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d107      	bne.n	8009b40 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009b46:	f023 0201 	bic.w	r2, r3, #1
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e006      	b.n	8009b62 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
  }
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	371c      	adds	r7, #28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d12e      	bne.n	8009be0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2202      	movs	r2, #2
 8009b86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f022 0201 	bic.w	r2, r2, #1
 8009b98:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b9a:	f7fe fdef 	bl	800877c <HAL_GetTick>
 8009b9e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009ba0:	e012      	b.n	8009bc8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009ba2:	f7fe fdeb 	bl	800877c <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	2b0a      	cmp	r3, #10
 8009bae:	d90b      	bls.n	8009bc8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2205      	movs	r2, #5
 8009bc0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e012      	b.n	8009bee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e5      	bne.n	8009ba2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e006      	b.n	8009bee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
  }
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b089      	sub	sp, #36	; 0x24
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	60f8      	str	r0, [r7, #12]
 8009bfe:	60b9      	str	r1, [r7, #8]
 8009c00:	607a      	str	r2, [r7, #4]
 8009c02:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009c14:	7ffb      	ldrb	r3, [r7, #31]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d003      	beq.n	8009c22 <HAL_CAN_AddTxMessage+0x2c>
 8009c1a:	7ffb      	ldrb	r3, [r7, #31]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	f040 80b8 	bne.w	8009d92 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10a      	bne.n	8009c42 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d105      	bne.n	8009c42 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 80a0 	beq.w	8009d82 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	0e1b      	lsrs	r3, r3, #24
 8009c46:	f003 0303 	and.w	r3, r3, #3
 8009c4a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d907      	bls.n	8009c62 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e09e      	b.n	8009da0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009c62:	2201      	movs	r2, #1
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	409a      	lsls	r2, r3
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10d      	bne.n	8009c90 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	6809      	ldr	r1, [r1, #0]
 8009c82:	431a      	orrs	r2, r3
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	3318      	adds	r3, #24
 8009c88:	011b      	lsls	r3, r3, #4
 8009c8a:	440b      	add	r3, r1
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	e00f      	b.n	8009cb0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009c9a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009ca0:	68f9      	ldr	r1, [r7, #12]
 8009ca2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009ca4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	3318      	adds	r3, #24
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	440b      	add	r3, r1
 8009cae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6819      	ldr	r1, [r3, #0]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	691a      	ldr	r2, [r3, #16]
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	3318      	adds	r3, #24
 8009cbc:	011b      	lsls	r3, r3, #4
 8009cbe:	440b      	add	r3, r1
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	7d1b      	ldrb	r3, [r3, #20]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d111      	bne.n	8009cf0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	3318      	adds	r3, #24
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	4413      	add	r3, r2
 8009cd8:	3304      	adds	r3, #4
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	6811      	ldr	r1, [r2, #0]
 8009ce0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	3318      	adds	r3, #24
 8009ce8:	011b      	lsls	r3, r3, #4
 8009cea:	440b      	add	r3, r1
 8009cec:	3304      	adds	r3, #4
 8009cee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3307      	adds	r3, #7
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	061a      	lsls	r2, r3, #24
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3306      	adds	r3, #6
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	041b      	lsls	r3, r3, #16
 8009d00:	431a      	orrs	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3305      	adds	r3, #5
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	3204      	adds	r2, #4
 8009d10:	7812      	ldrb	r2, [r2, #0]
 8009d12:	4610      	mov	r0, r2
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	6811      	ldr	r1, [r2, #0]
 8009d18:	ea43 0200 	orr.w	r2, r3, r0
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	440b      	add	r3, r1
 8009d22:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009d26:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3303      	adds	r3, #3
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	061a      	lsls	r2, r3, #24
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3302      	adds	r3, #2
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	041b      	lsls	r3, r3, #16
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	021b      	lsls	r3, r3, #8
 8009d42:	4313      	orrs	r3, r2
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	7812      	ldrb	r2, [r2, #0]
 8009d48:	4610      	mov	r0, r2
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	6811      	ldr	r1, [r2, #0]
 8009d4e:	ea43 0200 	orr.w	r2, r3, r0
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	011b      	lsls	r3, r3, #4
 8009d56:	440b      	add	r3, r1
 8009d58:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009d5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	3318      	adds	r3, #24
 8009d66:	011b      	lsls	r3, r3, #4
 8009d68:	4413      	add	r3, r2
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	6811      	ldr	r1, [r2, #0]
 8009d70:	f043 0201 	orr.w	r2, r3, #1
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	3318      	adds	r3, #24
 8009d78:	011b      	lsls	r3, r3, #4
 8009d7a:	440b      	add	r3, r1
 8009d7c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e00e      	b.n	8009da0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e006      	b.n	8009da0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
  }
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3724      	adds	r7, #36	; 0x24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dc0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d003      	beq.n	8009dd0 <HAL_CAN_GetRxMessage+0x24>
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	f040 80f3 	bne.w	8009fb6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10e      	bne.n	8009df4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	f003 0303 	and.w	r3, r3, #3
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d116      	bne.n	8009e12 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e0e7      	b.n	8009fc4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f003 0303 	and.w	r3, r3, #3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d107      	bne.n	8009e12 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e0d8      	b.n	8009fc4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	331b      	adds	r3, #27
 8009e1a:	011b      	lsls	r3, r3, #4
 8009e1c:	4413      	add	r3, r2
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0204 	and.w	r2, r3, #4
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10c      	bne.n	8009e4a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	331b      	adds	r3, #27
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	4413      	add	r3, r2
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	0d5b      	lsrs	r3, r3, #21
 8009e40:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]
 8009e48:	e00b      	b.n	8009e62 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	331b      	adds	r3, #27
 8009e52:	011b      	lsls	r3, r3, #4
 8009e54:	4413      	add	r3, r2
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	08db      	lsrs	r3, r3, #3
 8009e5a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	331b      	adds	r3, #27
 8009e6a:	011b      	lsls	r3, r3, #4
 8009e6c:	4413      	add	r3, r2
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0202 	and.w	r2, r3, #2
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	331b      	adds	r3, #27
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	4413      	add	r3, r2
 8009e84:	3304      	adds	r3, #4
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 020f 	and.w	r2, r3, #15
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	331b      	adds	r3, #27
 8009e98:	011b      	lsls	r3, r3, #4
 8009e9a:	4413      	add	r3, r2
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	0a1b      	lsrs	r3, r3, #8
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	331b      	adds	r3, #27
 8009eb0:	011b      	lsls	r3, r3, #4
 8009eb2:	4413      	add	r3, r2
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	0c1b      	lsrs	r3, r3, #16
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	011b      	lsls	r3, r3, #4
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	0a1a      	lsrs	r2, r3, #8
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	3301      	adds	r3, #1
 8009eec:	b2d2      	uxtb	r2, r2
 8009eee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	0c1a      	lsrs	r2, r3, #16
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	3302      	adds	r3, #2
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	011b      	lsls	r3, r3, #4
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	0e1a      	lsrs	r2, r3, #24
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	3303      	adds	r3, #3
 8009f20:	b2d2      	uxtb	r2, r2
 8009f22:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	011b      	lsls	r3, r3, #4
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	3304      	adds	r3, #4
 8009f38:	b2d2      	uxtb	r2, r2
 8009f3a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	4413      	add	r3, r2
 8009f46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	0a1a      	lsrs	r2, r3, #8
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	3305      	adds	r3, #5
 8009f52:	b2d2      	uxtb	r2, r2
 8009f54:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	0c1a      	lsrs	r2, r3, #16
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	3306      	adds	r3, #6
 8009f6c:	b2d2      	uxtb	r2, r2
 8009f6e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	011b      	lsls	r3, r3, #4
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	0e1a      	lsrs	r2, r3, #24
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	3307      	adds	r3, #7
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d108      	bne.n	8009fa2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f042 0220 	orr.w	r2, r2, #32
 8009f9e:	60da      	str	r2, [r3, #12]
 8009fa0:	e007      	b.n	8009fb2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	691a      	ldr	r2, [r3, #16]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f042 0220 	orr.w	r2, r2, #32
 8009fb0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e006      	b.n	8009fc4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
  }
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	371c      	adds	r7, #28
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fe0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d002      	beq.n	8009fee <HAL_CAN_ActivateNotification+0x1e>
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d109      	bne.n	800a002 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	6959      	ldr	r1, [r3, #20]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	e006      	b.n	800a010 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
  }
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08a      	sub	sp, #40	; 0x28
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a024:	2300      	movs	r3, #0
 800a026:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d07c      	beq.n	800a15c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d023      	beq.n	800a0b4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2201      	movs	r2, #1
 800a072:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	f003 0302 	and.w	r3, r3, #2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f983 	bl	800a38a <HAL_CAN_TxMailbox0CompleteCallback>
 800a084:	e016      	b.n	800a0b4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	f003 0304 	and.w	r3, r3, #4
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d004      	beq.n	800a09a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
 800a098:	e00c      	b.n	800a0b4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	f003 0308 	and.w	r3, r3, #8
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ac:	e002      	b.n	800a0b4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f989 	bl	800a3c6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d024      	beq.n	800a108 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f963 	bl	800a39e <HAL_CAN_TxMailbox1CompleteCallback>
 800a0d8:	e016      	b.n	800a108 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d004      	beq.n	800a0ee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a0ea:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ec:	e00c      	b.n	800a108 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d004      	beq.n	800a102 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a100:	e002      	b.n	800a108 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f969 	bl	800a3da <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d024      	beq.n	800a15c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a11a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f943 	bl	800a3b2 <HAL_CAN_TxMailbox2CompleteCallback>
 800a12c:	e016      	b.n	800a15c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d004      	beq.n	800a142 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a13e:	627b      	str	r3, [r7, #36]	; 0x24
 800a140:	e00c      	b.n	800a15c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d004      	beq.n	800a156 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a152:	627b      	str	r3, [r7, #36]	; 0x24
 800a154:	e002      	b.n	800a15c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f949 	bl	800a3ee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	f003 0308 	and.w	r3, r3, #8
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00c      	beq.n	800a180 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f003 0310 	and.w	r3, r3, #16
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d007      	beq.n	800a180 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a176:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2210      	movs	r2, #16
 800a17e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00b      	beq.n	800a1a2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f003 0308 	and.w	r3, r3, #8
 800a190:	2b00      	cmp	r3, #0
 800a192:	d006      	beq.n	800a1a2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2208      	movs	r2, #8
 800a19a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f930 	bl	800a402 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d009      	beq.n	800a1c0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d002      	beq.n	800a1c0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7f6 fe2c 	bl	8000e18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00c      	beq.n	800a1e4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f003 0310 	and.w	r3, r3, #16
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2210      	movs	r2, #16
 800a1e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	f003 0320 	and.w	r3, r3, #32
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00b      	beq.n	800a206 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f003 0308 	and.w	r3, r3, #8
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d006      	beq.n	800a206 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f912 	bl	800a42a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	f003 0310 	and.w	r3, r3, #16
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d009      	beq.n	800a224 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d002      	beq.n	800a224 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f8f9 	bl	800a416 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00b      	beq.n	800a246 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	f003 0310 	and.w	r3, r3, #16
 800a234:	2b00      	cmp	r3, #0
 800a236:	d006      	beq.n	800a246 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2210      	movs	r2, #16
 800a23e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f8fc 	bl	800a43e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00b      	beq.n	800a268 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	f003 0308 	and.w	r3, r3, #8
 800a256:	2b00      	cmp	r3, #0
 800a258:	d006      	beq.n	800a268 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2208      	movs	r2, #8
 800a260:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f8f5 	bl	800a452 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d07b      	beq.n	800a36a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	f003 0304 	and.w	r3, r3, #4
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d072      	beq.n	800a362 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a282:	2b00      	cmp	r3, #0
 800a284:	d008      	beq.n	800a298 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	f043 0301 	orr.w	r3, r3, #1
 800a296:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a298:	6a3b      	ldr	r3, [r7, #32]
 800a29a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d008      	beq.n	800a2b4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	f043 0302 	orr.w	r3, r3, #2
 800a2b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d008      	beq.n	800a2d0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d003      	beq.n	800a2d0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	f043 0304 	orr.w	r3, r3, #4
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d043      	beq.n	800a362 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d03e      	beq.n	800a362 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2ea:	2b60      	cmp	r3, #96	; 0x60
 800a2ec:	d02b      	beq.n	800a346 <HAL_CAN_IRQHandler+0x32a>
 800a2ee:	2b60      	cmp	r3, #96	; 0x60
 800a2f0:	d82e      	bhi.n	800a350 <HAL_CAN_IRQHandler+0x334>
 800a2f2:	2b50      	cmp	r3, #80	; 0x50
 800a2f4:	d022      	beq.n	800a33c <HAL_CAN_IRQHandler+0x320>
 800a2f6:	2b50      	cmp	r3, #80	; 0x50
 800a2f8:	d82a      	bhi.n	800a350 <HAL_CAN_IRQHandler+0x334>
 800a2fa:	2b40      	cmp	r3, #64	; 0x40
 800a2fc:	d019      	beq.n	800a332 <HAL_CAN_IRQHandler+0x316>
 800a2fe:	2b40      	cmp	r3, #64	; 0x40
 800a300:	d826      	bhi.n	800a350 <HAL_CAN_IRQHandler+0x334>
 800a302:	2b30      	cmp	r3, #48	; 0x30
 800a304:	d010      	beq.n	800a328 <HAL_CAN_IRQHandler+0x30c>
 800a306:	2b30      	cmp	r3, #48	; 0x30
 800a308:	d822      	bhi.n	800a350 <HAL_CAN_IRQHandler+0x334>
 800a30a:	2b10      	cmp	r3, #16
 800a30c:	d002      	beq.n	800a314 <HAL_CAN_IRQHandler+0x2f8>
 800a30e:	2b20      	cmp	r3, #32
 800a310:	d005      	beq.n	800a31e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a312:	e01d      	b.n	800a350 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	f043 0308 	orr.w	r3, r3, #8
 800a31a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a31c:	e019      	b.n	800a352 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	f043 0310 	orr.w	r3, r3, #16
 800a324:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a326:	e014      	b.n	800a352 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	f043 0320 	orr.w	r3, r3, #32
 800a32e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a330:	e00f      	b.n	800a352 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a33a:	e00a      	b.n	800a352 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a342:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a344:	e005      	b.n	800a352 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a34e:	e000      	b.n	800a352 <HAL_CAN_IRQHandler+0x336>
            break;
 800a350:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	699a      	ldr	r2, [r3, #24]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a360:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2204      	movs	r2, #4
 800a368:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d008      	beq.n	800a382 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	431a      	orrs	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f872 	bl	800a466 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a382:	bf00      	nop
 800a384:	3728      	adds	r7, #40	; 0x28
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800a392:	bf00      	nop
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b083      	sub	sp, #12
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800a3a6:	bf00      	nop
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a3e2:	bf00      	nop
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a432:	bf00      	nop
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a45a:	bf00      	nop
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
	...

0800a47c <__NVIC_SetPriorityGrouping>:
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f003 0307 	and.w	r3, r3, #7
 800a48a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a48c:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <__NVIC_SetPriorityGrouping+0x44>)
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a498:	4013      	ands	r3, r2
 800a49a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a4a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a4a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a4ae:	4a04      	ldr	r2, [pc, #16]	; (800a4c0 <__NVIC_SetPriorityGrouping+0x44>)
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	60d3      	str	r3, [r2, #12]
}
 800a4b4:	bf00      	nop
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	e000ed00 	.word	0xe000ed00

0800a4c4 <__NVIC_GetPriorityGrouping>:
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a4c8:	4b04      	ldr	r3, [pc, #16]	; (800a4dc <__NVIC_GetPriorityGrouping+0x18>)
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	0a1b      	lsrs	r3, r3, #8
 800a4ce:	f003 0307 	and.w	r3, r3, #7
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	e000ed00 	.word	0xe000ed00

0800a4e0 <__NVIC_EnableIRQ>:
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	db0b      	blt.n	800a50a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	f003 021f 	and.w	r2, r3, #31
 800a4f8:	4907      	ldr	r1, [pc, #28]	; (800a518 <__NVIC_EnableIRQ+0x38>)
 800a4fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4fe:	095b      	lsrs	r3, r3, #5
 800a500:	2001      	movs	r0, #1
 800a502:	fa00 f202 	lsl.w	r2, r0, r2
 800a506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a50a:	bf00      	nop
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	e000e100 	.word	0xe000e100

0800a51c <__NVIC_SetPriority>:
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	6039      	str	r1, [r7, #0]
 800a526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	db0a      	blt.n	800a546 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	b2da      	uxtb	r2, r3
 800a534:	490c      	ldr	r1, [pc, #48]	; (800a568 <__NVIC_SetPriority+0x4c>)
 800a536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a53a:	0112      	lsls	r2, r2, #4
 800a53c:	b2d2      	uxtb	r2, r2
 800a53e:	440b      	add	r3, r1
 800a540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a544:	e00a      	b.n	800a55c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	4908      	ldr	r1, [pc, #32]	; (800a56c <__NVIC_SetPriority+0x50>)
 800a54c:	79fb      	ldrb	r3, [r7, #7]
 800a54e:	f003 030f 	and.w	r3, r3, #15
 800a552:	3b04      	subs	r3, #4
 800a554:	0112      	lsls	r2, r2, #4
 800a556:	b2d2      	uxtb	r2, r2
 800a558:	440b      	add	r3, r1
 800a55a:	761a      	strb	r2, [r3, #24]
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	e000e100 	.word	0xe000e100
 800a56c:	e000ed00 	.word	0xe000ed00

0800a570 <NVIC_EncodePriority>:
{
 800a570:	b480      	push	{r7}
 800a572:	b089      	sub	sp, #36	; 0x24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f003 0307 	and.w	r3, r3, #7
 800a582:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	f1c3 0307 	rsb	r3, r3, #7
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	bf28      	it	cs
 800a58e:	2304      	movcs	r3, #4
 800a590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	3304      	adds	r3, #4
 800a596:	2b06      	cmp	r3, #6
 800a598:	d902      	bls.n	800a5a0 <NVIC_EncodePriority+0x30>
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	3b03      	subs	r3, #3
 800a59e:	e000      	b.n	800a5a2 <NVIC_EncodePriority+0x32>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ae:	43da      	mvns	r2, r3
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	401a      	ands	r2, r3
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a5b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c2:	43d9      	mvns	r1, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5c8:	4313      	orrs	r3, r2
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3724      	adds	r7, #36	; 0x24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b082      	sub	sp, #8
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff ff4c 	bl	800a47c <__NVIC_SetPriorityGrouping>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
 800a5f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a5fe:	f7ff ff61 	bl	800a4c4 <__NVIC_GetPriorityGrouping>
 800a602:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	68b9      	ldr	r1, [r7, #8]
 800a608:	6978      	ldr	r0, [r7, #20]
 800a60a:	f7ff ffb1 	bl	800a570 <NVIC_EncodePriority>
 800a60e:	4602      	mov	r2, r0
 800a610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a614:	4611      	mov	r1, r2
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff ff80 	bl	800a51c <__NVIC_SetPriority>
}
 800a61c:	bf00      	nop
 800a61e:	3718      	adds	r7, #24
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a62e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff ff54 	bl	800a4e0 <__NVIC_EnableIRQ>
}
 800a638:	bf00      	nop
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e054      	b.n	800a6fc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	7f5b      	ldrb	r3, [r3, #29]
 800a656:	b2db      	uxtb	r3, r3
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d105      	bne.n	800a668 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7fb ff94 	bl	8006590 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2202      	movs	r2, #2
 800a66c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	791b      	ldrb	r3, [r3, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10c      	bne.n	800a690 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a22      	ldr	r2, [pc, #136]	; (800a704 <HAL_CRC_Init+0xc4>)
 800a67c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0218 	bic.w	r2, r2, #24
 800a68c:	609a      	str	r2, [r3, #8]
 800a68e:	e00c      	b.n	800a6aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6899      	ldr	r1, [r3, #8]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	461a      	mov	r2, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f834 	bl	800a708 <HAL_CRCEx_Polynomial_Set>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e028      	b.n	800a6fc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	795b      	ldrb	r3, [r3, #5]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d105      	bne.n	800a6be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ba:	611a      	str	r2, [r3, #16]
 800a6bc:	e004      	b.n	800a6c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6912      	ldr	r2, [r2, #16]
 800a6c6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	695a      	ldr	r2, [r3, #20]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	699a      	ldr	r2, [r3, #24]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	04c11db7 	.word	0x04c11db7

0800a708 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a718:	231f      	movs	r3, #31
 800a71a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a71c:	bf00      	nop
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	1e5a      	subs	r2, r3, #1
 800a722:	613a      	str	r2, [r7, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d009      	beq.n	800a73c <HAL_CRCEx_Polynomial_Set+0x34>
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	f003 031f 	and.w	r3, r3, #31
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	fa22 f303 	lsr.w	r3, r2, r3
 800a734:	f003 0301 	and.w	r3, r3, #1
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0f0      	beq.n	800a71e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b18      	cmp	r3, #24
 800a740:	d846      	bhi.n	800a7d0 <HAL_CRCEx_Polynomial_Set+0xc8>
 800a742:	a201      	add	r2, pc, #4	; (adr r2, 800a748 <HAL_CRCEx_Polynomial_Set+0x40>)
 800a744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a748:	0800a7d7 	.word	0x0800a7d7
 800a74c:	0800a7d1 	.word	0x0800a7d1
 800a750:	0800a7d1 	.word	0x0800a7d1
 800a754:	0800a7d1 	.word	0x0800a7d1
 800a758:	0800a7d1 	.word	0x0800a7d1
 800a75c:	0800a7d1 	.word	0x0800a7d1
 800a760:	0800a7d1 	.word	0x0800a7d1
 800a764:	0800a7d1 	.word	0x0800a7d1
 800a768:	0800a7c5 	.word	0x0800a7c5
 800a76c:	0800a7d1 	.word	0x0800a7d1
 800a770:	0800a7d1 	.word	0x0800a7d1
 800a774:	0800a7d1 	.word	0x0800a7d1
 800a778:	0800a7d1 	.word	0x0800a7d1
 800a77c:	0800a7d1 	.word	0x0800a7d1
 800a780:	0800a7d1 	.word	0x0800a7d1
 800a784:	0800a7d1 	.word	0x0800a7d1
 800a788:	0800a7b9 	.word	0x0800a7b9
 800a78c:	0800a7d1 	.word	0x0800a7d1
 800a790:	0800a7d1 	.word	0x0800a7d1
 800a794:	0800a7d1 	.word	0x0800a7d1
 800a798:	0800a7d1 	.word	0x0800a7d1
 800a79c:	0800a7d1 	.word	0x0800a7d1
 800a7a0:	0800a7d1 	.word	0x0800a7d1
 800a7a4:	0800a7d1 	.word	0x0800a7d1
 800a7a8:	0800a7ad 	.word	0x0800a7ad
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	2b06      	cmp	r3, #6
 800a7b0:	d913      	bls.n	800a7da <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a7b6:	e010      	b.n	800a7da <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	2b07      	cmp	r3, #7
 800a7bc:	d90f      	bls.n	800a7de <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a7c2:	e00c      	b.n	800a7de <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b0f      	cmp	r3, #15
 800a7c8:	d90b      	bls.n	800a7e2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a7ce:	e008      	b.n	800a7e2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a7d4:	e006      	b.n	800a7e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a7d6:	bf00      	nop
 800a7d8:	e004      	b.n	800a7e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a7da:	bf00      	nop
 800a7dc:	e002      	b.n	800a7e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a7de:	bf00      	nop
 800a7e0:	e000      	b.n	800a7e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a7e2:	bf00      	nop
  }
  if (status == HAL_OK)
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10d      	bne.n	800a806 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	f023 0118 	bic.w	r1, r3, #24
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	430a      	orrs	r2, r1
 800a804:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a806:	7dfb      	ldrb	r3, [r7, #23]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	371c      	adds	r7, #28
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d101      	bne.n	800a82a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e037      	b.n	800a89a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2202      	movs	r2, #2
 800a82e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a840:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a844:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800a84e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a85a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	695b      	ldr	r3, [r3, #20]
 800a860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	4313      	orrs	r3, r2
 800a872:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 f941 	bl	800ab04 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}  
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b086      	sub	sp, #24
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d101      	bne.n	800a8c2 <HAL_DMA_Start_IT+0x20>
 800a8be:	2302      	movs	r3, #2
 800a8c0:	e04a      	b.n	800a958 <HAL_DMA_Start_IT+0xb6>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d13a      	bne.n	800a94a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 0201 	bic.w	r2, r2, #1
 800a8f0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 f8d4 	bl	800aaa6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d008      	beq.n	800a918 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f042 020e 	orr.w	r2, r2, #14
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	e00f      	b.n	800a938 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f042 020a 	orr.w	r2, r2, #10
 800a926:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f022 0204 	bic.w	r2, r2, #4
 800a936:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f042 0201 	orr.w	r2, r2, #1
 800a946:	601a      	str	r2, [r3, #0]
 800a948:	e005      	b.n	800a956 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800a952:	2302      	movs	r3, #2
 800a954:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800a956:	7dfb      	ldrb	r3, [r7, #23]
} 
 800a958:	4618      	mov	r0, r3
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97c:	2204      	movs	r2, #4
 800a97e:	409a      	lsls	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4013      	ands	r3, r2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d024      	beq.n	800a9d2 <HAL_DMA_IRQHandler+0x72>
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	f003 0304 	and.w	r3, r3, #4
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d01f      	beq.n	800a9d2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 0320 	and.w	r3, r3, #32
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d107      	bne.n	800a9b0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f022 0204 	bic.w	r2, r2, #4
 800a9ae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b8:	2104      	movs	r1, #4
 800a9ba:	fa01 f202 	lsl.w	r2, r1, r2
 800a9be:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d06a      	beq.n	800aa9e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800a9d0:	e065      	b.n	800aa9e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	409a      	lsls	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4013      	ands	r3, r2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d02c      	beq.n	800aa3c <HAL_DMA_IRQHandler+0xdc>
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d027      	beq.n	800aa3c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 0320 	and.w	r3, r3, #32
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10b      	bne.n	800aa12 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 020a 	bic.w	r2, r2, #10
 800aa08:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa1a:	2102      	movs	r1, #2
 800aa1c:	fa01 f202 	lsl.w	r2, r1, r2
 800aa20:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d035      	beq.n	800aa9e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800aa3a:	e030      	b.n	800aa9e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa40:	2208      	movs	r2, #8
 800aa42:	409a      	lsls	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4013      	ands	r3, r2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d028      	beq.n	800aa9e <HAL_DMA_IRQHandler+0x13e>
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f003 0308 	and.w	r3, r3, #8
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d023      	beq.n	800aa9e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 020e 	bic.w	r2, r2, #14
 800aa64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6e:	2101      	movs	r1, #1
 800aa70:	fa01 f202 	lsl.w	r2, r1, r2
 800aa74:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d004      	beq.n	800aa9e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	4798      	blx	r3
    }
  }
}  
 800aa9c:	e7ff      	b.n	800aa9e <HAL_DMA_IRQHandler+0x13e>
 800aa9e:	bf00      	nop
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b085      	sub	sp, #20
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	60b9      	str	r1, [r7, #8]
 800aab0:	607a      	str	r2, [r7, #4]
 800aab2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aabc:	2101      	movs	r1, #1
 800aabe:	fa01 f202 	lsl.w	r2, r1, r2
 800aac2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	2b10      	cmp	r3, #16
 800aad2:	d108      	bne.n	800aae6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800aae4:	e007      	b.n	800aaf6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	60da      	str	r2, [r3, #12]
}
 800aaf6:	bf00      	nop
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
	...

0800ab04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	461a      	mov	r2, r3
 800ab12:	4b14      	ldr	r3, [pc, #80]	; (800ab64 <DMA_CalcBaseAndBitshift+0x60>)
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d80f      	bhi.n	800ab38 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	4b12      	ldr	r3, [pc, #72]	; (800ab68 <DMA_CalcBaseAndBitshift+0x64>)
 800ab20:	4413      	add	r3, r2
 800ab22:	4a12      	ldr	r2, [pc, #72]	; (800ab6c <DMA_CalcBaseAndBitshift+0x68>)
 800ab24:	fba2 2303 	umull	r2, r3, r2, r3
 800ab28:	091b      	lsrs	r3, r3, #4
 800ab2a:	009a      	lsls	r2, r3, #2
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a0f      	ldr	r2, [pc, #60]	; (800ab70 <DMA_CalcBaseAndBitshift+0x6c>)
 800ab34:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800ab36:	e00e      	b.n	800ab56 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <DMA_CalcBaseAndBitshift+0x70>)
 800ab40:	4413      	add	r3, r2
 800ab42:	4a0a      	ldr	r2, [pc, #40]	; (800ab6c <DMA_CalcBaseAndBitshift+0x68>)
 800ab44:	fba2 2303 	umull	r2, r3, r2, r3
 800ab48:	091b      	lsrs	r3, r3, #4
 800ab4a:	009a      	lsls	r2, r3, #2
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a09      	ldr	r2, [pc, #36]	; (800ab78 <DMA_CalcBaseAndBitshift+0x74>)
 800ab54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	40020407 	.word	0x40020407
 800ab68:	bffdfff8 	.word	0xbffdfff8
 800ab6c:	cccccccd 	.word	0xcccccccd
 800ab70:	40020000 	.word	0x40020000
 800ab74:	bffdfbf8 	.word	0xbffdfbf8
 800ab78:	40020400 	.word	0x40020400

0800ab7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ab86:	2300      	movs	r3, #0
 800ab88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ab8a:	e154      	b.n	800ae36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	2101      	movs	r1, #1
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	fa01 f303 	lsl.w	r3, r1, r3
 800ab98:	4013      	ands	r3, r2
 800ab9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8146 	beq.w	800ae30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f003 0303 	and.w	r3, r3, #3
 800abac:	2b01      	cmp	r3, #1
 800abae:	d005      	beq.n	800abbc <HAL_GPIO_Init+0x40>
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d130      	bne.n	800ac1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	2203      	movs	r2, #3
 800abc8:	fa02 f303 	lsl.w	r3, r2, r3
 800abcc:	43db      	mvns	r3, r3
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	4013      	ands	r3, r2
 800abd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	005b      	lsls	r3, r3, #1
 800abdc:	fa02 f303 	lsl.w	r3, r2, r3
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800abf2:	2201      	movs	r2, #1
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	fa02 f303 	lsl.w	r3, r2, r3
 800abfa:	43db      	mvns	r3, r3
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	4013      	ands	r3, r2
 800ac00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	091b      	lsrs	r3, r3, #4
 800ac08:	f003 0201 	and.w	r2, r3, #1
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	f003 0303 	and.w	r3, r3, #3
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d017      	beq.n	800ac5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	2203      	movs	r2, #3
 800ac36:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3a:	43db      	mvns	r3, r3
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	4013      	ands	r3, r2
 800ac40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	689a      	ldr	r2, [r3, #8]
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	f003 0303 	and.w	r3, r3, #3
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d123      	bne.n	800acae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	08da      	lsrs	r2, r3, #3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	3208      	adds	r2, #8
 800ac6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	f003 0307 	and.w	r3, r3, #7
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	220f      	movs	r2, #15
 800ac7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac82:	43db      	mvns	r3, r3
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4013      	ands	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	691a      	ldr	r2, [r3, #16]
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f003 0307 	and.w	r3, r3, #7
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	08da      	lsrs	r2, r3, #3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3208      	adds	r2, #8
 800aca8:	6939      	ldr	r1, [r7, #16]
 800acaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	2203      	movs	r2, #3
 800acba:	fa02 f303 	lsl.w	r3, r2, r3
 800acbe:	43db      	mvns	r3, r3
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	4013      	ands	r3, r2
 800acc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	f003 0203 	and.w	r2, r3, #3
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	fa02 f303 	lsl.w	r3, r2, r3
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	4313      	orrs	r3, r2
 800acda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 80a0 	beq.w	800ae30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acf0:	4b58      	ldr	r3, [pc, #352]	; (800ae54 <HAL_GPIO_Init+0x2d8>)
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	4a57      	ldr	r2, [pc, #348]	; (800ae54 <HAL_GPIO_Init+0x2d8>)
 800acf6:	f043 0301 	orr.w	r3, r3, #1
 800acfa:	6193      	str	r3, [r2, #24]
 800acfc:	4b55      	ldr	r3, [pc, #340]	; (800ae54 <HAL_GPIO_Init+0x2d8>)
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	60bb      	str	r3, [r7, #8]
 800ad06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ad08:	4a53      	ldr	r2, [pc, #332]	; (800ae58 <HAL_GPIO_Init+0x2dc>)
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	089b      	lsrs	r3, r3, #2
 800ad0e:	3302      	adds	r3, #2
 800ad10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	220f      	movs	r2, #15
 800ad20:	fa02 f303 	lsl.w	r3, r2, r3
 800ad24:	43db      	mvns	r3, r3
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	4013      	ands	r3, r2
 800ad2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ad32:	d019      	beq.n	800ad68 <HAL_GPIO_Init+0x1ec>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a49      	ldr	r2, [pc, #292]	; (800ae5c <HAL_GPIO_Init+0x2e0>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d013      	beq.n	800ad64 <HAL_GPIO_Init+0x1e8>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a48      	ldr	r2, [pc, #288]	; (800ae60 <HAL_GPIO_Init+0x2e4>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d00d      	beq.n	800ad60 <HAL_GPIO_Init+0x1e4>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a47      	ldr	r2, [pc, #284]	; (800ae64 <HAL_GPIO_Init+0x2e8>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d007      	beq.n	800ad5c <HAL_GPIO_Init+0x1e0>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a46      	ldr	r2, [pc, #280]	; (800ae68 <HAL_GPIO_Init+0x2ec>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d101      	bne.n	800ad58 <HAL_GPIO_Init+0x1dc>
 800ad54:	2304      	movs	r3, #4
 800ad56:	e008      	b.n	800ad6a <HAL_GPIO_Init+0x1ee>
 800ad58:	2305      	movs	r3, #5
 800ad5a:	e006      	b.n	800ad6a <HAL_GPIO_Init+0x1ee>
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	e004      	b.n	800ad6a <HAL_GPIO_Init+0x1ee>
 800ad60:	2302      	movs	r3, #2
 800ad62:	e002      	b.n	800ad6a <HAL_GPIO_Init+0x1ee>
 800ad64:	2301      	movs	r3, #1
 800ad66:	e000      	b.n	800ad6a <HAL_GPIO_Init+0x1ee>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	f002 0203 	and.w	r2, r2, #3
 800ad70:	0092      	lsls	r2, r2, #2
 800ad72:	4093      	lsls	r3, r2
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ad7a:	4937      	ldr	r1, [pc, #220]	; (800ae58 <HAL_GPIO_Init+0x2dc>)
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	089b      	lsrs	r3, r3, #2
 800ad80:	3302      	adds	r3, #2
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad88:	4b38      	ldr	r3, [pc, #224]	; (800ae6c <HAL_GPIO_Init+0x2f0>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	43db      	mvns	r3, r3
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	4013      	ands	r3, r2
 800ad96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d003      	beq.n	800adac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800adac:	4a2f      	ldr	r2, [pc, #188]	; (800ae6c <HAL_GPIO_Init+0x2f0>)
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800adb2:	4b2e      	ldr	r3, [pc, #184]	; (800ae6c <HAL_GPIO_Init+0x2f0>)
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	43db      	mvns	r3, r3
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	4013      	ands	r3, r2
 800adc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4313      	orrs	r3, r2
 800add4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800add6:	4a25      	ldr	r2, [pc, #148]	; (800ae6c <HAL_GPIO_Init+0x2f0>)
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800addc:	4b23      	ldr	r3, [pc, #140]	; (800ae6c <HAL_GPIO_Init+0x2f0>)
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	43db      	mvns	r3, r3
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	4013      	ands	r3, r2
 800adea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d003      	beq.n	800ae00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800ae00:	4a1a      	ldr	r2, [pc, #104]	; (800ae6c <HAL_GPIO_Init+0x2f0>)
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae06:	4b19      	ldr	r3, [pc, #100]	; (800ae6c <HAL_GPIO_Init+0x2f0>)
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	43db      	mvns	r3, r3
 800ae10:	693a      	ldr	r2, [r7, #16]
 800ae12:	4013      	ands	r3, r2
 800ae14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d003      	beq.n	800ae2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800ae2a:	4a10      	ldr	r2, [pc, #64]	; (800ae6c <HAL_GPIO_Init+0x2f0>)
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	3301      	adds	r3, #1
 800ae34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f47f aea3 	bne.w	800ab8c <HAL_GPIO_Init+0x10>
  }
}
 800ae46:	bf00      	nop
 800ae48:	bf00      	nop
 800ae4a:	371c      	adds	r7, #28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	40021000 	.word	0x40021000
 800ae58:	40010000 	.word	0x40010000
 800ae5c:	48000400 	.word	0x48000400
 800ae60:	48000800 	.word	0x48000800
 800ae64:	48000c00 	.word	0x48000c00
 800ae68:	48001000 	.word	0x48001000
 800ae6c:	40010400 	.word	0x40010400

0800ae70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	807b      	strh	r3, [r7, #2]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ae80:	787b      	ldrb	r3, [r7, #1]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ae86:	887a      	ldrh	r2, [r7, #2]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ae8c:	e002      	b.n	800ae94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ae8e:	887a      	ldrh	r2, [r7, #2]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e081      	b.n	800afb6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7fb fb82 	bl	80065d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2224      	movs	r2, #36	; 0x24
 800aed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 0201 	bic.w	r2, r2, #1
 800aee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800aef0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d107      	bne.n	800af1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	689a      	ldr	r2, [r3, #8]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af16:	609a      	str	r2, [r3, #8]
 800af18:	e006      	b.n	800af28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	689a      	ldr	r2, [r3, #8]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800af26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d104      	bne.n	800af3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	6812      	ldr	r2, [r2, #0]
 800af44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800af48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	691a      	ldr	r2, [r3, #16]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	430a      	orrs	r2, r1
 800af76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	69d9      	ldr	r1, [r3, #28]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a1a      	ldr	r2, [r3, #32]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	430a      	orrs	r2, r1
 800af86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f042 0201 	orr.w	r2, r2, #1
 800af96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b088      	sub	sp, #32
 800afc4:	af02      	add	r7, sp, #8
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	607a      	str	r2, [r7, #4]
 800afca:	461a      	mov	r2, r3
 800afcc:	460b      	mov	r3, r1
 800afce:	817b      	strh	r3, [r7, #10]
 800afd0:	4613      	mov	r3, r2
 800afd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b20      	cmp	r3, #32
 800afde:	f040 80da 	bne.w	800b196 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d101      	bne.n	800aff0 <HAL_I2C_Master_Transmit+0x30>
 800afec:	2302      	movs	r3, #2
 800afee:	e0d3      	b.n	800b198 <HAL_I2C_Master_Transmit+0x1d8>
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aff8:	f7fd fbc0 	bl	800877c <HAL_GetTick>
 800affc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	2319      	movs	r3, #25
 800b004:	2201      	movs	r2, #1
 800b006:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f000 fcbc 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e0be      	b.n	800b198 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2221      	movs	r2, #33	; 0x21
 800b01e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2210      	movs	r2, #16
 800b026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	893a      	ldrh	r2, [r7, #8]
 800b03a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b046:	b29b      	uxth	r3, r3
 800b048:	2bff      	cmp	r3, #255	; 0xff
 800b04a:	d90e      	bls.n	800b06a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	22ff      	movs	r2, #255	; 0xff
 800b050:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b056:	b2da      	uxtb	r2, r3
 800b058:	8979      	ldrh	r1, [r7, #10]
 800b05a:	4b51      	ldr	r3, [pc, #324]	; (800b1a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 fe2e 	bl	800bcc4 <I2C_TransferConfig>
 800b068:	e06c      	b.n	800b144 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b06e:	b29a      	uxth	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	8979      	ldrh	r1, [r7, #10]
 800b07c:	4b48      	ldr	r3, [pc, #288]	; (800b1a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f000 fe1d 	bl	800bcc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b08a:	e05b      	b.n	800b144 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	6a39      	ldr	r1, [r7, #32]
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 fcb9 	bl	800ba08 <I2C_WaitOnTXISFlagUntilTimeout>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e07b      	b.n	800b198 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a4:	781a      	ldrb	r2, [r3, #0]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	1c5a      	adds	r2, r3, #1
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d034      	beq.n	800b144 <HAL_I2C_Master_Transmit+0x184>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d130      	bne.n	800b144 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2180      	movs	r1, #128	; 0x80
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 fc4b 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d001      	beq.n	800b0fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e04d      	b.n	800b198 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b100:	b29b      	uxth	r3, r3
 800b102:	2bff      	cmp	r3, #255	; 0xff
 800b104:	d90e      	bls.n	800b124 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	22ff      	movs	r2, #255	; 0xff
 800b10a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b110:	b2da      	uxtb	r2, r3
 800b112:	8979      	ldrh	r1, [r7, #10]
 800b114:	2300      	movs	r3, #0
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 fdd1 	bl	800bcc4 <I2C_TransferConfig>
 800b122:	e00f      	b.n	800b144 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b128:	b29a      	uxth	r2, r3
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b132:	b2da      	uxtb	r2, r3
 800b134:	8979      	ldrh	r1, [r7, #10]
 800b136:	2300      	movs	r3, #0
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f000 fdc0 	bl	800bcc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b148:	b29b      	uxth	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d19e      	bne.n	800b08c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	6a39      	ldr	r1, [r7, #32]
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f000 fc98 	bl	800ba88 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e01a      	b.n	800b198 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2220      	movs	r2, #32
 800b168:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6859      	ldr	r1, [r3, #4]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	4b0b      	ldr	r3, [pc, #44]	; (800b1a4 <HAL_I2C_Master_Transmit+0x1e4>)
 800b176:	400b      	ands	r3, r1
 800b178:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	e000      	b.n	800b198 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b196:	2302      	movs	r3, #2
  }
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	80002000 	.word	0x80002000
 800b1a4:	fe00e800 	.word	0xfe00e800

0800b1a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b088      	sub	sp, #32
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	607a      	str	r2, [r7, #4]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	817b      	strh	r3, [r7, #10]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	f040 80db 	bne.w	800b380 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d101      	bne.n	800b1d8 <HAL_I2C_Master_Receive+0x30>
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	e0d4      	b.n	800b382 <HAL_I2C_Master_Receive+0x1da>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b1e0:	f7fd facc 	bl	800877c <HAL_GetTick>
 800b1e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	2319      	movs	r3, #25
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f000 fbc8 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e0bf      	b.n	800b382 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2222      	movs	r2, #34	; 0x22
 800b206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2210      	movs	r2, #16
 800b20e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	893a      	ldrh	r2, [r7, #8]
 800b222:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b22e:	b29b      	uxth	r3, r3
 800b230:	2bff      	cmp	r3, #255	; 0xff
 800b232:	d90e      	bls.n	800b252 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	22ff      	movs	r2, #255	; 0xff
 800b238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	8979      	ldrh	r1, [r7, #10]
 800b242:	4b52      	ldr	r3, [pc, #328]	; (800b38c <HAL_I2C_Master_Receive+0x1e4>)
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 fd3a 	bl	800bcc4 <I2C_TransferConfig>
 800b250:	e06d      	b.n	800b32e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b256:	b29a      	uxth	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b260:	b2da      	uxtb	r2, r3
 800b262:	8979      	ldrh	r1, [r7, #10]
 800b264:	4b49      	ldr	r3, [pc, #292]	; (800b38c <HAL_I2C_Master_Receive+0x1e4>)
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 fd29 	bl	800bcc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800b272:	e05c      	b.n	800b32e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	6a39      	ldr	r1, [r7, #32]
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f000 fc41 	bl	800bb00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	e07c      	b.n	800b382 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b292:	b2d2      	uxtb	r2, r2
 800b294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29a:	1c5a      	adds	r2, r3, #1
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d034      	beq.n	800b32e <HAL_I2C_Master_Receive+0x186>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d130      	bne.n	800b32e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	2180      	movs	r1, #128	; 0x80
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f000 fb56 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e04d      	b.n	800b382 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	2bff      	cmp	r3, #255	; 0xff
 800b2ee:	d90e      	bls.n	800b30e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	22ff      	movs	r2, #255	; 0xff
 800b2f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	8979      	ldrh	r1, [r7, #10]
 800b2fe:	2300      	movs	r3, #0
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f000 fcdc 	bl	800bcc4 <I2C_TransferConfig>
 800b30c:	e00f      	b.n	800b32e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b312:	b29a      	uxth	r2, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	8979      	ldrh	r1, [r7, #10]
 800b320:	2300      	movs	r3, #0
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 fccb 	bl	800bcc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b332:	b29b      	uxth	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	d19d      	bne.n	800b274 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	6a39      	ldr	r1, [r7, #32]
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f000 fba3 	bl	800ba88 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e01a      	b.n	800b382 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2220      	movs	r2, #32
 800b352:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6859      	ldr	r1, [r3, #4]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	4b0c      	ldr	r3, [pc, #48]	; (800b390 <HAL_I2C_Master_Receive+0x1e8>)
 800b360:	400b      	ands	r3, r1
 800b362:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2220      	movs	r2, #32
 800b368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	e000      	b.n	800b382 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b380:	2302      	movs	r3, #2
  }
}
 800b382:	4618      	mov	r0, r3
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	80002400 	.word	0x80002400
 800b390:	fe00e800 	.word	0xfe00e800

0800b394 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b088      	sub	sp, #32
 800b398:	af02      	add	r7, sp, #8
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	4608      	mov	r0, r1
 800b39e:	4611      	mov	r1, r2
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	817b      	strh	r3, [r7, #10]
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	813b      	strh	r3, [r7, #8]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b20      	cmp	r3, #32
 800b3b8:	f040 80f9 	bne.w	800b5ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <HAL_I2C_Mem_Write+0x34>
 800b3c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d105      	bne.n	800b3d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e0ed      	b.n	800b5b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d101      	bne.n	800b3e2 <HAL_I2C_Mem_Write+0x4e>
 800b3de:	2302      	movs	r3, #2
 800b3e0:	e0e6      	b.n	800b5b0 <HAL_I2C_Mem_Write+0x21c>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b3ea:	f7fd f9c7 	bl	800877c <HAL_GetTick>
 800b3ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	2319      	movs	r3, #25
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f000 fac3 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	d001      	beq.n	800b40c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e0d1      	b.n	800b5b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2221      	movs	r2, #33	; 0x21
 800b410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2240      	movs	r2, #64	; 0x40
 800b418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a3a      	ldr	r2, [r7, #32]
 800b426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b42c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b434:	88f8      	ldrh	r0, [r7, #6]
 800b436:	893a      	ldrh	r2, [r7, #8]
 800b438:	8979      	ldrh	r1, [r7, #10]
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	4603      	mov	r3, r0
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 f9d3 	bl	800b7f0 <I2C_RequestMemoryWrite>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d005      	beq.n	800b45c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e0a9      	b.n	800b5b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b460:	b29b      	uxth	r3, r3
 800b462:	2bff      	cmp	r3, #255	; 0xff
 800b464:	d90e      	bls.n	800b484 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	22ff      	movs	r2, #255	; 0xff
 800b46a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b470:	b2da      	uxtb	r2, r3
 800b472:	8979      	ldrh	r1, [r7, #10]
 800b474:	2300      	movs	r3, #0
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f000 fc21 	bl	800bcc4 <I2C_TransferConfig>
 800b482:	e00f      	b.n	800b4a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b488:	b29a      	uxth	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b492:	b2da      	uxtb	r2, r3
 800b494:	8979      	ldrh	r1, [r7, #10]
 800b496:	2300      	movs	r3, #0
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 fc10 	bl	800bcc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 faad 	bl	800ba08 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e07b      	b.n	800b5b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4bc:	781a      	ldrb	r2, [r3, #0]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c8:	1c5a      	adds	r2, r3, #1
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d034      	beq.n	800b55c <HAL_I2C_Mem_Write+0x1c8>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d130      	bne.n	800b55c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b500:	2200      	movs	r2, #0
 800b502:	2180      	movs	r1, #128	; 0x80
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 fa3f 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	e04d      	b.n	800b5b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b518:	b29b      	uxth	r3, r3
 800b51a:	2bff      	cmp	r3, #255	; 0xff
 800b51c:	d90e      	bls.n	800b53c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	22ff      	movs	r2, #255	; 0xff
 800b522:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	8979      	ldrh	r1, [r7, #10]
 800b52c:	2300      	movs	r3, #0
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 fbc5 	bl	800bcc4 <I2C_TransferConfig>
 800b53a:	e00f      	b.n	800b55c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b540:	b29a      	uxth	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	8979      	ldrh	r1, [r7, #10]
 800b54e:	2300      	movs	r3, #0
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f000 fbb4 	bl	800bcc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b560:	b29b      	uxth	r3, r3
 800b562:	2b00      	cmp	r3, #0
 800b564:	d19e      	bne.n	800b4a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f000 fa8c 	bl	800ba88 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	e01a      	b.n	800b5b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2220      	movs	r2, #32
 800b580:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	6859      	ldr	r1, [r3, #4]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	4b0a      	ldr	r3, [pc, #40]	; (800b5b8 <HAL_I2C_Mem_Write+0x224>)
 800b58e:	400b      	ands	r3, r1
 800b590:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2220      	movs	r2, #32
 800b596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e000      	b.n	800b5b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b5ae:	2302      	movs	r3, #2
  }
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	fe00e800 	.word	0xfe00e800

0800b5bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	817b      	strh	r3, [r7, #10]
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	813b      	strh	r3, [r7, #8]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b20      	cmp	r3, #32
 800b5e0:	f040 80fd 	bne.w	800b7de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d002      	beq.n	800b5f0 <HAL_I2C_Mem_Read+0x34>
 800b5ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d105      	bne.n	800b5fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e0f1      	b.n	800b7e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b602:	2b01      	cmp	r3, #1
 800b604:	d101      	bne.n	800b60a <HAL_I2C_Mem_Read+0x4e>
 800b606:	2302      	movs	r3, #2
 800b608:	e0ea      	b.n	800b7e0 <HAL_I2C_Mem_Read+0x224>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b612:	f7fd f8b3 	bl	800877c <HAL_GetTick>
 800b616:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	2319      	movs	r3, #25
 800b61e:	2201      	movs	r2, #1
 800b620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f000 f9af 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d001      	beq.n	800b634 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	e0d5      	b.n	800b7e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2222      	movs	r2, #34	; 0x22
 800b638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2240      	movs	r2, #64	; 0x40
 800b640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a3a      	ldr	r2, [r7, #32]
 800b64e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b65c:	88f8      	ldrh	r0, [r7, #6]
 800b65e:	893a      	ldrh	r2, [r7, #8]
 800b660:	8979      	ldrh	r1, [r7, #10]
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	4603      	mov	r3, r0
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f000 f913 	bl	800b898 <I2C_RequestMemoryRead>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	e0ad      	b.n	800b7e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b688:	b29b      	uxth	r3, r3
 800b68a:	2bff      	cmp	r3, #255	; 0xff
 800b68c:	d90e      	bls.n	800b6ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	22ff      	movs	r2, #255	; 0xff
 800b692:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	8979      	ldrh	r1, [r7, #10]
 800b69c:	4b52      	ldr	r3, [pc, #328]	; (800b7e8 <HAL_I2C_Mem_Read+0x22c>)
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 fb0d 	bl	800bcc4 <I2C_TransferConfig>
 800b6aa:	e00f      	b.n	800b6cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	8979      	ldrh	r1, [r7, #10]
 800b6be:	4b4a      	ldr	r3, [pc, #296]	; (800b7e8 <HAL_I2C_Mem_Read+0x22c>)
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f000 fafc 	bl	800bcc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	2104      	movs	r1, #4
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f000 f956 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e07c      	b.n	800b7e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	b2d2      	uxtb	r2, r2
 800b6f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b702:	3b01      	subs	r3, #1
 800b704:	b29a      	uxth	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b70e:	b29b      	uxth	r3, r3
 800b710:	3b01      	subs	r3, #1
 800b712:	b29a      	uxth	r2, r3
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d034      	beq.n	800b78c <HAL_I2C_Mem_Read+0x1d0>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b726:	2b00      	cmp	r3, #0
 800b728:	d130      	bne.n	800b78c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b730:	2200      	movs	r2, #0
 800b732:	2180      	movs	r1, #128	; 0x80
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f000 f927 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b740:	2301      	movs	r3, #1
 800b742:	e04d      	b.n	800b7e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b748:	b29b      	uxth	r3, r3
 800b74a:	2bff      	cmp	r3, #255	; 0xff
 800b74c:	d90e      	bls.n	800b76c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	22ff      	movs	r2, #255	; 0xff
 800b752:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	8979      	ldrh	r1, [r7, #10]
 800b75c:	2300      	movs	r3, #0
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f000 faad 	bl	800bcc4 <I2C_TransferConfig>
 800b76a:	e00f      	b.n	800b78c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b770:	b29a      	uxth	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b77a:	b2da      	uxtb	r2, r3
 800b77c:	8979      	ldrh	r1, [r7, #10]
 800b77e:	2300      	movs	r3, #0
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f000 fa9c 	bl	800bcc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b790:	b29b      	uxth	r3, r3
 800b792:	2b00      	cmp	r3, #0
 800b794:	d19a      	bne.n	800b6cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 f974 	bl	800ba88 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e01a      	b.n	800b7e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	6859      	ldr	r1, [r3, #4]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <HAL_I2C_Mem_Read+0x230>)
 800b7be:	400b      	ands	r3, r1
 800b7c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2220      	movs	r2, #32
 800b7c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	e000      	b.n	800b7e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b7de:	2302      	movs	r3, #2
  }
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	80002400 	.word	0x80002400
 800b7ec:	fe00e800 	.word	0xfe00e800

0800b7f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	4603      	mov	r3, r0
 800b800:	817b      	strh	r3, [r7, #10]
 800b802:	460b      	mov	r3, r1
 800b804:	813b      	strh	r3, [r7, #8]
 800b806:	4613      	mov	r3, r2
 800b808:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b80a:	88fb      	ldrh	r3, [r7, #6]
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	8979      	ldrh	r1, [r7, #10]
 800b810:	4b20      	ldr	r3, [pc, #128]	; (800b894 <I2C_RequestMemoryWrite+0xa4>)
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f000 fa53 	bl	800bcc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b81e:	69fa      	ldr	r2, [r7, #28]
 800b820:	69b9      	ldr	r1, [r7, #24]
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 f8f0 	bl	800ba08 <I2C_WaitOnTXISFlagUntilTimeout>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e02c      	b.n	800b88c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b832:	88fb      	ldrh	r3, [r7, #6]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d105      	bne.n	800b844 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b838:	893b      	ldrh	r3, [r7, #8]
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	629a      	str	r2, [r3, #40]	; 0x28
 800b842:	e015      	b.n	800b870 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b844:	893b      	ldrh	r3, [r7, #8]
 800b846:	0a1b      	lsrs	r3, r3, #8
 800b848:	b29b      	uxth	r3, r3
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b852:	69fa      	ldr	r2, [r7, #28]
 800b854:	69b9      	ldr	r1, [r7, #24]
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f000 f8d6 	bl	800ba08 <I2C_WaitOnTXISFlagUntilTimeout>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	e012      	b.n	800b88c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b866:	893b      	ldrh	r3, [r7, #8]
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	2200      	movs	r2, #0
 800b878:	2180      	movs	r1, #128	; 0x80
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 f884 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e000      	b.n	800b88c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	80002000 	.word	0x80002000

0800b898 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af02      	add	r7, sp, #8
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	4608      	mov	r0, r1
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	817b      	strh	r3, [r7, #10]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	813b      	strh	r3, [r7, #8]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b8b2:	88fb      	ldrh	r3, [r7, #6]
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	8979      	ldrh	r1, [r7, #10]
 800b8b8:	4b20      	ldr	r3, [pc, #128]	; (800b93c <I2C_RequestMemoryRead+0xa4>)
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	2300      	movs	r3, #0
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f000 fa00 	bl	800bcc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8c4:	69fa      	ldr	r2, [r7, #28]
 800b8c6:	69b9      	ldr	r1, [r7, #24]
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f000 f89d 	bl	800ba08 <I2C_WaitOnTXISFlagUntilTimeout>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e02c      	b.n	800b932 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b8d8:	88fb      	ldrh	r3, [r7, #6]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d105      	bne.n	800b8ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b8de:	893b      	ldrh	r3, [r7, #8]
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	629a      	str	r2, [r3, #40]	; 0x28
 800b8e8:	e015      	b.n	800b916 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b8ea:	893b      	ldrh	r3, [r7, #8]
 800b8ec:	0a1b      	lsrs	r3, r3, #8
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	b2da      	uxtb	r2, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8f8:	69fa      	ldr	r2, [r7, #28]
 800b8fa:	69b9      	ldr	r1, [r7, #24]
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f000 f883 	bl	800ba08 <I2C_WaitOnTXISFlagUntilTimeout>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	e012      	b.n	800b932 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b90c:	893b      	ldrh	r3, [r7, #8]
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	2200      	movs	r2, #0
 800b91e:	2140      	movs	r1, #64	; 0x40
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f000 f831 	bl	800b988 <I2C_WaitOnFlagUntilTimeout>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d001      	beq.n	800b930 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e000      	b.n	800b932 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	80002000 	.word	0x80002000

0800b940 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	f003 0302 	and.w	r3, r3, #2
 800b952:	2b02      	cmp	r3, #2
 800b954:	d103      	bne.n	800b95e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2200      	movs	r2, #0
 800b95c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	f003 0301 	and.w	r3, r3, #1
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d007      	beq.n	800b97c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	699a      	ldr	r2, [r3, #24]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f042 0201 	orr.w	r2, r2, #1
 800b97a:	619a      	str	r2, [r3, #24]
  }
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	603b      	str	r3, [r7, #0]
 800b994:	4613      	mov	r3, r2
 800b996:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b998:	e022      	b.n	800b9e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a0:	d01e      	beq.n	800b9e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9a2:	f7fc feeb 	bl	800877c <HAL_GetTick>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	1ad3      	subs	r3, r2, r3
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d302      	bcc.n	800b9b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d113      	bne.n	800b9e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9bc:	f043 0220 	orr.w	r2, r3, #32
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2220      	movs	r2, #32
 800b9c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e00f      	b.n	800ba00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	699a      	ldr	r2, [r3, #24]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	bf0c      	ite	eq
 800b9f0:	2301      	moveq	r3, #1
 800b9f2:	2300      	movne	r3, #0
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	79fb      	ldrb	r3, [r7, #7]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d0cd      	beq.n	800b99a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ba14:	e02c      	b.n	800ba70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	68b9      	ldr	r1, [r7, #8]
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f000 f8dc 	bl	800bbd8 <I2C_IsAcknowledgeFailed>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e02a      	b.n	800ba80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba30:	d01e      	beq.n	800ba70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba32:	f7fc fea3 	bl	800877c <HAL_GetTick>
 800ba36:	4602      	mov	r2, r0
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d302      	bcc.n	800ba48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d113      	bne.n	800ba70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba4c:	f043 0220 	orr.w	r2, r3, #32
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2220      	movs	r2, #32
 800ba58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e007      	b.n	800ba80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	f003 0302 	and.w	r3, r3, #2
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d1cb      	bne.n	800ba16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba94:	e028      	b.n	800bae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	68b9      	ldr	r1, [r7, #8]
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f000 f89c 	bl	800bbd8 <I2C_IsAcknowledgeFailed>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e026      	b.n	800baf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baaa:	f7fc fe67 	bl	800877c <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d302      	bcc.n	800bac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d113      	bne.n	800bae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac4:	f043 0220 	orr.w	r2, r3, #32
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2220      	movs	r2, #32
 800bad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e007      	b.n	800baf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	f003 0320 	and.w	r3, r3, #32
 800baf2:	2b20      	cmp	r3, #32
 800baf4:	d1cf      	bne.n	800ba96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb0c:	e055      	b.n	800bbba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	68b9      	ldr	r1, [r7, #8]
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f000 f860 	bl	800bbd8 <I2C_IsAcknowledgeFailed>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e053      	b.n	800bbca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	f003 0320 	and.w	r3, r3, #32
 800bb2c:	2b20      	cmp	r3, #32
 800bb2e:	d129      	bne.n	800bb84 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	699b      	ldr	r3, [r3, #24]
 800bb36:	f003 0304 	and.w	r3, r3, #4
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d105      	bne.n	800bb4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	e03f      	b.n	800bbca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	6859      	ldr	r1, [r3, #4]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	4b1d      	ldr	r3, [pc, #116]	; (800bbd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800bb5e:	400b      	ands	r3, r1
 800bb60:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	e022      	b.n	800bbca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb84:	f7fc fdfa 	bl	800877c <HAL_GetTick>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d302      	bcc.n	800bb9a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10f      	bne.n	800bbba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb9e:	f043 0220 	orr.w	r2, r3, #32
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2220      	movs	r2, #32
 800bbaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e007      	b.n	800bbca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	f003 0304 	and.w	r3, r3, #4
 800bbc4:	2b04      	cmp	r3, #4
 800bbc6:	d1a2      	bne.n	800bb0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	fe00e800 	.word	0xfe00e800

0800bbd8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	f003 0310 	and.w	r3, r3, #16
 800bbee:	2b10      	cmp	r3, #16
 800bbf0:	d161      	bne.n	800bcb6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc00:	d02b      	beq.n	800bc5a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc10:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc12:	e022      	b.n	800bc5a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1a:	d01e      	beq.n	800bc5a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc1c:	f7fc fdae 	bl	800877c <HAL_GetTick>
 800bc20:	4602      	mov	r2, r0
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	68ba      	ldr	r2, [r7, #8]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d302      	bcc.n	800bc32 <I2C_IsAcknowledgeFailed+0x5a>
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d113      	bne.n	800bc5a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc36:	f043 0220 	orr.w	r2, r3, #32
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2220      	movs	r2, #32
 800bc42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e02e      	b.n	800bcb8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	f003 0320 	and.w	r3, r3, #32
 800bc64:	2b20      	cmp	r3, #32
 800bc66:	d1d5      	bne.n	800bc14 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2210      	movs	r2, #16
 800bc6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2220      	movs	r2, #32
 800bc76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f7ff fe61 	bl	800b940 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	6859      	ldr	r1, [r3, #4]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	4b0d      	ldr	r3, [pc, #52]	; (800bcc0 <I2C_IsAcknowledgeFailed+0xe8>)
 800bc8a:	400b      	ands	r3, r1
 800bc8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc92:	f043 0204 	orr.w	r2, r3, #4
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2220      	movs	r2, #32
 800bc9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e000      	b.n	800bcb8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	fe00e800 	.word	0xfe00e800

0800bcc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	607b      	str	r3, [r7, #4]
 800bcce:	460b      	mov	r3, r1
 800bcd0:	817b      	strh	r3, [r7, #10]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	0d5b      	lsrs	r3, r3, #21
 800bce0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bce4:	4b0d      	ldr	r3, [pc, #52]	; (800bd1c <I2C_TransferConfig+0x58>)
 800bce6:	430b      	orrs	r3, r1
 800bce8:	43db      	mvns	r3, r3
 800bcea:	ea02 0103 	and.w	r1, r2, r3
 800bcee:	897b      	ldrh	r3, [r7, #10]
 800bcf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bcf4:	7a7b      	ldrb	r3, [r7, #9]
 800bcf6:	041b      	lsls	r3, r3, #16
 800bcf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bcfc:	431a      	orrs	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	431a      	orrs	r2, r3
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	431a      	orrs	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800bd0e:	bf00      	nop
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	03ff63ff 	.word	0x03ff63ff

0800bd20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	2b20      	cmp	r3, #32
 800bd34:	d138      	bne.n	800bda8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d101      	bne.n	800bd44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bd40:	2302      	movs	r3, #2
 800bd42:	e032      	b.n	800bdaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2224      	movs	r2, #36	; 0x24
 800bd50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f022 0201 	bic.w	r2, r2, #1
 800bd62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bd72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6819      	ldr	r1, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	430a      	orrs	r2, r1
 800bd82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f042 0201 	orr.w	r2, r2, #1
 800bd92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2220      	movs	r2, #32
 800bd98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	e000      	b.n	800bdaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bda8:	2302      	movs	r3, #2
  }
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b085      	sub	sp, #20
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	2b20      	cmp	r3, #32
 800bdca:	d139      	bne.n	800be40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d101      	bne.n	800bdda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	e033      	b.n	800be42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2224      	movs	r2, #36	; 0x24
 800bde6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f022 0201 	bic.w	r2, r2, #1
 800bdf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800be08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	021b      	lsls	r3, r3, #8
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	4313      	orrs	r3, r2
 800be12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f042 0201 	orr.w	r2, r2, #1
 800be2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2220      	movs	r2, #32
 800be30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	e000      	b.n	800be42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800be40:	2302      	movs	r3, #2
  }
}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800be4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be50:	b08b      	sub	sp, #44	; 0x2c
 800be52:	af06      	add	r7, sp, #24
 800be54:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e0d0      	b.n	800c002 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d106      	bne.n	800be7a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f00a fda5 	bl	80169c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2203      	movs	r2, #3
 800be7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4618      	mov	r0, r3
 800be88:	f003 fff7 	bl	800fe7a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be8c:	2300      	movs	r3, #0
 800be8e:	73fb      	strb	r3, [r7, #15]
 800be90:	e04c      	b.n	800bf2c <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800be92:	7bfb      	ldrb	r3, [r7, #15]
 800be94:	6879      	ldr	r1, [r7, #4]
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	4613      	mov	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	00db      	lsls	r3, r3, #3
 800bea0:	440b      	add	r3, r1
 800bea2:	3301      	adds	r3, #1
 800bea4:	2201      	movs	r2, #1
 800bea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	4613      	mov	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4413      	add	r3, r2
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	440b      	add	r3, r1
 800beb8:	7bfa      	ldrb	r2, [r7, #15]
 800beba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bebc:	7bfa      	ldrb	r2, [r7, #15]
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
 800bec0:	b298      	uxth	r0, r3
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	4613      	mov	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	440b      	add	r3, r1
 800bece:	3336      	adds	r3, #54	; 0x36
 800bed0:	4602      	mov	r2, r0
 800bed2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
 800bed6:	6879      	ldr	r1, [r7, #4]
 800bed8:	1c5a      	adds	r2, r3, #1
 800beda:	4613      	mov	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4413      	add	r3, r2
 800bee0:	00db      	lsls	r3, r3, #3
 800bee2:	440b      	add	r3, r1
 800bee4:	3303      	adds	r3, #3
 800bee6:	2200      	movs	r2, #0
 800bee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800beea:	7bfa      	ldrb	r2, [r7, #15]
 800beec:	6879      	ldr	r1, [r7, #4]
 800beee:	4613      	mov	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4413      	add	r3, r2
 800bef4:	00db      	lsls	r3, r3, #3
 800bef6:	440b      	add	r3, r1
 800bef8:	3338      	adds	r3, #56	; 0x38
 800befa:	2200      	movs	r2, #0
 800befc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800befe:	7bfa      	ldrb	r2, [r7, #15]
 800bf00:	6879      	ldr	r1, [r7, #4]
 800bf02:	4613      	mov	r3, r2
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	4413      	add	r3, r2
 800bf08:	00db      	lsls	r3, r3, #3
 800bf0a:	440b      	add	r3, r1
 800bf0c:	333c      	adds	r3, #60	; 0x3c
 800bf0e:	2200      	movs	r2, #0
 800bf10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bf12:	7bfa      	ldrb	r2, [r7, #15]
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	4613      	mov	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	00db      	lsls	r3, r3, #3
 800bf1e:	440b      	add	r3, r1
 800bf20:	3340      	adds	r3, #64	; 0x40
 800bf22:	2200      	movs	r2, #0
 800bf24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	73fb      	strb	r3, [r7, #15]
 800bf2c:	7bfa      	ldrb	r2, [r7, #15]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d3ad      	bcc.n	800be92 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf36:	2300      	movs	r3, #0
 800bf38:	73fb      	strb	r3, [r7, #15]
 800bf3a:	e044      	b.n	800bfc6 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bf3c:	7bfa      	ldrb	r2, [r7, #15]
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	4613      	mov	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	00db      	lsls	r3, r3, #3
 800bf48:	440b      	add	r3, r1
 800bf4a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800bf4e:	2200      	movs	r2, #0
 800bf50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bf52:	7bfa      	ldrb	r2, [r7, #15]
 800bf54:	6879      	ldr	r1, [r7, #4]
 800bf56:	4613      	mov	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4413      	add	r3, r2
 800bf5c:	00db      	lsls	r3, r3, #3
 800bf5e:	440b      	add	r3, r1
 800bf60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bf64:	7bfa      	ldrb	r2, [r7, #15]
 800bf66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bf68:	7bfa      	ldrb	r2, [r7, #15]
 800bf6a:	6879      	ldr	r1, [r7, #4]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	00db      	lsls	r3, r3, #3
 800bf74:	440b      	add	r3, r1
 800bf76:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bf7e:	7bfa      	ldrb	r2, [r7, #15]
 800bf80:	6879      	ldr	r1, [r7, #4]
 800bf82:	4613      	mov	r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	440b      	add	r3, r1
 800bf8c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800bf90:	2200      	movs	r2, #0
 800bf92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bf94:	7bfa      	ldrb	r2, [r7, #15]
 800bf96:	6879      	ldr	r1, [r7, #4]
 800bf98:	4613      	mov	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	4413      	add	r3, r2
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	440b      	add	r3, r1
 800bfa2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bfaa:	7bfa      	ldrb	r2, [r7, #15]
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	440b      	add	r3, r1
 800bfb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	73fb      	strb	r3, [r7, #15]
 800bfc6:	7bfa      	ldrb	r2, [r7, #15]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d3b5      	bcc.n	800bf3c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	603b      	str	r3, [r7, #0]
 800bfd6:	687e      	ldr	r6, [r7, #4]
 800bfd8:	466d      	mov	r5, sp
 800bfda:	f106 0410 	add.w	r4, r6, #16
 800bfde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	602b      	str	r3, [r5, #0]
 800bfe6:	1d33      	adds	r3, r6, #4
 800bfe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfea:	6838      	ldr	r0, [r7, #0]
 800bfec:	f003 ff60 	bl	800feb0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3714      	adds	r7, #20
 800c006:	46bd      	mov	sp, r7
 800c008:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c00a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b082      	sub	sp, #8
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d101      	bne.n	800c020 <HAL_PCD_Start+0x16>
 800c01c:	2302      	movs	r3, #2
 800c01e:	e016      	b.n	800c04e <HAL_PCD_Start+0x44>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f003 ff0d 	bl	800fe4c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800c032:	2101      	movs	r1, #1
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f00a ff6b 	bl	8016f10 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4618      	mov	r0, r3
 800c040:	f006 f922 	bl	8012288 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4618      	mov	r0, r3
 800c064:	f006 f91b 	bl	801229e <USB_ReadInterrupts>
 800c068:	4603      	mov	r3, r0
 800c06a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c06e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c072:	d102      	bne.n	800c07a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 faf6 	bl	800c666 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4618      	mov	r0, r3
 800c080:	f006 f90d 	bl	801229e <USB_ReadInterrupts>
 800c084:	4603      	mov	r3, r0
 800c086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c08a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c08e:	d112      	bne.n	800c0b6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0a2:	b292      	uxth	r2, r2
 800c0a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f00a fd34 	bl	8016b16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f8c7 	bl	800c244 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f006 f8ef 	bl	801229e <USB_ReadInterrupts>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0ca:	d10b      	bne.n	800c0e4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c0de:	b292      	uxth	r2, r2
 800c0e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f006 f8d8 	bl	801229e <USB_ReadInterrupts>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0f8:	d10b      	bne.n	800c112 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c102:	b29a      	uxth	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c10c:	b292      	uxth	r2, r2
 800c10e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4618      	mov	r0, r3
 800c118:	f006 f8c1 	bl	801229e <USB_ReadInterrupts>
 800c11c:	4603      	mov	r3, r0
 800c11e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c126:	d126      	bne.n	800c176 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c130:	b29a      	uxth	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f022 0204 	bic.w	r2, r2, #4
 800c13a:	b292      	uxth	r2, r2
 800c13c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c148:	b29a      	uxth	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f022 0208 	bic.w	r2, r2, #8
 800c152:	b292      	uxth	r2, r2
 800c154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f00a fd15 	bl	8016b88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c166:	b29a      	uxth	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c170:	b292      	uxth	r2, r2
 800c172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f006 f88f 	bl	801229e <USB_ReadInterrupts>
 800c180:	4603      	mov	r3, r0
 800c182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c18a:	d126      	bne.n	800c1da <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c194:	b29a      	uxth	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f042 0208 	orr.w	r2, r2, #8
 800c19e:	b292      	uxth	r2, r2
 800c1a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1b6:	b292      	uxth	r2, r2
 800c1b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f042 0204 	orr.w	r2, r2, #4
 800c1ce:	b292      	uxth	r2, r2
 800c1d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f00a fcbd 	bl	8016b54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f006 f85d 	bl	801229e <USB_ReadInterrupts>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1ee:	d10e      	bne.n	800c20e <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c202:	b292      	uxth	r2, r2
 800c204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f00a fc76 	bl	8016afa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4618      	mov	r0, r3
 800c214:	f006 f843 	bl	801229e <USB_ReadInterrupts>
 800c218:	4603      	mov	r3, r0
 800c21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c222:	d10b      	bne.n	800c23c <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c236:	b292      	uxth	r2, r2
 800c238:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800c23c:	bf00      	nop
 800c23e:	3708      	adds	r7, #8
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	460b      	mov	r3, r1
 800c24e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c256:	2b01      	cmp	r3, #1
 800c258:	d101      	bne.n	800c25e <HAL_PCD_SetAddress+0x1a>
 800c25a:	2302      	movs	r3, #2
 800c25c:	e013      	b.n	800c286 <HAL_PCD_SetAddress+0x42>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	78fa      	ldrb	r2, [r7, #3]
 800c26a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	78fa      	ldrb	r2, [r7, #3]
 800c274:	4611      	mov	r1, r2
 800c276:	4618      	mov	r0, r3
 800c278:	f005 fff2 	bl	8012260 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	4608      	mov	r0, r1
 800c298:	4611      	mov	r1, r2
 800c29a:	461a      	mov	r2, r3
 800c29c:	4603      	mov	r3, r0
 800c29e:	70fb      	strb	r3, [r7, #3]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	803b      	strh	r3, [r7, #0]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c2ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	da0e      	bge.n	800c2d2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c2b4:	78fb      	ldrb	r3, [r7, #3]
 800c2b6:	f003 0307 	and.w	r3, r3, #7
 800c2ba:	1c5a      	adds	r2, r3, #1
 800c2bc:	4613      	mov	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	705a      	strb	r2, [r3, #1]
 800c2d0:	e00e      	b.n	800c2f0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c2d2:	78fb      	ldrb	r3, [r7, #3]
 800c2d4:	f003 0207 	and.w	r2, r3, #7
 800c2d8:	4613      	mov	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	4413      	add	r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	f003 0307 	and.w	r3, r3, #7
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c2fc:	883a      	ldrh	r2, [r7, #0]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	78ba      	ldrb	r2, [r7, #2]
 800c306:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	785b      	ldrb	r3, [r3, #1]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d004      	beq.n	800c31a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	b29a      	uxth	r2, r3
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c31a:	78bb      	ldrb	r3, [r7, #2]
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d102      	bne.n	800c326 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d101      	bne.n	800c334 <HAL_PCD_EP_Open+0xa6>
 800c330:	2302      	movs	r3, #2
 800c332:	e00e      	b.n	800c352 <HAL_PCD_EP_Open+0xc4>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68f9      	ldr	r1, [r7, #12]
 800c342:	4618      	mov	r0, r3
 800c344:	f003 fdd6 	bl	800fef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800c350:	7afb      	ldrb	r3, [r7, #11]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b084      	sub	sp, #16
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	460b      	mov	r3, r1
 800c364:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	da0e      	bge.n	800c38c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c36e:	78fb      	ldrb	r3, [r7, #3]
 800c370:	f003 0307 	and.w	r3, r3, #7
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	4413      	add	r3, r2
 800c382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2201      	movs	r2, #1
 800c388:	705a      	strb	r2, [r3, #1]
 800c38a:	e00e      	b.n	800c3aa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c38c:	78fb      	ldrb	r3, [r7, #3]
 800c38e:	f003 0207 	and.w	r2, r3, #7
 800c392:	4613      	mov	r3, r2
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	4413      	add	r3, r2
 800c398:	00db      	lsls	r3, r3, #3
 800c39a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c3aa:	78fb      	ldrb	r3, [r7, #3]
 800c3ac:	f003 0307 	and.w	r3, r3, #7
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d101      	bne.n	800c3c4 <HAL_PCD_EP_Close+0x6a>
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	e00e      	b.n	800c3e2 <HAL_PCD_EP_Close+0x88>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68f9      	ldr	r1, [r7, #12]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f004 f922 	bl	801061c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b086      	sub	sp, #24
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	60f8      	str	r0, [r7, #12]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	603b      	str	r3, [r7, #0]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c3fa:	7afb      	ldrb	r3, [r7, #11]
 800c3fc:	f003 0207 	and.w	r2, r3, #7
 800c400:	4613      	mov	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	4413      	add	r3, r2
 800c410:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	2200      	movs	r2, #0
 800c422:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	2200      	movs	r2, #0
 800c428:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c42a:	7afb      	ldrb	r3, [r7, #11]
 800c42c:	f003 0307 	and.w	r3, r3, #7
 800c430:	b2da      	uxtb	r2, r3
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c436:	7afb      	ldrb	r3, [r7, #11]
 800c438:	f003 0307 	and.w	r3, r3, #7
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d106      	bne.n	800c44e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6979      	ldr	r1, [r7, #20]
 800c446:	4618      	mov	r0, r3
 800c448:	f004 fad5 	bl	80109f6 <USB_EPStartXfer>
 800c44c:	e005      	b.n	800c45a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6979      	ldr	r1, [r7, #20]
 800c454:	4618      	mov	r0, r3
 800c456:	f004 face 	bl	80109f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	460b      	mov	r3, r1
 800c46e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	f003 0207 	and.w	r2, r3, #7
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	4613      	mov	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	440b      	add	r3, r1
 800c482:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c486:	681b      	ldr	r3, [r3, #0]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	607a      	str	r2, [r7, #4]
 800c49e:	603b      	str	r3, [r7, #0]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4a4:	7afb      	ldrb	r3, [r7, #11]
 800c4a6:	f003 0307 	and.w	r3, r3, #7
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c4e0:	7afb      	ldrb	r3, [r7, #11]
 800c4e2:	f003 0307 	and.w	r3, r3, #7
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c4ec:	7afb      	ldrb	r3, [r7, #11]
 800c4ee:	f003 0307 	and.w	r3, r3, #7
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d106      	bne.n	800c504 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	6979      	ldr	r1, [r7, #20]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f004 fa7a 	bl	80109f6 <USB_EPStartXfer>
 800c502:	e005      	b.n	800c510 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6979      	ldr	r1, [r7, #20]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f004 fa73 	bl	80109f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3718      	adds	r7, #24
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b084      	sub	sp, #16
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	460b      	mov	r3, r1
 800c524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c526:	78fb      	ldrb	r3, [r7, #3]
 800c528:	f003 0207 	and.w	r2, r3, #7
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	429a      	cmp	r2, r3
 800c532:	d901      	bls.n	800c538 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	e03e      	b.n	800c5b6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	da0e      	bge.n	800c55e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	f003 0307 	and.w	r3, r3, #7
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	4613      	mov	r3, r2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	00db      	lsls	r3, r3, #3
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	4413      	add	r3, r2
 800c554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2201      	movs	r2, #1
 800c55a:	705a      	strb	r2, [r3, #1]
 800c55c:	e00c      	b.n	800c578 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c55e:	78fa      	ldrb	r2, [r7, #3]
 800c560:	4613      	mov	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	4413      	add	r3, r2
 800c570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2201      	movs	r2, #1
 800c57c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c57e:	78fb      	ldrb	r3, [r7, #3]
 800c580:	f003 0307 	and.w	r3, r3, #7
 800c584:	b2da      	uxtb	r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c590:	2b01      	cmp	r3, #1
 800c592:	d101      	bne.n	800c598 <HAL_PCD_EP_SetStall+0x7e>
 800c594:	2302      	movs	r3, #2
 800c596:	e00e      	b.n	800c5b6 <HAL_PCD_EP_SetStall+0x9c>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68f9      	ldr	r1, [r7, #12]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f005 fd5b 	bl	8012062 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c5ca:	78fb      	ldrb	r3, [r7, #3]
 800c5cc:	f003 020f 	and.w	r2, r3, #15
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d901      	bls.n	800c5dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e040      	b.n	800c65e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c5dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	da0e      	bge.n	800c602 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c5e4:	78fb      	ldrb	r3, [r7, #3]
 800c5e6:	f003 0307 	and.w	r3, r3, #7
 800c5ea:	1c5a      	adds	r2, r3, #1
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	00db      	lsls	r3, r3, #3
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	705a      	strb	r2, [r3, #1]
 800c600:	e00e      	b.n	800c620 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c602:	78fb      	ldrb	r3, [r7, #3]
 800c604:	f003 0207 	and.w	r2, r3, #7
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	00db      	lsls	r3, r3, #3
 800c610:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	4413      	add	r3, r2
 800c618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c626:	78fb      	ldrb	r3, [r7, #3]
 800c628:	f003 0307 	and.w	r3, r3, #7
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d101      	bne.n	800c640 <HAL_PCD_EP_ClrStall+0x82>
 800c63c:	2302      	movs	r3, #2
 800c63e:	e00e      	b.n	800c65e <HAL_PCD_EP_ClrStall+0xa0>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68f9      	ldr	r1, [r7, #12]
 800c64e:	4618      	mov	r0, r3
 800c650:	f005 fd58 	bl	8012104 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b096      	sub	sp, #88	; 0x58
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c66e:	e3a9      	b.n	800cdc4 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c678:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800c67c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f003 030f 	and.w	r3, r3, #15
 800c686:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800c68a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f040 8164 	bne.w	800c95c <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800c694:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c698:	f003 0310 	and.w	r3, r3, #16
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d152      	bne.n	800c746 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	881b      	ldrh	r3, [r3, #0]
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c6ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6b0:	81fb      	strh	r3, [r7, #14]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	89fb      	ldrh	r3, [r7, #14]
 800c6b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	3328      	adds	r3, #40	; 0x28
 800c6c8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	00db      	lsls	r3, r3, #3
 800c6dc:	4413      	add	r3, r2
 800c6de:	3302      	adds	r3, #2
 800c6e0:	005b      	lsls	r3, r3, #1
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	6812      	ldr	r2, [r2, #0]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6ec:	881b      	ldrh	r3, [r3, #0]
 800c6ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800c6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6f8:	695a      	ldr	r2, [r3, #20]
 800c6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6fc:	69db      	ldr	r3, [r3, #28]
 800c6fe:	441a      	add	r2, r3
 800c700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c702:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800c704:	2100      	movs	r1, #0
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f00a f9dd 	bl	8016ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c712:	b2db      	uxtb	r3, r3
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 8355 	beq.w	800cdc4 <PCD_EP_ISR_Handler+0x75e>
 800c71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c71c:	699b      	ldr	r3, [r3, #24]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f040 8350 	bne.w	800cdc4 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c730:	b2da      	uxtb	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	b292      	uxth	r2, r2
 800c738:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c744:	e33e      	b.n	800cdc4 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c74c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800c758:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c75c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c760:	2b00      	cmp	r3, #0
 800c762:	d034      	beq.n	800c7ce <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	461a      	mov	r2, r3
 800c770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	00db      	lsls	r3, r3, #3
 800c776:	4413      	add	r3, r2
 800c778:	3306      	adds	r3, #6
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	6812      	ldr	r2, [r2, #0]
 800c780:	4413      	add	r3, r2
 800c782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c786:	881b      	ldrh	r3, [r3, #0]
 800c788:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c78e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6818      	ldr	r0, [r3, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800c79a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c79c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800c79e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7a0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	f005 fdd1 	bl	801234a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	823b      	strh	r3, [r7, #16]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	8a3a      	ldrh	r2, [r7, #16]
 800c7be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7c2:	b292      	uxth	r2, r2
 800c7c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f00a f950 	bl	8016a6c <HAL_PCD_SetupStageCallback>
 800c7cc:	e2fa      	b.n	800cdc4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c7ce:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f280 82f6 	bge.w	800cdc4 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	881b      	ldrh	r3, [r3, #0]
 800c7de:	b29a      	uxth	r2, r3
 800c7e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	83fb      	strh	r3, [r7, #30]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	8bfa      	ldrh	r2, [r7, #30]
 800c7ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7f2:	b292      	uxth	r2, r2
 800c7f4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	461a      	mov	r2, r3
 800c802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	00db      	lsls	r3, r3, #3
 800c808:	4413      	add	r3, r2
 800c80a:	3306      	adds	r3, #6
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	6812      	ldr	r2, [r2, #0]
 800c812:	4413      	add	r3, r2
 800c814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c818:	881b      	ldrh	r3, [r3, #0]
 800c81a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c820:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800c822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c824:	69db      	ldr	r3, [r3, #28]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d019      	beq.n	800c85e <PCD_EP_ISR_Handler+0x1f8>
 800c82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c82c:	695b      	ldr	r3, [r3, #20]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d015      	beq.n	800c85e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6818      	ldr	r0, [r3, #0]
 800c836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c838:	6959      	ldr	r1, [r3, #20]
 800c83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c83c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800c83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c840:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c842:	b29b      	uxth	r3, r3
 800c844:	f005 fd81 	bl	801234a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800c848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c84a:	695a      	ldr	r2, [r3, #20]
 800c84c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c84e:	69db      	ldr	r3, [r3, #28]
 800c850:	441a      	add	r2, r3
 800c852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c854:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800c856:	2100      	movs	r1, #0
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f00a f919 	bl	8016a90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	b29b      	uxth	r3, r3
 800c866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f040 82aa 	bne.w	800cdc4 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	61bb      	str	r3, [r7, #24]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c87e:	b29b      	uxth	r3, r3
 800c880:	461a      	mov	r2, r3
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	4413      	add	r3, r2
 800c886:	61bb      	str	r3, [r7, #24]
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c88e:	617b      	str	r3, [r7, #20]
 800c890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d112      	bne.n	800c8be <PCD_EP_ISR_Handler+0x258>
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	881b      	ldrh	r3, [r3, #0]
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	801a      	strh	r2, [r3, #0]
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	801a      	strh	r2, [r3, #0]
 800c8bc:	e02f      	b.n	800c91e <PCD_EP_ISR_Handler+0x2b8>
 800c8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	2b3e      	cmp	r3, #62	; 0x3e
 800c8c4:	d813      	bhi.n	800c8ee <PCD_EP_ISR_Handler+0x288>
 800c8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	085b      	lsrs	r3, r3, #1
 800c8cc:	647b      	str	r3, [r7, #68]	; 0x44
 800c8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <PCD_EP_ISR_Handler+0x27a>
 800c8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8dc:	3301      	adds	r3, #1
 800c8de:	647b      	str	r3, [r7, #68]	; 0x44
 800c8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	029b      	lsls	r3, r3, #10
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	801a      	strh	r2, [r3, #0]
 800c8ec:	e017      	b.n	800c91e <PCD_EP_ISR_Handler+0x2b8>
 800c8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	095b      	lsrs	r3, r3, #5
 800c8f4:	647b      	str	r3, [r7, #68]	; 0x44
 800c8f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	f003 031f 	and.w	r3, r3, #31
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d102      	bne.n	800c908 <PCD_EP_ISR_Handler+0x2a2>
 800c902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c904:	3b01      	subs	r3, #1
 800c906:	647b      	str	r3, [r7, #68]	; 0x44
 800c908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	029b      	lsls	r3, r3, #10
 800c90e:	b29b      	uxth	r3, r3
 800c910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c918:	b29a      	uxth	r2, r3
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	881b      	ldrh	r3, [r3, #0]
 800c924:	b29b      	uxth	r3, r3
 800c926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c92a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c92e:	827b      	strh	r3, [r7, #18]
 800c930:	8a7b      	ldrh	r3, [r7, #18]
 800c932:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c936:	827b      	strh	r3, [r7, #18]
 800c938:	8a7b      	ldrh	r3, [r7, #18]
 800c93a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c93e:	827b      	strh	r3, [r7, #18]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	8a7b      	ldrh	r3, [r7, #18]
 800c946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c94a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c94e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c956:	b29b      	uxth	r3, r3
 800c958:	8013      	strh	r3, [r2, #0]
 800c95a:	e233      	b.n	800cdc4 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	461a      	mov	r2, r3
 800c962:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	4413      	add	r3, r2
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c970:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800c974:	2b00      	cmp	r3, #0
 800c976:	f280 80fc 	bge.w	800cb72 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	461a      	mov	r2, r3
 800c980:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4413      	add	r3, r2
 800c988:	881b      	ldrh	r3, [r3, #0]
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c990:	4013      	ands	r3, r2
 800c992:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	461a      	mov	r2, r3
 800c99c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800c9a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c9ac:	b292      	uxth	r2, r2
 800c9ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800c9b0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800c9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9c8:	7b1b      	ldrb	r3, [r3, #12]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d125      	bne.n	800ca1a <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	461a      	mov	r2, r3
 800c9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	00db      	lsls	r3, r3, #3
 800c9e0:	4413      	add	r3, r2
 800c9e2:	3306      	adds	r3, #6
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	6812      	ldr	r2, [r2, #0]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800c9fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f000 8092 	beq.w	800cb28 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6818      	ldr	r0, [r3, #0]
 800ca08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca0a:	6959      	ldr	r1, [r3, #20]
 800ca0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca0e:	88da      	ldrh	r2, [r3, #6]
 800ca10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ca14:	f005 fc99 	bl	801234a <USB_ReadPMA>
 800ca18:	e086      	b.n	800cb28 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ca1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca1c:	78db      	ldrb	r3, [r3, #3]
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d10a      	bne.n	800ca38 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ca22:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ca26:	461a      	mov	r2, r3
 800ca28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f9d8 	bl	800cde0 <HAL_PCD_EP_DB_Receive>
 800ca30:	4603      	mov	r3, r0
 800ca32:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ca36:	e077      	b.n	800cb28 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4413      	add	r3, r2
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca52:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	441a      	add	r2, r3
 800ca64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ca68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	461a      	mov	r2, r3
 800ca82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	4413      	add	r3, r2
 800ca8a:	881b      	ldrh	r3, [r3, #0]
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d024      	beq.n	800cae0 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	461a      	mov	r2, r3
 800caa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	00db      	lsls	r3, r3, #3
 800caa8:	4413      	add	r3, r2
 800caaa:	3302      	adds	r3, #2
 800caac:	005b      	lsls	r3, r3, #1
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	6812      	ldr	r2, [r2, #0]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cab8:	881b      	ldrh	r3, [r3, #0]
 800caba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cabe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800cac2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d02e      	beq.n	800cb28 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6818      	ldr	r0, [r3, #0]
 800cace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad0:	6959      	ldr	r1, [r3, #20]
 800cad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad4:	891a      	ldrh	r2, [r3, #8]
 800cad6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cada:	f005 fc36 	bl	801234a <USB_ReadPMA>
 800cade:	e023      	b.n	800cb28 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cae8:	b29b      	uxth	r3, r3
 800caea:	461a      	mov	r2, r3
 800caec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	4413      	add	r3, r2
 800caf4:	3306      	adds	r3, #6
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	6812      	ldr	r2, [r2, #0]
 800cafc:	4413      	add	r3, r2
 800cafe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb02:	881b      	ldrh	r3, [r3, #0]
 800cb04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb08:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800cb0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d009      	beq.n	800cb28 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6818      	ldr	r0, [r3, #0]
 800cb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb1a:	6959      	ldr	r1, [r3, #20]
 800cb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb1e:	895a      	ldrh	r2, [r3, #10]
 800cb20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb24:	f005 fc11 	bl	801234a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800cb28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb2a:	69da      	ldr	r2, [r3, #28]
 800cb2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb30:	441a      	add	r2, r3
 800cb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800cb36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb38:	695a      	ldr	r2, [r3, #20]
 800cb3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb3e:	441a      	add	r2, r3
 800cb40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb42:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800cb44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb46:	699b      	ldr	r3, [r3, #24]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d005      	beq.n	800cb58 <PCD_EP_ISR_Handler+0x4f2>
 800cb4c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800cb50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d206      	bcs.n	800cb66 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800cb58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f009 ff96 	bl	8016a90 <HAL_PCD_DataOutStageCallback>
 800cb64:	e005      	b.n	800cb72 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f003 ff42 	bl	80109f6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800cb72:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cb76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f000 8122 	beq.w	800cdc4 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800cb80:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	4613      	mov	r3, r2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	4413      	add	r3, r2
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	4413      	add	r3, r2
 800cb92:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	881b      	ldrh	r3, [r3, #0]
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800cbaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	441a      	add	r2, r3
 800cbc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cbc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800cbd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd2:	78db      	ldrb	r3, [r3, #3]
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	f000 809d 	beq.w	800cd14 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 800cbda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbdc:	2200      	movs	r2, #0
 800cbde:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cbe0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cbe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d046      	beq.n	800cc7a <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbee:	785b      	ldrb	r3, [r3, #1]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d126      	bne.n	800cc42 <PCD_EP_ISR_Handler+0x5dc>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	627b      	str	r3, [r7, #36]	; 0x24
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	461a      	mov	r2, r3
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc08:	4413      	add	r3, r2
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	011a      	lsls	r2, r3, #4
 800cc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc14:	4413      	add	r3, r2
 800cc16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cc1a:	623b      	str	r3, [r7, #32]
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cc26:	b29a      	uxth	r2, r3
 800cc28:	6a3b      	ldr	r3, [r7, #32]
 800cc2a:	801a      	strh	r2, [r3, #0]
 800cc2c:	6a3b      	ldr	r3, [r7, #32]
 800cc2e:	881b      	ldrh	r3, [r3, #0]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	6a3b      	ldr	r3, [r7, #32]
 800cc3e:	801a      	strh	r2, [r3, #0]
 800cc40:	e061      	b.n	800cd06 <PCD_EP_ISR_Handler+0x6a0>
 800cc42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc44:	785b      	ldrb	r3, [r3, #1]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d15d      	bne.n	800cd06 <PCD_EP_ISR_Handler+0x6a0>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	4413      	add	r3, r2
 800cc60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	011a      	lsls	r2, r3, #4
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	4413      	add	r3, r2
 800cc6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cc70:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc74:	2200      	movs	r2, #0
 800cc76:	801a      	strh	r2, [r3, #0]
 800cc78:	e045      	b.n	800cd06 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc82:	785b      	ldrb	r3, [r3, #1]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d126      	bne.n	800ccd6 <PCD_EP_ISR_Handler+0x670>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	637b      	str	r3, [r7, #52]	; 0x34
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	461a      	mov	r2, r3
 800cc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc9c:	4413      	add	r3, r2
 800cc9e:	637b      	str	r3, [r7, #52]	; 0x34
 800cca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	011a      	lsls	r2, r3, #4
 800cca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca8:	4413      	add	r3, r2
 800ccaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ccae:	633b      	str	r3, [r7, #48]	; 0x30
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb2:	881b      	ldrh	r3, [r3, #0]
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	801a      	strh	r2, [r3, #0]
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc2:	881b      	ldrh	r3, [r3, #0]
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd2:	801a      	strh	r2, [r3, #0]
 800ccd4:	e017      	b.n	800cd06 <PCD_EP_ISR_Handler+0x6a0>
 800ccd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccd8:	785b      	ldrb	r3, [r3, #1]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d113      	bne.n	800cd06 <PCD_EP_ISR_Handler+0x6a0>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	461a      	mov	r2, r3
 800ccea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccec:	4413      	add	r3, r2
 800ccee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	011a      	lsls	r2, r3, #4
 800ccf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccf8:	4413      	add	r3, r2
 800ccfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ccfe:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	2200      	movs	r2, #0
 800cd04:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cd06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f009 feda 	bl	8016ac6 <HAL_PCD_DataInStageCallback>
 800cd12:	e057      	b.n	800cdc4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800cd14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd16:	78db      	ldrb	r3, [r3, #3]
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d14c      	bne.n	800cdb6 <PCD_EP_ISR_Handler+0x750>
 800cd1c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cd20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d146      	bne.n	800cdb6 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	461a      	mov	r2, r3
 800cd34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	4413      	add	r3, r2
 800cd3c:	3302      	adds	r3, #2
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	6812      	ldr	r2, [r2, #0]
 800cd44:	4413      	add	r3, r2
 800cd46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 800cd54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd56:	699a      	ldr	r2, [r3, #24]
 800cd58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d907      	bls.n	800cd70 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 800cd60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd62:	699a      	ldr	r2, [r3, #24]
 800cd64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd68:	1ad2      	subs	r2, r2, r3
 800cd6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd6c:	619a      	str	r2, [r3, #24]
 800cd6e:	e002      	b.n	800cd76 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 800cd70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd72:	2200      	movs	r2, #0
 800cd74:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800cd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d106      	bne.n	800cd8c <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cd7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f009 fe9e 	bl	8016ac6 <HAL_PCD_DataInStageCallback>
 800cd8a:	e01b      	b.n	800cdc4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800cd8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd8e:	695a      	ldr	r2, [r3, #20]
 800cd90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd94:	441a      	add	r2, r3
 800cd96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd98:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800cd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd9c:	69da      	ldr	r2, [r3, #28]
 800cd9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cda2:	441a      	add	r2, r3
 800cda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cda6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f003 fe21 	bl	80109f6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800cdb4:	e006      	b.n	800cdc4 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800cdb6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cdba:	461a      	mov	r2, r3
 800cdbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f91b 	bl	800cffa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	b21b      	sxth	r3, r3
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f6ff ac4d 	blt.w	800c670 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3758      	adds	r7, #88	; 0x58
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	4613      	mov	r3, r2
 800cdec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800cdee:	88fb      	ldrh	r3, [r7, #6]
 800cdf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d07e      	beq.n	800cef6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	461a      	mov	r2, r3
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	4413      	add	r3, r2
 800ce0c:	3302      	adds	r3, #2
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	6812      	ldr	r2, [r2, #0]
 800ce14:	4413      	add	r3, r2
 800ce16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce1a:	881b      	ldrh	r3, [r3, #0]
 800ce1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	699a      	ldr	r2, [r3, #24]
 800ce26:	8b7b      	ldrh	r3, [r7, #26]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d306      	bcc.n	800ce3a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	699a      	ldr	r2, [r3, #24]
 800ce30:	8b7b      	ldrh	r3, [r7, #26]
 800ce32:	1ad2      	subs	r2, r2, r3
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	619a      	str	r2, [r3, #24]
 800ce38:	e002      	b.n	800ce40 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d123      	bne.n	800ce90 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4413      	add	r3, r2
 800ce56:	881b      	ldrh	r3, [r3, #0]
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce62:	833b      	strh	r3, [r7, #24]
 800ce64:	8b3b      	ldrh	r3, [r7, #24]
 800ce66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ce6a:	833b      	strh	r3, [r7, #24]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	461a      	mov	r2, r3
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	441a      	add	r2, r3
 800ce7a:	8b3b      	ldrh	r3, [r7, #24]
 800ce7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ce90:	88fb      	ldrh	r3, [r7, #6]
 800ce92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d01f      	beq.n	800ceda <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4413      	add	r3, r2
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ceb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceb4:	82fb      	strh	r3, [r7, #22]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	441a      	add	r2, r3
 800cec4:	8afb      	ldrh	r3, [r7, #22]
 800cec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ceca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ced2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ceda:	8b7b      	ldrh	r3, [r7, #26]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f000 8087 	beq.w	800cff0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6818      	ldr	r0, [r3, #0]
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	6959      	ldr	r1, [r3, #20]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	891a      	ldrh	r2, [r3, #8]
 800ceee:	8b7b      	ldrh	r3, [r7, #26]
 800cef0:	f005 fa2b 	bl	801234a <USB_ReadPMA>
 800cef4:	e07c      	b.n	800cff0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	461a      	mov	r2, r3
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	00db      	lsls	r3, r3, #3
 800cf08:	4413      	add	r3, r2
 800cf0a:	3306      	adds	r3, #6
 800cf0c:	005b      	lsls	r3, r3, #1
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	6812      	ldr	r2, [r2, #0]
 800cf12:	4413      	add	r3, r2
 800cf14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf18:	881b      	ldrh	r3, [r3, #0]
 800cf1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	699a      	ldr	r2, [r3, #24]
 800cf24:	8b7b      	ldrh	r3, [r7, #26]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d306      	bcc.n	800cf38 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	699a      	ldr	r2, [r3, #24]
 800cf2e:	8b7b      	ldrh	r3, [r7, #26]
 800cf30:	1ad2      	subs	r2, r2, r3
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	619a      	str	r2, [r3, #24]
 800cf36:	e002      	b.n	800cf3e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	699b      	ldr	r3, [r3, #24]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d123      	bne.n	800cf8e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf60:	83fb      	strh	r3, [r7, #30]
 800cf62:	8bfb      	ldrh	r3, [r7, #30]
 800cf64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cf68:	83fb      	strh	r3, [r7, #30]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	461a      	mov	r2, r3
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	441a      	add	r2, r3
 800cf78:	8bfb      	ldrh	r3, [r7, #30]
 800cf7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800cf8e:	88fb      	ldrh	r3, [r7, #6]
 800cf90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d11f      	bne.n	800cfd8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4413      	add	r3, r2
 800cfa6:	881b      	ldrh	r3, [r3, #0]
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfb2:	83bb      	strh	r3, [r7, #28]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	461a      	mov	r2, r3
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	441a      	add	r2, r3
 800cfc2:	8bbb      	ldrh	r3, [r7, #28]
 800cfc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800cfd8:	8b7b      	ldrh	r3, [r7, #26]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d008      	beq.n	800cff0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6818      	ldr	r0, [r3, #0]
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	6959      	ldr	r1, [r3, #20]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	895a      	ldrh	r2, [r3, #10]
 800cfea:	8b7b      	ldrh	r3, [r7, #26]
 800cfec:	f005 f9ad 	bl	801234a <USB_ReadPMA>
    }
  }

  return count;
 800cff0:	8b7b      	ldrh	r3, [r7, #26]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3720      	adds	r7, #32
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b0a2      	sub	sp, #136	; 0x88
 800cffe:	af00      	add	r7, sp, #0
 800d000:	60f8      	str	r0, [r7, #12]
 800d002:	60b9      	str	r1, [r7, #8]
 800d004:	4613      	mov	r3, r2
 800d006:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d008:	88fb      	ldrh	r3, [r7, #6]
 800d00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f000 81c7 	beq.w	800d3a2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	461a      	mov	r2, r3
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	00db      	lsls	r3, r3, #3
 800d026:	4413      	add	r3, r2
 800d028:	3302      	adds	r3, #2
 800d02a:	005b      	lsls	r3, r3, #1
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	6812      	ldr	r2, [r2, #0]
 800d030:	4413      	add	r3, r2
 800d032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d036:	881b      	ldrh	r3, [r3, #0]
 800d038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d03c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	699a      	ldr	r2, [r3, #24]
 800d044:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d048:	429a      	cmp	r2, r3
 800d04a:	d907      	bls.n	800d05c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	699a      	ldr	r2, [r3, #24]
 800d050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d054:	1ad2      	subs	r2, r2, r3
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	619a      	str	r2, [r3, #24]
 800d05a:	e002      	b.n	800d062 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	2200      	movs	r2, #0
 800d060:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	699b      	ldr	r3, [r3, #24]
 800d066:	2b00      	cmp	r3, #0
 800d068:	f040 80b9 	bne.w	800d1de <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	785b      	ldrb	r3, [r3, #1]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d126      	bne.n	800d0c2 <HAL_PCD_EP_DB_Transmit+0xc8>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	62bb      	str	r3, [r7, #40]	; 0x28
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d082:	b29b      	uxth	r3, r3
 800d084:	461a      	mov	r2, r3
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	4413      	add	r3, r2
 800d08a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	011a      	lsls	r2, r3, #4
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	4413      	add	r3, r2
 800d096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d09a:	627b      	str	r3, [r7, #36]	; 0x24
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	881b      	ldrh	r3, [r3, #0]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0aa:	801a      	strh	r2, [r3, #0]
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0be:	801a      	strh	r2, [r3, #0]
 800d0c0:	e01a      	b.n	800d0f8 <HAL_PCD_EP_DB_Transmit+0xfe>
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	785b      	ldrb	r3, [r3, #1]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d116      	bne.n	800d0f8 <HAL_PCD_EP_DB_Transmit+0xfe>
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	633b      	str	r3, [r7, #48]	; 0x30
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	461a      	mov	r2, r3
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	4413      	add	r3, r2
 800d0e0:	633b      	str	r3, [r7, #48]	; 0x30
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	011a      	lsls	r2, r3, #4
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	623b      	str	r3, [r7, #32]
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	785b      	ldrb	r3, [r3, #1]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d126      	bne.n	800d154 <HAL_PCD_EP_DB_Transmit+0x15a>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	61bb      	str	r3, [r7, #24]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d114:	b29b      	uxth	r3, r3
 800d116:	461a      	mov	r2, r3
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	4413      	add	r3, r2
 800d11c:	61bb      	str	r3, [r7, #24]
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	011a      	lsls	r2, r3, #4
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	4413      	add	r3, r2
 800d128:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d12c:	617b      	str	r3, [r7, #20]
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	b29b      	uxth	r3, r3
 800d134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d138:	b29a      	uxth	r2, r3
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	801a      	strh	r2, [r3, #0]
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	881b      	ldrh	r3, [r3, #0]
 800d142:	b29b      	uxth	r3, r3
 800d144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	801a      	strh	r2, [r3, #0]
 800d152:	e017      	b.n	800d184 <HAL_PCD_EP_DB_Transmit+0x18a>
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	785b      	ldrb	r3, [r3, #1]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d113      	bne.n	800d184 <HAL_PCD_EP_DB_Transmit+0x18a>
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d164:	b29b      	uxth	r3, r3
 800d166:	461a      	mov	r2, r3
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	4413      	add	r3, r2
 800d16c:	623b      	str	r3, [r7, #32]
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	011a      	lsls	r2, r3, #4
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	4413      	add	r3, r2
 800d178:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d17c:	61fb      	str	r3, [r7, #28]
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	2200      	movs	r2, #0
 800d182:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	4619      	mov	r1, r3
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f009 fc9b 	bl	8016ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d190:	88fb      	ldrh	r3, [r7, #6]
 800d192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d196:	2b00      	cmp	r3, #0
 800d198:	f000 82d4 	beq.w	800d744 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1b6:	827b      	strh	r3, [r7, #18]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	441a      	add	r2, r3
 800d1c6:	8a7b      	ldrh	r3, [r7, #18]
 800d1c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	8013      	strh	r3, [r2, #0]
 800d1dc:	e2b2      	b.n	800d744 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d1de:	88fb      	ldrh	r3, [r7, #6]
 800d1e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d021      	beq.n	800d22c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	881b      	ldrh	r3, [r3, #0]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d202:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	461a      	mov	r2, r3
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	441a      	add	r2, r3
 800d214:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d21c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d228:	b29b      	uxth	r3, r3
 800d22a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d232:	2b01      	cmp	r3, #1
 800d234:	f040 8286 	bne.w	800d744 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	695a      	ldr	r2, [r3, #20]
 800d23c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d240:	441a      	add	r2, r3
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	69da      	ldr	r2, [r3, #28]
 800d24a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d24e:	441a      	add	r2, r3
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	6a1a      	ldr	r2, [r3, #32]
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d309      	bcc.n	800d274 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	6a1a      	ldr	r2, [r3, #32]
 800d26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d26c:	1ad2      	subs	r2, r2, r3
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	621a      	str	r2, [r3, #32]
 800d272:	e015      	b.n	800d2a0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d107      	bne.n	800d28c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800d27c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d280:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	2200      	movs	r2, #0
 800d286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d28a:	e009      	b.n	800d2a0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2200      	movs	r2, #0
 800d290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	6a1b      	ldr	r3, [r3, #32]
 800d298:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	2200      	movs	r2, #0
 800d29e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	785b      	ldrb	r3, [r3, #1]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d155      	bne.n	800d354 <HAL_PCD_EP_DB_Transmit+0x35a>
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2bc:	4413      	add	r3, r2
 800d2be:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	011a      	lsls	r2, r3, #4
 800d2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d2ce:	637b      	str	r3, [r7, #52]	; 0x34
 800d2d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d112      	bne.n	800d2fc <HAL_PCD_EP_DB_Transmit+0x302>
 800d2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e4:	801a      	strh	r2, [r3, #0]
 800d2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f8:	801a      	strh	r2, [r3, #0]
 800d2fa:	e047      	b.n	800d38c <HAL_PCD_EP_DB_Transmit+0x392>
 800d2fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2fe:	2b3e      	cmp	r3, #62	; 0x3e
 800d300:	d811      	bhi.n	800d326 <HAL_PCD_EP_DB_Transmit+0x32c>
 800d302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d304:	085b      	lsrs	r3, r3, #1
 800d306:	64bb      	str	r3, [r7, #72]	; 0x48
 800d308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d30a:	f003 0301 	and.w	r3, r3, #1
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d002      	beq.n	800d318 <HAL_PCD_EP_DB_Transmit+0x31e>
 800d312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d314:	3301      	adds	r3, #1
 800d316:	64bb      	str	r3, [r7, #72]	; 0x48
 800d318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	029b      	lsls	r3, r3, #10
 800d31e:	b29a      	uxth	r2, r3
 800d320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d322:	801a      	strh	r2, [r3, #0]
 800d324:	e032      	b.n	800d38c <HAL_PCD_EP_DB_Transmit+0x392>
 800d326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d328:	095b      	lsrs	r3, r3, #5
 800d32a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d32e:	f003 031f 	and.w	r3, r3, #31
 800d332:	2b00      	cmp	r3, #0
 800d334:	d102      	bne.n	800d33c <HAL_PCD_EP_DB_Transmit+0x342>
 800d336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d338:	3b01      	subs	r3, #1
 800d33a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d33e:	b29b      	uxth	r3, r3
 800d340:	029b      	lsls	r3, r3, #10
 800d342:	b29b      	uxth	r3, r3
 800d344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d350:	801a      	strh	r2, [r3, #0]
 800d352:	e01b      	b.n	800d38c <HAL_PCD_EP_DB_Transmit+0x392>
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	785b      	ldrb	r3, [r3, #1]
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d117      	bne.n	800d38c <HAL_PCD_EP_DB_Transmit+0x392>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	643b      	str	r3, [r7, #64]	; 0x40
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	461a      	mov	r2, r3
 800d36e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d370:	4413      	add	r3, r2
 800d372:	643b      	str	r3, [r7, #64]	; 0x40
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	011a      	lsls	r2, r3, #4
 800d37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d37c:	4413      	add	r3, r2
 800d37e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d386:	b29a      	uxth	r2, r3
 800d388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d38a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6818      	ldr	r0, [r3, #0]
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	6959      	ldr	r1, [r3, #20]
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	891a      	ldrh	r2, [r3, #8]
 800d398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	f004 ff8f 	bl	80122be <USB_WritePMA>
 800d3a0:	e1d0      	b.n	800d744 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	00db      	lsls	r3, r3, #3
 800d3b4:	4413      	add	r3, r2
 800d3b6:	3306      	adds	r3, #6
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	6812      	ldr	r2, [r2, #0]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	699a      	ldr	r2, [r3, #24]
 800d3d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d307      	bcc.n	800d3ea <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	699a      	ldr	r2, [r3, #24]
 800d3de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d3e2:	1ad2      	subs	r2, r2, r3
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	619a      	str	r2, [r3, #24]
 800d3e8:	e002      	b.n	800d3f0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f040 80c4 	bne.w	800d582 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	785b      	ldrb	r3, [r3, #1]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d126      	bne.n	800d450 <HAL_PCD_EP_DB_Transmit+0x456>
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d410:	b29b      	uxth	r3, r3
 800d412:	461a      	mov	r2, r3
 800d414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d416:	4413      	add	r3, r2
 800d418:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	011a      	lsls	r2, r3, #4
 800d420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d422:	4413      	add	r3, r2
 800d424:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d428:	66bb      	str	r3, [r7, #104]	; 0x68
 800d42a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d42c:	881b      	ldrh	r3, [r3, #0]
 800d42e:	b29b      	uxth	r3, r3
 800d430:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d434:	b29a      	uxth	r2, r3
 800d436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d438:	801a      	strh	r2, [r3, #0]
 800d43a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	b29b      	uxth	r3, r3
 800d440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d448:	b29a      	uxth	r2, r3
 800d44a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d44c:	801a      	strh	r2, [r3, #0]
 800d44e:	e01a      	b.n	800d486 <HAL_PCD_EP_DB_Transmit+0x48c>
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	785b      	ldrb	r3, [r3, #1]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d116      	bne.n	800d486 <HAL_PCD_EP_DB_Transmit+0x48c>
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	677b      	str	r3, [r7, #116]	; 0x74
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d466:	b29b      	uxth	r3, r3
 800d468:	461a      	mov	r2, r3
 800d46a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d46c:	4413      	add	r3, r2
 800d46e:	677b      	str	r3, [r7, #116]	; 0x74
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	011a      	lsls	r2, r3, #4
 800d476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d478:	4413      	add	r3, r2
 800d47a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d47e:	673b      	str	r3, [r7, #112]	; 0x70
 800d480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d482:	2200      	movs	r2, #0
 800d484:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	785b      	ldrb	r3, [r3, #1]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d12f      	bne.n	800d4f4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4ac:	4413      	add	r3, r2
 800d4ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	011a      	lsls	r2, r3, #4
 800d4b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4bc:	4413      	add	r3, r2
 800d4be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d4c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d4c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4ca:	881b      	ldrh	r3, [r3, #0]
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4d8:	801a      	strh	r2, [r3, #0]
 800d4da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4de:	881b      	ldrh	r3, [r3, #0]
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4f0:	801a      	strh	r2, [r3, #0]
 800d4f2:	e017      	b.n	800d524 <HAL_PCD_EP_DB_Transmit+0x52a>
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	785b      	ldrb	r3, [r3, #1]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d113      	bne.n	800d524 <HAL_PCD_EP_DB_Transmit+0x52a>
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d504:	b29b      	uxth	r3, r3
 800d506:	461a      	mov	r2, r3
 800d508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d50a:	4413      	add	r3, r2
 800d50c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	011a      	lsls	r2, r3, #4
 800d514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d516:	4413      	add	r3, r2
 800d518:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d51c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d51e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d520:	2200      	movs	r2, #0
 800d522:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	4619      	mov	r1, r3
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f009 facb 	bl	8016ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d530:	88fb      	ldrh	r3, [r7, #6]
 800d532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d536:	2b00      	cmp	r3, #0
 800d538:	f040 8104 	bne.w	800d744 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	461a      	mov	r2, r3
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	4413      	add	r3, r2
 800d54a:	881b      	ldrh	r3, [r3, #0]
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d556:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	461a      	mov	r2, r3
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	441a      	add	r2, r3
 800d568:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d56c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	8013      	strh	r3, [r2, #0]
 800d580:	e0e0      	b.n	800d744 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d582:	88fb      	ldrh	r3, [r7, #6]
 800d584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d121      	bne.n	800d5d0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	461a      	mov	r2, r3
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	4413      	add	r3, r2
 800d59a:	881b      	ldrh	r3, [r3, #0]
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	441a      	add	r2, r3
 800d5b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d5bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	f040 80b4 	bne.w	800d744 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	695a      	ldr	r2, [r3, #20]
 800d5e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d5e4:	441a      	add	r2, r3
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	69da      	ldr	r2, [r3, #28]
 800d5ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d5f2:	441a      	add	r2, r3
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	6a1a      	ldr	r2, [r3, #32]
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	429a      	cmp	r2, r3
 800d602:	d309      	bcc.n	800d618 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	691b      	ldr	r3, [r3, #16]
 800d608:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	6a1a      	ldr	r2, [r3, #32]
 800d60e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d610:	1ad2      	subs	r2, r2, r3
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	621a      	str	r2, [r3, #32]
 800d616:	e015      	b.n	800d644 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	6a1b      	ldr	r3, [r3, #32]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d107      	bne.n	800d630 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800d620:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d624:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d62e:	e009      	b.n	800d644 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	6a1b      	ldr	r3, [r3, #32]
 800d634:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	2200      	movs	r2, #0
 800d63a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	2200      	movs	r2, #0
 800d640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	667b      	str	r3, [r7, #100]	; 0x64
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	785b      	ldrb	r3, [r3, #1]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d155      	bne.n	800d6fe <HAL_PCD_EP_DB_Transmit+0x704>
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d660:	b29b      	uxth	r3, r3
 800d662:	461a      	mov	r2, r3
 800d664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d666:	4413      	add	r3, r2
 800d668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	011a      	lsls	r2, r3, #4
 800d670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d672:	4413      	add	r3, r2
 800d674:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d678:	65bb      	str	r3, [r7, #88]	; 0x58
 800d67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d112      	bne.n	800d6a6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800d680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d682:	881b      	ldrh	r3, [r3, #0]
 800d684:	b29b      	uxth	r3, r3
 800d686:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d68e:	801a      	strh	r2, [r3, #0]
 800d690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d692:	881b      	ldrh	r3, [r3, #0]
 800d694:	b29b      	uxth	r3, r3
 800d696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d69a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6a2:	801a      	strh	r2, [r3, #0]
 800d6a4:	e044      	b.n	800d730 <HAL_PCD_EP_DB_Transmit+0x736>
 800d6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a8:	2b3e      	cmp	r3, #62	; 0x3e
 800d6aa:	d811      	bhi.n	800d6d0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800d6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ae:	085b      	lsrs	r3, r3, #1
 800d6b0:	657b      	str	r3, [r7, #84]	; 0x54
 800d6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6b4:	f003 0301 	and.w	r3, r3, #1
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d002      	beq.n	800d6c2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800d6bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6be:	3301      	adds	r3, #1
 800d6c0:	657b      	str	r3, [r7, #84]	; 0x54
 800d6c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	029b      	lsls	r3, r3, #10
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6cc:	801a      	strh	r2, [r3, #0]
 800d6ce:	e02f      	b.n	800d730 <HAL_PCD_EP_DB_Transmit+0x736>
 800d6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d2:	095b      	lsrs	r3, r3, #5
 800d6d4:	657b      	str	r3, [r7, #84]	; 0x54
 800d6d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d8:	f003 031f 	and.w	r3, r3, #31
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d102      	bne.n	800d6e6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800d6e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6e2:	3b01      	subs	r3, #1
 800d6e4:	657b      	str	r3, [r7, #84]	; 0x54
 800d6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	029b      	lsls	r3, r3, #10
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6fa:	801a      	strh	r2, [r3, #0]
 800d6fc:	e018      	b.n	800d730 <HAL_PCD_EP_DB_Transmit+0x736>
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	785b      	ldrb	r3, [r3, #1]
 800d702:	2b01      	cmp	r3, #1
 800d704:	d114      	bne.n	800d730 <HAL_PCD_EP_DB_Transmit+0x736>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d70e:	b29b      	uxth	r3, r3
 800d710:	461a      	mov	r2, r3
 800d712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d714:	4413      	add	r3, r2
 800d716:	667b      	str	r3, [r7, #100]	; 0x64
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	011a      	lsls	r2, r3, #4
 800d71e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d720:	4413      	add	r3, r2
 800d722:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d726:	663b      	str	r3, [r7, #96]	; 0x60
 800d728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d72e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6818      	ldr	r0, [r3, #0]
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	6959      	ldr	r1, [r3, #20]
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	895a      	ldrh	r2, [r3, #10]
 800d73c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d73e:	b29b      	uxth	r3, r3
 800d740:	f004 fdbd 	bl	80122be <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	461a      	mov	r2, r3
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	4413      	add	r3, r2
 800d752:	881b      	ldrh	r3, [r3, #0]
 800d754:	b29b      	uxth	r3, r3
 800d756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d75a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d75e:	823b      	strh	r3, [r7, #16]
 800d760:	8a3b      	ldrh	r3, [r7, #16]
 800d762:	f083 0310 	eor.w	r3, r3, #16
 800d766:	823b      	strh	r3, [r7, #16]
 800d768:	8a3b      	ldrh	r3, [r7, #16]
 800d76a:	f083 0320 	eor.w	r3, r3, #32
 800d76e:	823b      	strh	r3, [r7, #16]
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	461a      	mov	r2, r3
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	441a      	add	r2, r3
 800d77e:	8a3b      	ldrh	r3, [r7, #16]
 800d780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d78c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d790:	b29b      	uxth	r3, r3
 800d792:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3788      	adds	r7, #136	; 0x88
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800d79e:	b480      	push	{r7}
 800d7a0:	b087      	sub	sp, #28
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	60f8      	str	r0, [r7, #12]
 800d7a6:	607b      	str	r3, [r7, #4]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	817b      	strh	r3, [r7, #10]
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800d7b0:	897b      	ldrh	r3, [r7, #10]
 800d7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00b      	beq.n	800d7d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d7bc:	897b      	ldrh	r3, [r7, #10]
 800d7be:	f003 0307 	and.w	r3, r3, #7
 800d7c2:	1c5a      	adds	r2, r3, #1
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4413      	add	r3, r2
 800d7ca:	00db      	lsls	r3, r3, #3
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	617b      	str	r3, [r7, #20]
 800d7d2:	e009      	b.n	800d7e8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d7d4:	897a      	ldrh	r2, [r7, #10]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	00db      	lsls	r3, r3, #3
 800d7de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800d7e8:	893b      	ldrh	r3, [r7, #8]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d107      	bne.n	800d7fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	80da      	strh	r2, [r3, #6]
 800d7fc:	e00b      	b.n	800d816 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2201      	movs	r2, #1
 800d802:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	b29a      	uxth	r2, r3
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	0c1b      	lsrs	r3, r3, #16
 800d810:	b29a      	uxth	r2, r3
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	371c      	adds	r7, #28
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d824:	b480      	push	{r7}
 800d826:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 800d828:	4b05      	ldr	r3, [pc, #20]	; (800d840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a04      	ldr	r2, [pc, #16]	; (800d840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d82e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d832:	6013      	str	r3, [r2, #0]
}
 800d834:	bf00      	nop
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	40007000 	.word	0x40007000

0800d844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d850:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d854:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d85a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d102      	bne.n	800d86a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	f001 b823 	b.w	800e8b0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d86a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d86e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f003 0301 	and.w	r3, r3, #1
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	f000 817d 	beq.w	800db7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800d880:	4bbc      	ldr	r3, [pc, #752]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	f003 030c 	and.w	r3, r3, #12
 800d888:	2b04      	cmp	r3, #4
 800d88a:	d00c      	beq.n	800d8a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800d88c:	4bb9      	ldr	r3, [pc, #740]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	f003 030c 	and.w	r3, r3, #12
 800d894:	2b08      	cmp	r3, #8
 800d896:	d15c      	bne.n	800d952 <HAL_RCC_OscConfig+0x10e>
 800d898:	4bb6      	ldr	r3, [pc, #728]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8a4:	d155      	bne.n	800d952 <HAL_RCC_OscConfig+0x10e>
 800d8a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d8aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d8b2:	fa93 f3a3 	rbit	r3, r3
 800d8b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800d8ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8be:	fab3 f383 	clz	r3, r3
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	095b      	lsrs	r3, r3, #5
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f043 0301 	orr.w	r3, r3, #1
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d102      	bne.n	800d8d8 <HAL_RCC_OscConfig+0x94>
 800d8d2:	4ba8      	ldr	r3, [pc, #672]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	e015      	b.n	800d904 <HAL_RCC_OscConfig+0xc0>
 800d8d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d8dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800d8e4:	fa93 f3a3 	rbit	r3, r3
 800d8e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d8ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d8f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800d8f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d8f8:	fa93 f3a3 	rbit	r3, r3
 800d8fc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800d900:	4b9c      	ldr	r3, [pc, #624]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d904:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d908:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800d90c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800d910:	fa92 f2a2 	rbit	r2, r2
 800d914:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800d918:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800d91c:	fab2 f282 	clz	r2, r2
 800d920:	b2d2      	uxtb	r2, r2
 800d922:	f042 0220 	orr.w	r2, r2, #32
 800d926:	b2d2      	uxtb	r2, r2
 800d928:	f002 021f 	and.w	r2, r2, #31
 800d92c:	2101      	movs	r1, #1
 800d92e:	fa01 f202 	lsl.w	r2, r1, r2
 800d932:	4013      	ands	r3, r2
 800d934:	2b00      	cmp	r3, #0
 800d936:	f000 811f 	beq.w	800db78 <HAL_RCC_OscConfig+0x334>
 800d93a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d93e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	f040 8116 	bne.w	800db78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800d94c:	2301      	movs	r3, #1
 800d94e:	f000 bfaf 	b.w	800e8b0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d962:	d106      	bne.n	800d972 <HAL_RCC_OscConfig+0x12e>
 800d964:	4b83      	ldr	r3, [pc, #524]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a82      	ldr	r2, [pc, #520]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d96a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	e036      	b.n	800d9e0 <HAL_RCC_OscConfig+0x19c>
 800d972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d10c      	bne.n	800d99c <HAL_RCC_OscConfig+0x158>
 800d982:	4b7c      	ldr	r3, [pc, #496]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a7b      	ldr	r2, [pc, #492]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d98c:	6013      	str	r3, [r2, #0]
 800d98e:	4b79      	ldr	r3, [pc, #484]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a78      	ldr	r2, [pc, #480]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d998:	6013      	str	r3, [r2, #0]
 800d99a:	e021      	b.n	800d9e0 <HAL_RCC_OscConfig+0x19c>
 800d99c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d9a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d9ac:	d10c      	bne.n	800d9c8 <HAL_RCC_OscConfig+0x184>
 800d9ae:	4b71      	ldr	r3, [pc, #452]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a70      	ldr	r2, [pc, #448]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d9b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d9b8:	6013      	str	r3, [r2, #0]
 800d9ba:	4b6e      	ldr	r3, [pc, #440]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a6d      	ldr	r2, [pc, #436]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d9c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9c4:	6013      	str	r3, [r2, #0]
 800d9c6:	e00b      	b.n	800d9e0 <HAL_RCC_OscConfig+0x19c>
 800d9c8:	4b6a      	ldr	r3, [pc, #424]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a69      	ldr	r2, [pc, #420]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d9ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d9d2:	6013      	str	r3, [r2, #0]
 800d9d4:	4b67      	ldr	r3, [pc, #412]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a66      	ldr	r2, [pc, #408]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d9da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d9de:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800d9e0:	4b64      	ldr	r3, [pc, #400]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e4:	f023 020f 	bic.w	r2, r3, #15
 800d9e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d9ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	495f      	ldr	r1, [pc, #380]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d9fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d9fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d059      	beq.n	800dabe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da0a:	f7fa feb7 	bl	800877c <HAL_GetTick>
 800da0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da12:	e00a      	b.n	800da2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800da14:	f7fa feb2 	bl	800877c <HAL_GetTick>
 800da18:	4602      	mov	r2, r0
 800da1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	2b64      	cmp	r3, #100	; 0x64
 800da22:	d902      	bls.n	800da2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800da24:	2303      	movs	r3, #3
 800da26:	f000 bf43 	b.w	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800da2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da2e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800da36:	fa93 f3a3 	rbit	r3, r3
 800da3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800da3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da42:	fab3 f383 	clz	r3, r3
 800da46:	b2db      	uxtb	r3, r3
 800da48:	095b      	lsrs	r3, r3, #5
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	f043 0301 	orr.w	r3, r3, #1
 800da50:	b2db      	uxtb	r3, r3
 800da52:	2b01      	cmp	r3, #1
 800da54:	d102      	bne.n	800da5c <HAL_RCC_OscConfig+0x218>
 800da56:	4b47      	ldr	r3, [pc, #284]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	e015      	b.n	800da88 <HAL_RCC_OscConfig+0x244>
 800da5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da60:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800da68:	fa93 f3a3 	rbit	r3, r3
 800da6c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800da70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da74:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800da78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800da7c:	fa93 f3a3 	rbit	r3, r3
 800da80:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800da84:	4b3b      	ldr	r3, [pc, #236]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800da86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800da8c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800da90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800da94:	fa92 f2a2 	rbit	r2, r2
 800da98:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800da9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800daa0:	fab2 f282 	clz	r2, r2
 800daa4:	b2d2      	uxtb	r2, r2
 800daa6:	f042 0220 	orr.w	r2, r2, #32
 800daaa:	b2d2      	uxtb	r2, r2
 800daac:	f002 021f 	and.w	r2, r2, #31
 800dab0:	2101      	movs	r1, #1
 800dab2:	fa01 f202 	lsl.w	r2, r1, r2
 800dab6:	4013      	ands	r3, r2
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d0ab      	beq.n	800da14 <HAL_RCC_OscConfig+0x1d0>
 800dabc:	e05d      	b.n	800db7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dabe:	f7fa fe5d 	bl	800877c <HAL_GetTick>
 800dac2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dac6:	e00a      	b.n	800dade <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dac8:	f7fa fe58 	bl	800877c <HAL_GetTick>
 800dacc:	4602      	mov	r2, r0
 800dace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	2b64      	cmp	r3, #100	; 0x64
 800dad6:	d902      	bls.n	800dade <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800dad8:	2303      	movs	r3, #3
 800dada:	f000 bee9 	b.w	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800dade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dae2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dae6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800daea:	fa93 f3a3 	rbit	r3, r3
 800daee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800daf2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800daf6:	fab3 f383 	clz	r3, r3
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	095b      	lsrs	r3, r3, #5
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	f043 0301 	orr.w	r3, r3, #1
 800db04:	b2db      	uxtb	r3, r3
 800db06:	2b01      	cmp	r3, #1
 800db08:	d102      	bne.n	800db10 <HAL_RCC_OscConfig+0x2cc>
 800db0a:	4b1a      	ldr	r3, [pc, #104]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	e015      	b.n	800db3c <HAL_RCC_OscConfig+0x2f8>
 800db10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800db14:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800db1c:	fa93 f3a3 	rbit	r3, r3
 800db20:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800db24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800db28:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800db2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800db30:	fa93 f3a3 	rbit	r3, r3
 800db34:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800db38:	4b0e      	ldr	r3, [pc, #56]	; (800db74 <HAL_RCC_OscConfig+0x330>)
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800db40:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800db44:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800db48:	fa92 f2a2 	rbit	r2, r2
 800db4c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800db50:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800db54:	fab2 f282 	clz	r2, r2
 800db58:	b2d2      	uxtb	r2, r2
 800db5a:	f042 0220 	orr.w	r2, r2, #32
 800db5e:	b2d2      	uxtb	r2, r2
 800db60:	f002 021f 	and.w	r2, r2, #31
 800db64:	2101      	movs	r1, #1
 800db66:	fa01 f202 	lsl.w	r2, r1, r2
 800db6a:	4013      	ands	r3, r2
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d1ab      	bne.n	800dac8 <HAL_RCC_OscConfig+0x284>
 800db70:	e003      	b.n	800db7a <HAL_RCC_OscConfig+0x336>
 800db72:	bf00      	nop
 800db74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800db7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f003 0302 	and.w	r3, r3, #2
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f000 817d 	beq.w	800de8a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800db90:	4ba6      	ldr	r3, [pc, #664]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	f003 030c 	and.w	r3, r3, #12
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d00b      	beq.n	800dbb4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800db9c:	4ba3      	ldr	r3, [pc, #652]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	f003 030c 	and.w	r3, r3, #12
 800dba4:	2b08      	cmp	r3, #8
 800dba6:	d172      	bne.n	800dc8e <HAL_RCC_OscConfig+0x44a>
 800dba8:	4ba0      	ldr	r3, [pc, #640]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d16c      	bne.n	800dc8e <HAL_RCC_OscConfig+0x44a>
 800dbb4:	2302      	movs	r3, #2
 800dbb6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dbba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800dbbe:	fa93 f3a3 	rbit	r3, r3
 800dbc2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800dbc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dbca:	fab3 f383 	clz	r3, r3
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	095b      	lsrs	r3, r3, #5
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	f043 0301 	orr.w	r3, r3, #1
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d102      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x3a0>
 800dbde:	4b93      	ldr	r3, [pc, #588]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	e013      	b.n	800dc0c <HAL_RCC_OscConfig+0x3c8>
 800dbe4:	2302      	movs	r3, #2
 800dbe6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dbea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800dbee:	fa93 f3a3 	rbit	r3, r3
 800dbf2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800dbf6:	2302      	movs	r3, #2
 800dbf8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800dbfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800dc00:	fa93 f3a3 	rbit	r3, r3
 800dc04:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800dc08:	4b88      	ldr	r3, [pc, #544]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800dc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0c:	2202      	movs	r2, #2
 800dc0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800dc12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800dc16:	fa92 f2a2 	rbit	r2, r2
 800dc1a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800dc1e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800dc22:	fab2 f282 	clz	r2, r2
 800dc26:	b2d2      	uxtb	r2, r2
 800dc28:	f042 0220 	orr.w	r2, r2, #32
 800dc2c:	b2d2      	uxtb	r2, r2
 800dc2e:	f002 021f 	and.w	r2, r2, #31
 800dc32:	2101      	movs	r1, #1
 800dc34:	fa01 f202 	lsl.w	r2, r1, r2
 800dc38:	4013      	ands	r3, r2
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d00a      	beq.n	800dc54 <HAL_RCC_OscConfig+0x410>
 800dc3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dc42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	691b      	ldr	r3, [r3, #16]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d002      	beq.n	800dc54 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	f000 be2e 	b.w	800e8b0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc54:	4b75      	ldr	r3, [pc, #468]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dc5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dc60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	695b      	ldr	r3, [r3, #20]
 800dc68:	21f8      	movs	r1, #248	; 0xf8
 800dc6a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800dc72:	fa91 f1a1 	rbit	r1, r1
 800dc76:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800dc7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800dc7e:	fab1 f181 	clz	r1, r1
 800dc82:	b2c9      	uxtb	r1, r1
 800dc84:	408b      	lsls	r3, r1
 800dc86:	4969      	ldr	r1, [pc, #420]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dc8c:	e0fd      	b.n	800de8a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800dc8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dc92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	691b      	ldr	r3, [r3, #16]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	f000 8088 	beq.w	800ddb0 <HAL_RCC_OscConfig+0x56c>
 800dca0:	2301      	movs	r3, #1
 800dca2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dca6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800dcaa:	fa93 f3a3 	rbit	r3, r3
 800dcae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800dcb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dcb6:	fab3 f383 	clz	r3, r3
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800dcc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	2301      	movs	r3, #1
 800dcca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dccc:	f7fa fd56 	bl	800877c <HAL_GetTick>
 800dcd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dcd4:	e00a      	b.n	800dcec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dcd6:	f7fa fd51 	bl	800877c <HAL_GetTick>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	2b02      	cmp	r3, #2
 800dce4:	d902      	bls.n	800dcec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800dce6:	2303      	movs	r3, #3
 800dce8:	f000 bde2 	b.w	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800dcec:	2302      	movs	r3, #2
 800dcee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcf2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800dcf6:	fa93 f3a3 	rbit	r3, r3
 800dcfa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800dcfe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd02:	fab3 f383 	clz	r3, r3
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	095b      	lsrs	r3, r3, #5
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	f043 0301 	orr.w	r3, r3, #1
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d102      	bne.n	800dd1c <HAL_RCC_OscConfig+0x4d8>
 800dd16:	4b45      	ldr	r3, [pc, #276]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	e013      	b.n	800dd44 <HAL_RCC_OscConfig+0x500>
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd26:	fa93 f3a3 	rbit	r3, r3
 800dd2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800dd2e:	2302      	movs	r3, #2
 800dd30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800dd34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800dd38:	fa93 f3a3 	rbit	r3, r3
 800dd3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800dd40:	4b3a      	ldr	r3, [pc, #232]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800dd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd44:	2202      	movs	r2, #2
 800dd46:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800dd4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800dd4e:	fa92 f2a2 	rbit	r2, r2
 800dd52:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800dd56:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800dd5a:	fab2 f282 	clz	r2, r2
 800dd5e:	b2d2      	uxtb	r2, r2
 800dd60:	f042 0220 	orr.w	r2, r2, #32
 800dd64:	b2d2      	uxtb	r2, r2
 800dd66:	f002 021f 	and.w	r2, r2, #31
 800dd6a:	2101      	movs	r1, #1
 800dd6c:	fa01 f202 	lsl.w	r2, r1, r2
 800dd70:	4013      	ands	r3, r2
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0af      	beq.n	800dcd6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd76:	4b2d      	ldr	r3, [pc, #180]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dd7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dd82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	695b      	ldr	r3, [r3, #20]
 800dd8a:	21f8      	movs	r1, #248	; 0xf8
 800dd8c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd90:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800dd94:	fa91 f1a1 	rbit	r1, r1
 800dd98:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800dd9c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800dda0:	fab1 f181 	clz	r1, r1
 800dda4:	b2c9      	uxtb	r1, r1
 800dda6:	408b      	lsls	r3, r1
 800dda8:	4920      	ldr	r1, [pc, #128]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	600b      	str	r3, [r1, #0]
 800ddae:	e06c      	b.n	800de8a <HAL_RCC_OscConfig+0x646>
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ddba:	fa93 f3a3 	rbit	r3, r3
 800ddbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800ddc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ddc6:	fab3 f383 	clz	r3, r3
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800ddd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	2300      	movs	r3, #0
 800ddda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dddc:	f7fa fcce 	bl	800877c <HAL_GetTick>
 800dde0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dde4:	e00a      	b.n	800ddfc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dde6:	f7fa fcc9 	bl	800877c <HAL_GetTick>
 800ddea:	4602      	mov	r2, r0
 800ddec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ddf0:	1ad3      	subs	r3, r2, r3
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d902      	bls.n	800ddfc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	f000 bd5a 	b.w	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800de06:	fa93 f3a3 	rbit	r3, r3
 800de0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800de0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de12:	fab3 f383 	clz	r3, r3
 800de16:	b2db      	uxtb	r3, r3
 800de18:	095b      	lsrs	r3, r3, #5
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	f043 0301 	orr.w	r3, r3, #1
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b01      	cmp	r3, #1
 800de24:	d104      	bne.n	800de30 <HAL_RCC_OscConfig+0x5ec>
 800de26:	4b01      	ldr	r3, [pc, #4]	; (800de2c <HAL_RCC_OscConfig+0x5e8>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	e015      	b.n	800de58 <HAL_RCC_OscConfig+0x614>
 800de2c:	40021000 	.word	0x40021000
 800de30:	2302      	movs	r3, #2
 800de32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de3a:	fa93 f3a3 	rbit	r3, r3
 800de3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800de42:	2302      	movs	r3, #2
 800de44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800de48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800de4c:	fa93 f3a3 	rbit	r3, r3
 800de50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800de54:	4bc8      	ldr	r3, [pc, #800]	; (800e178 <HAL_RCC_OscConfig+0x934>)
 800de56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de58:	2202      	movs	r2, #2
 800de5a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800de5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800de62:	fa92 f2a2 	rbit	r2, r2
 800de66:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800de6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800de6e:	fab2 f282 	clz	r2, r2
 800de72:	b2d2      	uxtb	r2, r2
 800de74:	f042 0220 	orr.w	r2, r2, #32
 800de78:	b2d2      	uxtb	r2, r2
 800de7a:	f002 021f 	and.w	r2, r2, #31
 800de7e:	2101      	movs	r1, #1
 800de80:	fa01 f202 	lsl.w	r2, r1, r2
 800de84:	4013      	ands	r3, r2
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1ad      	bne.n	800dde6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800de8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800de8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f003 0308 	and.w	r3, r3, #8
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 8110 	beq.w	800e0c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800dea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	699b      	ldr	r3, [r3, #24]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d079      	beq.n	800dfa4 <HAL_RCC_OscConfig+0x760>
 800deb0:	2301      	movs	r3, #1
 800deb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800deb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800deba:	fa93 f3a3 	rbit	r3, r3
 800debe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800dec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dec6:	fab3 f383 	clz	r3, r3
 800deca:	b2db      	uxtb	r3, r3
 800decc:	461a      	mov	r2, r3
 800dece:	4bab      	ldr	r3, [pc, #684]	; (800e17c <HAL_RCC_OscConfig+0x938>)
 800ded0:	4413      	add	r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	461a      	mov	r2, r3
 800ded6:	2301      	movs	r3, #1
 800ded8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800deda:	f7fa fc4f 	bl	800877c <HAL_GetTick>
 800dede:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dee2:	e00a      	b.n	800defa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dee4:	f7fa fc4a 	bl	800877c <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	2b02      	cmp	r3, #2
 800def2:	d902      	bls.n	800defa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800def4:	2303      	movs	r3, #3
 800def6:	f000 bcdb 	b.w	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800defa:	2302      	movs	r3, #2
 800defc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800df04:	fa93 f3a3 	rbit	r3, r3
 800df08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800df0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800df14:	2202      	movs	r2, #2
 800df16:	601a      	str	r2, [r3, #0]
 800df18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	fa93 f2a3 	rbit	r2, r3
 800df26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df2e:	601a      	str	r2, [r3, #0]
 800df30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df38:	2202      	movs	r2, #2
 800df3a:	601a      	str	r2, [r3, #0]
 800df3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	fa93 f2a3 	rbit	r2, r3
 800df4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800df52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800df54:	4b88      	ldr	r3, [pc, #544]	; (800e178 <HAL_RCC_OscConfig+0x934>)
 800df56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800df60:	2102      	movs	r1, #2
 800df62:	6019      	str	r1, [r3, #0]
 800df64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	fa93 f1a3 	rbit	r1, r3
 800df72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800df7a:	6019      	str	r1, [r3, #0]
  return result;
 800df7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	fab3 f383 	clz	r3, r3
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800df90:	b2db      	uxtb	r3, r3
 800df92:	f003 031f 	and.w	r3, r3, #31
 800df96:	2101      	movs	r1, #1
 800df98:	fa01 f303 	lsl.w	r3, r1, r3
 800df9c:	4013      	ands	r3, r2
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0a0      	beq.n	800dee4 <HAL_RCC_OscConfig+0x6a0>
 800dfa2:	e08d      	b.n	800e0c0 <HAL_RCC_OscConfig+0x87c>
 800dfa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dfa8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800dfac:	2201      	movs	r2, #1
 800dfae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dfb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dfb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	fa93 f2a3 	rbit	r2, r3
 800dfbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dfc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800dfc6:	601a      	str	r2, [r3, #0]
  return result;
 800dfc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dfcc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800dfd0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dfd2:	fab3 f383 	clz	r3, r3
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4b68      	ldr	r3, [pc, #416]	; (800e17c <HAL_RCC_OscConfig+0x938>)
 800dfdc:	4413      	add	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dfe6:	f7fa fbc9 	bl	800877c <HAL_GetTick>
 800dfea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dfee:	e00a      	b.n	800e006 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dff0:	f7fa fbc4 	bl	800877c <HAL_GetTick>
 800dff4:	4602      	mov	r2, r0
 800dff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	d902      	bls.n	800e006 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800e000:	2303      	movs	r3, #3
 800e002:	f000 bc55 	b.w	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800e006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e00a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e00e:	2202      	movs	r2, #2
 800e010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e016:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	fa93 f2a3 	rbit	r2, r3
 800e020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e024:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e028:	601a      	str	r2, [r3, #0]
 800e02a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e02e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e032:	2202      	movs	r2, #2
 800e034:	601a      	str	r2, [r3, #0]
 800e036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e03a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	fa93 f2a3 	rbit	r2, r3
 800e044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e048:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e04c:	601a      	str	r2, [r3, #0]
 800e04e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e056:	2202      	movs	r2, #2
 800e058:	601a      	str	r2, [r3, #0]
 800e05a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e05e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	fa93 f2a3 	rbit	r2, r3
 800e068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e06c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e070:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e072:	4b41      	ldr	r3, [pc, #260]	; (800e178 <HAL_RCC_OscConfig+0x934>)
 800e074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e07a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e07e:	2102      	movs	r1, #2
 800e080:	6019      	str	r1, [r3, #0]
 800e082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e086:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	fa93 f1a3 	rbit	r1, r3
 800e090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e094:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e098:	6019      	str	r1, [r3, #0]
  return result;
 800e09a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e09e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	fab3 f383 	clz	r3, r3
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	f003 031f 	and.w	r3, r3, #31
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ba:	4013      	ands	r3, r2
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d197      	bne.n	800dff0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e0c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e0c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f003 0304 	and.w	r3, r3, #4
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	f000 81a1 	beq.w	800e418 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e0dc:	4b26      	ldr	r3, [pc, #152]	; (800e178 <HAL_RCC_OscConfig+0x934>)
 800e0de:	69db      	ldr	r3, [r3, #28]
 800e0e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d116      	bne.n	800e116 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e0e8:	4b23      	ldr	r3, [pc, #140]	; (800e178 <HAL_RCC_OscConfig+0x934>)
 800e0ea:	69db      	ldr	r3, [r3, #28]
 800e0ec:	4a22      	ldr	r2, [pc, #136]	; (800e178 <HAL_RCC_OscConfig+0x934>)
 800e0ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0f2:	61d3      	str	r3, [r2, #28]
 800e0f4:	4b20      	ldr	r3, [pc, #128]	; (800e178 <HAL_RCC_OscConfig+0x934>)
 800e0f6:	69db      	ldr	r3, [r3, #28]
 800e0f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800e0fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e100:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800e104:	601a      	str	r2, [r3, #0]
 800e106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e10a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800e10e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800e110:	2301      	movs	r3, #1
 800e112:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e116:	4b1a      	ldr	r3, [pc, #104]	; (800e180 <HAL_RCC_OscConfig+0x93c>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d11a      	bne.n	800e158 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e122:	4b17      	ldr	r3, [pc, #92]	; (800e180 <HAL_RCC_OscConfig+0x93c>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a16      	ldr	r2, [pc, #88]	; (800e180 <HAL_RCC_OscConfig+0x93c>)
 800e128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e12c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e12e:	f7fa fb25 	bl	800877c <HAL_GetTick>
 800e132:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e136:	e009      	b.n	800e14c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e138:	f7fa fb20 	bl	800877c <HAL_GetTick>
 800e13c:	4602      	mov	r2, r0
 800e13e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	2b64      	cmp	r3, #100	; 0x64
 800e146:	d901      	bls.n	800e14c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800e148:	2303      	movs	r3, #3
 800e14a:	e3b1      	b.n	800e8b0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e14c:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <HAL_RCC_OscConfig+0x93c>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e154:	2b00      	cmp	r3, #0
 800e156:	d0ef      	beq.n	800e138 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e15c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d10d      	bne.n	800e184 <HAL_RCC_OscConfig+0x940>
 800e168:	4b03      	ldr	r3, [pc, #12]	; (800e178 <HAL_RCC_OscConfig+0x934>)
 800e16a:	6a1b      	ldr	r3, [r3, #32]
 800e16c:	4a02      	ldr	r2, [pc, #8]	; (800e178 <HAL_RCC_OscConfig+0x934>)
 800e16e:	f043 0301 	orr.w	r3, r3, #1
 800e172:	6213      	str	r3, [r2, #32]
 800e174:	e03c      	b.n	800e1f0 <HAL_RCC_OscConfig+0x9ac>
 800e176:	bf00      	nop
 800e178:	40021000 	.word	0x40021000
 800e17c:	10908120 	.word	0x10908120
 800e180:	40007000 	.word	0x40007000
 800e184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10c      	bne.n	800e1ae <HAL_RCC_OscConfig+0x96a>
 800e194:	4bc1      	ldr	r3, [pc, #772]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e196:	6a1b      	ldr	r3, [r3, #32]
 800e198:	4ac0      	ldr	r2, [pc, #768]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e19a:	f023 0301 	bic.w	r3, r3, #1
 800e19e:	6213      	str	r3, [r2, #32]
 800e1a0:	4bbe      	ldr	r3, [pc, #760]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e1a2:	6a1b      	ldr	r3, [r3, #32]
 800e1a4:	4abd      	ldr	r2, [pc, #756]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e1a6:	f023 0304 	bic.w	r3, r3, #4
 800e1aa:	6213      	str	r3, [r2, #32]
 800e1ac:	e020      	b.n	800e1f0 <HAL_RCC_OscConfig+0x9ac>
 800e1ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e1b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	2b05      	cmp	r3, #5
 800e1bc:	d10c      	bne.n	800e1d8 <HAL_RCC_OscConfig+0x994>
 800e1be:	4bb7      	ldr	r3, [pc, #732]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e1c0:	6a1b      	ldr	r3, [r3, #32]
 800e1c2:	4ab6      	ldr	r2, [pc, #728]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e1c4:	f043 0304 	orr.w	r3, r3, #4
 800e1c8:	6213      	str	r3, [r2, #32]
 800e1ca:	4bb4      	ldr	r3, [pc, #720]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	4ab3      	ldr	r2, [pc, #716]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e1d0:	f043 0301 	orr.w	r3, r3, #1
 800e1d4:	6213      	str	r3, [r2, #32]
 800e1d6:	e00b      	b.n	800e1f0 <HAL_RCC_OscConfig+0x9ac>
 800e1d8:	4bb0      	ldr	r3, [pc, #704]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e1da:	6a1b      	ldr	r3, [r3, #32]
 800e1dc:	4aaf      	ldr	r2, [pc, #700]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e1de:	f023 0301 	bic.w	r3, r3, #1
 800e1e2:	6213      	str	r3, [r2, #32]
 800e1e4:	4bad      	ldr	r3, [pc, #692]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e1e6:	6a1b      	ldr	r3, [r3, #32]
 800e1e8:	4aac      	ldr	r2, [pc, #688]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e1ea:	f023 0304 	bic.w	r3, r3, #4
 800e1ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e1f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e1f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f000 8081 	beq.w	800e304 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e202:	f7fa fabb 	bl	800877c <HAL_GetTick>
 800e206:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e20a:	e00b      	b.n	800e224 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e20c:	f7fa fab6 	bl	800877c <HAL_GetTick>
 800e210:	4602      	mov	r2, r0
 800e212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	f241 3288 	movw	r2, #5000	; 0x1388
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d901      	bls.n	800e224 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800e220:	2303      	movs	r3, #3
 800e222:	e345      	b.n	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800e224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e228:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e22c:	2202      	movs	r2, #2
 800e22e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e234:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	fa93 f2a3 	rbit	r2, r3
 800e23e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e242:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e246:	601a      	str	r2, [r3, #0]
 800e248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e24c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e250:	2202      	movs	r2, #2
 800e252:	601a      	str	r2, [r3, #0]
 800e254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e258:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	fa93 f2a3 	rbit	r2, r3
 800e262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e266:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e26a:	601a      	str	r2, [r3, #0]
  return result;
 800e26c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e270:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e274:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e276:	fab3 f383 	clz	r3, r3
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	095b      	lsrs	r3, r3, #5
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	f043 0302 	orr.w	r3, r3, #2
 800e284:	b2db      	uxtb	r3, r3
 800e286:	2b02      	cmp	r3, #2
 800e288:	d102      	bne.n	800e290 <HAL_RCC_OscConfig+0xa4c>
 800e28a:	4b84      	ldr	r3, [pc, #528]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e28c:	6a1b      	ldr	r3, [r3, #32]
 800e28e:	e013      	b.n	800e2b8 <HAL_RCC_OscConfig+0xa74>
 800e290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e294:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800e298:	2202      	movs	r2, #2
 800e29a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e29c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e2a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	fa93 f2a3 	rbit	r2, r3
 800e2aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e2ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800e2b2:	601a      	str	r2, [r3, #0]
 800e2b4:	4b79      	ldr	r3, [pc, #484]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800e2c0:	2102      	movs	r1, #2
 800e2c2:	6011      	str	r1, [r2, #0]
 800e2c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800e2cc:	6812      	ldr	r2, [r2, #0]
 800e2ce:	fa92 f1a2 	rbit	r1, r2
 800e2d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800e2da:	6011      	str	r1, [r2, #0]
  return result;
 800e2dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800e2e4:	6812      	ldr	r2, [r2, #0]
 800e2e6:	fab2 f282 	clz	r2, r2
 800e2ea:	b2d2      	uxtb	r2, r2
 800e2ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2f0:	b2d2      	uxtb	r2, r2
 800e2f2:	f002 021f 	and.w	r2, r2, #31
 800e2f6:	2101      	movs	r1, #1
 800e2f8:	fa01 f202 	lsl.w	r2, r1, r2
 800e2fc:	4013      	ands	r3, r2
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d084      	beq.n	800e20c <HAL_RCC_OscConfig+0x9c8>
 800e302:	e07f      	b.n	800e404 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e304:	f7fa fa3a 	bl	800877c <HAL_GetTick>
 800e308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e30c:	e00b      	b.n	800e326 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e30e:	f7fa fa35 	bl	800877c <HAL_GetTick>
 800e312:	4602      	mov	r2, r0
 800e314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e31e:	4293      	cmp	r3, r2
 800e320:	d901      	bls.n	800e326 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800e322:	2303      	movs	r3, #3
 800e324:	e2c4      	b.n	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800e326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e32a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800e32e:	2202      	movs	r2, #2
 800e330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e336:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	fa93 f2a3 	rbit	r2, r3
 800e340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e344:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e34e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e352:	2202      	movs	r2, #2
 800e354:	601a      	str	r2, [r3, #0]
 800e356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e35a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	fa93 f2a3 	rbit	r2, r3
 800e364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e368:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800e36c:	601a      	str	r2, [r3, #0]
  return result;
 800e36e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e372:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800e376:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e378:	fab3 f383 	clz	r3, r3
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	095b      	lsrs	r3, r3, #5
 800e380:	b2db      	uxtb	r3, r3
 800e382:	f043 0302 	orr.w	r3, r3, #2
 800e386:	b2db      	uxtb	r3, r3
 800e388:	2b02      	cmp	r3, #2
 800e38a:	d102      	bne.n	800e392 <HAL_RCC_OscConfig+0xb4e>
 800e38c:	4b43      	ldr	r3, [pc, #268]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e38e:	6a1b      	ldr	r3, [r3, #32]
 800e390:	e013      	b.n	800e3ba <HAL_RCC_OscConfig+0xb76>
 800e392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e396:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800e39a:	2202      	movs	r2, #2
 800e39c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e39e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e3a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	fa93 f2a3 	rbit	r2, r3
 800e3ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e3b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800e3b4:	601a      	str	r2, [r3, #0]
 800e3b6:	4b39      	ldr	r3, [pc, #228]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e3be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800e3c2:	2102      	movs	r1, #2
 800e3c4:	6011      	str	r1, [r2, #0]
 800e3c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e3ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800e3ce:	6812      	ldr	r2, [r2, #0]
 800e3d0:	fa92 f1a2 	rbit	r1, r2
 800e3d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e3d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800e3dc:	6011      	str	r1, [r2, #0]
  return result;
 800e3de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e3e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800e3e6:	6812      	ldr	r2, [r2, #0]
 800e3e8:	fab2 f282 	clz	r2, r2
 800e3ec:	b2d2      	uxtb	r2, r2
 800e3ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3f2:	b2d2      	uxtb	r2, r2
 800e3f4:	f002 021f 	and.w	r2, r2, #31
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	fa01 f202 	lsl.w	r2, r1, r2
 800e3fe:	4013      	ands	r3, r2
 800e400:	2b00      	cmp	r3, #0
 800e402:	d184      	bne.n	800e30e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800e404:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d105      	bne.n	800e418 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e40c:	4b23      	ldr	r3, [pc, #140]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e40e:	69db      	ldr	r3, [r3, #28]
 800e410:	4a22      	ldr	r2, [pc, #136]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e416:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e41c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	69db      	ldr	r3, [r3, #28]
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 8242 	beq.w	800e8ae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e42a:	4b1c      	ldr	r3, [pc, #112]	; (800e49c <HAL_RCC_OscConfig+0xc58>)
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	f003 030c 	and.w	r3, r3, #12
 800e432:	2b08      	cmp	r3, #8
 800e434:	f000 8213 	beq.w	800e85e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e43c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	69db      	ldr	r3, [r3, #28]
 800e444:	2b02      	cmp	r3, #2
 800e446:	f040 8162 	bne.w	800e70e <HAL_RCC_OscConfig+0xeca>
 800e44a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e44e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800e452:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e45c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	fa93 f2a3 	rbit	r2, r3
 800e466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e46a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800e46e:	601a      	str	r2, [r3, #0]
  return result;
 800e470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e474:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800e478:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e47a:	fab3 f383 	clz	r3, r3
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800e484:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	461a      	mov	r2, r3
 800e48c:	2300      	movs	r3, #0
 800e48e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e490:	f7fa f974 	bl	800877c <HAL_GetTick>
 800e494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e498:	e00c      	b.n	800e4b4 <HAL_RCC_OscConfig+0xc70>
 800e49a:	bf00      	nop
 800e49c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e4a0:	f7fa f96c 	bl	800877c <HAL_GetTick>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d901      	bls.n	800e4b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800e4b0:	2303      	movs	r3, #3
 800e4b2:	e1fd      	b.n	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800e4b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e4b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e4bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e4c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e4c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e4c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	fa93 f2a3 	rbit	r2, r3
 800e4d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e4d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800e4d8:	601a      	str	r2, [r3, #0]
  return result;
 800e4da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e4de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800e4e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e4e4:	fab3 f383 	clz	r3, r3
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	095b      	lsrs	r3, r3, #5
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	f043 0301 	orr.w	r3, r3, #1
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d102      	bne.n	800e4fe <HAL_RCC_OscConfig+0xcba>
 800e4f8:	4bb0      	ldr	r3, [pc, #704]	; (800e7bc <HAL_RCC_OscConfig+0xf78>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	e027      	b.n	800e54e <HAL_RCC_OscConfig+0xd0a>
 800e4fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e502:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800e506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e50a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e50c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e510:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	fa93 f2a3 	rbit	r2, r3
 800e51a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e51e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800e522:	601a      	str	r2, [r3, #0]
 800e524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e528:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800e52c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e530:	601a      	str	r2, [r3, #0]
 800e532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e536:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	fa93 f2a3 	rbit	r2, r3
 800e540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e544:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800e548:	601a      	str	r2, [r3, #0]
 800e54a:	4b9c      	ldr	r3, [pc, #624]	; (800e7bc <HAL_RCC_OscConfig+0xf78>)
 800e54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e552:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800e556:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800e55a:	6011      	str	r1, [r2, #0]
 800e55c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e560:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800e564:	6812      	ldr	r2, [r2, #0]
 800e566:	fa92 f1a2 	rbit	r1, r2
 800e56a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e56e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800e572:	6011      	str	r1, [r2, #0]
  return result;
 800e574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e578:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800e57c:	6812      	ldr	r2, [r2, #0]
 800e57e:	fab2 f282 	clz	r2, r2
 800e582:	b2d2      	uxtb	r2, r2
 800e584:	f042 0220 	orr.w	r2, r2, #32
 800e588:	b2d2      	uxtb	r2, r2
 800e58a:	f002 021f 	and.w	r2, r2, #31
 800e58e:	2101      	movs	r1, #1
 800e590:	fa01 f202 	lsl.w	r2, r1, r2
 800e594:	4013      	ands	r3, r2
 800e596:	2b00      	cmp	r3, #0
 800e598:	d182      	bne.n	800e4a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e59a:	4b88      	ldr	r3, [pc, #544]	; (800e7bc <HAL_RCC_OscConfig+0xf78>)
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800e5a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e5a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e5ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e5b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6a1b      	ldr	r3, [r3, #32]
 800e5ba:	430b      	orrs	r3, r1
 800e5bc:	497f      	ldr	r1, [pc, #508]	; (800e7bc <HAL_RCC_OscConfig+0xf78>)
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	604b      	str	r3, [r1, #4]
 800e5c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e5c6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800e5ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e5ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e5d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e5d4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	fa93 f2a3 	rbit	r2, r3
 800e5de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e5e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e5e6:	601a      	str	r2, [r3, #0]
  return result;
 800e5e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e5ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e5f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e5f2:	fab3 f383 	clz	r3, r3
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800e5fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	461a      	mov	r2, r3
 800e604:	2301      	movs	r3, #1
 800e606:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e608:	f7fa f8b8 	bl	800877c <HAL_GetTick>
 800e60c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800e610:	e009      	b.n	800e626 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e612:	f7fa f8b3 	bl	800877c <HAL_GetTick>
 800e616:	4602      	mov	r2, r0
 800e618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e61c:	1ad3      	subs	r3, r2, r3
 800e61e:	2b02      	cmp	r3, #2
 800e620:	d901      	bls.n	800e626 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800e622:	2303      	movs	r3, #3
 800e624:	e144      	b.n	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800e626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e62a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e62e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e638:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	fa93 f2a3 	rbit	r2, r3
 800e642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e646:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800e64a:	601a      	str	r2, [r3, #0]
  return result;
 800e64c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e650:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800e654:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800e656:	fab3 f383 	clz	r3, r3
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	095b      	lsrs	r3, r3, #5
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	f043 0301 	orr.w	r3, r3, #1
 800e664:	b2db      	uxtb	r3, r3
 800e666:	2b01      	cmp	r3, #1
 800e668:	d102      	bne.n	800e670 <HAL_RCC_OscConfig+0xe2c>
 800e66a:	4b54      	ldr	r3, [pc, #336]	; (800e7bc <HAL_RCC_OscConfig+0xf78>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	e027      	b.n	800e6c0 <HAL_RCC_OscConfig+0xe7c>
 800e670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e674:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e67c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e67e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e682:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	fa93 f2a3 	rbit	r2, r3
 800e68c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e690:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e694:	601a      	str	r2, [r3, #0]
 800e696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e69a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800e69e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e6a2:	601a      	str	r2, [r3, #0]
 800e6a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e6a8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	fa93 f2a3 	rbit	r2, r3
 800e6b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e6b6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800e6ba:	601a      	str	r2, [r3, #0]
 800e6bc:	4b3f      	ldr	r3, [pc, #252]	; (800e7bc <HAL_RCC_OscConfig+0xf78>)
 800e6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e6c4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800e6c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800e6cc:	6011      	str	r1, [r2, #0]
 800e6ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e6d2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800e6d6:	6812      	ldr	r2, [r2, #0]
 800e6d8:	fa92 f1a2 	rbit	r1, r2
 800e6dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e6e0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800e6e4:	6011      	str	r1, [r2, #0]
  return result;
 800e6e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e6ea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800e6ee:	6812      	ldr	r2, [r2, #0]
 800e6f0:	fab2 f282 	clz	r2, r2
 800e6f4:	b2d2      	uxtb	r2, r2
 800e6f6:	f042 0220 	orr.w	r2, r2, #32
 800e6fa:	b2d2      	uxtb	r2, r2
 800e6fc:	f002 021f 	and.w	r2, r2, #31
 800e700:	2101      	movs	r1, #1
 800e702:	fa01 f202 	lsl.w	r2, r1, r2
 800e706:	4013      	ands	r3, r2
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d082      	beq.n	800e612 <HAL_RCC_OscConfig+0xdce>
 800e70c:	e0cf      	b.n	800e8ae <HAL_RCC_OscConfig+0x106a>
 800e70e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e712:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800e716:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e71a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e71c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e720:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	fa93 f2a3 	rbit	r2, r3
 800e72a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e72e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800e732:	601a      	str	r2, [r3, #0]
  return result;
 800e734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e738:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800e73c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e73e:	fab3 f383 	clz	r3, r3
 800e742:	b2db      	uxtb	r3, r3
 800e744:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800e748:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	461a      	mov	r2, r3
 800e750:	2300      	movs	r3, #0
 800e752:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e754:	f7fa f812 	bl	800877c <HAL_GetTick>
 800e758:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e75c:	e009      	b.n	800e772 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e75e:	f7fa f80d 	bl	800877c <HAL_GetTick>
 800e762:	4602      	mov	r2, r0
 800e764:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e768:	1ad3      	subs	r3, r2, r3
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d901      	bls.n	800e772 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800e76e:	2303      	movs	r3, #3
 800e770:	e09e      	b.n	800e8b0 <HAL_RCC_OscConfig+0x106c>
 800e772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e776:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800e77a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e77e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e784:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	fa93 f2a3 	rbit	r2, r3
 800e78e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e792:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800e796:	601a      	str	r2, [r3, #0]
  return result;
 800e798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e79c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800e7a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e7a2:	fab3 f383 	clz	r3, r3
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	095b      	lsrs	r3, r3, #5
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	f043 0301 	orr.w	r3, r3, #1
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d104      	bne.n	800e7c0 <HAL_RCC_OscConfig+0xf7c>
 800e7b6:	4b01      	ldr	r3, [pc, #4]	; (800e7bc <HAL_RCC_OscConfig+0xf78>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	e029      	b.n	800e810 <HAL_RCC_OscConfig+0xfcc>
 800e7bc:	40021000 	.word	0x40021000
 800e7c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e7c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e7c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e7cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e7ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e7d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	fa93 f2a3 	rbit	r2, r3
 800e7dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e7e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e7e4:	601a      	str	r2, [r3, #0]
 800e7e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e7ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800e7ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e7f8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	fa93 f2a3 	rbit	r2, r3
 800e802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e806:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800e80a:	601a      	str	r2, [r3, #0]
 800e80c:	4b2b      	ldr	r3, [pc, #172]	; (800e8bc <HAL_RCC_OscConfig+0x1078>)
 800e80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e814:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800e818:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800e81c:	6011      	str	r1, [r2, #0]
 800e81e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e822:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800e826:	6812      	ldr	r2, [r2, #0]
 800e828:	fa92 f1a2 	rbit	r1, r2
 800e82c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e830:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800e834:	6011      	str	r1, [r2, #0]
  return result;
 800e836:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e83a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800e83e:	6812      	ldr	r2, [r2, #0]
 800e840:	fab2 f282 	clz	r2, r2
 800e844:	b2d2      	uxtb	r2, r2
 800e846:	f042 0220 	orr.w	r2, r2, #32
 800e84a:	b2d2      	uxtb	r2, r2
 800e84c:	f002 021f 	and.w	r2, r2, #31
 800e850:	2101      	movs	r1, #1
 800e852:	fa01 f202 	lsl.w	r2, r1, r2
 800e856:	4013      	ands	r3, r2
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d180      	bne.n	800e75e <HAL_RCC_OscConfig+0xf1a>
 800e85c:	e027      	b.n	800e8ae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e85e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	69db      	ldr	r3, [r3, #28]
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d101      	bne.n	800e872 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800e86e:	2301      	movs	r3, #1
 800e870:	e01e      	b.n	800e8b0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800e872:	4b12      	ldr	r3, [pc, #72]	; (800e8bc <HAL_RCC_OscConfig+0x1078>)
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800e87a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e87e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800e882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	6a1b      	ldr	r3, [r3, #32]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d10b      	bne.n	800e8aa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800e892:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800e89a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e89e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d001      	beq.n	800e8ae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e000      	b.n	800e8b0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	40021000 	.word	0x40021000

0800e8c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b09e      	sub	sp, #120	; 0x78
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d101      	bne.n	800e8d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e162      	b.n	800eb9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e8d8:	4b90      	ldr	r3, [pc, #576]	; (800eb1c <HAL_RCC_ClockConfig+0x25c>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f003 0307 	and.w	r3, r3, #7
 800e8e0:	683a      	ldr	r2, [r7, #0]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d910      	bls.n	800e908 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e8e6:	4b8d      	ldr	r3, [pc, #564]	; (800eb1c <HAL_RCC_ClockConfig+0x25c>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f023 0207 	bic.w	r2, r3, #7
 800e8ee:	498b      	ldr	r1, [pc, #556]	; (800eb1c <HAL_RCC_ClockConfig+0x25c>)
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e8f6:	4b89      	ldr	r3, [pc, #548]	; (800eb1c <HAL_RCC_ClockConfig+0x25c>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f003 0307 	and.w	r3, r3, #7
 800e8fe:	683a      	ldr	r2, [r7, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d001      	beq.n	800e908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e904:	2301      	movs	r3, #1
 800e906:	e14a      	b.n	800eb9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f003 0302 	and.w	r3, r3, #2
 800e910:	2b00      	cmp	r3, #0
 800e912:	d008      	beq.n	800e926 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e914:	4b82      	ldr	r3, [pc, #520]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	497f      	ldr	r1, [pc, #508]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800e922:	4313      	orrs	r3, r2
 800e924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f003 0301 	and.w	r3, r3, #1
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f000 80dc 	beq.w	800eaec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d13c      	bne.n	800e9b6 <HAL_RCC_ClockConfig+0xf6>
 800e93c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e940:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e944:	fa93 f3a3 	rbit	r3, r3
 800e948:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800e94a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e94c:	fab3 f383 	clz	r3, r3
 800e950:	b2db      	uxtb	r3, r3
 800e952:	095b      	lsrs	r3, r3, #5
 800e954:	b2db      	uxtb	r3, r3
 800e956:	f043 0301 	orr.w	r3, r3, #1
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d102      	bne.n	800e966 <HAL_RCC_ClockConfig+0xa6>
 800e960:	4b6f      	ldr	r3, [pc, #444]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	e00f      	b.n	800e986 <HAL_RCC_ClockConfig+0xc6>
 800e966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e96a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e96c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e96e:	fa93 f3a3 	rbit	r3, r3
 800e972:	667b      	str	r3, [r7, #100]	; 0x64
 800e974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e978:	663b      	str	r3, [r7, #96]	; 0x60
 800e97a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e97c:	fa93 f3a3 	rbit	r3, r3
 800e980:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e982:	4b67      	ldr	r3, [pc, #412]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800e984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e98a:	65ba      	str	r2, [r7, #88]	; 0x58
 800e98c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e98e:	fa92 f2a2 	rbit	r2, r2
 800e992:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800e994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e996:	fab2 f282 	clz	r2, r2
 800e99a:	b2d2      	uxtb	r2, r2
 800e99c:	f042 0220 	orr.w	r2, r2, #32
 800e9a0:	b2d2      	uxtb	r2, r2
 800e9a2:	f002 021f 	and.w	r2, r2, #31
 800e9a6:	2101      	movs	r1, #1
 800e9a8:	fa01 f202 	lsl.w	r2, r1, r2
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d17b      	bne.n	800eaaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e0f3      	b.n	800eb9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	2b02      	cmp	r3, #2
 800e9bc:	d13c      	bne.n	800ea38 <HAL_RCC_ClockConfig+0x178>
 800e9be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e9c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9c6:	fa93 f3a3 	rbit	r3, r3
 800e9ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800e9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e9ce:	fab3 f383 	clz	r3, r3
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	095b      	lsrs	r3, r3, #5
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	f043 0301 	orr.w	r3, r3, #1
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d102      	bne.n	800e9e8 <HAL_RCC_ClockConfig+0x128>
 800e9e2:	4b4f      	ldr	r3, [pc, #316]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	e00f      	b.n	800ea08 <HAL_RCC_ClockConfig+0x148>
 800e9e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e9ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9f0:	fa93 f3a3 	rbit	r3, r3
 800e9f4:	647b      	str	r3, [r7, #68]	; 0x44
 800e9f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e9fa:	643b      	str	r3, [r7, #64]	; 0x40
 800e9fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9fe:	fa93 f3a3 	rbit	r3, r3
 800ea02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea04:	4b46      	ldr	r3, [pc, #280]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800ea06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ea0c:	63ba      	str	r2, [r7, #56]	; 0x38
 800ea0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea10:	fa92 f2a2 	rbit	r2, r2
 800ea14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800ea16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea18:	fab2 f282 	clz	r2, r2
 800ea1c:	b2d2      	uxtb	r2, r2
 800ea1e:	f042 0220 	orr.w	r2, r2, #32
 800ea22:	b2d2      	uxtb	r2, r2
 800ea24:	f002 021f 	and.w	r2, r2, #31
 800ea28:	2101      	movs	r1, #1
 800ea2a:	fa01 f202 	lsl.w	r2, r1, r2
 800ea2e:	4013      	ands	r3, r2
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d13a      	bne.n	800eaaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800ea34:	2301      	movs	r3, #1
 800ea36:	e0b2      	b.n	800eb9e <HAL_RCC_ClockConfig+0x2de>
 800ea38:	2302      	movs	r3, #2
 800ea3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3e:	fa93 f3a3 	rbit	r3, r3
 800ea42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea46:	fab3 f383 	clz	r3, r3
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	095b      	lsrs	r3, r3, #5
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	f043 0301 	orr.w	r3, r3, #1
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d102      	bne.n	800ea60 <HAL_RCC_ClockConfig+0x1a0>
 800ea5a:	4b31      	ldr	r3, [pc, #196]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	e00d      	b.n	800ea7c <HAL_RCC_ClockConfig+0x1bc>
 800ea60:	2302      	movs	r3, #2
 800ea62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea66:	fa93 f3a3 	rbit	r3, r3
 800ea6a:	627b      	str	r3, [r7, #36]	; 0x24
 800ea6c:	2302      	movs	r3, #2
 800ea6e:	623b      	str	r3, [r7, #32]
 800ea70:	6a3b      	ldr	r3, [r7, #32]
 800ea72:	fa93 f3a3 	rbit	r3, r3
 800ea76:	61fb      	str	r3, [r7, #28]
 800ea78:	4b29      	ldr	r3, [pc, #164]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800ea7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea7c:	2202      	movs	r2, #2
 800ea7e:	61ba      	str	r2, [r7, #24]
 800ea80:	69ba      	ldr	r2, [r7, #24]
 800ea82:	fa92 f2a2 	rbit	r2, r2
 800ea86:	617a      	str	r2, [r7, #20]
  return result;
 800ea88:	697a      	ldr	r2, [r7, #20]
 800ea8a:	fab2 f282 	clz	r2, r2
 800ea8e:	b2d2      	uxtb	r2, r2
 800ea90:	f042 0220 	orr.w	r2, r2, #32
 800ea94:	b2d2      	uxtb	r2, r2
 800ea96:	f002 021f 	and.w	r2, r2, #31
 800ea9a:	2101      	movs	r1, #1
 800ea9c:	fa01 f202 	lsl.w	r2, r1, r2
 800eaa0:	4013      	ands	r3, r2
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d101      	bne.n	800eaaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e079      	b.n	800eb9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eaaa:	4b1d      	ldr	r3, [pc, #116]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	f023 0203 	bic.w	r2, r3, #3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	491a      	ldr	r1, [pc, #104]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800eab8:	4313      	orrs	r3, r2
 800eaba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800eabc:	f7f9 fe5e 	bl	800877c <HAL_GetTick>
 800eac0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eac2:	e00a      	b.n	800eada <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eac4:	f7f9 fe5a 	bl	800877c <HAL_GetTick>
 800eac8:	4602      	mov	r2, r0
 800eaca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eacc:	1ad3      	subs	r3, r2, r3
 800eace:	f241 3288 	movw	r2, #5000	; 0x1388
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d901      	bls.n	800eada <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800ead6:	2303      	movs	r3, #3
 800ead8:	e061      	b.n	800eb9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eada:	4b11      	ldr	r3, [pc, #68]	; (800eb20 <HAL_RCC_ClockConfig+0x260>)
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	f003 020c 	and.w	r2, r3, #12
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d1eb      	bne.n	800eac4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800eaec:	4b0b      	ldr	r3, [pc, #44]	; (800eb1c <HAL_RCC_ClockConfig+0x25c>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f003 0307 	and.w	r3, r3, #7
 800eaf4:	683a      	ldr	r2, [r7, #0]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d214      	bcs.n	800eb24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eafa:	4b08      	ldr	r3, [pc, #32]	; (800eb1c <HAL_RCC_ClockConfig+0x25c>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f023 0207 	bic.w	r2, r3, #7
 800eb02:	4906      	ldr	r1, [pc, #24]	; (800eb1c <HAL_RCC_ClockConfig+0x25c>)
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	4313      	orrs	r3, r2
 800eb08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb0a:	4b04      	ldr	r3, [pc, #16]	; (800eb1c <HAL_RCC_ClockConfig+0x25c>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f003 0307 	and.w	r3, r3, #7
 800eb12:	683a      	ldr	r2, [r7, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d005      	beq.n	800eb24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e040      	b.n	800eb9e <HAL_RCC_ClockConfig+0x2de>
 800eb1c:	40022000 	.word	0x40022000
 800eb20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f003 0304 	and.w	r3, r3, #4
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d008      	beq.n	800eb42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eb30:	4b1d      	ldr	r3, [pc, #116]	; (800eba8 <HAL_RCC_ClockConfig+0x2e8>)
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	491a      	ldr	r1, [pc, #104]	; (800eba8 <HAL_RCC_ClockConfig+0x2e8>)
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f003 0308 	and.w	r3, r3, #8
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d009      	beq.n	800eb62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800eb4e:	4b16      	ldr	r3, [pc, #88]	; (800eba8 <HAL_RCC_ClockConfig+0x2e8>)
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	691b      	ldr	r3, [r3, #16]
 800eb5a:	00db      	lsls	r3, r3, #3
 800eb5c:	4912      	ldr	r1, [pc, #72]	; (800eba8 <HAL_RCC_ClockConfig+0x2e8>)
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800eb62:	f000 f85b 	bl	800ec1c <HAL_RCC_GetSysClockFreq>
 800eb66:	4601      	mov	r1, r0
 800eb68:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <HAL_RCC_ClockConfig+0x2e8>)
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb70:	22f0      	movs	r2, #240	; 0xf0
 800eb72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eb74:	693a      	ldr	r2, [r7, #16]
 800eb76:	fa92 f2a2 	rbit	r2, r2
 800eb7a:	60fa      	str	r2, [r7, #12]
  return result;
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	fab2 f282 	clz	r2, r2
 800eb82:	b2d2      	uxtb	r2, r2
 800eb84:	40d3      	lsrs	r3, r2
 800eb86:	4a09      	ldr	r2, [pc, #36]	; (800ebac <HAL_RCC_ClockConfig+0x2ec>)
 800eb88:	5cd3      	ldrb	r3, [r2, r3]
 800eb8a:	fa21 f303 	lsr.w	r3, r1, r3
 800eb8e:	4a08      	ldr	r2, [pc, #32]	; (800ebb0 <HAL_RCC_ClockConfig+0x2f0>)
 800eb90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800eb92:	4b08      	ldr	r3, [pc, #32]	; (800ebb4 <HAL_RCC_ClockConfig+0x2f4>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7f7 fdf8 	bl	800678c <HAL_InitTick>
  
  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3778      	adds	r7, #120	; 0x78
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	40021000 	.word	0x40021000
 800ebac:	08017c14 	.word	0x08017c14
 800ebb0:	20000010 	.word	0x20000010
 800ebb4:	20000014 	.word	0x20000014

0800ebb8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b08a      	sub	sp, #40	; 0x28
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800ebc4:	2302      	movs	r3, #2
 800ebc6:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800ebc8:	2303      	movs	r3, #3
 800ebca:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800ebd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebd4:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800ebda:	4b0f      	ldr	r3, [pc, #60]	; (800ec18 <HAL_RCC_MCOConfig+0x60>)
 800ebdc:	695b      	ldr	r3, [r3, #20]
 800ebde:	4a0e      	ldr	r2, [pc, #56]	; (800ec18 <HAL_RCC_MCOConfig+0x60>)
 800ebe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebe4:	6153      	str	r3, [r2, #20]
 800ebe6:	4b0c      	ldr	r3, [pc, #48]	; (800ec18 <HAL_RCC_MCOConfig+0x60>)
 800ebe8:	695b      	ldr	r3, [r3, #20]
 800ebea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebee:	613b      	str	r3, [r7, #16]
 800ebf0:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800ebf2:	f107 0314 	add.w	r3, r7, #20
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ebfc:	f7fb ffbe 	bl	800ab7c <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800ec00:	4b05      	ldr	r3, [pc, #20]	; (800ec18 <HAL_RCC_MCOConfig+0x60>)
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ec08:	4903      	ldr	r1, [pc, #12]	; (800ec18 <HAL_RCC_MCOConfig+0x60>)
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	604b      	str	r3, [r1, #4]
}
 800ec10:	bf00      	nop
 800ec12:	3728      	adds	r7, #40	; 0x28
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	40021000 	.word	0x40021000

0800ec1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b08b      	sub	sp, #44	; 0x2c
 800ec20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ec22:	2300      	movs	r3, #0
 800ec24:	61fb      	str	r3, [r7, #28]
 800ec26:	2300      	movs	r3, #0
 800ec28:	61bb      	str	r3, [r7, #24]
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ec2e:	2300      	movs	r3, #0
 800ec30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800ec32:	2300      	movs	r3, #0
 800ec34:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800ec36:	4b29      	ldr	r3, [pc, #164]	; (800ecdc <HAL_RCC_GetSysClockFreq+0xc0>)
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	f003 030c 	and.w	r3, r3, #12
 800ec42:	2b04      	cmp	r3, #4
 800ec44:	d002      	beq.n	800ec4c <HAL_RCC_GetSysClockFreq+0x30>
 800ec46:	2b08      	cmp	r3, #8
 800ec48:	d003      	beq.n	800ec52 <HAL_RCC_GetSysClockFreq+0x36>
 800ec4a:	e03c      	b.n	800ecc6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ec4c:	4b24      	ldr	r3, [pc, #144]	; (800ece0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800ec4e:	623b      	str	r3, [r7, #32]
      break;
 800ec50:	e03c      	b.n	800eccc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800ec58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800ec5c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ec5e:	68ba      	ldr	r2, [r7, #8]
 800ec60:	fa92 f2a2 	rbit	r2, r2
 800ec64:	607a      	str	r2, [r7, #4]
  return result;
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	fab2 f282 	clz	r2, r2
 800ec6c:	b2d2      	uxtb	r2, r2
 800ec6e:	40d3      	lsrs	r3, r2
 800ec70:	4a1c      	ldr	r2, [pc, #112]	; (800ece4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800ec72:	5cd3      	ldrb	r3, [r2, r3]
 800ec74:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800ec76:	4b19      	ldr	r3, [pc, #100]	; (800ecdc <HAL_RCC_GetSysClockFreq+0xc0>)
 800ec78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7a:	f003 030f 	and.w	r3, r3, #15
 800ec7e:	220f      	movs	r2, #15
 800ec80:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	fa92 f2a2 	rbit	r2, r2
 800ec88:	60fa      	str	r2, [r7, #12]
  return result;
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	fab2 f282 	clz	r2, r2
 800ec90:	b2d2      	uxtb	r2, r2
 800ec92:	40d3      	lsrs	r3, r2
 800ec94:	4a14      	ldr	r2, [pc, #80]	; (800ece8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ec96:	5cd3      	ldrb	r3, [r2, r3]
 800ec98:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d008      	beq.n	800ecb6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800eca4:	4a0e      	ldr	r2, [pc, #56]	; (800ece0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	fbb2 f2f3 	udiv	r2, r2, r3
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	fb02 f303 	mul.w	r3, r2, r3
 800ecb2:	627b      	str	r3, [r7, #36]	; 0x24
 800ecb4:	e004      	b.n	800ecc0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	4a0c      	ldr	r2, [pc, #48]	; (800ecec <HAL_RCC_GetSysClockFreq+0xd0>)
 800ecba:	fb02 f303 	mul.w	r3, r2, r3
 800ecbe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800ecc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc2:	623b      	str	r3, [r7, #32]
      break;
 800ecc4:	e002      	b.n	800eccc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ecc6:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800ecc8:	623b      	str	r3, [r7, #32]
      break;
 800ecca:	bf00      	nop
    }
  }
  return sysclockfreq;
 800eccc:	6a3b      	ldr	r3, [r7, #32]
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	372c      	adds	r7, #44	; 0x2c
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	40021000 	.word	0x40021000
 800ece0:	007a1200 	.word	0x007a1200
 800ece4:	08018144 	.word	0x08018144
 800ece8:	08018154 	.word	0x08018154
 800ecec:	003d0900 	.word	0x003d0900

0800ecf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ecf4:	4b03      	ldr	r3, [pc, #12]	; (800ed04 <HAL_RCC_GetHCLKFreq+0x14>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop
 800ed04:	20000010 	.word	0x20000010

0800ed08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800ed0e:	f7ff ffef 	bl	800ecf0 <HAL_RCC_GetHCLKFreq>
 800ed12:	4601      	mov	r1, r0
 800ed14:	4b0b      	ldr	r3, [pc, #44]	; (800ed44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800ed20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	fa92 f2a2 	rbit	r2, r2
 800ed28:	603a      	str	r2, [r7, #0]
  return result;
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	fab2 f282 	clz	r2, r2
 800ed30:	b2d2      	uxtb	r2, r2
 800ed32:	40d3      	lsrs	r3, r2
 800ed34:	4a04      	ldr	r2, [pc, #16]	; (800ed48 <HAL_RCC_GetPCLK1Freq+0x40>)
 800ed36:	5cd3      	ldrb	r3, [r2, r3]
 800ed38:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	40021000 	.word	0x40021000
 800ed48:	08017c24 	.word	0x08017c24

0800ed4c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	220f      	movs	r2, #15
 800ed5a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ed5c:	4b12      	ldr	r3, [pc, #72]	; (800eda8 <HAL_RCC_GetClockConfig+0x5c>)
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	f003 0203 	and.w	r2, r3, #3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800ed68:	4b0f      	ldr	r3, [pc, #60]	; (800eda8 <HAL_RCC_GetClockConfig+0x5c>)
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800ed74:	4b0c      	ldr	r3, [pc, #48]	; (800eda8 <HAL_RCC_GetClockConfig+0x5c>)
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ed80:	4b09      	ldr	r3, [pc, #36]	; (800eda8 <HAL_RCC_GetClockConfig+0x5c>)
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	08db      	lsrs	r3, r3, #3
 800ed86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800ed8e:	4b07      	ldr	r3, [pc, #28]	; (800edac <HAL_RCC_GetClockConfig+0x60>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f003 0207 	and.w	r2, r3, #7
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	601a      	str	r2, [r3, #0]
}
 800ed9a:	bf00      	nop
 800ed9c:	370c      	adds	r7, #12
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	40021000 	.word	0x40021000
 800edac:	40022000 	.word	0x40022000

0800edb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b092      	sub	sp, #72	; 0x48
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800edb8:	2300      	movs	r3, #0
 800edba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800edbc:	2300      	movs	r3, #0
 800edbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800edc0:	2300      	movs	r3, #0
 800edc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 80d4 	beq.w	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800edd4:	4b4e      	ldr	r3, [pc, #312]	; (800ef10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800edd6:	69db      	ldr	r3, [r3, #28]
 800edd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d10e      	bne.n	800edfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ede0:	4b4b      	ldr	r3, [pc, #300]	; (800ef10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ede2:	69db      	ldr	r3, [r3, #28]
 800ede4:	4a4a      	ldr	r2, [pc, #296]	; (800ef10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ede6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800edea:	61d3      	str	r3, [r2, #28]
 800edec:	4b48      	ldr	r3, [pc, #288]	; (800ef10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800edee:	69db      	ldr	r3, [r3, #28]
 800edf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edf4:	60bb      	str	r3, [r7, #8]
 800edf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800edf8:	2301      	movs	r3, #1
 800edfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800edfe:	4b45      	ldr	r3, [pc, #276]	; (800ef14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d118      	bne.n	800ee3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ee0a:	4b42      	ldr	r3, [pc, #264]	; (800ef14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4a41      	ldr	r2, [pc, #260]	; (800ef14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ee10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ee16:	f7f9 fcb1 	bl	800877c <HAL_GetTick>
 800ee1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee1c:	e008      	b.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee1e:	f7f9 fcad 	bl	800877c <HAL_GetTick>
 800ee22:	4602      	mov	r2, r0
 800ee24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	2b64      	cmp	r3, #100	; 0x64
 800ee2a:	d901      	bls.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800ee2c:	2303      	movs	r3, #3
 800ee2e:	e169      	b.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee30:	4b38      	ldr	r3, [pc, #224]	; (800ef14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d0f0      	beq.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ee3c:	4b34      	ldr	r3, [pc, #208]	; (800ef10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ee3e:	6a1b      	ldr	r3, [r3, #32]
 800ee40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ee46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f000 8084 	beq.w	800ef56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d07c      	beq.n	800ef56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ee5c:	4b2c      	ldr	r3, [pc, #176]	; (800ef10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ee5e:	6a1b      	ldr	r3, [r3, #32]
 800ee60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ee6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ee6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6e:	fa93 f3a3 	rbit	r3, r3
 800ee72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800ee74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ee76:	fab3 f383 	clz	r3, r3
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	4b26      	ldr	r3, [pc, #152]	; (800ef18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ee80:	4413      	add	r3, r2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	461a      	mov	r2, r3
 800ee86:	2301      	movs	r3, #1
 800ee88:	6013      	str	r3, [r2, #0]
 800ee8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ee8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ee90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee92:	fa93 f3a3 	rbit	r3, r3
 800ee96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800ee98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ee9a:	fab3 f383 	clz	r3, r3
 800ee9e:	b2db      	uxtb	r3, r3
 800eea0:	461a      	mov	r2, r3
 800eea2:	4b1d      	ldr	r3, [pc, #116]	; (800ef18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800eea4:	4413      	add	r3, r2
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	461a      	mov	r2, r3
 800eeaa:	2300      	movs	r3, #0
 800eeac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800eeae:	4a18      	ldr	r2, [pc, #96]	; (800ef10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800eeb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800eeb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb6:	f003 0301 	and.w	r3, r3, #1
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d04b      	beq.n	800ef56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eebe:	f7f9 fc5d 	bl	800877c <HAL_GetTick>
 800eec2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eec4:	e00a      	b.n	800eedc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eec6:	f7f9 fc59 	bl	800877c <HAL_GetTick>
 800eeca:	4602      	mov	r2, r0
 800eecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eece:	1ad3      	subs	r3, r2, r3
 800eed0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d901      	bls.n	800eedc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800eed8:	2303      	movs	r3, #3
 800eeda:	e113      	b.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800eedc:	2302      	movs	r3, #2
 800eede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee2:	fa93 f3a3 	rbit	r3, r3
 800eee6:	627b      	str	r3, [r7, #36]	; 0x24
 800eee8:	2302      	movs	r3, #2
 800eeea:	623b      	str	r3, [r7, #32]
 800eeec:	6a3b      	ldr	r3, [r7, #32]
 800eeee:	fa93 f3a3 	rbit	r3, r3
 800eef2:	61fb      	str	r3, [r7, #28]
  return result;
 800eef4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eef6:	fab3 f383 	clz	r3, r3
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	095b      	lsrs	r3, r3, #5
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	f043 0302 	orr.w	r3, r3, #2
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d108      	bne.n	800ef1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800ef0a:	4b01      	ldr	r3, [pc, #4]	; (800ef10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	e00d      	b.n	800ef2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800ef10:	40021000 	.word	0x40021000
 800ef14:	40007000 	.word	0x40007000
 800ef18:	10908100 	.word	0x10908100
 800ef1c:	2302      	movs	r3, #2
 800ef1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	fa93 f3a3 	rbit	r3, r3
 800ef26:	617b      	str	r3, [r7, #20]
 800ef28:	4b78      	ldr	r3, [pc, #480]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ef2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef2c:	2202      	movs	r2, #2
 800ef2e:	613a      	str	r2, [r7, #16]
 800ef30:	693a      	ldr	r2, [r7, #16]
 800ef32:	fa92 f2a2 	rbit	r2, r2
 800ef36:	60fa      	str	r2, [r7, #12]
  return result;
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	fab2 f282 	clz	r2, r2
 800ef3e:	b2d2      	uxtb	r2, r2
 800ef40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef44:	b2d2      	uxtb	r2, r2
 800ef46:	f002 021f 	and.w	r2, r2, #31
 800ef4a:	2101      	movs	r1, #1
 800ef4c:	fa01 f202 	lsl.w	r2, r1, r2
 800ef50:	4013      	ands	r3, r2
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d0b7      	beq.n	800eec6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800ef56:	4b6d      	ldr	r3, [pc, #436]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ef58:	6a1b      	ldr	r3, [r3, #32]
 800ef5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	496a      	ldr	r1, [pc, #424]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ef64:	4313      	orrs	r3, r2
 800ef66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ef68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d105      	bne.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ef70:	4b66      	ldr	r3, [pc, #408]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ef72:	69db      	ldr	r3, [r3, #28]
 800ef74:	4a65      	ldr	r2, [pc, #404]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ef76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ef7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f003 0301 	and.w	r3, r3, #1
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d008      	beq.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ef88:	4b60      	ldr	r3, [pc, #384]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ef8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef8c:	f023 0203 	bic.w	r2, r3, #3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	495d      	ldr	r1, [pc, #372]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ef96:	4313      	orrs	r3, r2
 800ef98:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f003 0302 	and.w	r3, r3, #2
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d008      	beq.n	800efb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800efa6:	4b59      	ldr	r3, [pc, #356]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800efa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	4956      	ldr	r1, [pc, #344]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800efb4:	4313      	orrs	r3, r2
 800efb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f003 0304 	and.w	r3, r3, #4
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d008      	beq.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800efc4:	4b51      	ldr	r3, [pc, #324]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800efc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	691b      	ldr	r3, [r3, #16]
 800efd0:	494e      	ldr	r1, [pc, #312]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800efd2:	4313      	orrs	r3, r2
 800efd4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f003 0320 	and.w	r3, r3, #32
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d008      	beq.n	800eff4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800efe2:	4b4a      	ldr	r3, [pc, #296]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800efe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efe6:	f023 0210 	bic.w	r2, r3, #16
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	69db      	ldr	r3, [r3, #28]
 800efee:	4947      	ldr	r1, [pc, #284]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800eff0:	4313      	orrs	r3, r2
 800eff2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800effc:	2b00      	cmp	r3, #0
 800effe:	d008      	beq.n	800f012 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800f000:	4b42      	ldr	r3, [pc, #264]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f00c:	493f      	ldr	r1, [pc, #252]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f00e:	4313      	orrs	r3, r2
 800f010:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d008      	beq.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f01e:	4b3b      	ldr	r3, [pc, #236]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f022:	f023 0220 	bic.w	r2, r3, #32
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6a1b      	ldr	r3, [r3, #32]
 800f02a:	4938      	ldr	r1, [pc, #224]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f02c:	4313      	orrs	r3, r2
 800f02e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f003 0308 	and.w	r3, r3, #8
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d008      	beq.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f03c:	4b33      	ldr	r3, [pc, #204]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f040:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	695b      	ldr	r3, [r3, #20]
 800f048:	4930      	ldr	r1, [pc, #192]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f04a:	4313      	orrs	r3, r2
 800f04c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f003 0310 	and.w	r3, r3, #16
 800f056:	2b00      	cmp	r3, #0
 800f058:	d008      	beq.n	800f06c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f05a:	4b2c      	ldr	r3, [pc, #176]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f05e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	699b      	ldr	r3, [r3, #24]
 800f066:	4929      	ldr	r1, [pc, #164]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f068:	4313      	orrs	r3, r2
 800f06a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f074:	2b00      	cmp	r3, #0
 800f076:	d008      	beq.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f078:	4b24      	ldr	r3, [pc, #144]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f084:	4921      	ldr	r1, [pc, #132]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f086:	4313      	orrs	r3, r2
 800f088:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f092:	2b00      	cmp	r3, #0
 800f094:	d008      	beq.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800f096:	4b1d      	ldr	r3, [pc, #116]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f09a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a2:	491a      	ldr	r1, [pc, #104]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0a4:	4313      	orrs	r3, r2
 800f0a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d008      	beq.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800f0b4:	4b15      	ldr	r3, [pc, #84]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c0:	4912      	ldr	r1, [pc, #72]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d008      	beq.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800f0d2:	4b0e      	ldr	r3, [pc, #56]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0de:	490b      	ldr	r1, [pc, #44]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d008      	beq.n	800f102 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800f0f0:	4b06      	ldr	r3, [pc, #24]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0fc:	4903      	ldr	r1, [pc, #12]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0fe:	4313      	orrs	r3, r2
 800f100:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3748      	adds	r7, #72	; 0x48
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	40021000 	.word	0x40021000

0800f110 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d101      	bne.n	800f122 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800f11e:	2301      	movs	r3, #1
 800f120:	e083      	b.n	800f22a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	7f5b      	ldrb	r3, [r3, #29]
 800f126:	b2db      	uxtb	r3, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d105      	bne.n	800f138 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f7f7 fac2 	bl	80066bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2202      	movs	r2, #2
 800f13c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	22ca      	movs	r2, #202	; 0xca
 800f144:	625a      	str	r2, [r3, #36]	; 0x24
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2253      	movs	r2, #83	; 0x53
 800f14c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 faa8 	bl	800f6a4 <RTC_EnterInitMode>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d008      	beq.n	800f16c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	22ff      	movs	r2, #255	; 0xff
 800f160:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2204      	movs	r2, #4
 800f166:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800f168:	2301      	movs	r3, #1
 800f16a:	e05e      	b.n	800f22a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	6812      	ldr	r2, [r2, #0]
 800f176:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f17a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f17e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6899      	ldr	r1, [r3, #8]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685a      	ldr	r2, [r3, #4]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	691b      	ldr	r3, [r3, #16]
 800f18e:	431a      	orrs	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	695b      	ldr	r3, [r3, #20]
 800f194:	431a      	orrs	r2, r3
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	430a      	orrs	r2, r1
 800f19c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	68d2      	ldr	r2, [r2, #12]
 800f1a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6919      	ldr	r1, [r3, #16]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	689b      	ldr	r3, [r3, #8]
 800f1b2:	041a      	lsls	r2, r3, #16
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	430a      	orrs	r2, r1
 800f1ba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	68da      	ldr	r2, [r3, #12]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f1ca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	689b      	ldr	r3, [r3, #8]
 800f1d2:	f003 0320 	and.w	r3, r3, #32
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10e      	bne.n	800f1f8 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fa3a 	bl	800f654 <HAL_RTC_WaitForSynchro>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d008      	beq.n	800f1f8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	22ff      	movs	r2, #255	; 0xff
 800f1ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2204      	movs	r2, #4
 800f1f2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	e018      	b.n	800f22a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f206:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	699a      	ldr	r2, [r3, #24]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	430a      	orrs	r2, r1
 800f218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	22ff      	movs	r2, #255	; 0xff
 800f220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2201      	movs	r2, #1
 800f226:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800f228:	2300      	movs	r3, #0
  }
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f232:	b590      	push	{r4, r7, lr}
 800f234:	b087      	sub	sp, #28
 800f236:	af00      	add	r7, sp, #0
 800f238:	60f8      	str	r0, [r7, #12]
 800f23a:	60b9      	str	r1, [r7, #8]
 800f23c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f23e:	2300      	movs	r3, #0
 800f240:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	7f1b      	ldrb	r3, [r3, #28]
 800f246:	2b01      	cmp	r3, #1
 800f248:	d101      	bne.n	800f24e <HAL_RTC_SetTime+0x1c>
 800f24a:	2302      	movs	r3, #2
 800f24c:	e0aa      	b.n	800f3a4 <HAL_RTC_SetTime+0x172>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2201      	movs	r2, #1
 800f252:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2202      	movs	r2, #2
 800f258:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d126      	bne.n	800f2ae <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d102      	bne.n	800f274 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	2200      	movs	r2, #0
 800f272:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 fa3f 	bl	800f6fc <RTC_ByteToBcd2>
 800f27e:	4603      	mov	r3, r0
 800f280:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	785b      	ldrb	r3, [r3, #1]
 800f286:	4618      	mov	r0, r3
 800f288:	f000 fa38 	bl	800f6fc <RTC_ByteToBcd2>
 800f28c:	4603      	mov	r3, r0
 800f28e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f290:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	789b      	ldrb	r3, [r3, #2]
 800f296:	4618      	mov	r0, r3
 800f298:	f000 fa30 	bl	800f6fc <RTC_ByteToBcd2>
 800f29c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f29e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	78db      	ldrb	r3, [r3, #3]
 800f2a6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	617b      	str	r3, [r7, #20]
 800f2ac:	e018      	b.n	800f2e0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d102      	bne.n	800f2c2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	785b      	ldrb	r3, [r3, #1]
 800f2cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f2ce:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f2d4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	78db      	ldrb	r3, [r3, #3]
 800f2da:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	22ca      	movs	r2, #202	; 0xca
 800f2e6:	625a      	str	r2, [r3, #36]	; 0x24
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2253      	movs	r2, #83	; 0x53
 800f2ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f000 f9d7 	bl	800f6a4 <RTC_EnterInitMode>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00b      	beq.n	800f314 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	22ff      	movs	r2, #255	; 0xff
 800f302:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2204      	movs	r2, #4
 800f308:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2200      	movs	r2, #0
 800f30e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f310:	2301      	movs	r3, #1
 800f312:	e047      	b.n	800f3a4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681a      	ldr	r2, [r3, #0]
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f31e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f322:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	689a      	ldr	r2, [r3, #8]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f332:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	6899      	ldr	r1, [r3, #8]
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	68da      	ldr	r2, [r3, #12]
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	691b      	ldr	r3, [r3, #16]
 800f342:	431a      	orrs	r2, r3
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	430a      	orrs	r2, r1
 800f34a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68da      	ldr	r2, [r3, #12]
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f35a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	689b      	ldr	r3, [r3, #8]
 800f362:	f003 0320 	and.w	r3, r3, #32
 800f366:	2b00      	cmp	r3, #0
 800f368:	d111      	bne.n	800f38e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f000 f972 	bl	800f654 <HAL_RTC_WaitForSynchro>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00b      	beq.n	800f38e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	22ff      	movs	r2, #255	; 0xff
 800f37c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2204      	movs	r2, #4
 800f382:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2200      	movs	r2, #0
 800f388:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f38a:	2301      	movs	r3, #1
 800f38c:	e00a      	b.n	800f3a4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	22ff      	movs	r2, #255	; 0xff
 800f394:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2201      	movs	r2, #1
 800f39a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800f3a2:	2300      	movs	r3, #0
  }
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	371c      	adds	r7, #28
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd90      	pop	{r4, r7, pc}

0800f3ac <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	691b      	ldr	r3, [r3, #16]
 800f3cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f3de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f3e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	0c1b      	lsrs	r3, r3, #16
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	0a1b      	lsrs	r3, r3, #8
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3fe:	b2da      	uxtb	r2, r3
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	b2db      	uxtb	r3, r3
 800f408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f40c:	b2da      	uxtb	r2, r3
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	0c1b      	lsrs	r3, r3, #16
 800f416:	b2db      	uxtb	r3, r3
 800f418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f41c:	b2da      	uxtb	r2, r3
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d11a      	bne.n	800f45e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	4618      	mov	r0, r3
 800f42e:	f000 f983 	bl	800f738 <RTC_Bcd2ToByte>
 800f432:	4603      	mov	r3, r0
 800f434:	461a      	mov	r2, r3
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	785b      	ldrb	r3, [r3, #1]
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 f97a 	bl	800f738 <RTC_Bcd2ToByte>
 800f444:	4603      	mov	r3, r0
 800f446:	461a      	mov	r2, r3
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	789b      	ldrb	r3, [r3, #2]
 800f450:	4618      	mov	r0, r3
 800f452:	f000 f971 	bl	800f738 <RTC_Bcd2ToByte>
 800f456:	4603      	mov	r3, r0
 800f458:	461a      	mov	r2, r3
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	3718      	adds	r7, #24
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f468:	b590      	push	{r4, r7, lr}
 800f46a:	b087      	sub	sp, #28
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800f474:	2300      	movs	r3, #0
 800f476:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	7f1b      	ldrb	r3, [r3, #28]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d101      	bne.n	800f484 <HAL_RTC_SetDate+0x1c>
 800f480:	2302      	movs	r3, #2
 800f482:	e094      	b.n	800f5ae <HAL_RTC_SetDate+0x146>
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2201      	movs	r2, #1
 800f488:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2202      	movs	r2, #2
 800f48e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d10e      	bne.n	800f4b4 <HAL_RTC_SetDate+0x4c>
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	785b      	ldrb	r3, [r3, #1]
 800f49a:	f003 0310 	and.w	r3, r3, #16
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d008      	beq.n	800f4b4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	785b      	ldrb	r3, [r3, #1]
 800f4a6:	f023 0310 	bic.w	r3, r3, #16
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	330a      	adds	r3, #10
 800f4ae:	b2da      	uxtb	r2, r3
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d11c      	bne.n	800f4f4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	78db      	ldrb	r3, [r3, #3]
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f000 f91c 	bl	800f6fc <RTC_ByteToBcd2>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	785b      	ldrb	r3, [r3, #1]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f000 f915 	bl	800f6fc <RTC_ByteToBcd2>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f4d6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	789b      	ldrb	r3, [r3, #2]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f000 f90d 	bl	800f6fc <RTC_ByteToBcd2>
 800f4e2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f4e4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	617b      	str	r3, [r7, #20]
 800f4f2:	e00e      	b.n	800f512 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	78db      	ldrb	r3, [r3, #3]
 800f4f8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	785b      	ldrb	r3, [r3, #1]
 800f4fe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f500:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800f506:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f50e:	4313      	orrs	r3, r2
 800f510:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	22ca      	movs	r2, #202	; 0xca
 800f518:	625a      	str	r2, [r3, #36]	; 0x24
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2253      	movs	r2, #83	; 0x53
 800f520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f522:	68f8      	ldr	r0, [r7, #12]
 800f524:	f000 f8be 	bl	800f6a4 <RTC_EnterInitMode>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d00b      	beq.n	800f546 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	22ff      	movs	r2, #255	; 0xff
 800f534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2204      	movs	r2, #4
 800f53a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2200      	movs	r2, #0
 800f540:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f542:	2301      	movs	r3, #1
 800f544:	e033      	b.n	800f5ae <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f550:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f554:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	68da      	ldr	r2, [r3, #12]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f564:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	f003 0320 	and.w	r3, r3, #32
 800f570:	2b00      	cmp	r3, #0
 800f572:	d111      	bne.n	800f598 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	f000 f86d 	bl	800f654 <HAL_RTC_WaitForSynchro>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d00b      	beq.n	800f598 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	22ff      	movs	r2, #255	; 0xff
 800f586:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2204      	movs	r2, #4
 800f58c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2200      	movs	r2, #0
 800f592:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f594:	2301      	movs	r3, #1
 800f596:	e00a      	b.n	800f5ae <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	22ff      	movs	r2, #255	; 0xff
 800f59e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800f5ac:	2300      	movs	r3, #0
  }
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	371c      	adds	r7, #28
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd90      	pop	{r4, r7, pc}

0800f5b6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b086      	sub	sp, #24
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	60f8      	str	r0, [r7, #12]
 800f5be:	60b9      	str	r1, [r7, #8]
 800f5c0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f5d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f5d4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	0c1b      	lsrs	r3, r3, #16
 800f5da:	b2da      	uxtb	r2, r3
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	0a1b      	lsrs	r3, r3, #8
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	f003 031f 	and.w	r3, r3, #31
 800f5ea:	b2da      	uxtb	r2, r3
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5f8:	b2da      	uxtb	r2, r3
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	0b5b      	lsrs	r3, r3, #13
 800f602:	b2db      	uxtb	r3, r3
 800f604:	f003 0307 	and.w	r3, r3, #7
 800f608:	b2da      	uxtb	r2, r3
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d11a      	bne.n	800f64a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	78db      	ldrb	r3, [r3, #3]
 800f618:	4618      	mov	r0, r3
 800f61a:	f000 f88d 	bl	800f738 <RTC_Bcd2ToByte>
 800f61e:	4603      	mov	r3, r0
 800f620:	461a      	mov	r2, r3
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	785b      	ldrb	r3, [r3, #1]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 f884 	bl	800f738 <RTC_Bcd2ToByte>
 800f630:	4603      	mov	r3, r0
 800f632:	461a      	mov	r2, r3
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	789b      	ldrb	r3, [r3, #2]
 800f63c:	4618      	mov	r0, r3
 800f63e:	f000 f87b 	bl	800f738 <RTC_Bcd2ToByte>
 800f642:	4603      	mov	r3, r0
 800f644:	461a      	mov	r2, r3
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f64a:	2300      	movs	r3, #0
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3718      	adds	r7, #24
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f65c:	2300      	movs	r3, #0
 800f65e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	68da      	ldr	r2, [r3, #12]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f66e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800f670:	f7f9 f884 	bl	800877c <HAL_GetTick>
 800f674:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f676:	e009      	b.n	800f68c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f678:	f7f9 f880 	bl	800877c <HAL_GetTick>
 800f67c:	4602      	mov	r2, r0
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f686:	d901      	bls.n	800f68c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800f688:	2303      	movs	r3, #3
 800f68a:	e007      	b.n	800f69c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	68db      	ldr	r3, [r3, #12]
 800f692:	f003 0320 	and.w	r3, r3, #32
 800f696:	2b00      	cmp	r3, #0
 800f698:	d0ee      	beq.n	800f678 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3710      	adds	r7, #16
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d119      	bne.n	800f6f2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f6c8:	f7f9 f858 	bl	800877c <HAL_GetTick>
 800f6cc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f6ce:	e009      	b.n	800f6e4 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f6d0:	f7f9 f854 	bl	800877c <HAL_GetTick>
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	1ad3      	subs	r3, r2, r3
 800f6da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f6de:	d901      	bls.n	800f6e4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800f6e0:	2303      	movs	r3, #3
 800f6e2:	e007      	b.n	800f6f4 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d0ee      	beq.n	800f6d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800f6f2:	2300      	movs	r3, #0
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	4603      	mov	r3, r0
 800f704:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800f706:	2300      	movs	r3, #0
 800f708:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800f70a:	e005      	b.n	800f718 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	3301      	adds	r3, #1
 800f710:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800f712:	79fb      	ldrb	r3, [r7, #7]
 800f714:	3b0a      	subs	r3, #10
 800f716:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800f718:	79fb      	ldrb	r3, [r7, #7]
 800f71a:	2b09      	cmp	r3, #9
 800f71c:	d8f6      	bhi.n	800f70c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	b2db      	uxtb	r3, r3
 800f722:	011b      	lsls	r3, r3, #4
 800f724:	b2da      	uxtb	r2, r3
 800f726:	79fb      	ldrb	r3, [r7, #7]
 800f728:	4313      	orrs	r3, r2
 800f72a:	b2db      	uxtb	r3, r3
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3714      	adds	r7, #20
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800f738:	b480      	push	{r7}
 800f73a:	b085      	sub	sp, #20
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	4603      	mov	r3, r0
 800f740:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800f742:	2300      	movs	r3, #0
 800f744:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800f746:	79fb      	ldrb	r3, [r7, #7]
 800f748:	091b      	lsrs	r3, r3, #4
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	461a      	mov	r2, r3
 800f74e:	4613      	mov	r3, r2
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	4413      	add	r3, r2
 800f754:	005b      	lsls	r3, r3, #1
 800f756:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 800f758:	79fb      	ldrb	r3, [r7, #7]
 800f75a:	f003 030f 	and.w	r3, r3, #15
 800f75e:	b2da      	uxtb	r2, r3
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	b2db      	uxtb	r3, r3
 800f764:	4413      	add	r3, r2
 800f766:	b2db      	uxtb	r3, r3
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3714      	adds	r7, #20
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr

0800f774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d101      	bne.n	800f786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f782:	2301      	movs	r3, #1
 800f784:	e09d      	b.n	800f8c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d108      	bne.n	800f7a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f796:	d009      	beq.n	800f7ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2200      	movs	r2, #0
 800f79c:	61da      	str	r2, [r3, #28]
 800f79e:	e005      	b.n	800f7ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d106      	bne.n	800f7cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7f6 ff9e 	bl	8006708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2202      	movs	r2, #2
 800f7d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f7ec:	d902      	bls.n	800f7f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	60fb      	str	r3, [r7, #12]
 800f7f2:	e002      	b.n	800f7fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f7f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	68db      	ldr	r3, [r3, #12]
 800f7fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800f802:	d007      	beq.n	800f814 <HAL_SPI_Init+0xa0>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f80c:	d002      	beq.n	800f814 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f824:	431a      	orrs	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	691b      	ldr	r3, [r3, #16]
 800f82a:	f003 0302 	and.w	r3, r3, #2
 800f82e:	431a      	orrs	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	695b      	ldr	r3, [r3, #20]
 800f834:	f003 0301 	and.w	r3, r3, #1
 800f838:	431a      	orrs	r2, r3
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	699b      	ldr	r3, [r3, #24]
 800f83e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f842:	431a      	orrs	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	69db      	ldr	r3, [r3, #28]
 800f848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f84c:	431a      	orrs	r2, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6a1b      	ldr	r3, [r3, #32]
 800f852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f856:	ea42 0103 	orr.w	r1, r2, r3
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f85e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	430a      	orrs	r2, r1
 800f868:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	699b      	ldr	r3, [r3, #24]
 800f86e:	0c1b      	lsrs	r3, r3, #16
 800f870:	f003 0204 	and.w	r2, r3, #4
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f878:	f003 0310 	and.w	r3, r3, #16
 800f87c:	431a      	orrs	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f882:	f003 0308 	and.w	r3, r3, #8
 800f886:	431a      	orrs	r2, r3
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f890:	ea42 0103 	orr.w	r1, r2, r3
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	430a      	orrs	r2, r1
 800f8a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	69da      	ldr	r2, [r3, #28]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f8b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800f8c0:	2300      	movs	r3, #0
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b082      	sub	sp, #8
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d101      	bne.n	800f8dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f8d8:	2301      	movs	r3, #1
 800f8da:	e049      	b.n	800f970 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d106      	bne.n	800f8f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f000 f841 	bl	800f978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2202      	movs	r2, #2
 800f8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	3304      	adds	r3, #4
 800f906:	4619      	mov	r1, r3
 800f908:	4610      	mov	r0, r2
 800f90a:	f000 f9f1 	bl	800fcf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2201      	movs	r2, #1
 800f912:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2201      	movs	r2, #1
 800f91a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2201      	movs	r2, #1
 800f922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2201      	movs	r2, #1
 800f92a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2201      	movs	r2, #1
 800f932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2201      	movs	r2, #1
 800f93a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2201      	movs	r2, #1
 800f942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2201      	movs	r2, #1
 800f94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2201      	movs	r2, #1
 800f952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2201      	movs	r2, #1
 800f95a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2201      	movs	r2, #1
 800f962:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2201      	movs	r2, #1
 800f96a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f96e:	2300      	movs	r3, #0
}
 800f970:	4618      	mov	r0, r3
 800f972:	3708      	adds	r7, #8
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b085      	sub	sp, #20
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d001      	beq.n	800f9a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	e04a      	b.n	800fa3a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2202      	movs	r2, #2
 800f9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	68da      	ldr	r2, [r3, #12]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f042 0201 	orr.w	r2, r2, #1
 800f9ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a21      	ldr	r2, [pc, #132]	; (800fa48 <HAL_TIM_Base_Start_IT+0xbc>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d018      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x6c>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9ce:	d013      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x6c>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a1d      	ldr	r2, [pc, #116]	; (800fa4c <HAL_TIM_Base_Start_IT+0xc0>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d00e      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x6c>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a1c      	ldr	r2, [pc, #112]	; (800fa50 <HAL_TIM_Base_Start_IT+0xc4>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d009      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x6c>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a1a      	ldr	r2, [pc, #104]	; (800fa54 <HAL_TIM_Base_Start_IT+0xc8>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d004      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x6c>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4a19      	ldr	r2, [pc, #100]	; (800fa58 <HAL_TIM_Base_Start_IT+0xcc>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d115      	bne.n	800fa24 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	689a      	ldr	r2, [r3, #8]
 800f9fe:	4b17      	ldr	r3, [pc, #92]	; (800fa5c <HAL_TIM_Base_Start_IT+0xd0>)
 800fa00:	4013      	ands	r3, r2
 800fa02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b06      	cmp	r3, #6
 800fa08:	d015      	beq.n	800fa36 <HAL_TIM_Base_Start_IT+0xaa>
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa10:	d011      	beq.n	800fa36 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f042 0201 	orr.w	r2, r2, #1
 800fa20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa22:	e008      	b.n	800fa36 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f042 0201 	orr.w	r2, r2, #1
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	e000      	b.n	800fa38 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3714      	adds	r7, #20
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	40012c00 	.word	0x40012c00
 800fa4c:	40000400 	.word	0x40000400
 800fa50:	40000800 	.word	0x40000800
 800fa54:	40013400 	.word	0x40013400
 800fa58:	40014000 	.word	0x40014000
 800fa5c:	00010007 	.word	0x00010007

0800fa60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	691b      	ldr	r3, [r3, #16]
 800fa6e:	f003 0302 	and.w	r3, r3, #2
 800fa72:	2b02      	cmp	r3, #2
 800fa74:	d122      	bne.n	800fabc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	68db      	ldr	r3, [r3, #12]
 800fa7c:	f003 0302 	and.w	r3, r3, #2
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	d11b      	bne.n	800fabc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f06f 0202 	mvn.w	r2, #2
 800fa8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2201      	movs	r2, #1
 800fa92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	699b      	ldr	r3, [r3, #24]
 800fa9a:	f003 0303 	and.w	r3, r3, #3
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d003      	beq.n	800faaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 f905 	bl	800fcb2 <HAL_TIM_IC_CaptureCallback>
 800faa8:	e005      	b.n	800fab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f000 f8f7 	bl	800fc9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 f908 	bl	800fcc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2200      	movs	r2, #0
 800faba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	691b      	ldr	r3, [r3, #16]
 800fac2:	f003 0304 	and.w	r3, r3, #4
 800fac6:	2b04      	cmp	r3, #4
 800fac8:	d122      	bne.n	800fb10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	f003 0304 	and.w	r3, r3, #4
 800fad4:	2b04      	cmp	r3, #4
 800fad6:	d11b      	bne.n	800fb10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f06f 0204 	mvn.w	r2, #4
 800fae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2202      	movs	r2, #2
 800fae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	699b      	ldr	r3, [r3, #24]
 800faee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d003      	beq.n	800fafe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 f8db 	bl	800fcb2 <HAL_TIM_IC_CaptureCallback>
 800fafc:	e005      	b.n	800fb0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f8cd 	bl	800fc9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 f8de 	bl	800fcc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	691b      	ldr	r3, [r3, #16]
 800fb16:	f003 0308 	and.w	r3, r3, #8
 800fb1a:	2b08      	cmp	r3, #8
 800fb1c:	d122      	bne.n	800fb64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	f003 0308 	and.w	r3, r3, #8
 800fb28:	2b08      	cmp	r3, #8
 800fb2a:	d11b      	bne.n	800fb64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f06f 0208 	mvn.w	r2, #8
 800fb34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2204      	movs	r2, #4
 800fb3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	69db      	ldr	r3, [r3, #28]
 800fb42:	f003 0303 	and.w	r3, r3, #3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d003      	beq.n	800fb52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 f8b1 	bl	800fcb2 <HAL_TIM_IC_CaptureCallback>
 800fb50:	e005      	b.n	800fb5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f000 f8a3 	bl	800fc9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f000 f8b4 	bl	800fcc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	691b      	ldr	r3, [r3, #16]
 800fb6a:	f003 0310 	and.w	r3, r3, #16
 800fb6e:	2b10      	cmp	r3, #16
 800fb70:	d122      	bne.n	800fbb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	f003 0310 	and.w	r3, r3, #16
 800fb7c:	2b10      	cmp	r3, #16
 800fb7e:	d11b      	bne.n	800fbb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f06f 0210 	mvn.w	r2, #16
 800fb88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2208      	movs	r2, #8
 800fb8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	69db      	ldr	r3, [r3, #28]
 800fb96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d003      	beq.n	800fba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 f887 	bl	800fcb2 <HAL_TIM_IC_CaptureCallback>
 800fba4:	e005      	b.n	800fbb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f000 f879 	bl	800fc9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f000 f88a 	bl	800fcc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	691b      	ldr	r3, [r3, #16]
 800fbbe:	f003 0301 	and.w	r3, r3, #1
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d10e      	bne.n	800fbe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	f003 0301 	and.w	r3, r3, #1
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d107      	bne.n	800fbe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f06f 0201 	mvn.w	r2, #1
 800fbdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7f3 fe08 	bl	80037f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	691b      	ldr	r3, [r3, #16]
 800fbea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbee:	2b80      	cmp	r3, #128	; 0x80
 800fbf0:	d10e      	bne.n	800fc10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbfc:	2b80      	cmp	r3, #128	; 0x80
 800fbfe:	d107      	bne.n	800fc10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 f90a 	bl	800fe24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	691b      	ldr	r3, [r3, #16]
 800fc16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc1e:	d10e      	bne.n	800fc3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc2a:	2b80      	cmp	r3, #128	; 0x80
 800fc2c:	d107      	bne.n	800fc3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fc36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 f8fd 	bl	800fe38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	691b      	ldr	r3, [r3, #16]
 800fc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc48:	2b40      	cmp	r3, #64	; 0x40
 800fc4a:	d10e      	bne.n	800fc6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68db      	ldr	r3, [r3, #12]
 800fc52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc56:	2b40      	cmp	r3, #64	; 0x40
 800fc58:	d107      	bne.n	800fc6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fc62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 f838 	bl	800fcda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	f003 0320 	and.w	r3, r3, #32
 800fc74:	2b20      	cmp	r3, #32
 800fc76:	d10e      	bne.n	800fc96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	68db      	ldr	r3, [r3, #12]
 800fc7e:	f003 0320 	and.w	r3, r3, #32
 800fc82:	2b20      	cmp	r3, #32
 800fc84:	d107      	bne.n	800fc96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f06f 0220 	mvn.w	r2, #32
 800fc8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 f8bd 	bl	800fe10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc96:	bf00      	nop
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc9e:	b480      	push	{r7}
 800fca0:	b083      	sub	sp, #12
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fca6:	bf00      	nop
 800fca8:	370c      	adds	r7, #12
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr

0800fcb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fcb2:	b480      	push	{r7}
 800fcb4:	b083      	sub	sp, #12
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fcba:	bf00      	nop
 800fcbc:	370c      	adds	r7, #12
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr

0800fcc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fcc6:	b480      	push	{r7}
 800fcc8:	b083      	sub	sp, #12
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fcce:	bf00      	nop
 800fcd0:	370c      	adds	r7, #12
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr

0800fcda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fcda:	b480      	push	{r7}
 800fcdc:	b083      	sub	sp, #12
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fce2:	bf00      	nop
 800fce4:	370c      	adds	r7, #12
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
	...

0800fcf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b085      	sub	sp, #20
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	4a3c      	ldr	r2, [pc, #240]	; (800fdf4 <TIM_Base_SetConfig+0x104>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d00f      	beq.n	800fd28 <TIM_Base_SetConfig+0x38>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd0e:	d00b      	beq.n	800fd28 <TIM_Base_SetConfig+0x38>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4a39      	ldr	r2, [pc, #228]	; (800fdf8 <TIM_Base_SetConfig+0x108>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d007      	beq.n	800fd28 <TIM_Base_SetConfig+0x38>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	4a38      	ldr	r2, [pc, #224]	; (800fdfc <TIM_Base_SetConfig+0x10c>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d003      	beq.n	800fd28 <TIM_Base_SetConfig+0x38>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4a37      	ldr	r2, [pc, #220]	; (800fe00 <TIM_Base_SetConfig+0x110>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d108      	bne.n	800fd3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	68fa      	ldr	r2, [r7, #12]
 800fd36:	4313      	orrs	r3, r2
 800fd38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4a2d      	ldr	r2, [pc, #180]	; (800fdf4 <TIM_Base_SetConfig+0x104>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d01b      	beq.n	800fd7a <TIM_Base_SetConfig+0x8a>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd48:	d017      	beq.n	800fd7a <TIM_Base_SetConfig+0x8a>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	4a2a      	ldr	r2, [pc, #168]	; (800fdf8 <TIM_Base_SetConfig+0x108>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d013      	beq.n	800fd7a <TIM_Base_SetConfig+0x8a>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	4a29      	ldr	r2, [pc, #164]	; (800fdfc <TIM_Base_SetConfig+0x10c>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d00f      	beq.n	800fd7a <TIM_Base_SetConfig+0x8a>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4a28      	ldr	r2, [pc, #160]	; (800fe00 <TIM_Base_SetConfig+0x110>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	d00b      	beq.n	800fd7a <TIM_Base_SetConfig+0x8a>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4a27      	ldr	r2, [pc, #156]	; (800fe04 <TIM_Base_SetConfig+0x114>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d007      	beq.n	800fd7a <TIM_Base_SetConfig+0x8a>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4a26      	ldr	r2, [pc, #152]	; (800fe08 <TIM_Base_SetConfig+0x118>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d003      	beq.n	800fd7a <TIM_Base_SetConfig+0x8a>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4a25      	ldr	r2, [pc, #148]	; (800fe0c <TIM_Base_SetConfig+0x11c>)
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d108      	bne.n	800fd8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	68db      	ldr	r3, [r3, #12]
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	4313      	orrs	r3, r2
 800fd8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	695b      	ldr	r3, [r3, #20]
 800fd96:	4313      	orrs	r3, r2
 800fd98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	689a      	ldr	r2, [r3, #8]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	4a10      	ldr	r2, [pc, #64]	; (800fdf4 <TIM_Base_SetConfig+0x104>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d00f      	beq.n	800fdd8 <TIM_Base_SetConfig+0xe8>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	4a11      	ldr	r2, [pc, #68]	; (800fe00 <TIM_Base_SetConfig+0x110>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d00b      	beq.n	800fdd8 <TIM_Base_SetConfig+0xe8>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4a10      	ldr	r2, [pc, #64]	; (800fe04 <TIM_Base_SetConfig+0x114>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d007      	beq.n	800fdd8 <TIM_Base_SetConfig+0xe8>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4a0f      	ldr	r2, [pc, #60]	; (800fe08 <TIM_Base_SetConfig+0x118>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d003      	beq.n	800fdd8 <TIM_Base_SetConfig+0xe8>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4a0e      	ldr	r2, [pc, #56]	; (800fe0c <TIM_Base_SetConfig+0x11c>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d103      	bne.n	800fde0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	691a      	ldr	r2, [r3, #16]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2201      	movs	r2, #1
 800fde4:	615a      	str	r2, [r3, #20]
}
 800fde6:	bf00      	nop
 800fde8:	3714      	adds	r7, #20
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	40012c00 	.word	0x40012c00
 800fdf8:	40000400 	.word	0x40000400
 800fdfc:	40000800 	.word	0x40000800
 800fe00:	40013400 	.word	0x40013400
 800fe04:	40014000 	.word	0x40014000
 800fe08:	40014400 	.word	0x40014400
 800fe0c:	40014800 	.word	0x40014800

0800fe10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe18:	bf00      	nop
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe2c:	bf00      	nop
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fe40:	bf00      	nop
 800fe42:	370c      	adds	r7, #12
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr

0800fe4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b085      	sub	sp, #20
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fe5c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800fe60:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fe6c:	2300      	movs	r3, #0
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3714      	adds	r7, #20
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr

0800fe7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800fe7a:	b480      	push	{r7}
 800fe7c:	b085      	sub	sp, #20
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fe82:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800fe86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	43db      	mvns	r3, r3
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	4013      	ands	r3, r2
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3714      	adds	r7, #20
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800feb0:	b084      	sub	sp, #16
 800feb2:	b480      	push	{r7}
 800feb4:	b083      	sub	sp, #12
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	6078      	str	r0, [r7, #4]
 800feba:	f107 0014 	add.w	r0, r7, #20
 800febe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2201      	movs	r2, #1
 800fec6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2200      	movs	r2, #0
 800fed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2200      	movs	r2, #0
 800fede:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800fee2:	2300      	movs	r3, #0
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	b004      	add	sp, #16
 800fef0:	4770      	bx	lr
	...

0800fef4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b09d      	sub	sp, #116	; 0x74
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800fefe:	2300      	movs	r3, #0
 800ff00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4413      	add	r3, r2
 800ff0e:	881b      	ldrh	r3, [r3, #0]
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ff16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	78db      	ldrb	r3, [r3, #3]
 800ff22:	2b03      	cmp	r3, #3
 800ff24:	d81f      	bhi.n	800ff66 <USB_ActivateEndpoint+0x72>
 800ff26:	a201      	add	r2, pc, #4	; (adr r2, 800ff2c <USB_ActivateEndpoint+0x38>)
 800ff28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff2c:	0800ff3d 	.word	0x0800ff3d
 800ff30:	0800ff59 	.word	0x0800ff59
 800ff34:	0800ff6f 	.word	0x0800ff6f
 800ff38:	0800ff4b 	.word	0x0800ff4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ff3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ff40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ff44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ff48:	e012      	b.n	800ff70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ff4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ff4e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ff52:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ff56:	e00b      	b.n	800ff70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ff58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ff5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ff60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ff64:	e004      	b.n	800ff70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ff66:	2301      	movs	r3, #1
 800ff68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ff6c:	e000      	b.n	800ff70 <USB_ActivateEndpoint+0x7c>
      break;
 800ff6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	441a      	add	r2, r3
 800ff7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ff7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	4413      	add	r3, r2
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	b21b      	sxth	r3, r3
 800ffa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffaa:	b21a      	sxth	r2, r3
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	b21b      	sxth	r3, r3
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	b21b      	sxth	r3, r3
 800ffb6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ffba:	687a      	ldr	r2, [r7, #4]
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	441a      	add	r2, r3
 800ffc4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ffc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	7b1b      	ldrb	r3, [r3, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f040 8149 	bne.w	8010278 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	785b      	ldrb	r3, [r3, #1]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f000 8084 	beq.w	80100f8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	61bb      	str	r3, [r7, #24]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	461a      	mov	r2, r3
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	4413      	add	r3, r2
 8010002:	61bb      	str	r3, [r7, #24]
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	011a      	lsls	r2, r3, #4
 801000a:	69bb      	ldr	r3, [r7, #24]
 801000c:	4413      	add	r3, r2
 801000e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010012:	617b      	str	r3, [r7, #20]
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	88db      	ldrh	r3, [r3, #6]
 8010018:	085b      	lsrs	r3, r3, #1
 801001a:	b29b      	uxth	r3, r3
 801001c:	005b      	lsls	r3, r3, #1
 801001e:	b29a      	uxth	r2, r3
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	4413      	add	r3, r2
 801002e:	881b      	ldrh	r3, [r3, #0]
 8010030:	827b      	strh	r3, [r7, #18]
 8010032:	8a7b      	ldrh	r3, [r7, #18]
 8010034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010038:	2b00      	cmp	r3, #0
 801003a:	d01b      	beq.n	8010074 <USB_ActivateEndpoint+0x180>
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4413      	add	r3, r2
 8010046:	881b      	ldrh	r3, [r3, #0]
 8010048:	b29b      	uxth	r3, r3
 801004a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801004e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010052:	823b      	strh	r3, [r7, #16]
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	441a      	add	r2, r3
 801005e:	8a3b      	ldrh	r3, [r7, #16]
 8010060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801006c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010070:	b29b      	uxth	r3, r3
 8010072:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	78db      	ldrb	r3, [r3, #3]
 8010078:	2b01      	cmp	r3, #1
 801007a:	d020      	beq.n	80100be <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	4413      	add	r3, r2
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	b29b      	uxth	r3, r3
 801008a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801008e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010092:	81bb      	strh	r3, [r7, #12]
 8010094:	89bb      	ldrh	r3, [r7, #12]
 8010096:	f083 0320 	eor.w	r3, r3, #32
 801009a:	81bb      	strh	r3, [r7, #12]
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	441a      	add	r2, r3
 80100a6:	89bb      	ldrh	r3, [r7, #12]
 80100a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	8013      	strh	r3, [r2, #0]
 80100bc:	e2a6      	b.n	801060c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	009b      	lsls	r3, r3, #2
 80100c6:	4413      	add	r3, r2
 80100c8:	881b      	ldrh	r3, [r3, #0]
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100d4:	81fb      	strh	r3, [r7, #14]
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	441a      	add	r2, r3
 80100e0:	89fb      	ldrh	r3, [r7, #14]
 80100e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	8013      	strh	r3, [r2, #0]
 80100f6:	e289      	b.n	801060c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	633b      	str	r3, [r7, #48]	; 0x30
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010102:	b29b      	uxth	r3, r3
 8010104:	461a      	mov	r2, r3
 8010106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010108:	4413      	add	r3, r2
 801010a:	633b      	str	r3, [r7, #48]	; 0x30
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	011a      	lsls	r2, r3, #4
 8010112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010114:	4413      	add	r3, r2
 8010116:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801011a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	88db      	ldrh	r3, [r3, #6]
 8010120:	085b      	lsrs	r3, r3, #1
 8010122:	b29b      	uxth	r3, r3
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	b29a      	uxth	r2, r3
 8010128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010136:	b29b      	uxth	r3, r3
 8010138:	461a      	mov	r2, r3
 801013a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801013c:	4413      	add	r3, r2
 801013e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	011a      	lsls	r2, r3, #4
 8010146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010148:	4413      	add	r3, r2
 801014a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801014e:	627b      	str	r3, [r7, #36]	; 0x24
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	691b      	ldr	r3, [r3, #16]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d112      	bne.n	801017e <USB_ActivateEndpoint+0x28a>
 8010158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015a:	881b      	ldrh	r3, [r3, #0]
 801015c:	b29b      	uxth	r3, r3
 801015e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010162:	b29a      	uxth	r2, r3
 8010164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010166:	801a      	strh	r2, [r3, #0]
 8010168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016a:	881b      	ldrh	r3, [r3, #0]
 801016c:	b29b      	uxth	r3, r3
 801016e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010176:	b29a      	uxth	r2, r3
 8010178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017a:	801a      	strh	r2, [r3, #0]
 801017c:	e02f      	b.n	80101de <USB_ActivateEndpoint+0x2ea>
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	691b      	ldr	r3, [r3, #16]
 8010182:	2b3e      	cmp	r3, #62	; 0x3e
 8010184:	d813      	bhi.n	80101ae <USB_ActivateEndpoint+0x2ba>
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	691b      	ldr	r3, [r3, #16]
 801018a:	085b      	lsrs	r3, r3, #1
 801018c:	66bb      	str	r3, [r7, #104]	; 0x68
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	691b      	ldr	r3, [r3, #16]
 8010192:	f003 0301 	and.w	r3, r3, #1
 8010196:	2b00      	cmp	r3, #0
 8010198:	d002      	beq.n	80101a0 <USB_ActivateEndpoint+0x2ac>
 801019a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801019c:	3301      	adds	r3, #1
 801019e:	66bb      	str	r3, [r7, #104]	; 0x68
 80101a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	029b      	lsls	r3, r3, #10
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101aa:	801a      	strh	r2, [r3, #0]
 80101ac:	e017      	b.n	80101de <USB_ActivateEndpoint+0x2ea>
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	691b      	ldr	r3, [r3, #16]
 80101b2:	095b      	lsrs	r3, r3, #5
 80101b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	691b      	ldr	r3, [r3, #16]
 80101ba:	f003 031f 	and.w	r3, r3, #31
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d102      	bne.n	80101c8 <USB_ActivateEndpoint+0x2d4>
 80101c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101c4:	3b01      	subs	r3, #1
 80101c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80101c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	029b      	lsls	r3, r3, #10
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101d8:	b29a      	uxth	r2, r3
 80101da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	4413      	add	r3, r2
 80101e8:	881b      	ldrh	r3, [r3, #0]
 80101ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80101ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80101ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d01b      	beq.n	801022e <USB_ActivateEndpoint+0x33a>
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	4413      	add	r3, r2
 8010200:	881b      	ldrh	r3, [r3, #0]
 8010202:	b29b      	uxth	r3, r3
 8010204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801020c:	843b      	strh	r3, [r7, #32]
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	441a      	add	r2, r3
 8010218:	8c3b      	ldrh	r3, [r7, #32]
 801021a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801021e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010222:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801022a:	b29b      	uxth	r3, r3
 801022c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	4413      	add	r3, r2
 8010238:	881b      	ldrh	r3, [r3, #0]
 801023a:	b29b      	uxth	r3, r3
 801023c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010244:	83fb      	strh	r3, [r7, #30]
 8010246:	8bfb      	ldrh	r3, [r7, #30]
 8010248:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801024c:	83fb      	strh	r3, [r7, #30]
 801024e:	8bfb      	ldrh	r3, [r7, #30]
 8010250:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010254:	83fb      	strh	r3, [r7, #30]
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	441a      	add	r2, r3
 8010260:	8bfb      	ldrh	r3, [r7, #30]
 8010262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801026a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801026e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010272:	b29b      	uxth	r3, r3
 8010274:	8013      	strh	r3, [r2, #0]
 8010276:	e1c9      	b.n	801060c <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	78db      	ldrb	r3, [r3, #3]
 801027c:	2b02      	cmp	r3, #2
 801027e:	d11e      	bne.n	80102be <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	4413      	add	r3, r2
 801028a:	881b      	ldrh	r3, [r3, #0]
 801028c:	b29b      	uxth	r3, r3
 801028e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010296:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	441a      	add	r2, r3
 80102a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80102a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80102b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	8013      	strh	r3, [r2, #0]
 80102bc:	e01d      	b.n	80102fa <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	4413      	add	r3, r2
 80102c8:	881b      	ldrh	r3, [r3, #0]
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80102d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80102d8:	687a      	ldr	r2, [r7, #4]
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	441a      	add	r2, r3
 80102e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80102e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010304:	b29b      	uxth	r3, r3
 8010306:	461a      	mov	r2, r3
 8010308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801030a:	4413      	add	r3, r2
 801030c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	011a      	lsls	r2, r3, #4
 8010314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010316:	4413      	add	r3, r2
 8010318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801031c:	65bb      	str	r3, [r7, #88]	; 0x58
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	891b      	ldrh	r3, [r3, #8]
 8010322:	085b      	lsrs	r3, r3, #1
 8010324:	b29b      	uxth	r3, r3
 8010326:	005b      	lsls	r3, r3, #1
 8010328:	b29a      	uxth	r2, r3
 801032a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801032c:	801a      	strh	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	657b      	str	r3, [r7, #84]	; 0x54
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010338:	b29b      	uxth	r3, r3
 801033a:	461a      	mov	r2, r3
 801033c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801033e:	4413      	add	r3, r2
 8010340:	657b      	str	r3, [r7, #84]	; 0x54
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	011a      	lsls	r2, r3, #4
 8010348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801034a:	4413      	add	r3, r2
 801034c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8010350:	653b      	str	r3, [r7, #80]	; 0x50
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	895b      	ldrh	r3, [r3, #10]
 8010356:	085b      	lsrs	r3, r3, #1
 8010358:	b29b      	uxth	r3, r3
 801035a:	005b      	lsls	r3, r3, #1
 801035c:	b29a      	uxth	r2, r3
 801035e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010360:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	785b      	ldrb	r3, [r3, #1]
 8010366:	2b00      	cmp	r3, #0
 8010368:	f040 8093 	bne.w	8010492 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	4413      	add	r3, r2
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801037c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010384:	2b00      	cmp	r3, #0
 8010386:	d01b      	beq.n	80103c0 <USB_ActivateEndpoint+0x4cc>
 8010388:	687a      	ldr	r2, [r7, #4]
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	009b      	lsls	r3, r3, #2
 8010390:	4413      	add	r3, r2
 8010392:	881b      	ldrh	r3, [r3, #0]
 8010394:	b29b      	uxth	r3, r3
 8010396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801039a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801039e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	441a      	add	r2, r3
 80103aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80103b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103bc:	b29b      	uxth	r3, r3
 80103be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	4413      	add	r3, r2
 80103ca:	881b      	ldrh	r3, [r3, #0]
 80103cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80103ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80103d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d01b      	beq.n	8010410 <USB_ActivateEndpoint+0x51c>
 80103d8:	687a      	ldr	r2, [r7, #4]
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	009b      	lsls	r3, r3, #2
 80103e0:	4413      	add	r3, r2
 80103e2:	881b      	ldrh	r3, [r3, #0]
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ee:	877b      	strh	r3, [r7, #58]	; 0x3a
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	441a      	add	r2, r3
 80103fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80103fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010408:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801040c:	b29b      	uxth	r3, r3
 801040e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	4413      	add	r3, r2
 801041a:	881b      	ldrh	r3, [r3, #0]
 801041c:	b29b      	uxth	r3, r3
 801041e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010426:	873b      	strh	r3, [r7, #56]	; 0x38
 8010428:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801042a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801042e:	873b      	strh	r3, [r7, #56]	; 0x38
 8010430:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010432:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010436:	873b      	strh	r3, [r7, #56]	; 0x38
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	441a      	add	r2, r3
 8010442:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801044c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010454:	b29b      	uxth	r3, r3
 8010456:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	009b      	lsls	r3, r3, #2
 8010460:	4413      	add	r3, r2
 8010462:	881b      	ldrh	r3, [r3, #0]
 8010464:	b29b      	uxth	r3, r3
 8010466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801046a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801046e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	441a      	add	r2, r3
 801047a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801047c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801048c:	b29b      	uxth	r3, r3
 801048e:	8013      	strh	r3, [r2, #0]
 8010490:	e0bc      	b.n	801060c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	4413      	add	r3, r2
 801049c:	881b      	ldrh	r3, [r3, #0]
 801049e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80104a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80104a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d01d      	beq.n	80104ea <USB_ActivateEndpoint+0x5f6>
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	009b      	lsls	r3, r3, #2
 80104b6:	4413      	add	r3, r2
 80104b8:	881b      	ldrh	r3, [r3, #0]
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	441a      	add	r2, r3
 80104d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80104d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80104e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	4413      	add	r3, r2
 80104f4:	881b      	ldrh	r3, [r3, #0]
 80104f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80104fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80104fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010502:	2b00      	cmp	r3, #0
 8010504:	d01d      	beq.n	8010542 <USB_ActivateEndpoint+0x64e>
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	4413      	add	r3, r2
 8010510:	881b      	ldrh	r3, [r3, #0]
 8010512:	b29b      	uxth	r3, r3
 8010514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801051c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	441a      	add	r2, r3
 801052a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801052e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801053a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801053e:	b29b      	uxth	r3, r3
 8010540:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	78db      	ldrb	r3, [r3, #3]
 8010546:	2b01      	cmp	r3, #1
 8010548:	d024      	beq.n	8010594 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801054a:	687a      	ldr	r2, [r7, #4]
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	009b      	lsls	r3, r3, #2
 8010552:	4413      	add	r3, r2
 8010554:	881b      	ldrh	r3, [r3, #0]
 8010556:	b29b      	uxth	r3, r3
 8010558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801055c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010560:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010564:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010568:	f083 0320 	eor.w	r3, r3, #32
 801056c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	009b      	lsls	r3, r3, #2
 8010578:	441a      	add	r2, r3
 801057a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801057e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801058a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801058e:	b29b      	uxth	r3, r3
 8010590:	8013      	strh	r3, [r2, #0]
 8010592:	e01d      	b.n	80105d0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	4413      	add	r3, r2
 801059e:	881b      	ldrh	r3, [r3, #0]
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	009b      	lsls	r3, r3, #2
 80105b6:	441a      	add	r2, r3
 80105b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80105bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	4413      	add	r3, r2
 80105da:	881b      	ldrh	r3, [r3, #0]
 80105dc:	b29b      	uxth	r3, r3
 80105de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80105e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	441a      	add	r2, r3
 80105f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80105f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010608:	b29b      	uxth	r3, r3
 801060a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 801060c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8010610:	4618      	mov	r0, r3
 8010612:	3774      	adds	r7, #116	; 0x74
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr

0801061c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801061c:	b480      	push	{r7}
 801061e:	b08d      	sub	sp, #52	; 0x34
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	7b1b      	ldrb	r3, [r3, #12]
 801062a:	2b00      	cmp	r3, #0
 801062c:	f040 808e 	bne.w	801074c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	785b      	ldrb	r3, [r3, #1]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d044      	beq.n	80106c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	009b      	lsls	r3, r3, #2
 8010640:	4413      	add	r3, r2
 8010642:	881b      	ldrh	r3, [r3, #0]
 8010644:	81bb      	strh	r3, [r7, #12]
 8010646:	89bb      	ldrh	r3, [r7, #12]
 8010648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801064c:	2b00      	cmp	r3, #0
 801064e:	d01b      	beq.n	8010688 <USB_DeactivateEndpoint+0x6c>
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	009b      	lsls	r3, r3, #2
 8010658:	4413      	add	r3, r2
 801065a:	881b      	ldrh	r3, [r3, #0]
 801065c:	b29b      	uxth	r3, r3
 801065e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010666:	817b      	strh	r3, [r7, #10]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	441a      	add	r2, r3
 8010672:	897b      	ldrh	r3, [r7, #10]
 8010674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801067c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010680:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010684:	b29b      	uxth	r3, r3
 8010686:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	4413      	add	r3, r2
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	b29b      	uxth	r3, r3
 8010696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801069a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801069e:	813b      	strh	r3, [r7, #8]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	441a      	add	r2, r3
 80106aa:	893b      	ldrh	r3, [r7, #8]
 80106ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106bc:	b29b      	uxth	r3, r3
 80106be:	8013      	strh	r3, [r2, #0]
 80106c0:	e192      	b.n	80109e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	009b      	lsls	r3, r3, #2
 80106ca:	4413      	add	r3, r2
 80106cc:	881b      	ldrh	r3, [r3, #0]
 80106ce:	827b      	strh	r3, [r7, #18]
 80106d0:	8a7b      	ldrh	r3, [r7, #18]
 80106d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d01b      	beq.n	8010712 <USB_DeactivateEndpoint+0xf6>
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	4413      	add	r3, r2
 80106e4:	881b      	ldrh	r3, [r3, #0]
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106f0:	823b      	strh	r3, [r7, #16]
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	441a      	add	r2, r3
 80106fc:	8a3b      	ldrh	r3, [r7, #16]
 80106fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801070a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801070e:	b29b      	uxth	r3, r3
 8010710:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	4413      	add	r3, r2
 801071c:	881b      	ldrh	r3, [r3, #0]
 801071e:	b29b      	uxth	r3, r3
 8010720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010728:	81fb      	strh	r3, [r7, #14]
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	441a      	add	r2, r3
 8010734:	89fb      	ldrh	r3, [r7, #14]
 8010736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801073a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801073e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010746:	b29b      	uxth	r3, r3
 8010748:	8013      	strh	r3, [r2, #0]
 801074a:	e14d      	b.n	80109e8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	785b      	ldrb	r3, [r3, #1]
 8010750:	2b00      	cmp	r3, #0
 8010752:	f040 80a5 	bne.w	80108a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	4413      	add	r3, r2
 8010760:	881b      	ldrh	r3, [r3, #0]
 8010762:	843b      	strh	r3, [r7, #32]
 8010764:	8c3b      	ldrh	r3, [r7, #32]
 8010766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801076a:	2b00      	cmp	r3, #0
 801076c:	d01b      	beq.n	80107a6 <USB_DeactivateEndpoint+0x18a>
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	009b      	lsls	r3, r3, #2
 8010776:	4413      	add	r3, r2
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	b29b      	uxth	r3, r3
 801077c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010784:	83fb      	strh	r3, [r7, #30]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	441a      	add	r2, r3
 8010790:	8bfb      	ldrh	r3, [r7, #30]
 8010792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801079a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801079e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	4413      	add	r3, r2
 80107b0:	881b      	ldrh	r3, [r3, #0]
 80107b2:	83bb      	strh	r3, [r7, #28]
 80107b4:	8bbb      	ldrh	r3, [r7, #28]
 80107b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d01b      	beq.n	80107f6 <USB_DeactivateEndpoint+0x1da>
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	009b      	lsls	r3, r3, #2
 80107c6:	4413      	add	r3, r2
 80107c8:	881b      	ldrh	r3, [r3, #0]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107d4:	837b      	strh	r3, [r7, #26]
 80107d6:	687a      	ldr	r2, [r7, #4]
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	441a      	add	r2, r3
 80107e0:	8b7b      	ldrh	r3, [r7, #26]
 80107e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	009b      	lsls	r3, r3, #2
 80107fe:	4413      	add	r3, r2
 8010800:	881b      	ldrh	r3, [r3, #0]
 8010802:	b29b      	uxth	r3, r3
 8010804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801080c:	833b      	strh	r3, [r7, #24]
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	441a      	add	r2, r3
 8010818:	8b3b      	ldrh	r3, [r7, #24]
 801081a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801081e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010826:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801082a:	b29b      	uxth	r3, r3
 801082c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	009b      	lsls	r3, r3, #2
 8010836:	4413      	add	r3, r2
 8010838:	881b      	ldrh	r3, [r3, #0]
 801083a:	b29b      	uxth	r3, r3
 801083c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010844:	82fb      	strh	r3, [r7, #22]
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	441a      	add	r2, r3
 8010850:	8afb      	ldrh	r3, [r7, #22]
 8010852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801085a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801085e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010862:	b29b      	uxth	r3, r3
 8010864:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	4413      	add	r3, r2
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	b29b      	uxth	r3, r3
 8010874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801087c:	82bb      	strh	r3, [r7, #20]
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	009b      	lsls	r3, r3, #2
 8010886:	441a      	add	r2, r3
 8010888:	8abb      	ldrh	r3, [r7, #20]
 801088a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801088e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801089a:	b29b      	uxth	r3, r3
 801089c:	8013      	strh	r3, [r2, #0]
 801089e:	e0a3      	b.n	80109e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	009b      	lsls	r3, r3, #2
 80108a8:	4413      	add	r3, r2
 80108aa:	881b      	ldrh	r3, [r3, #0]
 80108ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80108ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80108b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d01b      	beq.n	80108f0 <USB_DeactivateEndpoint+0x2d4>
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	009b      	lsls	r3, r3, #2
 80108c0:	4413      	add	r3, r2
 80108c2:	881b      	ldrh	r3, [r3, #0]
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	441a      	add	r2, r3
 80108da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80108e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80108f0:	687a      	ldr	r2, [r7, #4]
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	009b      	lsls	r3, r3, #2
 80108f8:	4413      	add	r3, r2
 80108fa:	881b      	ldrh	r3, [r3, #0]
 80108fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80108fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010904:	2b00      	cmp	r3, #0
 8010906:	d01b      	beq.n	8010940 <USB_DeactivateEndpoint+0x324>
 8010908:	687a      	ldr	r2, [r7, #4]
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	4413      	add	r3, r2
 8010912:	881b      	ldrh	r3, [r3, #0]
 8010914:	b29b      	uxth	r3, r3
 8010916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801091a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801091e:	853b      	strh	r3, [r7, #40]	; 0x28
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	441a      	add	r2, r3
 801092a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801092c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010938:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801093c:	b29b      	uxth	r3, r3
 801093e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	4413      	add	r3, r2
 801094a:	881b      	ldrh	r3, [r3, #0]
 801094c:	b29b      	uxth	r3, r3
 801094e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010956:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	441a      	add	r2, r3
 8010962:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801096c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010974:	b29b      	uxth	r3, r3
 8010976:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	4413      	add	r3, r2
 8010982:	881b      	ldrh	r3, [r3, #0]
 8010984:	b29b      	uxth	r3, r3
 8010986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801098a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801098e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	441a      	add	r2, r3
 801099a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801099c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80109a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80109a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	4413      	add	r3, r2
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	b29b      	uxth	r3, r3
 80109be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80109c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80109c8:	687a      	ldr	r2, [r7, #4]
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	009b      	lsls	r3, r3, #2
 80109d0:	441a      	add	r2, r3
 80109d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80109dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80109e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80109e8:	2300      	movs	r3, #0
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3734      	adds	r7, #52	; 0x34
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b0c2      	sub	sp, #264	; 0x108
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a04:	6018      	str	r0, [r3, #0]
 8010a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a0e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	785b      	ldrb	r3, [r3, #1]
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	f040 867b 	bne.w	8011718 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	699a      	ldr	r2, [r3, #24]
 8010a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	691b      	ldr	r3, [r3, #16]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d908      	bls.n	8010a50 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	691b      	ldr	r3, [r3, #16]
 8010a4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010a4e:	e007      	b.n	8010a60 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	699b      	ldr	r3, [r3, #24]
 8010a5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	7b1b      	ldrb	r3, [r3, #12]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d13a      	bne.n	8010ae6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	6959      	ldr	r1, [r3, #20]
 8010a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	88da      	ldrh	r2, [r3, #6]
 8010a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010a92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010a96:	6800      	ldr	r0, [r0, #0]
 8010a98:	f001 fc11 	bl	80122be <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	613b      	str	r3, [r7, #16]
 8010aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	461a      	mov	r2, r3
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	4413      	add	r3, r2
 8010abe:	613b      	str	r3, [r7, #16]
 8010ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	011a      	lsls	r2, r3, #4
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010ad6:	60fb      	str	r3, [r7, #12]
 8010ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010adc:	b29a      	uxth	r2, r3
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	801a      	strh	r2, [r3, #0]
 8010ae2:	f000 bde3 	b.w	80116ac <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	78db      	ldrb	r3, [r3, #3]
 8010af2:	2b02      	cmp	r3, #2
 8010af4:	f040 843a 	bne.w	801136c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	6a1a      	ldr	r2, [r3, #32]
 8010b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	691b      	ldr	r3, [r3, #16]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	f240 83b7 	bls.w	8011284 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	009b      	lsls	r3, r3, #2
 8010b2e:	4413      	add	r3, r2
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8010b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	009b      	lsls	r3, r3, #2
 8010b58:	441a      	add	r2, r3
 8010b5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b66:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	6a1a      	ldr	r2, [r3, #32]
 8010b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b82:	1ad2      	subs	r2, r2, r3
 8010b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	4413      	add	r3, r2
 8010baa:	881b      	ldrh	r3, [r3, #0]
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	f000 81b3 	beq.w	8010f1e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8010bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	785b      	ldrb	r3, [r3, #1]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d16d      	bne.n	8010cb0 <USB_EPStartXfer+0x2ba>
 8010bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8010be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf4:	4413      	add	r3, r2
 8010bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	011a      	lsls	r2, r3, #4
 8010c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c08:	4413      	add	r3, r2
 8010c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8010c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d112      	bne.n	8010c3e <USB_EPStartXfer+0x248>
 8010c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1a:	881b      	ldrh	r3, [r3, #0]
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010c22:	b29a      	uxth	r2, r3
 8010c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c26:	801a      	strh	r2, [r3, #0]
 8010c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2a:	881b      	ldrh	r3, [r3, #0]
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3a:	801a      	strh	r2, [r3, #0]
 8010c3c:	e05d      	b.n	8010cfa <USB_EPStartXfer+0x304>
 8010c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c42:	2b3e      	cmp	r3, #62	; 0x3e
 8010c44:	d817      	bhi.n	8010c76 <USB_EPStartXfer+0x280>
 8010c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c4a:	085b      	lsrs	r3, r3, #1
 8010c4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c54:	f003 0301 	and.w	r3, r3, #1
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d004      	beq.n	8010c66 <USB_EPStartXfer+0x270>
 8010c5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010c60:	3301      	adds	r3, #1
 8010c62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010c66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	029b      	lsls	r3, r3, #10
 8010c6e:	b29a      	uxth	r2, r3
 8010c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c72:	801a      	strh	r2, [r3, #0]
 8010c74:	e041      	b.n	8010cfa <USB_EPStartXfer+0x304>
 8010c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c7a:	095b      	lsrs	r3, r3, #5
 8010c7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c84:	f003 031f 	and.w	r3, r3, #31
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d104      	bne.n	8010c96 <USB_EPStartXfer+0x2a0>
 8010c8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010c90:	3b01      	subs	r3, #1
 8010c92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010c96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	029b      	lsls	r3, r3, #10
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cac:	801a      	strh	r2, [r3, #0]
 8010cae:	e024      	b.n	8010cfa <USB_EPStartXfer+0x304>
 8010cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	785b      	ldrb	r3, [r3, #1]
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	d11c      	bne.n	8010cfa <USB_EPStartXfer+0x304>
 8010cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd4:	4413      	add	r3, r2
 8010cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8010cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	011a      	lsls	r2, r3, #4
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	4413      	add	r3, r2
 8010cea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cf4:	b29a      	uxth	r2, r3
 8010cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	895b      	ldrh	r3, [r3, #10]
 8010d06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	6959      	ldr	r1, [r3, #20]
 8010d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010d20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010d24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010d28:	6800      	ldr	r0, [r0, #0]
 8010d2a:	f001 fac8 	bl	80122be <USB_WritePMA>
            ep->xfer_buff += len;
 8010d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	695a      	ldr	r2, [r3, #20]
 8010d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d3e:	441a      	add	r2, r3
 8010d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	6a1a      	ldr	r2, [r3, #32]
 8010d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	691b      	ldr	r3, [r3, #16]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d90f      	bls.n	8010d88 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8010d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	6a1a      	ldr	r2, [r3, #32]
 8010d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d78:	1ad2      	subs	r2, r2, r3
 8010d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	621a      	str	r2, [r3, #32]
 8010d86:	e00e      	b.n	8010da6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8010d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	6a1b      	ldr	r3, [r3, #32]
 8010d94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2200      	movs	r2, #0
 8010da4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	785b      	ldrb	r3, [r3, #1]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d16d      	bne.n	8010e92 <USB_EPStartXfer+0x49c>
 8010db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	61bb      	str	r3, [r7, #24]
 8010dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	69bb      	ldr	r3, [r7, #24]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	61bb      	str	r3, [r7, #24]
 8010dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	011a      	lsls	r2, r3, #4
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	4413      	add	r3, r2
 8010dec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010df0:	617b      	str	r3, [r7, #20]
 8010df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d112      	bne.n	8010e20 <USB_EPStartXfer+0x42a>
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	881b      	ldrh	r3, [r3, #0]
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	801a      	strh	r2, [r3, #0]
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	881b      	ldrh	r3, [r3, #0]
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	801a      	strh	r2, [r3, #0]
 8010e1e:	e063      	b.n	8010ee8 <USB_EPStartXfer+0x4f2>
 8010e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e24:	2b3e      	cmp	r3, #62	; 0x3e
 8010e26:	d817      	bhi.n	8010e58 <USB_EPStartXfer+0x462>
 8010e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e2c:	085b      	lsrs	r3, r3, #1
 8010e2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e36:	f003 0301 	and.w	r3, r3, #1
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d004      	beq.n	8010e48 <USB_EPStartXfer+0x452>
 8010e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e42:	3301      	adds	r3, #1
 8010e44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	029b      	lsls	r3, r3, #10
 8010e50:	b29a      	uxth	r2, r3
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	801a      	strh	r2, [r3, #0]
 8010e56:	e047      	b.n	8010ee8 <USB_EPStartXfer+0x4f2>
 8010e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e5c:	095b      	lsrs	r3, r3, #5
 8010e5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e66:	f003 031f 	and.w	r3, r3, #31
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d104      	bne.n	8010e78 <USB_EPStartXfer+0x482>
 8010e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e72:	3b01      	subs	r3, #1
 8010e74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	029b      	lsls	r3, r3, #10
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e8a:	b29a      	uxth	r2, r3
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	801a      	strh	r2, [r3, #0]
 8010e90:	e02a      	b.n	8010ee8 <USB_EPStartXfer+0x4f2>
 8010e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	785b      	ldrb	r3, [r3, #1]
 8010e9e:	2b01      	cmp	r3, #1
 8010ea0:	d122      	bne.n	8010ee8 <USB_EPStartXfer+0x4f2>
 8010ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	623b      	str	r3, [r7, #32]
 8010eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	6a3b      	ldr	r3, [r7, #32]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	623b      	str	r3, [r7, #32]
 8010ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	011a      	lsls	r2, r3, #4
 8010ed4:	6a3b      	ldr	r3, [r7, #32]
 8010ed6:	4413      	add	r3, r2
 8010ed8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010edc:	61fb      	str	r3, [r7, #28]
 8010ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	69fb      	ldr	r3, [r7, #28]
 8010ee6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	891b      	ldrh	r3, [r3, #8]
 8010ef4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	6959      	ldr	r1, [r3, #20]
 8010f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010f0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010f12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010f16:	6800      	ldr	r0, [r0, #0]
 8010f18:	f001 f9d1 	bl	80122be <USB_WritePMA>
 8010f1c:	e3c6      	b.n	80116ac <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	785b      	ldrb	r3, [r3, #1]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d16d      	bne.n	801100a <USB_EPStartXfer+0x614>
 8010f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f4e:	4413      	add	r3, r2
 8010f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	011a      	lsls	r2, r3, #4
 8010f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f62:	4413      	add	r3, r2
 8010f64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010f68:	647b      	str	r3, [r7, #68]	; 0x44
 8010f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d112      	bne.n	8010f98 <USB_EPStartXfer+0x5a2>
 8010f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f74:	881b      	ldrh	r3, [r3, #0]
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f80:	801a      	strh	r2, [r3, #0]
 8010f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f84:	881b      	ldrh	r3, [r3, #0]
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f90:	b29a      	uxth	r2, r3
 8010f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f94:	801a      	strh	r2, [r3, #0]
 8010f96:	e063      	b.n	8011060 <USB_EPStartXfer+0x66a>
 8010f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8010f9e:	d817      	bhi.n	8010fd0 <USB_EPStartXfer+0x5da>
 8010fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fa4:	085b      	lsrs	r3, r3, #1
 8010fa6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fae:	f003 0301 	and.w	r3, r3, #1
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d004      	beq.n	8010fc0 <USB_EPStartXfer+0x5ca>
 8010fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010fba:	3301      	adds	r3, #1
 8010fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010fc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	029b      	lsls	r3, r3, #10
 8010fc8:	b29a      	uxth	r2, r3
 8010fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fcc:	801a      	strh	r2, [r3, #0]
 8010fce:	e047      	b.n	8011060 <USB_EPStartXfer+0x66a>
 8010fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fd4:	095b      	lsrs	r3, r3, #5
 8010fd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fde:	f003 031f 	and.w	r3, r3, #31
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d104      	bne.n	8010ff0 <USB_EPStartXfer+0x5fa>
 8010fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010fea:	3b01      	subs	r3, #1
 8010fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010ff0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	029b      	lsls	r3, r3, #10
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011002:	b29a      	uxth	r2, r3
 8011004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011006:	801a      	strh	r2, [r3, #0]
 8011008:	e02a      	b.n	8011060 <USB_EPStartXfer+0x66a>
 801100a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801100e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	785b      	ldrb	r3, [r3, #1]
 8011016:	2b01      	cmp	r3, #1
 8011018:	d122      	bne.n	8011060 <USB_EPStartXfer+0x66a>
 801101a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801101e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	653b      	str	r3, [r7, #80]	; 0x50
 8011026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801102a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011034:	b29b      	uxth	r3, r3
 8011036:	461a      	mov	r2, r3
 8011038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801103a:	4413      	add	r3, r2
 801103c:	653b      	str	r3, [r7, #80]	; 0x50
 801103e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	011a      	lsls	r2, r3, #4
 801104c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801104e:	4413      	add	r3, r2
 8011050:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801105a:	b29a      	uxth	r2, r3
 801105c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801105e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	891b      	ldrh	r3, [r3, #8]
 801106c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6959      	ldr	r1, [r3, #20]
 801107c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011080:	b29b      	uxth	r3, r3
 8011082:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011086:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801108a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801108e:	6800      	ldr	r0, [r0, #0]
 8011090:	f001 f915 	bl	80122be <USB_WritePMA>
            ep->xfer_buff += len;
 8011094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	695a      	ldr	r2, [r3, #20]
 80110a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110a4:	441a      	add	r2, r3
 80110a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80110b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	6a1a      	ldr	r2, [r3, #32]
 80110be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	691b      	ldr	r3, [r3, #16]
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d90f      	bls.n	80110ee <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80110ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	6a1a      	ldr	r2, [r3, #32]
 80110da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110de:	1ad2      	subs	r2, r2, r3
 80110e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	621a      	str	r2, [r3, #32]
 80110ec:	e00e      	b.n	801110c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80110ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	6a1b      	ldr	r3, [r3, #32]
 80110fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80110fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2200      	movs	r2, #0
 801110a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801110c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	643b      	str	r3, [r7, #64]	; 0x40
 8011118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801111c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	785b      	ldrb	r3, [r3, #1]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d16d      	bne.n	8011204 <USB_EPStartXfer+0x80e>
 8011128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801112c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	63bb      	str	r3, [r7, #56]	; 0x38
 8011134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011142:	b29b      	uxth	r3, r3
 8011144:	461a      	mov	r2, r3
 8011146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011148:	4413      	add	r3, r2
 801114a:	63bb      	str	r3, [r7, #56]	; 0x38
 801114c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	011a      	lsls	r2, r3, #4
 801115a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115c:	4413      	add	r3, r2
 801115e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011162:	637b      	str	r3, [r7, #52]	; 0x34
 8011164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011168:	2b00      	cmp	r3, #0
 801116a:	d112      	bne.n	8011192 <USB_EPStartXfer+0x79c>
 801116c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801116e:	881b      	ldrh	r3, [r3, #0]
 8011170:	b29b      	uxth	r3, r3
 8011172:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011176:	b29a      	uxth	r2, r3
 8011178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801117a:	801a      	strh	r2, [r3, #0]
 801117c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801117e:	881b      	ldrh	r3, [r3, #0]
 8011180:	b29b      	uxth	r3, r3
 8011182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801118a:	b29a      	uxth	r2, r3
 801118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801118e:	801a      	strh	r2, [r3, #0]
 8011190:	e05d      	b.n	801124e <USB_EPStartXfer+0x858>
 8011192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011196:	2b3e      	cmp	r3, #62	; 0x3e
 8011198:	d817      	bhi.n	80111ca <USB_EPStartXfer+0x7d4>
 801119a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801119e:	085b      	lsrs	r3, r3, #1
 80111a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80111a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111a8:	f003 0301 	and.w	r3, r3, #1
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d004      	beq.n	80111ba <USB_EPStartXfer+0x7c4>
 80111b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111b4:	3301      	adds	r3, #1
 80111b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80111ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111be:	b29b      	uxth	r3, r3
 80111c0:	029b      	lsls	r3, r3, #10
 80111c2:	b29a      	uxth	r2, r3
 80111c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c6:	801a      	strh	r2, [r3, #0]
 80111c8:	e041      	b.n	801124e <USB_EPStartXfer+0x858>
 80111ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111ce:	095b      	lsrs	r3, r3, #5
 80111d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80111d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111d8:	f003 031f 	and.w	r3, r3, #31
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d104      	bne.n	80111ea <USB_EPStartXfer+0x7f4>
 80111e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111e4:	3b01      	subs	r3, #1
 80111e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80111ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	029b      	lsls	r3, r3, #10
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111fc:	b29a      	uxth	r2, r3
 80111fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011200:	801a      	strh	r2, [r3, #0]
 8011202:	e024      	b.n	801124e <USB_EPStartXfer+0x858>
 8011204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	785b      	ldrb	r3, [r3, #1]
 8011210:	2b01      	cmp	r3, #1
 8011212:	d11c      	bne.n	801124e <USB_EPStartXfer+0x858>
 8011214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011222:	b29b      	uxth	r3, r3
 8011224:	461a      	mov	r2, r3
 8011226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011228:	4413      	add	r3, r2
 801122a:	643b      	str	r3, [r7, #64]	; 0x40
 801122c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	011a      	lsls	r2, r3, #4
 801123a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801123c:	4413      	add	r3, r2
 801123e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011248:	b29a      	uxth	r2, r3
 801124a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801124c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801124e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	895b      	ldrh	r3, [r3, #10]
 801125a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801125e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	6959      	ldr	r1, [r3, #20]
 801126a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801126e:	b29b      	uxth	r3, r3
 8011270:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011274:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011278:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801127c:	6800      	ldr	r0, [r0, #0]
 801127e:	f001 f81e 	bl	80122be <USB_WritePMA>
 8011282:	e213      	b.n	80116ac <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	6a1b      	ldr	r3, [r3, #32]
 8011290:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801129c:	681a      	ldr	r2, [r3, #0]
 801129e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	4413      	add	r3, r2
 80112ae:	881b      	ldrh	r3, [r3, #0]
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80112b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112ba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80112be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	441a      	add	r2, r3
 80112d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80112dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80112e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112ec:	b29b      	uxth	r3, r3
 80112ee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80112f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80112fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801130a:	b29b      	uxth	r3, r3
 801130c:	461a      	mov	r2, r3
 801130e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011310:	4413      	add	r3, r2
 8011312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	011a      	lsls	r2, r3, #4
 8011322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011324:	4413      	add	r3, r2
 8011326:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801132a:	65bb      	str	r3, [r7, #88]	; 0x58
 801132c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011330:	b29a      	uxth	r2, r3
 8011332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011334:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801133a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	891b      	ldrh	r3, [r3, #8]
 8011342:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801134a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	6959      	ldr	r1, [r3, #20]
 8011352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011356:	b29b      	uxth	r3, r3
 8011358:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801135c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011360:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011364:	6800      	ldr	r0, [r0, #0]
 8011366:	f000 ffaa 	bl	80122be <USB_WritePMA>
 801136a:	e19f      	b.n	80116ac <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801136c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	6a1a      	ldr	r2, [r3, #32]
 8011378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801137c:	1ad2      	subs	r2, r2, r3
 801137e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801138a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801138e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011392:	681a      	ldr	r2, [r3, #0]
 8011394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	009b      	lsls	r3, r3, #2
 80113a2:	4413      	add	r3, r2
 80113a4:	881b      	ldrh	r3, [r3, #0]
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	f000 80bc 	beq.w	801152a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80113b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	673b      	str	r3, [r7, #112]	; 0x70
 80113be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	785b      	ldrb	r3, [r3, #1]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d16d      	bne.n	80114aa <USB_EPStartXfer+0xab4>
 80113ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80113da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	461a      	mov	r2, r3
 80113ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80113ee:	4413      	add	r3, r2
 80113f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80113f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	011a      	lsls	r2, r3, #4
 8011400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011402:	4413      	add	r3, r2
 8011404:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011408:	667b      	str	r3, [r7, #100]	; 0x64
 801140a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801140e:	2b00      	cmp	r3, #0
 8011410:	d112      	bne.n	8011438 <USB_EPStartXfer+0xa42>
 8011412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011414:	881b      	ldrh	r3, [r3, #0]
 8011416:	b29b      	uxth	r3, r3
 8011418:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801141c:	b29a      	uxth	r2, r3
 801141e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011420:	801a      	strh	r2, [r3, #0]
 8011422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011424:	881b      	ldrh	r3, [r3, #0]
 8011426:	b29b      	uxth	r3, r3
 8011428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801142c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011430:	b29a      	uxth	r2, r3
 8011432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011434:	801a      	strh	r2, [r3, #0]
 8011436:	e05d      	b.n	80114f4 <USB_EPStartXfer+0xafe>
 8011438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801143c:	2b3e      	cmp	r3, #62	; 0x3e
 801143e:	d817      	bhi.n	8011470 <USB_EPStartXfer+0xa7a>
 8011440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011444:	085b      	lsrs	r3, r3, #1
 8011446:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801144a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801144e:	f003 0301 	and.w	r3, r3, #1
 8011452:	2b00      	cmp	r3, #0
 8011454:	d004      	beq.n	8011460 <USB_EPStartXfer+0xa6a>
 8011456:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801145a:	3301      	adds	r3, #1
 801145c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011460:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011464:	b29b      	uxth	r3, r3
 8011466:	029b      	lsls	r3, r3, #10
 8011468:	b29a      	uxth	r2, r3
 801146a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801146c:	801a      	strh	r2, [r3, #0]
 801146e:	e041      	b.n	80114f4 <USB_EPStartXfer+0xafe>
 8011470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011474:	095b      	lsrs	r3, r3, #5
 8011476:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801147a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801147e:	f003 031f 	and.w	r3, r3, #31
 8011482:	2b00      	cmp	r3, #0
 8011484:	d104      	bne.n	8011490 <USB_EPStartXfer+0xa9a>
 8011486:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801148a:	3b01      	subs	r3, #1
 801148c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011490:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011494:	b29b      	uxth	r3, r3
 8011496:	029b      	lsls	r3, r3, #10
 8011498:	b29b      	uxth	r3, r3
 801149a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801149e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114a2:	b29a      	uxth	r2, r3
 80114a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114a6:	801a      	strh	r2, [r3, #0]
 80114a8:	e024      	b.n	80114f4 <USB_EPStartXfer+0xafe>
 80114aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	785b      	ldrb	r3, [r3, #1]
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	d11c      	bne.n	80114f4 <USB_EPStartXfer+0xafe>
 80114ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80114c8:	b29b      	uxth	r3, r3
 80114ca:	461a      	mov	r2, r3
 80114cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114ce:	4413      	add	r3, r2
 80114d0:	673b      	str	r3, [r7, #112]	; 0x70
 80114d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	011a      	lsls	r2, r3, #4
 80114e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114e2:	4413      	add	r3, r2
 80114e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80114e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80114ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80114f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	895b      	ldrh	r3, [r3, #10]
 8011500:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	6959      	ldr	r1, [r3, #20]
 8011510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011514:	b29b      	uxth	r3, r3
 8011516:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801151a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801151e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011522:	6800      	ldr	r0, [r0, #0]
 8011524:	f000 fecb 	bl	80122be <USB_WritePMA>
 8011528:	e0c0      	b.n	80116ac <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801152a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801152e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	785b      	ldrb	r3, [r3, #1]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d16d      	bne.n	8011616 <USB_EPStartXfer+0xc20>
 801153a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801153e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801154a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011554:	b29b      	uxth	r3, r3
 8011556:	461a      	mov	r2, r3
 8011558:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801155a:	4413      	add	r3, r2
 801155c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801155e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	011a      	lsls	r2, r3, #4
 801156c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801156e:	4413      	add	r3, r2
 8011570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011574:	67bb      	str	r3, [r7, #120]	; 0x78
 8011576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801157a:	2b00      	cmp	r3, #0
 801157c:	d112      	bne.n	80115a4 <USB_EPStartXfer+0xbae>
 801157e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011580:	881b      	ldrh	r3, [r3, #0]
 8011582:	b29b      	uxth	r3, r3
 8011584:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011588:	b29a      	uxth	r2, r3
 801158a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801158c:	801a      	strh	r2, [r3, #0]
 801158e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011590:	881b      	ldrh	r3, [r3, #0]
 8011592:	b29b      	uxth	r3, r3
 8011594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801159c:	b29a      	uxth	r2, r3
 801159e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115a0:	801a      	strh	r2, [r3, #0]
 80115a2:	e069      	b.n	8011678 <USB_EPStartXfer+0xc82>
 80115a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115a8:	2b3e      	cmp	r3, #62	; 0x3e
 80115aa:	d817      	bhi.n	80115dc <USB_EPStartXfer+0xbe6>
 80115ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115b0:	085b      	lsrs	r3, r3, #1
 80115b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80115b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115ba:	f003 0301 	and.w	r3, r3, #1
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d004      	beq.n	80115cc <USB_EPStartXfer+0xbd6>
 80115c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80115c6:	3301      	adds	r3, #1
 80115c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80115cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	029b      	lsls	r3, r3, #10
 80115d4:	b29a      	uxth	r2, r3
 80115d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115d8:	801a      	strh	r2, [r3, #0]
 80115da:	e04d      	b.n	8011678 <USB_EPStartXfer+0xc82>
 80115dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115e0:	095b      	lsrs	r3, r3, #5
 80115e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80115e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115ea:	f003 031f 	and.w	r3, r3, #31
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d104      	bne.n	80115fc <USB_EPStartXfer+0xc06>
 80115f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80115f6:	3b01      	subs	r3, #1
 80115f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80115fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011600:	b29b      	uxth	r3, r3
 8011602:	029b      	lsls	r3, r3, #10
 8011604:	b29b      	uxth	r3, r3
 8011606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801160a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801160e:	b29a      	uxth	r2, r3
 8011610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011612:	801a      	strh	r2, [r3, #0]
 8011614:	e030      	b.n	8011678 <USB_EPStartXfer+0xc82>
 8011616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801161a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	785b      	ldrb	r3, [r3, #1]
 8011622:	2b01      	cmp	r3, #1
 8011624:	d128      	bne.n	8011678 <USB_EPStartXfer+0xc82>
 8011626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801162a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011642:	b29b      	uxth	r3, r3
 8011644:	461a      	mov	r2, r3
 8011646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801164a:	4413      	add	r3, r2
 801164c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	011a      	lsls	r2, r3, #4
 801165e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011662:	4413      	add	r3, r2
 8011664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801166c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011670:	b29a      	uxth	r2, r3
 8011672:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011676:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801167c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	891b      	ldrh	r3, [r3, #8]
 8011684:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	6959      	ldr	r1, [r3, #20]
 8011694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011698:	b29b      	uxth	r3, r3
 801169a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801169e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80116a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80116a6:	6800      	ldr	r0, [r0, #0]
 80116a8:	f000 fe09 	bl	80122be <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80116ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	4413      	add	r3, r2
 80116c6:	881b      	ldrh	r3, [r3, #0]
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80116ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116d2:	817b      	strh	r3, [r7, #10]
 80116d4:	897b      	ldrh	r3, [r7, #10]
 80116d6:	f083 0310 	eor.w	r3, r3, #16
 80116da:	817b      	strh	r3, [r7, #10]
 80116dc:	897b      	ldrh	r3, [r7, #10]
 80116de:	f083 0320 	eor.w	r3, r3, #32
 80116e2:	817b      	strh	r3, [r7, #10]
 80116e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	441a      	add	r2, r3
 80116fe:	897b      	ldrh	r3, [r7, #10]
 8011700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011710:	b29b      	uxth	r3, r3
 8011712:	8013      	strh	r3, [r2, #0]
 8011714:	f000 bc9f 	b.w	8012056 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801171c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	7b1b      	ldrb	r3, [r3, #12]
 8011724:	2b00      	cmp	r3, #0
 8011726:	f040 80ae 	bne.w	8011886 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801172a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801172e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	699a      	ldr	r2, [r3, #24]
 8011736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801173a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	691b      	ldr	r3, [r3, #16]
 8011742:	429a      	cmp	r2, r3
 8011744:	d917      	bls.n	8011776 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8011746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801174a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	691b      	ldr	r3, [r3, #16]
 8011752:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8011756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801175a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	699a      	ldr	r2, [r3, #24]
 8011762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011766:	1ad2      	subs	r2, r2, r3
 8011768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801176c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	619a      	str	r2, [r3, #24]
 8011774:	e00e      	b.n	8011794 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8011776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801177a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	699b      	ldr	r3, [r3, #24]
 8011782:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8011786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801178a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2200      	movs	r2, #0
 8011792:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8011794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80117a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	461a      	mov	r2, r3
 80117b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80117b8:	4413      	add	r3, r2
 80117ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80117be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	781b      	ldrb	r3, [r3, #0]
 80117ca:	011a      	lsls	r2, r3, #4
 80117cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80117d0:	4413      	add	r3, r2
 80117d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80117d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80117da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d116      	bne.n	8011810 <USB_EPStartXfer+0xe1a>
 80117e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80117e6:	881b      	ldrh	r3, [r3, #0]
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80117ee:	b29a      	uxth	r2, r3
 80117f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80117f4:	801a      	strh	r2, [r3, #0]
 80117f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80117fa:	881b      	ldrh	r3, [r3, #0]
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011806:	b29a      	uxth	r2, r3
 8011808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801180c:	801a      	strh	r2, [r3, #0]
 801180e:	e3e8      	b.n	8011fe2 <USB_EPStartXfer+0x15ec>
 8011810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011814:	2b3e      	cmp	r3, #62	; 0x3e
 8011816:	d818      	bhi.n	801184a <USB_EPStartXfer+0xe54>
 8011818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801181c:	085b      	lsrs	r3, r3, #1
 801181e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011826:	f003 0301 	and.w	r3, r3, #1
 801182a:	2b00      	cmp	r3, #0
 801182c:	d004      	beq.n	8011838 <USB_EPStartXfer+0xe42>
 801182e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011832:	3301      	adds	r3, #1
 8011834:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011838:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801183c:	b29b      	uxth	r3, r3
 801183e:	029b      	lsls	r3, r3, #10
 8011840:	b29a      	uxth	r2, r3
 8011842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011846:	801a      	strh	r2, [r3, #0]
 8011848:	e3cb      	b.n	8011fe2 <USB_EPStartXfer+0x15ec>
 801184a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801184e:	095b      	lsrs	r3, r3, #5
 8011850:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011858:	f003 031f 	and.w	r3, r3, #31
 801185c:	2b00      	cmp	r3, #0
 801185e:	d104      	bne.n	801186a <USB_EPStartXfer+0xe74>
 8011860:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011864:	3b01      	subs	r3, #1
 8011866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801186a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801186e:	b29b      	uxth	r3, r3
 8011870:	029b      	lsls	r3, r3, #10
 8011872:	b29b      	uxth	r3, r3
 8011874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801187c:	b29a      	uxth	r2, r3
 801187e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011882:	801a      	strh	r2, [r3, #0]
 8011884:	e3ad      	b.n	8011fe2 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801188a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	78db      	ldrb	r3, [r3, #3]
 8011892:	2b02      	cmp	r3, #2
 8011894:	f040 8200 	bne.w	8011c98 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801189c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	785b      	ldrb	r3, [r3, #1]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f040 8091 	bne.w	80119cc <USB_EPStartXfer+0xfd6>
 80118aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80118b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	461a      	mov	r2, r3
 80118ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80118ce:	4413      	add	r3, r2
 80118d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80118d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	011a      	lsls	r2, r3, #4
 80118e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80118e6:	4413      	add	r3, r2
 80118e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80118ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80118f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	691b      	ldr	r3, [r3, #16]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d116      	bne.n	801192e <USB_EPStartXfer+0xf38>
 8011900:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011904:	881b      	ldrh	r3, [r3, #0]
 8011906:	b29b      	uxth	r3, r3
 8011908:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801190c:	b29a      	uxth	r2, r3
 801190e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011912:	801a      	strh	r2, [r3, #0]
 8011914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011918:	881b      	ldrh	r3, [r3, #0]
 801191a:	b29b      	uxth	r3, r3
 801191c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011924:	b29a      	uxth	r2, r3
 8011926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801192a:	801a      	strh	r2, [r3, #0]
 801192c:	e083      	b.n	8011a36 <USB_EPStartXfer+0x1040>
 801192e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	691b      	ldr	r3, [r3, #16]
 801193a:	2b3e      	cmp	r3, #62	; 0x3e
 801193c:	d820      	bhi.n	8011980 <USB_EPStartXfer+0xf8a>
 801193e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	691b      	ldr	r3, [r3, #16]
 801194a:	085b      	lsrs	r3, r3, #1
 801194c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	691b      	ldr	r3, [r3, #16]
 801195c:	f003 0301 	and.w	r3, r3, #1
 8011960:	2b00      	cmp	r3, #0
 8011962:	d004      	beq.n	801196e <USB_EPStartXfer+0xf78>
 8011964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011968:	3301      	adds	r3, #1
 801196a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801196e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011972:	b29b      	uxth	r3, r3
 8011974:	029b      	lsls	r3, r3, #10
 8011976:	b29a      	uxth	r2, r3
 8011978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801197c:	801a      	strh	r2, [r3, #0]
 801197e:	e05a      	b.n	8011a36 <USB_EPStartXfer+0x1040>
 8011980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	691b      	ldr	r3, [r3, #16]
 801198c:	095b      	lsrs	r3, r3, #5
 801198e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	691b      	ldr	r3, [r3, #16]
 801199e:	f003 031f 	and.w	r3, r3, #31
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d104      	bne.n	80119b0 <USB_EPStartXfer+0xfba>
 80119a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119aa:	3b01      	subs	r3, #1
 80119ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80119b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	029b      	lsls	r3, r3, #10
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119c2:	b29a      	uxth	r2, r3
 80119c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80119c8:	801a      	strh	r2, [r3, #0]
 80119ca:	e034      	b.n	8011a36 <USB_EPStartXfer+0x1040>
 80119cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	785b      	ldrb	r3, [r3, #1]
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d12c      	bne.n	8011a36 <USB_EPStartXfer+0x1040>
 80119dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80119ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	461a      	mov	r2, r3
 80119fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011a00:	4413      	add	r3, r2
 8011a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	011a      	lsls	r2, r3, #4
 8011a14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011a18:	4413      	add	r3, r2
 8011a1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	691b      	ldr	r3, [r3, #16]
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011a34:	801a      	strh	r2, [r3, #0]
 8011a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	785b      	ldrb	r3, [r3, #1]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	f040 8091 	bne.w	8011b78 <USB_EPStartXfer+0x1182>
 8011a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	461a      	mov	r2, r3
 8011a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011a7a:	4413      	add	r3, r2
 8011a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	011a      	lsls	r2, r3, #4
 8011a8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011a92:	4413      	add	r3, r2
 8011a94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	691b      	ldr	r3, [r3, #16]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d116      	bne.n	8011ada <USB_EPStartXfer+0x10e4>
 8011aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011ab8:	b29a      	uxth	r2, r3
 8011aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011abe:	801a      	strh	r2, [r3, #0]
 8011ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ac4:	881b      	ldrh	r3, [r3, #0]
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ad0:	b29a      	uxth	r2, r3
 8011ad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ad6:	801a      	strh	r2, [r3, #0]
 8011ad8:	e07c      	b.n	8011bd4 <USB_EPStartXfer+0x11de>
 8011ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	691b      	ldr	r3, [r3, #16]
 8011ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8011ae8:	d820      	bhi.n	8011b2c <USB_EPStartXfer+0x1136>
 8011aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	691b      	ldr	r3, [r3, #16]
 8011af6:	085b      	lsrs	r3, r3, #1
 8011af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	691b      	ldr	r3, [r3, #16]
 8011b08:	f003 0301 	and.w	r3, r3, #1
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d004      	beq.n	8011b1a <USB_EPStartXfer+0x1124>
 8011b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b14:	3301      	adds	r3, #1
 8011b16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	029b      	lsls	r3, r3, #10
 8011b22:	b29a      	uxth	r2, r3
 8011b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b28:	801a      	strh	r2, [r3, #0]
 8011b2a:	e053      	b.n	8011bd4 <USB_EPStartXfer+0x11de>
 8011b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	691b      	ldr	r3, [r3, #16]
 8011b38:	095b      	lsrs	r3, r3, #5
 8011b3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	691b      	ldr	r3, [r3, #16]
 8011b4a:	f003 031f 	and.w	r3, r3, #31
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d104      	bne.n	8011b5c <USB_EPStartXfer+0x1166>
 8011b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b56:	3b01      	subs	r3, #1
 8011b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	029b      	lsls	r3, r3, #10
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011b6e:	b29a      	uxth	r2, r3
 8011b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b74:	801a      	strh	r2, [r3, #0]
 8011b76:	e02d      	b.n	8011bd4 <USB_EPStartXfer+0x11de>
 8011b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	785b      	ldrb	r3, [r3, #1]
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	d125      	bne.n	8011bd4 <USB_EPStartXfer+0x11de>
 8011b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	461a      	mov	r2, r3
 8011b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011b9e:	4413      	add	r3, r2
 8011ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	011a      	lsls	r2, r3, #4
 8011bb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011bb6:	4413      	add	r3, r2
 8011bb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	691b      	ldr	r3, [r3, #16]
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011bd2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	69db      	ldr	r3, [r3, #28]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f000 81fe 	beq.w	8011fe2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	4413      	add	r3, r2
 8011c00:	881b      	ldrh	r3, [r3, #0]
 8011c02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011c06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d005      	beq.n	8011c1e <USB_EPStartXfer+0x1228>
 8011c12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d10d      	bne.n	8011c3a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011c1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	f040 81db 	bne.w	8011fe2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011c2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	f040 81d4 	bne.w	8011fe2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8011c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	009b      	lsls	r3, r3, #2
 8011c52:	4413      	add	r3, r2
 8011c54:	881b      	ldrh	r3, [r3, #0]
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c60:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	441a      	add	r2, r3
 8011c7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	8013      	strh	r3, [r2, #0]
 8011c96:	e1a4      	b.n	8011fe2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	78db      	ldrb	r3, [r3, #3]
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	f040 819a 	bne.w	8011fde <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	699a      	ldr	r2, [r3, #24]
 8011cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	691b      	ldr	r3, [r3, #16]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d917      	bls.n	8011cf6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8011cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	691b      	ldr	r3, [r3, #16]
 8011cd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	699a      	ldr	r2, [r3, #24]
 8011ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ce6:	1ad2      	subs	r2, r2, r3
 8011ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	619a      	str	r2, [r3, #24]
 8011cf4:	e00e      	b.n	8011d14 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8011cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	699b      	ldr	r3, [r3, #24]
 8011d02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8011d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	2200      	movs	r2, #0
 8011d12:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8011d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	785b      	ldrb	r3, [r3, #1]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d178      	bne.n	8011e16 <USB_EPStartXfer+0x1420>
 8011d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	461a      	mov	r2, r3
 8011d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011d48:	4413      	add	r3, r2
 8011d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	011a      	lsls	r2, r3, #4
 8011d5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011d60:	4413      	add	r3, r2
 8011d62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d116      	bne.n	8011da0 <USB_EPStartXfer+0x13aa>
 8011d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011d76:	881b      	ldrh	r3, [r3, #0]
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011d84:	801a      	strh	r2, [r3, #0]
 8011d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011d8a:	881b      	ldrh	r3, [r3, #0]
 8011d8c:	b29b      	uxth	r3, r3
 8011d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d96:	b29a      	uxth	r2, r3
 8011d98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011d9c:	801a      	strh	r2, [r3, #0]
 8011d9e:	e06b      	b.n	8011e78 <USB_EPStartXfer+0x1482>
 8011da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011da4:	2b3e      	cmp	r3, #62	; 0x3e
 8011da6:	d818      	bhi.n	8011dda <USB_EPStartXfer+0x13e4>
 8011da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dac:	085b      	lsrs	r3, r3, #1
 8011dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011db6:	f003 0301 	and.w	r3, r3, #1
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d004      	beq.n	8011dc8 <USB_EPStartXfer+0x13d2>
 8011dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011dcc:	b29b      	uxth	r3, r3
 8011dce:	029b      	lsls	r3, r3, #10
 8011dd0:	b29a      	uxth	r2, r3
 8011dd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011dd6:	801a      	strh	r2, [r3, #0]
 8011dd8:	e04e      	b.n	8011e78 <USB_EPStartXfer+0x1482>
 8011dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dde:	095b      	lsrs	r3, r3, #5
 8011de0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011de8:	f003 031f 	and.w	r3, r3, #31
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d104      	bne.n	8011dfa <USB_EPStartXfer+0x1404>
 8011df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011df4:	3b01      	subs	r3, #1
 8011df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	029b      	lsls	r3, r3, #10
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011e12:	801a      	strh	r2, [r3, #0]
 8011e14:	e030      	b.n	8011e78 <USB_EPStartXfer+0x1482>
 8011e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	785b      	ldrb	r3, [r3, #1]
 8011e22:	2b01      	cmp	r3, #1
 8011e24:	d128      	bne.n	8011e78 <USB_EPStartXfer+0x1482>
 8011e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	461a      	mov	r2, r3
 8011e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011e4a:	4413      	add	r3, r2
 8011e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	011a      	lsls	r2, r3, #4
 8011e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011e62:	4413      	add	r3, r2
 8011e64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011e76:	801a      	strh	r2, [r3, #0]
 8011e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	785b      	ldrb	r3, [r3, #1]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d178      	bne.n	8011f88 <USB_EPStartXfer+0x1592>
 8011e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011eba:	4413      	add	r3, r2
 8011ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	011a      	lsls	r2, r3, #4
 8011ece:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011ed2:	4413      	add	r3, r2
 8011ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d116      	bne.n	8011f12 <USB_EPStartXfer+0x151c>
 8011ee4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011ee8:	881b      	ldrh	r3, [r3, #0]
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011ef6:	801a      	strh	r2, [r3, #0]
 8011ef8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011efc:	881b      	ldrh	r3, [r3, #0]
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f08:	b29a      	uxth	r2, r3
 8011f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011f0e:	801a      	strh	r2, [r3, #0]
 8011f10:	e067      	b.n	8011fe2 <USB_EPStartXfer+0x15ec>
 8011f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f16:	2b3e      	cmp	r3, #62	; 0x3e
 8011f18:	d818      	bhi.n	8011f4c <USB_EPStartXfer+0x1556>
 8011f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f1e:	085b      	lsrs	r3, r3, #1
 8011f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f28:	f003 0301 	and.w	r3, r3, #1
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d004      	beq.n	8011f3a <USB_EPStartXfer+0x1544>
 8011f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011f34:	3301      	adds	r3, #1
 8011f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	029b      	lsls	r3, r3, #10
 8011f42:	b29a      	uxth	r2, r3
 8011f44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011f48:	801a      	strh	r2, [r3, #0]
 8011f4a:	e04a      	b.n	8011fe2 <USB_EPStartXfer+0x15ec>
 8011f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f50:	095b      	lsrs	r3, r3, #5
 8011f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f5a:	f003 031f 	and.w	r3, r3, #31
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d104      	bne.n	8011f6c <USB_EPStartXfer+0x1576>
 8011f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011f66:	3b01      	subs	r3, #1
 8011f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	029b      	lsls	r3, r3, #10
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f7e:	b29a      	uxth	r2, r3
 8011f80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011f84:	801a      	strh	r2, [r3, #0]
 8011f86:	e02c      	b.n	8011fe2 <USB_EPStartXfer+0x15ec>
 8011f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	785b      	ldrb	r3, [r3, #1]
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d124      	bne.n	8011fe2 <USB_EPStartXfer+0x15ec>
 8011f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	461a      	mov	r2, r3
 8011faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011fae:	4413      	add	r3, r2
 8011fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	011a      	lsls	r2, r3, #4
 8011fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011fc6:	4413      	add	r3, r2
 8011fc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fd4:	b29a      	uxth	r2, r3
 8011fd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011fda:	801a      	strh	r2, [r3, #0]
 8011fdc:	e001      	b.n	8011fe2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e03a      	b.n	8012058 <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fea:	681a      	ldr	r2, [r3, #0]
 8011fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	4413      	add	r3, r2
 8011ffc:	881b      	ldrh	r3, [r3, #0]
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012008:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801200c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012010:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012014:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012018:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801201c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012020:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	441a      	add	r2, r3
 801203e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801204a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801204e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012052:	b29b      	uxth	r3, r3
 8012054:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012056:	2300      	movs	r3, #0
}
 8012058:	4618      	mov	r0, r3
 801205a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}

08012062 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012062:	b480      	push	{r7}
 8012064:	b085      	sub	sp, #20
 8012066:	af00      	add	r7, sp, #0
 8012068:	6078      	str	r0, [r7, #4]
 801206a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	785b      	ldrb	r3, [r3, #1]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d020      	beq.n	80120b6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012074:	687a      	ldr	r2, [r7, #4]
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	009b      	lsls	r3, r3, #2
 801207c:	4413      	add	r3, r2
 801207e:	881b      	ldrh	r3, [r3, #0]
 8012080:	b29b      	uxth	r3, r3
 8012082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801208a:	81bb      	strh	r3, [r7, #12]
 801208c:	89bb      	ldrh	r3, [r7, #12]
 801208e:	f083 0310 	eor.w	r3, r3, #16
 8012092:	81bb      	strh	r3, [r7, #12]
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	441a      	add	r2, r3
 801209e:	89bb      	ldrh	r3, [r7, #12]
 80120a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80120a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80120a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	8013      	strh	r3, [r2, #0]
 80120b4:	e01f      	b.n	80120f6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	009b      	lsls	r3, r3, #2
 80120be:	4413      	add	r3, r2
 80120c0:	881b      	ldrh	r3, [r3, #0]
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80120c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80120cc:	81fb      	strh	r3, [r7, #14]
 80120ce:	89fb      	ldrh	r3, [r7, #14]
 80120d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80120d4:	81fb      	strh	r3, [r7, #14]
 80120d6:	687a      	ldr	r2, [r7, #4]
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	009b      	lsls	r3, r3, #2
 80120de:	441a      	add	r2, r3
 80120e0:	89fb      	ldrh	r3, [r7, #14]
 80120e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80120e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80120ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120f2:	b29b      	uxth	r3, r3
 80120f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80120f6:	2300      	movs	r3, #0
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	3714      	adds	r7, #20
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr

08012104 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012104:	b480      	push	{r7}
 8012106:	b087      	sub	sp, #28
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	7b1b      	ldrb	r3, [r3, #12]
 8012112:	2b00      	cmp	r3, #0
 8012114:	f040 809d 	bne.w	8012252 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	785b      	ldrb	r3, [r3, #1]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d04c      	beq.n	80121ba <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	4413      	add	r3, r2
 801212a:	881b      	ldrh	r3, [r3, #0]
 801212c:	823b      	strh	r3, [r7, #16]
 801212e:	8a3b      	ldrh	r3, [r7, #16]
 8012130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012134:	2b00      	cmp	r3, #0
 8012136:	d01b      	beq.n	8012170 <USB_EPClearStall+0x6c>
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	781b      	ldrb	r3, [r3, #0]
 801213e:	009b      	lsls	r3, r3, #2
 8012140:	4413      	add	r3, r2
 8012142:	881b      	ldrh	r3, [r3, #0]
 8012144:	b29b      	uxth	r3, r3
 8012146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801214a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801214e:	81fb      	strh	r3, [r7, #14]
 8012150:	687a      	ldr	r2, [r7, #4]
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	781b      	ldrb	r3, [r3, #0]
 8012156:	009b      	lsls	r3, r3, #2
 8012158:	441a      	add	r2, r3
 801215a:	89fb      	ldrh	r3, [r7, #14]
 801215c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801216c:	b29b      	uxth	r3, r3
 801216e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	78db      	ldrb	r3, [r3, #3]
 8012174:	2b01      	cmp	r3, #1
 8012176:	d06c      	beq.n	8012252 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	781b      	ldrb	r3, [r3, #0]
 801217e:	009b      	lsls	r3, r3, #2
 8012180:	4413      	add	r3, r2
 8012182:	881b      	ldrh	r3, [r3, #0]
 8012184:	b29b      	uxth	r3, r3
 8012186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801218a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801218e:	81bb      	strh	r3, [r7, #12]
 8012190:	89bb      	ldrh	r3, [r7, #12]
 8012192:	f083 0320 	eor.w	r3, r3, #32
 8012196:	81bb      	strh	r3, [r7, #12]
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	441a      	add	r2, r3
 80121a2:	89bb      	ldrh	r3, [r7, #12]
 80121a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80121a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80121ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80121b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	8013      	strh	r3, [r2, #0]
 80121b8:	e04b      	b.n	8012252 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80121ba:	687a      	ldr	r2, [r7, #4]
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	009b      	lsls	r3, r3, #2
 80121c2:	4413      	add	r3, r2
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	82fb      	strh	r3, [r7, #22]
 80121c8:	8afb      	ldrh	r3, [r7, #22]
 80121ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d01b      	beq.n	801220a <USB_EPClearStall+0x106>
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	781b      	ldrb	r3, [r3, #0]
 80121d8:	009b      	lsls	r3, r3, #2
 80121da:	4413      	add	r3, r2
 80121dc:	881b      	ldrh	r3, [r3, #0]
 80121de:	b29b      	uxth	r3, r3
 80121e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80121e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80121e8:	82bb      	strh	r3, [r7, #20]
 80121ea:	687a      	ldr	r2, [r7, #4]
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	009b      	lsls	r3, r3, #2
 80121f2:	441a      	add	r2, r3
 80121f4:	8abb      	ldrh	r3, [r7, #20]
 80121f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80121fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80121fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012206:	b29b      	uxth	r3, r3
 8012208:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801220a:	687a      	ldr	r2, [r7, #4]
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	009b      	lsls	r3, r3, #2
 8012212:	4413      	add	r3, r2
 8012214:	881b      	ldrh	r3, [r3, #0]
 8012216:	b29b      	uxth	r3, r3
 8012218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801221c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012220:	827b      	strh	r3, [r7, #18]
 8012222:	8a7b      	ldrh	r3, [r7, #18]
 8012224:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012228:	827b      	strh	r3, [r7, #18]
 801222a:	8a7b      	ldrh	r3, [r7, #18]
 801222c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012230:	827b      	strh	r3, [r7, #18]
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	009b      	lsls	r3, r3, #2
 801223a:	441a      	add	r2, r3
 801223c:	8a7b      	ldrh	r3, [r7, #18]
 801223e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801224a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801224e:	b29b      	uxth	r3, r3
 8012250:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8012252:	2300      	movs	r3, #0
}
 8012254:	4618      	mov	r0, r3
 8012256:	371c      	adds	r7, #28
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr

08012260 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012260:	b480      	push	{r7}
 8012262:	b083      	sub	sp, #12
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	460b      	mov	r3, r1
 801226a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801226c:	78fb      	ldrb	r3, [r7, #3]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d103      	bne.n	801227a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2280      	movs	r2, #128	; 0x80
 8012276:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801227a:	2300      	movs	r3, #0
}
 801227c:	4618      	mov	r0, r3
 801227e:	370c      	adds	r7, #12
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr

08012288 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8012290:	2300      	movs	r3, #0
}
 8012292:	4618      	mov	r0, r3
 8012294:	370c      	adds	r7, #12
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr

0801229e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801229e:	b480      	push	{r7}
 80122a0:	b085      	sub	sp, #20
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80122b0:	68fb      	ldr	r3, [r7, #12]
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3714      	adds	r7, #20
 80122b6:	46bd      	mov	sp, r7
 80122b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122bc:	4770      	bx	lr

080122be <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80122be:	b480      	push	{r7}
 80122c0:	b08d      	sub	sp, #52	; 0x34
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	60f8      	str	r0, [r7, #12]
 80122c6:	60b9      	str	r1, [r7, #8]
 80122c8:	4611      	mov	r1, r2
 80122ca:	461a      	mov	r2, r3
 80122cc:	460b      	mov	r3, r1
 80122ce:	80fb      	strh	r3, [r7, #6]
 80122d0:	4613      	mov	r3, r2
 80122d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80122d4:	88bb      	ldrh	r3, [r7, #4]
 80122d6:	3301      	adds	r3, #1
 80122d8:	085b      	lsrs	r3, r3, #1
 80122da:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80122e4:	88fb      	ldrh	r3, [r7, #6]
 80122e6:	005a      	lsls	r2, r3, #1
 80122e8:	69fb      	ldr	r3, [r7, #28]
 80122ea:	4413      	add	r3, r2
 80122ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80122f0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80122f2:	6a3b      	ldr	r3, [r7, #32]
 80122f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122f6:	e01e      	b.n	8012336 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80122f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fa:	781b      	ldrb	r3, [r3, #0]
 80122fc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80122fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012300:	3301      	adds	r3, #1
 8012302:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8012304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	b29b      	uxth	r3, r3
 801230a:	021b      	lsls	r3, r3, #8
 801230c:	b29b      	uxth	r3, r3
 801230e:	461a      	mov	r2, r3
 8012310:	69bb      	ldr	r3, [r7, #24]
 8012312:	4313      	orrs	r3, r2
 8012314:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	b29a      	uxth	r2, r3
 801231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012320:	3302      	adds	r3, #2
 8012322:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8012324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012326:	3302      	adds	r3, #2
 8012328:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 801232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232c:	3301      	adds	r3, #1
 801232e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8012330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012332:	3b01      	subs	r3, #1
 8012334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1dd      	bne.n	80122f8 <USB_WritePMA+0x3a>
  }
}
 801233c:	bf00      	nop
 801233e:	bf00      	nop
 8012340:	3734      	adds	r7, #52	; 0x34
 8012342:	46bd      	mov	sp, r7
 8012344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012348:	4770      	bx	lr

0801234a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801234a:	b480      	push	{r7}
 801234c:	b08b      	sub	sp, #44	; 0x2c
 801234e:	af00      	add	r7, sp, #0
 8012350:	60f8      	str	r0, [r7, #12]
 8012352:	60b9      	str	r1, [r7, #8]
 8012354:	4611      	mov	r1, r2
 8012356:	461a      	mov	r2, r3
 8012358:	460b      	mov	r3, r1
 801235a:	80fb      	strh	r3, [r7, #6]
 801235c:	4613      	mov	r3, r2
 801235e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012360:	88bb      	ldrh	r3, [r7, #4]
 8012362:	085b      	lsrs	r3, r3, #1
 8012364:	b29b      	uxth	r3, r3
 8012366:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012370:	88fb      	ldrh	r3, [r7, #6]
 8012372:	005a      	lsls	r2, r3, #1
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	4413      	add	r3, r2
 8012378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801237c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 801237e:	69bb      	ldr	r3, [r7, #24]
 8012380:	627b      	str	r3, [r7, #36]	; 0x24
 8012382:	e01b      	b.n	80123bc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8012384:	6a3b      	ldr	r3, [r7, #32]
 8012386:	881b      	ldrh	r3, [r3, #0]
 8012388:	b29b      	uxth	r3, r3
 801238a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801238c:	6a3b      	ldr	r3, [r7, #32]
 801238e:	3302      	adds	r3, #2
 8012390:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	b2da      	uxtb	r2, r3
 8012396:	69fb      	ldr	r3, [r7, #28]
 8012398:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	3301      	adds	r3, #1
 801239e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	0a1b      	lsrs	r3, r3, #8
 80123a4:	b2da      	uxtb	r2, r3
 80123a6:	69fb      	ldr	r3, [r7, #28]
 80123a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	3301      	adds	r3, #1
 80123ae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80123b0:	6a3b      	ldr	r3, [r7, #32]
 80123b2:	3302      	adds	r3, #2
 80123b4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80123b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b8:	3b01      	subs	r3, #1
 80123ba:	627b      	str	r3, [r7, #36]	; 0x24
 80123bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d1e0      	bne.n	8012384 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80123c2:	88bb      	ldrh	r3, [r7, #4]
 80123c4:	f003 0301 	and.w	r3, r3, #1
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d007      	beq.n	80123de <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80123ce:	6a3b      	ldr	r3, [r7, #32]
 80123d0:	881b      	ldrh	r3, [r3, #0]
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80123d6:	693b      	ldr	r3, [r7, #16]
 80123d8:	b2da      	uxtb	r2, r3
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	701a      	strb	r2, [r3, #0]
  }
}
 80123de:	bf00      	nop
 80123e0:	372c      	adds	r7, #44	; 0x2c
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr

080123ea <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80123ea:	b580      	push	{r7, lr}
 80123ec:	b084      	sub	sp, #16
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
 80123f2:	460b      	mov	r3, r1
 80123f4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80123f6:	2300      	movs	r3, #0
 80123f8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	7c1b      	ldrb	r3, [r3, #16]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d115      	bne.n	801242e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012406:	2202      	movs	r2, #2
 8012408:	2181      	movs	r1, #129	; 0x81
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f004 fc3f 	bl	8016c8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2201      	movs	r2, #1
 8012414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012416:	f44f 7300 	mov.w	r3, #512	; 0x200
 801241a:	2202      	movs	r2, #2
 801241c:	2101      	movs	r1, #1
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f004 fc35 	bl	8016c8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2201      	movs	r2, #1
 8012428:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801242c:	e012      	b.n	8012454 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801242e:	2340      	movs	r3, #64	; 0x40
 8012430:	2202      	movs	r2, #2
 8012432:	2181      	movs	r1, #129	; 0x81
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f004 fc2a 	bl	8016c8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2201      	movs	r2, #1
 801243e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012440:	2340      	movs	r3, #64	; 0x40
 8012442:	2202      	movs	r2, #2
 8012444:	2101      	movs	r1, #1
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f004 fc21 	bl	8016c8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2201      	movs	r2, #1
 8012450:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012454:	2308      	movs	r3, #8
 8012456:	2203      	movs	r2, #3
 8012458:	2182      	movs	r1, #130	; 0x82
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f004 fc17 	bl	8016c8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2201      	movs	r2, #1
 8012464:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012466:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801246a:	f004 fd39 	bl	8016ee0 <USBD_static_malloc>
 801246e:	4602      	mov	r2, r0
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801247c:	2b00      	cmp	r3, #0
 801247e:	d102      	bne.n	8012486 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8012480:	2301      	movs	r3, #1
 8012482:	73fb      	strb	r3, [r7, #15]
 8012484:	e026      	b.n	80124d4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801248c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	2200      	movs	r2, #0
 801249c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	2200      	movs	r2, #0
 80124a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	7c1b      	ldrb	r3, [r3, #16]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d109      	bne.n	80124c4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80124b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124ba:	2101      	movs	r1, #1
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f004 fcd8 	bl	8016e72 <USBD_LL_PrepareReceive>
 80124c2:	e007      	b.n	80124d4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80124ca:	2340      	movs	r3, #64	; 0x40
 80124cc:	2101      	movs	r1, #1
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f004 fccf 	bl	8016e72 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80124d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3710      	adds	r7, #16
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80124de:	b580      	push	{r7, lr}
 80124e0:	b084      	sub	sp, #16
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
 80124e6:	460b      	mov	r3, r1
 80124e8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80124ea:	2300      	movs	r3, #0
 80124ec:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80124ee:	2181      	movs	r1, #129	; 0x81
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f004 fbf2 	bl	8016cda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	2200      	movs	r2, #0
 80124fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80124fc:	2101      	movs	r1, #1
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f004 fbeb 	bl	8016cda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2200      	movs	r2, #0
 8012508:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801250c:	2182      	movs	r1, #130	; 0x82
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f004 fbe3 	bl	8016cda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2200      	movs	r2, #0
 8012518:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012520:	2b00      	cmp	r3, #0
 8012522:	d00e      	beq.n	8012542 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012534:	4618      	mov	r0, r3
 8012536:	f004 fce1 	bl	8016efc <USBD_static_free>
    pdev->pClassData = NULL;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2200      	movs	r2, #0
 801253e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8012542:	7bfb      	ldrb	r3, [r7, #15]
}
 8012544:	4618      	mov	r0, r3
 8012546:	3710      	adds	r7, #16
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b086      	sub	sp, #24
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801255c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801255e:	2300      	movs	r3, #0
 8012560:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8012562:	2300      	movs	r3, #0
 8012564:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8012566:	2300      	movs	r3, #0
 8012568:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012572:	2b00      	cmp	r3, #0
 8012574:	d039      	beq.n	80125ea <USBD_CDC_Setup+0x9e>
 8012576:	2b20      	cmp	r3, #32
 8012578:	d17f      	bne.n	801267a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	88db      	ldrh	r3, [r3, #6]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d029      	beq.n	80125d6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	b25b      	sxtb	r3, r3
 8012588:	2b00      	cmp	r3, #0
 801258a:	da11      	bge.n	80125b0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012592:	689b      	ldr	r3, [r3, #8]
 8012594:	683a      	ldr	r2, [r7, #0]
 8012596:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8012598:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801259a:	683a      	ldr	r2, [r7, #0]
 801259c:	88d2      	ldrh	r2, [r2, #6]
 801259e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80125a0:	6939      	ldr	r1, [r7, #16]
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	88db      	ldrh	r3, [r3, #6]
 80125a6:	461a      	mov	r2, r3
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f001 fa14 	bl	80139d6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80125ae:	e06b      	b.n	8012688 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	785a      	ldrb	r2, [r3, #1]
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	88db      	ldrh	r3, [r3, #6]
 80125be:	b2da      	uxtb	r2, r3
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80125c6:	6939      	ldr	r1, [r7, #16]
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	88db      	ldrh	r3, [r3, #6]
 80125cc:	461a      	mov	r2, r3
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f001 fa2f 	bl	8013a32 <USBD_CtlPrepareRx>
      break;
 80125d4:	e058      	b.n	8012688 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80125dc:	689b      	ldr	r3, [r3, #8]
 80125de:	683a      	ldr	r2, [r7, #0]
 80125e0:	7850      	ldrb	r0, [r2, #1]
 80125e2:	2200      	movs	r2, #0
 80125e4:	6839      	ldr	r1, [r7, #0]
 80125e6:	4798      	blx	r3
      break;
 80125e8:	e04e      	b.n	8012688 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	785b      	ldrb	r3, [r3, #1]
 80125ee:	2b0b      	cmp	r3, #11
 80125f0:	d02e      	beq.n	8012650 <USBD_CDC_Setup+0x104>
 80125f2:	2b0b      	cmp	r3, #11
 80125f4:	dc38      	bgt.n	8012668 <USBD_CDC_Setup+0x11c>
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d002      	beq.n	8012600 <USBD_CDC_Setup+0xb4>
 80125fa:	2b0a      	cmp	r3, #10
 80125fc:	d014      	beq.n	8012628 <USBD_CDC_Setup+0xdc>
 80125fe:	e033      	b.n	8012668 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012606:	2b03      	cmp	r3, #3
 8012608:	d107      	bne.n	801261a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801260a:	f107 030c 	add.w	r3, r7, #12
 801260e:	2202      	movs	r2, #2
 8012610:	4619      	mov	r1, r3
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f001 f9df 	bl	80139d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012618:	e02e      	b.n	8012678 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 801261a:	6839      	ldr	r1, [r7, #0]
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f001 f96f 	bl	8013900 <USBD_CtlError>
            ret = USBD_FAIL;
 8012622:	2302      	movs	r3, #2
 8012624:	75fb      	strb	r3, [r7, #23]
          break;
 8012626:	e027      	b.n	8012678 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801262e:	2b03      	cmp	r3, #3
 8012630:	d107      	bne.n	8012642 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8012632:	f107 030f 	add.w	r3, r7, #15
 8012636:	2201      	movs	r2, #1
 8012638:	4619      	mov	r1, r3
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f001 f9cb 	bl	80139d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012640:	e01a      	b.n	8012678 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8012642:	6839      	ldr	r1, [r7, #0]
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f001 f95b 	bl	8013900 <USBD_CtlError>
            ret = USBD_FAIL;
 801264a:	2302      	movs	r3, #2
 801264c:	75fb      	strb	r3, [r7, #23]
          break;
 801264e:	e013      	b.n	8012678 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012656:	2b03      	cmp	r3, #3
 8012658:	d00d      	beq.n	8012676 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 801265a:	6839      	ldr	r1, [r7, #0]
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f001 f94f 	bl	8013900 <USBD_CtlError>
            ret = USBD_FAIL;
 8012662:	2302      	movs	r3, #2
 8012664:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012666:	e006      	b.n	8012676 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8012668:	6839      	ldr	r1, [r7, #0]
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f001 f948 	bl	8013900 <USBD_CtlError>
          ret = USBD_FAIL;
 8012670:	2302      	movs	r3, #2
 8012672:	75fb      	strb	r3, [r7, #23]
          break;
 8012674:	e000      	b.n	8012678 <USBD_CDC_Setup+0x12c>
          break;
 8012676:	bf00      	nop
      }
      break;
 8012678:	e006      	b.n	8012688 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801267a:	6839      	ldr	r1, [r7, #0]
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f001 f93f 	bl	8013900 <USBD_CtlError>
      ret = USBD_FAIL;
 8012682:	2302      	movs	r3, #2
 8012684:	75fb      	strb	r3, [r7, #23]
      break;
 8012686:	bf00      	nop
  }

  return ret;
 8012688:	7dfb      	ldrb	r3, [r7, #23]
}
 801268a:	4618      	mov	r0, r3
 801268c:	3718      	adds	r7, #24
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}

08012692 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012692:	b580      	push	{r7, lr}
 8012694:	b084      	sub	sp, #16
 8012696:	af00      	add	r7, sp, #0
 8012698:	6078      	str	r0, [r7, #4]
 801269a:	460b      	mov	r3, r1
 801269c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126a4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80126ac:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d03a      	beq.n	801272e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80126b8:	78fa      	ldrb	r2, [r7, #3]
 80126ba:	6879      	ldr	r1, [r7, #4]
 80126bc:	4613      	mov	r3, r2
 80126be:	009b      	lsls	r3, r3, #2
 80126c0:	4413      	add	r3, r2
 80126c2:	009b      	lsls	r3, r3, #2
 80126c4:	440b      	add	r3, r1
 80126c6:	331c      	adds	r3, #28
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d029      	beq.n	8012722 <USBD_CDC_DataIn+0x90>
 80126ce:	78fa      	ldrb	r2, [r7, #3]
 80126d0:	6879      	ldr	r1, [r7, #4]
 80126d2:	4613      	mov	r3, r2
 80126d4:	009b      	lsls	r3, r3, #2
 80126d6:	4413      	add	r3, r2
 80126d8:	009b      	lsls	r3, r3, #2
 80126da:	440b      	add	r3, r1
 80126dc:	331c      	adds	r3, #28
 80126de:	681a      	ldr	r2, [r3, #0]
 80126e0:	78f9      	ldrb	r1, [r7, #3]
 80126e2:	68b8      	ldr	r0, [r7, #8]
 80126e4:	460b      	mov	r3, r1
 80126e6:	009b      	lsls	r3, r3, #2
 80126e8:	440b      	add	r3, r1
 80126ea:	00db      	lsls	r3, r3, #3
 80126ec:	4403      	add	r3, r0
 80126ee:	3338      	adds	r3, #56	; 0x38
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80126f6:	fb01 f303 	mul.w	r3, r1, r3
 80126fa:	1ad3      	subs	r3, r2, r3
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d110      	bne.n	8012722 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8012700:	78fa      	ldrb	r2, [r7, #3]
 8012702:	6879      	ldr	r1, [r7, #4]
 8012704:	4613      	mov	r3, r2
 8012706:	009b      	lsls	r3, r3, #2
 8012708:	4413      	add	r3, r2
 801270a:	009b      	lsls	r3, r3, #2
 801270c:	440b      	add	r3, r1
 801270e:	331c      	adds	r3, #28
 8012710:	2200      	movs	r2, #0
 8012712:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012714:	78f9      	ldrb	r1, [r7, #3]
 8012716:	2300      	movs	r3, #0
 8012718:	2200      	movs	r2, #0
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f004 fb86 	bl	8016e2c <USBD_LL_Transmit>
 8012720:	e003      	b.n	801272a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	2200      	movs	r2, #0
 8012726:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 801272a:	2300      	movs	r3, #0
 801272c:	e000      	b.n	8012730 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801272e:	2302      	movs	r3, #2
  }
}
 8012730:	4618      	mov	r0, r3
 8012732:	3710      	adds	r7, #16
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	460b      	mov	r3, r1
 8012742:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801274a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801274c:	78fb      	ldrb	r3, [r7, #3]
 801274e:	4619      	mov	r1, r3
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f004 fbb1 	bl	8016eb8 <USBD_LL_GetRxDataSize>
 8012756:	4602      	mov	r2, r0
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012764:	2b00      	cmp	r3, #0
 8012766:	d00d      	beq.n	8012784 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	68fa      	ldr	r2, [r7, #12]
 8012772:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801277c:	4611      	mov	r1, r2
 801277e:	4798      	blx	r3

    return USBD_OK;
 8012780:	2300      	movs	r3, #0
 8012782:	e000      	b.n	8012786 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8012784:	2302      	movs	r3, #2
  }
}
 8012786:	4618      	mov	r0, r3
 8012788:	3710      	adds	r7, #16
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b084      	sub	sp, #16
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801279c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d015      	beq.n	80127d4 <USBD_CDC_EP0_RxReady+0x46>
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80127ae:	2bff      	cmp	r3, #255	; 0xff
 80127b0:	d010      	beq.n	80127d4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80127b8:	689b      	ldr	r3, [r3, #8]
 80127ba:	68fa      	ldr	r2, [r7, #12]
 80127bc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80127c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80127c2:	68fa      	ldr	r2, [r7, #12]
 80127c4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80127c8:	b292      	uxth	r2, r2
 80127ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	22ff      	movs	r2, #255	; 0xff
 80127d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80127d4:	2300      	movs	r3, #0
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3710      	adds	r7, #16
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
	...

080127e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80127e0:	b480      	push	{r7}
 80127e2:	b083      	sub	sp, #12
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	2243      	movs	r2, #67	; 0x43
 80127ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80127ee:	4b03      	ldr	r3, [pc, #12]	; (80127fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr
 80127fc:	200000a4 	.word	0x200000a4

08012800 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2243      	movs	r2, #67	; 0x43
 801280c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801280e:	4b03      	ldr	r3, [pc, #12]	; (801281c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012810:	4618      	mov	r0, r3
 8012812:	370c      	adds	r7, #12
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr
 801281c:	20000060 	.word	0x20000060

08012820 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012820:	b480      	push	{r7}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2243      	movs	r2, #67	; 0x43
 801282c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801282e:	4b03      	ldr	r3, [pc, #12]	; (801283c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012830:	4618      	mov	r0, r3
 8012832:	370c      	adds	r7, #12
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr
 801283c:	200000e8 	.word	0x200000e8

08012840 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012840:	b480      	push	{r7}
 8012842:	b083      	sub	sp, #12
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	220a      	movs	r2, #10
 801284c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801284e:	4b03      	ldr	r3, [pc, #12]	; (801285c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012850:	4618      	mov	r0, r3
 8012852:	370c      	adds	r7, #12
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr
 801285c:	2000001c 	.word	0x2000001c

08012860 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8012860:	b480      	push	{r7}
 8012862:	b085      	sub	sp, #20
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
 8012868:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801286a:	2302      	movs	r3, #2
 801286c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d005      	beq.n	8012880 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	683a      	ldr	r2, [r7, #0]
 8012878:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 801287c:	2300      	movs	r3, #0
 801287e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012880:	7bfb      	ldrb	r3, [r7, #15]
}
 8012882:	4618      	mov	r0, r3
 8012884:	3714      	adds	r7, #20
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr

0801288e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801288e:	b480      	push	{r7}
 8012890:	b087      	sub	sp, #28
 8012892:	af00      	add	r7, sp, #0
 8012894:	60f8      	str	r0, [r7, #12]
 8012896:	60b9      	str	r1, [r7, #8]
 8012898:	4613      	mov	r3, r2
 801289a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128a2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	68ba      	ldr	r2, [r7, #8]
 80128a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80128ac:	88fa      	ldrh	r2, [r7, #6]
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80128b4:	2300      	movs	r3, #0
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	371c      	adds	r7, #28
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr

080128c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80128c2:	b480      	push	{r7}
 80128c4:	b085      	sub	sp, #20
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
 80128ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128d2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	683a      	ldr	r2, [r7, #0]
 80128d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80128dc:	2300      	movs	r3, #0
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3714      	adds	r7, #20
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr

080128ea <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80128ea:	b580      	push	{r7, lr}
 80128ec:	b084      	sub	sp, #16
 80128ee:	af00      	add	r7, sp, #0
 80128f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012900:	2b00      	cmp	r3, #0
 8012902:	d01c      	beq.n	801293e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801290a:	2b00      	cmp	r3, #0
 801290c:	d115      	bne.n	801293a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	2201      	movs	r2, #1
 8012912:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801292c:	b29b      	uxth	r3, r3
 801292e:	2181      	movs	r1, #129	; 0x81
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f004 fa7b 	bl	8016e2c <USBD_LL_Transmit>

      return USBD_OK;
 8012936:	2300      	movs	r3, #0
 8012938:	e002      	b.n	8012940 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 801293a:	2301      	movs	r3, #1
 801293c:	e000      	b.n	8012940 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 801293e:	2302      	movs	r3, #2
  }
}
 8012940:	4618      	mov	r0, r3
 8012942:	3710      	adds	r7, #16
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b084      	sub	sp, #16
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012956:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801295e:	2b00      	cmp	r3, #0
 8012960:	d017      	beq.n	8012992 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	7c1b      	ldrb	r3, [r3, #16]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d109      	bne.n	801297e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012974:	2101      	movs	r1, #1
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f004 fa7b 	bl	8016e72 <USBD_LL_PrepareReceive>
 801297c:	e007      	b.n	801298e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012984:	2340      	movs	r3, #64	; 0x40
 8012986:	2101      	movs	r1, #1
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f004 fa72 	bl	8016e72 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801298e:	2300      	movs	r3, #0
 8012990:	e000      	b.n	8012994 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8012992:	2302      	movs	r3, #2
  }
}
 8012994:	4618      	mov	r0, r3
 8012996:	3710      	adds	r7, #16
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b084      	sub	sp, #16
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	60f8      	str	r0, [r7, #12]
 80129a4:	60b9      	str	r1, [r7, #8]
 80129a6:	4613      	mov	r3, r2
 80129a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d101      	bne.n	80129b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80129b0:	2302      	movs	r3, #2
 80129b2:	e01a      	b.n	80129ea <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d003      	beq.n	80129c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2200      	movs	r2, #0
 80129c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d003      	beq.n	80129d4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	68ba      	ldr	r2, [r7, #8]
 80129d0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2201      	movs	r2, #1
 80129d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	79fa      	ldrb	r2, [r7, #7]
 80129e0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80129e2:	68f8      	ldr	r0, [r7, #12]
 80129e4:	f004 f8de 	bl	8016ba4 <USBD_LL_Init>

  return USBD_OK;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3710      	adds	r7, #16
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}

080129f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80129f2:	b480      	push	{r7}
 80129f4:	b085      	sub	sp, #20
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
 80129fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80129fc:	2300      	movs	r3, #0
 80129fe:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d006      	beq.n	8012a14 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	683a      	ldr	r2, [r7, #0]
 8012a0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	73fb      	strb	r3, [r7, #15]
 8012a12:	e001      	b.n	8012a18 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8012a14:	2302      	movs	r3, #2
 8012a16:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3714      	adds	r7, #20
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a24:	4770      	bx	lr

08012a26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b082      	sub	sp, #8
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f004 f912 	bl	8016c58 <USBD_LL_Start>

  return USBD_OK;
 8012a34:	2300      	movs	r3, #0
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3708      	adds	r7, #8
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}

08012a3e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012a3e:	b480      	push	{r7}
 8012a40:	b083      	sub	sp, #12
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012a46:	2300      	movs	r3, #0
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	370c      	adds	r7, #12
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr

08012a54 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b084      	sub	sp, #16
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012a60:	2302      	movs	r3, #2
 8012a62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d00c      	beq.n	8012a88 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	78fa      	ldrb	r2, [r7, #3]
 8012a78:	4611      	mov	r1, r2
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	4798      	blx	r3
 8012a7e:	4603      	mov	r3, r0
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d101      	bne.n	8012a88 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8012a84:	2300      	movs	r3, #0
 8012a86:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3710      	adds	r7, #16
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}

08012a92 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012a92:	b580      	push	{r7, lr}
 8012a94:	b082      	sub	sp, #8
 8012a96:	af00      	add	r7, sp, #0
 8012a98:	6078      	str	r0, [r7, #4]
 8012a9a:	460b      	mov	r3, r1
 8012a9c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	78fa      	ldrb	r2, [r7, #3]
 8012aa8:	4611      	mov	r1, r2
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	4798      	blx	r3

  return USBD_OK;
 8012aae:	2300      	movs	r3, #0
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3708      	adds	r7, #8
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012ac8:	6839      	ldr	r1, [r7, #0]
 8012aca:	4618      	mov	r0, r3
 8012acc:	f000 fedb 	bl	8013886 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012ade:	461a      	mov	r2, r3
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8012aec:	f003 031f 	and.w	r3, r3, #31
 8012af0:	2b02      	cmp	r3, #2
 8012af2:	d016      	beq.n	8012b22 <USBD_LL_SetupStage+0x6a>
 8012af4:	2b02      	cmp	r3, #2
 8012af6:	d81c      	bhi.n	8012b32 <USBD_LL_SetupStage+0x7a>
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d002      	beq.n	8012b02 <USBD_LL_SetupStage+0x4a>
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d008      	beq.n	8012b12 <USBD_LL_SetupStage+0x5a>
 8012b00:	e017      	b.n	8012b32 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012b08:	4619      	mov	r1, r3
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f000 f9ce 	bl	8012eac <USBD_StdDevReq>
      break;
 8012b10:	e01a      	b.n	8012b48 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012b18:	4619      	mov	r1, r3
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f000 fa30 	bl	8012f80 <USBD_StdItfReq>
      break;
 8012b20:	e012      	b.n	8012b48 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012b28:	4619      	mov	r1, r3
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f000 fa70 	bl	8013010 <USBD_StdEPReq>
      break;
 8012b30:	e00a      	b.n	8012b48 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8012b38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012b3c:	b2db      	uxtb	r3, r3
 8012b3e:	4619      	mov	r1, r3
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f004 f8e9 	bl	8016d18 <USBD_LL_StallEP>
      break;
 8012b46:	bf00      	nop
  }

  return USBD_OK;
 8012b48:	2300      	movs	r3, #0
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3708      	adds	r7, #8
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b086      	sub	sp, #24
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	60f8      	str	r0, [r7, #12]
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	607a      	str	r2, [r7, #4]
 8012b5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012b60:	7afb      	ldrb	r3, [r7, #11]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d14b      	bne.n	8012bfe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012b6c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012b74:	2b03      	cmp	r3, #3
 8012b76:	d134      	bne.n	8012be2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	68da      	ldr	r2, [r3, #12]
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	691b      	ldr	r3, [r3, #16]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d919      	bls.n	8012bb8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	68da      	ldr	r2, [r3, #12]
 8012b88:	697b      	ldr	r3, [r7, #20]
 8012b8a:	691b      	ldr	r3, [r3, #16]
 8012b8c:	1ad2      	subs	r2, r2, r3
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	68da      	ldr	r2, [r3, #12]
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d203      	bcs.n	8012ba6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	e002      	b.n	8012bac <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	461a      	mov	r2, r3
 8012bae:	6879      	ldr	r1, [r7, #4]
 8012bb0:	68f8      	ldr	r0, [r7, #12]
 8012bb2:	f000 ff5c 	bl	8013a6e <USBD_CtlContinueRx>
 8012bb6:	e038      	b.n	8012c2a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bbe:	691b      	ldr	r3, [r3, #16]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d00a      	beq.n	8012bda <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012bca:	2b03      	cmp	r3, #3
 8012bcc:	d105      	bne.n	8012bda <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bd4:	691b      	ldr	r3, [r3, #16]
 8012bd6:	68f8      	ldr	r0, [r7, #12]
 8012bd8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8012bda:	68f8      	ldr	r0, [r7, #12]
 8012bdc:	f000 ff59 	bl	8013a92 <USBD_CtlSendStatus>
 8012be0:	e023      	b.n	8012c2a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012be8:	2b05      	cmp	r3, #5
 8012bea:	d11e      	bne.n	8012c2a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8012bf4:	2100      	movs	r1, #0
 8012bf6:	68f8      	ldr	r0, [r7, #12]
 8012bf8:	f004 f88e 	bl	8016d18 <USBD_LL_StallEP>
 8012bfc:	e015      	b.n	8012c2a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c04:	699b      	ldr	r3, [r3, #24]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d00d      	beq.n	8012c26 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8012c10:	2b03      	cmp	r3, #3
 8012c12:	d108      	bne.n	8012c26 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c1a:	699b      	ldr	r3, [r3, #24]
 8012c1c:	7afa      	ldrb	r2, [r7, #11]
 8012c1e:	4611      	mov	r1, r2
 8012c20:	68f8      	ldr	r0, [r7, #12]
 8012c22:	4798      	blx	r3
 8012c24:	e001      	b.n	8012c2a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012c26:	2302      	movs	r3, #2
 8012c28:	e000      	b.n	8012c2c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8012c2a:	2300      	movs	r3, #0
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3718      	adds	r7, #24
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b086      	sub	sp, #24
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	60f8      	str	r0, [r7, #12]
 8012c3c:	460b      	mov	r3, r1
 8012c3e:	607a      	str	r2, [r7, #4]
 8012c40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012c42:	7afb      	ldrb	r3, [r7, #11]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d17f      	bne.n	8012d48 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	3314      	adds	r3, #20
 8012c4c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012c54:	2b02      	cmp	r3, #2
 8012c56:	d15c      	bne.n	8012d12 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	68da      	ldr	r2, [r3, #12]
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	691b      	ldr	r3, [r3, #16]
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d915      	bls.n	8012c90 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	68da      	ldr	r2, [r3, #12]
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	691b      	ldr	r3, [r3, #16]
 8012c6c:	1ad2      	subs	r2, r2, r3
 8012c6e:	697b      	ldr	r3, [r7, #20]
 8012c70:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	68db      	ldr	r3, [r3, #12]
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	461a      	mov	r2, r3
 8012c7a:	6879      	ldr	r1, [r7, #4]
 8012c7c:	68f8      	ldr	r0, [r7, #12]
 8012c7e:	f000 fec6 	bl	8013a0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c82:	2300      	movs	r3, #0
 8012c84:	2200      	movs	r2, #0
 8012c86:	2100      	movs	r1, #0
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f004 f8f2 	bl	8016e72 <USBD_LL_PrepareReceive>
 8012c8e:	e04e      	b.n	8012d2e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	689b      	ldr	r3, [r3, #8]
 8012c94:	697a      	ldr	r2, [r7, #20]
 8012c96:	6912      	ldr	r2, [r2, #16]
 8012c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c9c:	fb01 f202 	mul.w	r2, r1, r2
 8012ca0:	1a9b      	subs	r3, r3, r2
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d11c      	bne.n	8012ce0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	689a      	ldr	r2, [r3, #8]
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d316      	bcc.n	8012ce0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	689a      	ldr	r2, [r3, #8]
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d20f      	bcs.n	8012ce0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	2100      	movs	r1, #0
 8012cc4:	68f8      	ldr	r0, [r7, #12]
 8012cc6:	f000 fea2 	bl	8013a0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	2100      	movs	r1, #0
 8012cd8:	68f8      	ldr	r0, [r7, #12]
 8012cda:	f004 f8ca 	bl	8016e72 <USBD_LL_PrepareReceive>
 8012cde:	e026      	b.n	8012d2e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ce6:	68db      	ldr	r3, [r3, #12]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d00a      	beq.n	8012d02 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012cf2:	2b03      	cmp	r3, #3
 8012cf4:	d105      	bne.n	8012d02 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cfc:	68db      	ldr	r3, [r3, #12]
 8012cfe:	68f8      	ldr	r0, [r7, #12]
 8012d00:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8012d02:	2180      	movs	r1, #128	; 0x80
 8012d04:	68f8      	ldr	r0, [r7, #12]
 8012d06:	f004 f807 	bl	8016d18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8012d0a:	68f8      	ldr	r0, [r7, #12]
 8012d0c:	f000 fed4 	bl	8013ab8 <USBD_CtlReceiveStatus>
 8012d10:	e00d      	b.n	8012d2e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012d18:	2b04      	cmp	r3, #4
 8012d1a:	d004      	beq.n	8012d26 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d103      	bne.n	8012d2e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8012d26:	2180      	movs	r1, #128	; 0x80
 8012d28:	68f8      	ldr	r0, [r7, #12]
 8012d2a:	f003 fff5 	bl	8016d18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d11d      	bne.n	8012d74 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8012d38:	68f8      	ldr	r0, [r7, #12]
 8012d3a:	f7ff fe80 	bl	8012a3e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	2200      	movs	r2, #0
 8012d42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012d46:	e015      	b.n	8012d74 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d4e:	695b      	ldr	r3, [r3, #20]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d00d      	beq.n	8012d70 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8012d5a:	2b03      	cmp	r3, #3
 8012d5c:	d108      	bne.n	8012d70 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d64:	695b      	ldr	r3, [r3, #20]
 8012d66:	7afa      	ldrb	r2, [r7, #11]
 8012d68:	4611      	mov	r1, r2
 8012d6a:	68f8      	ldr	r0, [r7, #12]
 8012d6c:	4798      	blx	r3
 8012d6e:	e001      	b.n	8012d74 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012d70:	2302      	movs	r3, #2
 8012d72:	e000      	b.n	8012d76 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8012d74:	2300      	movs	r3, #0
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3718      	adds	r7, #24
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}

08012d7e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012d7e:	b580      	push	{r7, lr}
 8012d80:	b082      	sub	sp, #8
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012d86:	2340      	movs	r3, #64	; 0x40
 8012d88:	2200      	movs	r2, #0
 8012d8a:	2100      	movs	r1, #0
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f003 ff7e 	bl	8016c8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2201      	movs	r2, #1
 8012d96:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2240      	movs	r2, #64	; 0x40
 8012d9e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012da2:	2340      	movs	r3, #64	; 0x40
 8012da4:	2200      	movs	r2, #0
 8012da6:	2180      	movs	r1, #128	; 0x80
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f003 ff70 	bl	8016c8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2201      	movs	r2, #1
 8012db2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2240      	movs	r2, #64	; 0x40
 8012db8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2201      	movs	r2, #1
 8012dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d009      	beq.n	8012df6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	6852      	ldr	r2, [r2, #4]
 8012dee:	b2d2      	uxtb	r2, r2
 8012df0:	4611      	mov	r1, r2
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	4798      	blx	r3
  }

  return USBD_OK;
 8012df6:	2300      	movs	r3, #0
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3708      	adds	r7, #8
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}

08012e00 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012e00:	b480      	push	{r7}
 8012e02:	b083      	sub	sp, #12
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	460b      	mov	r3, r1
 8012e0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	78fa      	ldrb	r2, [r7, #3]
 8012e10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012e12:	2300      	movs	r3, #0
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr

08012e20 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012e20:	b480      	push	{r7}
 8012e22:	b083      	sub	sp, #12
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2204      	movs	r2, #4
 8012e38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012e3c:	2300      	movs	r3, #0
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	370c      	adds	r7, #12
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr

08012e4a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012e4a:	b480      	push	{r7}
 8012e4c:	b083      	sub	sp, #12
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e58:	2b04      	cmp	r3, #4
 8012e5a:	d105      	bne.n	8012e68 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012e68:	2300      	movs	r3, #0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	370c      	adds	r7, #12
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr

08012e76 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b082      	sub	sp, #8
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e84:	2b03      	cmp	r3, #3
 8012e86:	d10b      	bne.n	8012ea0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e8e:	69db      	ldr	r3, [r3, #28]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d005      	beq.n	8012ea0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e9a:	69db      	ldr	r3, [r3, #28]
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012ea0:	2300      	movs	r3, #0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3708      	adds	r7, #8
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
	...

08012eac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b084      	sub	sp, #16
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012ec2:	2b40      	cmp	r3, #64	; 0x40
 8012ec4:	d005      	beq.n	8012ed2 <USBD_StdDevReq+0x26>
 8012ec6:	2b40      	cmp	r3, #64	; 0x40
 8012ec8:	d84f      	bhi.n	8012f6a <USBD_StdDevReq+0xbe>
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d009      	beq.n	8012ee2 <USBD_StdDevReq+0x36>
 8012ece:	2b20      	cmp	r3, #32
 8012ed0:	d14b      	bne.n	8012f6a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ed8:	689b      	ldr	r3, [r3, #8]
 8012eda:	6839      	ldr	r1, [r7, #0]
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	4798      	blx	r3
      break;
 8012ee0:	e048      	b.n	8012f74 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	785b      	ldrb	r3, [r3, #1]
 8012ee6:	2b09      	cmp	r3, #9
 8012ee8:	d839      	bhi.n	8012f5e <USBD_StdDevReq+0xb2>
 8012eea:	a201      	add	r2, pc, #4	; (adr r2, 8012ef0 <USBD_StdDevReq+0x44>)
 8012eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ef0:	08012f41 	.word	0x08012f41
 8012ef4:	08012f55 	.word	0x08012f55
 8012ef8:	08012f5f 	.word	0x08012f5f
 8012efc:	08012f4b 	.word	0x08012f4b
 8012f00:	08012f5f 	.word	0x08012f5f
 8012f04:	08012f23 	.word	0x08012f23
 8012f08:	08012f19 	.word	0x08012f19
 8012f0c:	08012f5f 	.word	0x08012f5f
 8012f10:	08012f37 	.word	0x08012f37
 8012f14:	08012f2d 	.word	0x08012f2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012f18:	6839      	ldr	r1, [r7, #0]
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f000 f9dc 	bl	80132d8 <USBD_GetDescriptor>
          break;
 8012f20:	e022      	b.n	8012f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012f22:	6839      	ldr	r1, [r7, #0]
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 fb3f 	bl	80135a8 <USBD_SetAddress>
          break;
 8012f2a:	e01d      	b.n	8012f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012f2c:	6839      	ldr	r1, [r7, #0]
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f000 fb7e 	bl	8013630 <USBD_SetConfig>
          break;
 8012f34:	e018      	b.n	8012f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012f36:	6839      	ldr	r1, [r7, #0]
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f000 fc07 	bl	801374c <USBD_GetConfig>
          break;
 8012f3e:	e013      	b.n	8012f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012f40:	6839      	ldr	r1, [r7, #0]
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f000 fc37 	bl	80137b6 <USBD_GetStatus>
          break;
 8012f48:	e00e      	b.n	8012f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012f4a:	6839      	ldr	r1, [r7, #0]
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f000 fc65 	bl	801381c <USBD_SetFeature>
          break;
 8012f52:	e009      	b.n	8012f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012f54:	6839      	ldr	r1, [r7, #0]
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f000 fc74 	bl	8013844 <USBD_ClrFeature>
          break;
 8012f5c:	e004      	b.n	8012f68 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8012f5e:	6839      	ldr	r1, [r7, #0]
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f000 fccd 	bl	8013900 <USBD_CtlError>
          break;
 8012f66:	bf00      	nop
      }
      break;
 8012f68:	e004      	b.n	8012f74 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8012f6a:	6839      	ldr	r1, [r7, #0]
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f000 fcc7 	bl	8013900 <USBD_CtlError>
      break;
 8012f72:	bf00      	nop
  }

  return ret;
 8012f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3710      	adds	r7, #16
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}
 8012f7e:	bf00      	nop

08012f80 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b084      	sub	sp, #16
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
 8012f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	781b      	ldrb	r3, [r3, #0]
 8012f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012f96:	2b40      	cmp	r3, #64	; 0x40
 8012f98:	d005      	beq.n	8012fa6 <USBD_StdItfReq+0x26>
 8012f9a:	2b40      	cmp	r3, #64	; 0x40
 8012f9c:	d82e      	bhi.n	8012ffc <USBD_StdItfReq+0x7c>
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d001      	beq.n	8012fa6 <USBD_StdItfReq+0x26>
 8012fa2:	2b20      	cmp	r3, #32
 8012fa4:	d12a      	bne.n	8012ffc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fac:	3b01      	subs	r3, #1
 8012fae:	2b02      	cmp	r3, #2
 8012fb0:	d81d      	bhi.n	8012fee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	889b      	ldrh	r3, [r3, #4]
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	d813      	bhi.n	8012fe4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012fc2:	689b      	ldr	r3, [r3, #8]
 8012fc4:	6839      	ldr	r1, [r7, #0]
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	4798      	blx	r3
 8012fca:	4603      	mov	r3, r0
 8012fcc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	88db      	ldrh	r3, [r3, #6]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d110      	bne.n	8012ff8 <USBD_StdItfReq+0x78>
 8012fd6:	7bfb      	ldrb	r3, [r7, #15]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d10d      	bne.n	8012ff8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f000 fd58 	bl	8013a92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012fe2:	e009      	b.n	8012ff8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8012fe4:	6839      	ldr	r1, [r7, #0]
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f000 fc8a 	bl	8013900 <USBD_CtlError>
          break;
 8012fec:	e004      	b.n	8012ff8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8012fee:	6839      	ldr	r1, [r7, #0]
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f000 fc85 	bl	8013900 <USBD_CtlError>
          break;
 8012ff6:	e000      	b.n	8012ffa <USBD_StdItfReq+0x7a>
          break;
 8012ff8:	bf00      	nop
      }
      break;
 8012ffa:	e004      	b.n	8013006 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8012ffc:	6839      	ldr	r1, [r7, #0]
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f000 fc7e 	bl	8013900 <USBD_CtlError>
      break;
 8013004:	bf00      	nop
  }

  return USBD_OK;
 8013006:	2300      	movs	r3, #0
}
 8013008:	4618      	mov	r0, r3
 801300a:	3710      	adds	r7, #16
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801301a:	2300      	movs	r3, #0
 801301c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	889b      	ldrh	r3, [r3, #4]
 8013022:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801302c:	2b40      	cmp	r3, #64	; 0x40
 801302e:	d007      	beq.n	8013040 <USBD_StdEPReq+0x30>
 8013030:	2b40      	cmp	r3, #64	; 0x40
 8013032:	f200 8146 	bhi.w	80132c2 <USBD_StdEPReq+0x2b2>
 8013036:	2b00      	cmp	r3, #0
 8013038:	d00a      	beq.n	8013050 <USBD_StdEPReq+0x40>
 801303a:	2b20      	cmp	r3, #32
 801303c:	f040 8141 	bne.w	80132c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013046:	689b      	ldr	r3, [r3, #8]
 8013048:	6839      	ldr	r1, [r7, #0]
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	4798      	blx	r3
      break;
 801304e:	e13d      	b.n	80132cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013058:	2b20      	cmp	r3, #32
 801305a:	d10a      	bne.n	8013072 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013062:	689b      	ldr	r3, [r3, #8]
 8013064:	6839      	ldr	r1, [r7, #0]
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	4798      	blx	r3
 801306a:	4603      	mov	r3, r0
 801306c:	73fb      	strb	r3, [r7, #15]

        return ret;
 801306e:	7bfb      	ldrb	r3, [r7, #15]
 8013070:	e12d      	b.n	80132ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	785b      	ldrb	r3, [r3, #1]
 8013076:	2b03      	cmp	r3, #3
 8013078:	d007      	beq.n	801308a <USBD_StdEPReq+0x7a>
 801307a:	2b03      	cmp	r3, #3
 801307c:	f300 811b 	bgt.w	80132b6 <USBD_StdEPReq+0x2a6>
 8013080:	2b00      	cmp	r3, #0
 8013082:	d072      	beq.n	801316a <USBD_StdEPReq+0x15a>
 8013084:	2b01      	cmp	r3, #1
 8013086:	d03a      	beq.n	80130fe <USBD_StdEPReq+0xee>
 8013088:	e115      	b.n	80132b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013090:	2b02      	cmp	r3, #2
 8013092:	d002      	beq.n	801309a <USBD_StdEPReq+0x8a>
 8013094:	2b03      	cmp	r3, #3
 8013096:	d015      	beq.n	80130c4 <USBD_StdEPReq+0xb4>
 8013098:	e02b      	b.n	80130f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801309a:	7bbb      	ldrb	r3, [r7, #14]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00c      	beq.n	80130ba <USBD_StdEPReq+0xaa>
 80130a0:	7bbb      	ldrb	r3, [r7, #14]
 80130a2:	2b80      	cmp	r3, #128	; 0x80
 80130a4:	d009      	beq.n	80130ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80130a6:	7bbb      	ldrb	r3, [r7, #14]
 80130a8:	4619      	mov	r1, r3
 80130aa:	6878      	ldr	r0, [r7, #4]
 80130ac:	f003 fe34 	bl	8016d18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80130b0:	2180      	movs	r1, #128	; 0x80
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f003 fe30 	bl	8016d18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80130b8:	e020      	b.n	80130fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80130ba:	6839      	ldr	r1, [r7, #0]
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f000 fc1f 	bl	8013900 <USBD_CtlError>
              break;
 80130c2:	e01b      	b.n	80130fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	885b      	ldrh	r3, [r3, #2]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d10e      	bne.n	80130ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80130cc:	7bbb      	ldrb	r3, [r7, #14]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d00b      	beq.n	80130ea <USBD_StdEPReq+0xda>
 80130d2:	7bbb      	ldrb	r3, [r7, #14]
 80130d4:	2b80      	cmp	r3, #128	; 0x80
 80130d6:	d008      	beq.n	80130ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	88db      	ldrh	r3, [r3, #6]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d104      	bne.n	80130ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80130e0:	7bbb      	ldrb	r3, [r7, #14]
 80130e2:	4619      	mov	r1, r3
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f003 fe17 	bl	8016d18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f000 fcd1 	bl	8013a92 <USBD_CtlSendStatus>

              break;
 80130f0:	e004      	b.n	80130fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80130f2:	6839      	ldr	r1, [r7, #0]
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f000 fc03 	bl	8013900 <USBD_CtlError>
              break;
 80130fa:	bf00      	nop
          }
          break;
 80130fc:	e0e0      	b.n	80132c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013104:	2b02      	cmp	r3, #2
 8013106:	d002      	beq.n	801310e <USBD_StdEPReq+0xfe>
 8013108:	2b03      	cmp	r3, #3
 801310a:	d015      	beq.n	8013138 <USBD_StdEPReq+0x128>
 801310c:	e026      	b.n	801315c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801310e:	7bbb      	ldrb	r3, [r7, #14]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d00c      	beq.n	801312e <USBD_StdEPReq+0x11e>
 8013114:	7bbb      	ldrb	r3, [r7, #14]
 8013116:	2b80      	cmp	r3, #128	; 0x80
 8013118:	d009      	beq.n	801312e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801311a:	7bbb      	ldrb	r3, [r7, #14]
 801311c:	4619      	mov	r1, r3
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f003 fdfa 	bl	8016d18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013124:	2180      	movs	r1, #128	; 0x80
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f003 fdf6 	bl	8016d18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801312c:	e01c      	b.n	8013168 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 801312e:	6839      	ldr	r1, [r7, #0]
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f000 fbe5 	bl	8013900 <USBD_CtlError>
              break;
 8013136:	e017      	b.n	8013168 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	885b      	ldrh	r3, [r3, #2]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d112      	bne.n	8013166 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013140:	7bbb      	ldrb	r3, [r7, #14]
 8013142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013146:	2b00      	cmp	r3, #0
 8013148:	d004      	beq.n	8013154 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801314a:	7bbb      	ldrb	r3, [r7, #14]
 801314c:	4619      	mov	r1, r3
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f003 fe01 	bl	8016d56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f000 fc9c 	bl	8013a92 <USBD_CtlSendStatus>
              }
              break;
 801315a:	e004      	b.n	8013166 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 801315c:	6839      	ldr	r1, [r7, #0]
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f000 fbce 	bl	8013900 <USBD_CtlError>
              break;
 8013164:	e000      	b.n	8013168 <USBD_StdEPReq+0x158>
              break;
 8013166:	bf00      	nop
          }
          break;
 8013168:	e0aa      	b.n	80132c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013170:	2b02      	cmp	r3, #2
 8013172:	d002      	beq.n	801317a <USBD_StdEPReq+0x16a>
 8013174:	2b03      	cmp	r3, #3
 8013176:	d032      	beq.n	80131de <USBD_StdEPReq+0x1ce>
 8013178:	e097      	b.n	80132aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801317a:	7bbb      	ldrb	r3, [r7, #14]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d007      	beq.n	8013190 <USBD_StdEPReq+0x180>
 8013180:	7bbb      	ldrb	r3, [r7, #14]
 8013182:	2b80      	cmp	r3, #128	; 0x80
 8013184:	d004      	beq.n	8013190 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8013186:	6839      	ldr	r1, [r7, #0]
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f000 fbb9 	bl	8013900 <USBD_CtlError>
                break;
 801318e:	e091      	b.n	80132b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013194:	2b00      	cmp	r3, #0
 8013196:	da0b      	bge.n	80131b0 <USBD_StdEPReq+0x1a0>
 8013198:	7bbb      	ldrb	r3, [r7, #14]
 801319a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801319e:	4613      	mov	r3, r2
 80131a0:	009b      	lsls	r3, r3, #2
 80131a2:	4413      	add	r3, r2
 80131a4:	009b      	lsls	r3, r3, #2
 80131a6:	3310      	adds	r3, #16
 80131a8:	687a      	ldr	r2, [r7, #4]
 80131aa:	4413      	add	r3, r2
 80131ac:	3304      	adds	r3, #4
 80131ae:	e00b      	b.n	80131c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80131b0:	7bbb      	ldrb	r3, [r7, #14]
 80131b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80131b6:	4613      	mov	r3, r2
 80131b8:	009b      	lsls	r3, r3, #2
 80131ba:	4413      	add	r3, r2
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	4413      	add	r3, r2
 80131c6:	3304      	adds	r3, #4
 80131c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	2200      	movs	r2, #0
 80131ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	2202      	movs	r2, #2
 80131d4:	4619      	mov	r1, r3
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f000 fbfd 	bl	80139d6 <USBD_CtlSendData>
              break;
 80131dc:	e06a      	b.n	80132b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80131de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	da11      	bge.n	801320a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80131e6:	7bbb      	ldrb	r3, [r7, #14]
 80131e8:	f003 020f 	and.w	r2, r3, #15
 80131ec:	6879      	ldr	r1, [r7, #4]
 80131ee:	4613      	mov	r3, r2
 80131f0:	009b      	lsls	r3, r3, #2
 80131f2:	4413      	add	r3, r2
 80131f4:	009b      	lsls	r3, r3, #2
 80131f6:	440b      	add	r3, r1
 80131f8:	3318      	adds	r3, #24
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d117      	bne.n	8013230 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013200:	6839      	ldr	r1, [r7, #0]
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f000 fb7c 	bl	8013900 <USBD_CtlError>
                  break;
 8013208:	e054      	b.n	80132b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801320a:	7bbb      	ldrb	r3, [r7, #14]
 801320c:	f003 020f 	and.w	r2, r3, #15
 8013210:	6879      	ldr	r1, [r7, #4]
 8013212:	4613      	mov	r3, r2
 8013214:	009b      	lsls	r3, r3, #2
 8013216:	4413      	add	r3, r2
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	440b      	add	r3, r1
 801321c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d104      	bne.n	8013230 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013226:	6839      	ldr	r1, [r7, #0]
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f000 fb69 	bl	8013900 <USBD_CtlError>
                  break;
 801322e:	e041      	b.n	80132b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013234:	2b00      	cmp	r3, #0
 8013236:	da0b      	bge.n	8013250 <USBD_StdEPReq+0x240>
 8013238:	7bbb      	ldrb	r3, [r7, #14]
 801323a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801323e:	4613      	mov	r3, r2
 8013240:	009b      	lsls	r3, r3, #2
 8013242:	4413      	add	r3, r2
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	3310      	adds	r3, #16
 8013248:	687a      	ldr	r2, [r7, #4]
 801324a:	4413      	add	r3, r2
 801324c:	3304      	adds	r3, #4
 801324e:	e00b      	b.n	8013268 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013250:	7bbb      	ldrb	r3, [r7, #14]
 8013252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013256:	4613      	mov	r3, r2
 8013258:	009b      	lsls	r3, r3, #2
 801325a:	4413      	add	r3, r2
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013262:	687a      	ldr	r2, [r7, #4]
 8013264:	4413      	add	r3, r2
 8013266:	3304      	adds	r3, #4
 8013268:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801326a:	7bbb      	ldrb	r3, [r7, #14]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d002      	beq.n	8013276 <USBD_StdEPReq+0x266>
 8013270:	7bbb      	ldrb	r3, [r7, #14]
 8013272:	2b80      	cmp	r3, #128	; 0x80
 8013274:	d103      	bne.n	801327e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	2200      	movs	r2, #0
 801327a:	601a      	str	r2, [r3, #0]
 801327c:	e00e      	b.n	801329c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801327e:	7bbb      	ldrb	r3, [r7, #14]
 8013280:	4619      	mov	r1, r3
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f003 fd86 	bl	8016d94 <USBD_LL_IsStallEP>
 8013288:	4603      	mov	r3, r0
 801328a:	2b00      	cmp	r3, #0
 801328c:	d003      	beq.n	8013296 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	2201      	movs	r2, #1
 8013292:	601a      	str	r2, [r3, #0]
 8013294:	e002      	b.n	801329c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	2200      	movs	r2, #0
 801329a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	2202      	movs	r2, #2
 80132a0:	4619      	mov	r1, r3
 80132a2:	6878      	ldr	r0, [r7, #4]
 80132a4:	f000 fb97 	bl	80139d6 <USBD_CtlSendData>
              break;
 80132a8:	e004      	b.n	80132b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80132aa:	6839      	ldr	r1, [r7, #0]
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f000 fb27 	bl	8013900 <USBD_CtlError>
              break;
 80132b2:	bf00      	nop
          }
          break;
 80132b4:	e004      	b.n	80132c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80132b6:	6839      	ldr	r1, [r7, #0]
 80132b8:	6878      	ldr	r0, [r7, #4]
 80132ba:	f000 fb21 	bl	8013900 <USBD_CtlError>
          break;
 80132be:	bf00      	nop
      }
      break;
 80132c0:	e004      	b.n	80132cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80132c2:	6839      	ldr	r1, [r7, #0]
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 fb1b 	bl	8013900 <USBD_CtlError>
      break;
 80132ca:	bf00      	nop
  }

  return ret;
 80132cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3710      	adds	r7, #16
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
	...

080132d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b084      	sub	sp, #16
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80132e2:	2300      	movs	r3, #0
 80132e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80132e6:	2300      	movs	r3, #0
 80132e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80132ea:	2300      	movs	r3, #0
 80132ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	885b      	ldrh	r3, [r3, #2]
 80132f2:	0a1b      	lsrs	r3, r3, #8
 80132f4:	b29b      	uxth	r3, r3
 80132f6:	3b01      	subs	r3, #1
 80132f8:	2b06      	cmp	r3, #6
 80132fa:	f200 8128 	bhi.w	801354e <USBD_GetDescriptor+0x276>
 80132fe:	a201      	add	r2, pc, #4	; (adr r2, 8013304 <USBD_GetDescriptor+0x2c>)
 8013300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013304:	08013321 	.word	0x08013321
 8013308:	08013339 	.word	0x08013339
 801330c:	08013379 	.word	0x08013379
 8013310:	0801354f 	.word	0x0801354f
 8013314:	0801354f 	.word	0x0801354f
 8013318:	080134ef 	.word	0x080134ef
 801331c:	0801351b 	.word	0x0801351b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	687a      	ldr	r2, [r7, #4]
 801332a:	7c12      	ldrb	r2, [r2, #16]
 801332c:	f107 0108 	add.w	r1, r7, #8
 8013330:	4610      	mov	r0, r2
 8013332:	4798      	blx	r3
 8013334:	60f8      	str	r0, [r7, #12]
      break;
 8013336:	e112      	b.n	801355e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	7c1b      	ldrb	r3, [r3, #16]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d10d      	bne.n	801335c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013348:	f107 0208 	add.w	r2, r7, #8
 801334c:	4610      	mov	r0, r2
 801334e:	4798      	blx	r3
 8013350:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	3301      	adds	r3, #1
 8013356:	2202      	movs	r2, #2
 8013358:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801335a:	e100      	b.n	801355e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013364:	f107 0208 	add.w	r2, r7, #8
 8013368:	4610      	mov	r0, r2
 801336a:	4798      	blx	r3
 801336c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	3301      	adds	r3, #1
 8013372:	2202      	movs	r2, #2
 8013374:	701a      	strb	r2, [r3, #0]
      break;
 8013376:	e0f2      	b.n	801355e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	885b      	ldrh	r3, [r3, #2]
 801337c:	b2db      	uxtb	r3, r3
 801337e:	2b05      	cmp	r3, #5
 8013380:	f200 80ac 	bhi.w	80134dc <USBD_GetDescriptor+0x204>
 8013384:	a201      	add	r2, pc, #4	; (adr r2, 801338c <USBD_GetDescriptor+0xb4>)
 8013386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801338a:	bf00      	nop
 801338c:	080133a5 	.word	0x080133a5
 8013390:	080133d9 	.word	0x080133d9
 8013394:	0801340d 	.word	0x0801340d
 8013398:	08013441 	.word	0x08013441
 801339c:	08013475 	.word	0x08013475
 80133a0:	080134a9 	.word	0x080134a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80133aa:	685b      	ldr	r3, [r3, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d00b      	beq.n	80133c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80133b6:	685b      	ldr	r3, [r3, #4]
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	7c12      	ldrb	r2, [r2, #16]
 80133bc:	f107 0108 	add.w	r1, r7, #8
 80133c0:	4610      	mov	r0, r2
 80133c2:	4798      	blx	r3
 80133c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80133c6:	e091      	b.n	80134ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80133c8:	6839      	ldr	r1, [r7, #0]
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f000 fa98 	bl	8013900 <USBD_CtlError>
            err++;
 80133d0:	7afb      	ldrb	r3, [r7, #11]
 80133d2:	3301      	adds	r3, #1
 80133d4:	72fb      	strb	r3, [r7, #11]
          break;
 80133d6:	e089      	b.n	80134ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80133de:	689b      	ldr	r3, [r3, #8]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d00b      	beq.n	80133fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80133ea:	689b      	ldr	r3, [r3, #8]
 80133ec:	687a      	ldr	r2, [r7, #4]
 80133ee:	7c12      	ldrb	r2, [r2, #16]
 80133f0:	f107 0108 	add.w	r1, r7, #8
 80133f4:	4610      	mov	r0, r2
 80133f6:	4798      	blx	r3
 80133f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80133fa:	e077      	b.n	80134ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80133fc:	6839      	ldr	r1, [r7, #0]
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f000 fa7e 	bl	8013900 <USBD_CtlError>
            err++;
 8013404:	7afb      	ldrb	r3, [r7, #11]
 8013406:	3301      	adds	r3, #1
 8013408:	72fb      	strb	r3, [r7, #11]
          break;
 801340a:	e06f      	b.n	80134ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d00b      	beq.n	8013430 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	687a      	ldr	r2, [r7, #4]
 8013422:	7c12      	ldrb	r2, [r2, #16]
 8013424:	f107 0108 	add.w	r1, r7, #8
 8013428:	4610      	mov	r0, r2
 801342a:	4798      	blx	r3
 801342c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801342e:	e05d      	b.n	80134ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013430:	6839      	ldr	r1, [r7, #0]
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f000 fa64 	bl	8013900 <USBD_CtlError>
            err++;
 8013438:	7afb      	ldrb	r3, [r7, #11]
 801343a:	3301      	adds	r3, #1
 801343c:	72fb      	strb	r3, [r7, #11]
          break;
 801343e:	e055      	b.n	80134ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013446:	691b      	ldr	r3, [r3, #16]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d00b      	beq.n	8013464 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013452:	691b      	ldr	r3, [r3, #16]
 8013454:	687a      	ldr	r2, [r7, #4]
 8013456:	7c12      	ldrb	r2, [r2, #16]
 8013458:	f107 0108 	add.w	r1, r7, #8
 801345c:	4610      	mov	r0, r2
 801345e:	4798      	blx	r3
 8013460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013462:	e043      	b.n	80134ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013464:	6839      	ldr	r1, [r7, #0]
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 fa4a 	bl	8013900 <USBD_CtlError>
            err++;
 801346c:	7afb      	ldrb	r3, [r7, #11]
 801346e:	3301      	adds	r3, #1
 8013470:	72fb      	strb	r3, [r7, #11]
          break;
 8013472:	e03b      	b.n	80134ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801347a:	695b      	ldr	r3, [r3, #20]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d00b      	beq.n	8013498 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013486:	695b      	ldr	r3, [r3, #20]
 8013488:	687a      	ldr	r2, [r7, #4]
 801348a:	7c12      	ldrb	r2, [r2, #16]
 801348c:	f107 0108 	add.w	r1, r7, #8
 8013490:	4610      	mov	r0, r2
 8013492:	4798      	blx	r3
 8013494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013496:	e029      	b.n	80134ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013498:	6839      	ldr	r1, [r7, #0]
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f000 fa30 	bl	8013900 <USBD_CtlError>
            err++;
 80134a0:	7afb      	ldrb	r3, [r7, #11]
 80134a2:	3301      	adds	r3, #1
 80134a4:	72fb      	strb	r3, [r7, #11]
          break;
 80134a6:	e021      	b.n	80134ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80134ae:	699b      	ldr	r3, [r3, #24]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d00b      	beq.n	80134cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80134ba:	699b      	ldr	r3, [r3, #24]
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	7c12      	ldrb	r2, [r2, #16]
 80134c0:	f107 0108 	add.w	r1, r7, #8
 80134c4:	4610      	mov	r0, r2
 80134c6:	4798      	blx	r3
 80134c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134ca:	e00f      	b.n	80134ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80134cc:	6839      	ldr	r1, [r7, #0]
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f000 fa16 	bl	8013900 <USBD_CtlError>
            err++;
 80134d4:	7afb      	ldrb	r3, [r7, #11]
 80134d6:	3301      	adds	r3, #1
 80134d8:	72fb      	strb	r3, [r7, #11]
          break;
 80134da:	e007      	b.n	80134ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80134dc:	6839      	ldr	r1, [r7, #0]
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f000 fa0e 	bl	8013900 <USBD_CtlError>
          err++;
 80134e4:	7afb      	ldrb	r3, [r7, #11]
 80134e6:	3301      	adds	r3, #1
 80134e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80134ea:	e038      	b.n	801355e <USBD_GetDescriptor+0x286>
 80134ec:	e037      	b.n	801355e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	7c1b      	ldrb	r3, [r3, #16]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d109      	bne.n	801350a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80134fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134fe:	f107 0208 	add.w	r2, r7, #8
 8013502:	4610      	mov	r0, r2
 8013504:	4798      	blx	r3
 8013506:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013508:	e029      	b.n	801355e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801350a:	6839      	ldr	r1, [r7, #0]
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f000 f9f7 	bl	8013900 <USBD_CtlError>
        err++;
 8013512:	7afb      	ldrb	r3, [r7, #11]
 8013514:	3301      	adds	r3, #1
 8013516:	72fb      	strb	r3, [r7, #11]
      break;
 8013518:	e021      	b.n	801355e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	7c1b      	ldrb	r3, [r3, #16]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d10d      	bne.n	801353e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801352a:	f107 0208 	add.w	r2, r7, #8
 801352e:	4610      	mov	r0, r2
 8013530:	4798      	blx	r3
 8013532:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	3301      	adds	r3, #1
 8013538:	2207      	movs	r2, #7
 801353a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801353c:	e00f      	b.n	801355e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801353e:	6839      	ldr	r1, [r7, #0]
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f000 f9dd 	bl	8013900 <USBD_CtlError>
        err++;
 8013546:	7afb      	ldrb	r3, [r7, #11]
 8013548:	3301      	adds	r3, #1
 801354a:	72fb      	strb	r3, [r7, #11]
      break;
 801354c:	e007      	b.n	801355e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801354e:	6839      	ldr	r1, [r7, #0]
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f000 f9d5 	bl	8013900 <USBD_CtlError>
      err++;
 8013556:	7afb      	ldrb	r3, [r7, #11]
 8013558:	3301      	adds	r3, #1
 801355a:	72fb      	strb	r3, [r7, #11]
      break;
 801355c:	bf00      	nop
  }

  if (err != 0U)
 801355e:	7afb      	ldrb	r3, [r7, #11]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d11c      	bne.n	801359e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8013564:	893b      	ldrh	r3, [r7, #8]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d011      	beq.n	801358e <USBD_GetDescriptor+0x2b6>
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	88db      	ldrh	r3, [r3, #6]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d00d      	beq.n	801358e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	88da      	ldrh	r2, [r3, #6]
 8013576:	893b      	ldrh	r3, [r7, #8]
 8013578:	4293      	cmp	r3, r2
 801357a:	bf28      	it	cs
 801357c:	4613      	movcs	r3, r2
 801357e:	b29b      	uxth	r3, r3
 8013580:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013582:	893b      	ldrh	r3, [r7, #8]
 8013584:	461a      	mov	r2, r3
 8013586:	68f9      	ldr	r1, [r7, #12]
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f000 fa24 	bl	80139d6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	88db      	ldrh	r3, [r3, #6]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d104      	bne.n	80135a0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f000 fa7b 	bl	8013a92 <USBD_CtlSendStatus>
 801359c:	e000      	b.n	80135a0 <USBD_GetDescriptor+0x2c8>
    return;
 801359e:	bf00      	nop
    }
  }
}
 80135a0:	3710      	adds	r7, #16
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}
 80135a6:	bf00      	nop

080135a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	889b      	ldrh	r3, [r3, #4]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d130      	bne.n	801361c <USBD_SetAddress+0x74>
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	88db      	ldrh	r3, [r3, #6]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d12c      	bne.n	801361c <USBD_SetAddress+0x74>
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	885b      	ldrh	r3, [r3, #2]
 80135c6:	2b7f      	cmp	r3, #127	; 0x7f
 80135c8:	d828      	bhi.n	801361c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	885b      	ldrh	r3, [r3, #2]
 80135ce:	b2db      	uxtb	r3, r3
 80135d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135dc:	2b03      	cmp	r3, #3
 80135de:	d104      	bne.n	80135ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80135e0:	6839      	ldr	r1, [r7, #0]
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f000 f98c 	bl	8013900 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135e8:	e01d      	b.n	8013626 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	7bfa      	ldrb	r2, [r7, #15]
 80135ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80135f2:	7bfb      	ldrb	r3, [r7, #15]
 80135f4:	4619      	mov	r1, r3
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f003 fbf9 	bl	8016dee <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f000 fa48 	bl	8013a92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013602:	7bfb      	ldrb	r3, [r7, #15]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d004      	beq.n	8013612 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2202      	movs	r2, #2
 801360c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013610:	e009      	b.n	8013626 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2201      	movs	r2, #1
 8013616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801361a:	e004      	b.n	8013626 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801361c:	6839      	ldr	r1, [r7, #0]
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f000 f96e 	bl	8013900 <USBD_CtlError>
  }
}
 8013624:	bf00      	nop
 8013626:	bf00      	nop
 8013628:	3710      	adds	r7, #16
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
	...

08013630 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b082      	sub	sp, #8
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	885b      	ldrh	r3, [r3, #2]
 801363e:	b2da      	uxtb	r2, r3
 8013640:	4b41      	ldr	r3, [pc, #260]	; (8013748 <USBD_SetConfig+0x118>)
 8013642:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013644:	4b40      	ldr	r3, [pc, #256]	; (8013748 <USBD_SetConfig+0x118>)
 8013646:	781b      	ldrb	r3, [r3, #0]
 8013648:	2b01      	cmp	r3, #1
 801364a:	d904      	bls.n	8013656 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801364c:	6839      	ldr	r1, [r7, #0]
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	f000 f956 	bl	8013900 <USBD_CtlError>
 8013654:	e075      	b.n	8013742 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801365c:	2b02      	cmp	r3, #2
 801365e:	d002      	beq.n	8013666 <USBD_SetConfig+0x36>
 8013660:	2b03      	cmp	r3, #3
 8013662:	d023      	beq.n	80136ac <USBD_SetConfig+0x7c>
 8013664:	e062      	b.n	801372c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8013666:	4b38      	ldr	r3, [pc, #224]	; (8013748 <USBD_SetConfig+0x118>)
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d01a      	beq.n	80136a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801366e:	4b36      	ldr	r3, [pc, #216]	; (8013748 <USBD_SetConfig+0x118>)
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	461a      	mov	r2, r3
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2203      	movs	r2, #3
 801367c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013680:	4b31      	ldr	r3, [pc, #196]	; (8013748 <USBD_SetConfig+0x118>)
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	4619      	mov	r1, r3
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f7ff f9e4 	bl	8012a54 <USBD_SetClassConfig>
 801368c:	4603      	mov	r3, r0
 801368e:	2b02      	cmp	r3, #2
 8013690:	d104      	bne.n	801369c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8013692:	6839      	ldr	r1, [r7, #0]
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 f933 	bl	8013900 <USBD_CtlError>
            return;
 801369a:	e052      	b.n	8013742 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f000 f9f8 	bl	8013a92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80136a2:	e04e      	b.n	8013742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80136a4:	6878      	ldr	r0, [r7, #4]
 80136a6:	f000 f9f4 	bl	8013a92 <USBD_CtlSendStatus>
        break;
 80136aa:	e04a      	b.n	8013742 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80136ac:	4b26      	ldr	r3, [pc, #152]	; (8013748 <USBD_SetConfig+0x118>)
 80136ae:	781b      	ldrb	r3, [r3, #0]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d112      	bne.n	80136da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2202      	movs	r2, #2
 80136b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80136bc:	4b22      	ldr	r3, [pc, #136]	; (8013748 <USBD_SetConfig+0x118>)
 80136be:	781b      	ldrb	r3, [r3, #0]
 80136c0:	461a      	mov	r2, r3
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80136c6:	4b20      	ldr	r3, [pc, #128]	; (8013748 <USBD_SetConfig+0x118>)
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	4619      	mov	r1, r3
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f7ff f9e0 	bl	8012a92 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f000 f9dd 	bl	8013a92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80136d8:	e033      	b.n	8013742 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80136da:	4b1b      	ldr	r3, [pc, #108]	; (8013748 <USBD_SetConfig+0x118>)
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	461a      	mov	r2, r3
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d01d      	beq.n	8013724 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	b2db      	uxtb	r3, r3
 80136ee:	4619      	mov	r1, r3
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f7ff f9ce 	bl	8012a92 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80136f6:	4b14      	ldr	r3, [pc, #80]	; (8013748 <USBD_SetConfig+0x118>)
 80136f8:	781b      	ldrb	r3, [r3, #0]
 80136fa:	461a      	mov	r2, r3
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013700:	4b11      	ldr	r3, [pc, #68]	; (8013748 <USBD_SetConfig+0x118>)
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	4619      	mov	r1, r3
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f7ff f9a4 	bl	8012a54 <USBD_SetClassConfig>
 801370c:	4603      	mov	r3, r0
 801370e:	2b02      	cmp	r3, #2
 8013710:	d104      	bne.n	801371c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8013712:	6839      	ldr	r1, [r7, #0]
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f000 f8f3 	bl	8013900 <USBD_CtlError>
            return;
 801371a:	e012      	b.n	8013742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f000 f9b8 	bl	8013a92 <USBD_CtlSendStatus>
        break;
 8013722:	e00e      	b.n	8013742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f000 f9b4 	bl	8013a92 <USBD_CtlSendStatus>
        break;
 801372a:	e00a      	b.n	8013742 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801372c:	6839      	ldr	r1, [r7, #0]
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f000 f8e6 	bl	8013900 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8013734:	4b04      	ldr	r3, [pc, #16]	; (8013748 <USBD_SetConfig+0x118>)
 8013736:	781b      	ldrb	r3, [r3, #0]
 8013738:	4619      	mov	r1, r3
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f7ff f9a9 	bl	8012a92 <USBD_ClrClassConfig>
        break;
 8013740:	bf00      	nop
    }
  }
}
 8013742:	3708      	adds	r7, #8
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}
 8013748:	200026e8 	.word	0x200026e8

0801374c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	88db      	ldrh	r3, [r3, #6]
 801375a:	2b01      	cmp	r3, #1
 801375c:	d004      	beq.n	8013768 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801375e:	6839      	ldr	r1, [r7, #0]
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f000 f8cd 	bl	8013900 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013766:	e022      	b.n	80137ae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801376e:	2b02      	cmp	r3, #2
 8013770:	dc02      	bgt.n	8013778 <USBD_GetConfig+0x2c>
 8013772:	2b00      	cmp	r3, #0
 8013774:	dc03      	bgt.n	801377e <USBD_GetConfig+0x32>
 8013776:	e015      	b.n	80137a4 <USBD_GetConfig+0x58>
 8013778:	2b03      	cmp	r3, #3
 801377a:	d00b      	beq.n	8013794 <USBD_GetConfig+0x48>
 801377c:	e012      	b.n	80137a4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2200      	movs	r2, #0
 8013782:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	3308      	adds	r3, #8
 8013788:	2201      	movs	r2, #1
 801378a:	4619      	mov	r1, r3
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f000 f922 	bl	80139d6 <USBD_CtlSendData>
        break;
 8013792:	e00c      	b.n	80137ae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	3304      	adds	r3, #4
 8013798:	2201      	movs	r2, #1
 801379a:	4619      	mov	r1, r3
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f000 f91a 	bl	80139d6 <USBD_CtlSendData>
        break;
 80137a2:	e004      	b.n	80137ae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80137a4:	6839      	ldr	r1, [r7, #0]
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f000 f8aa 	bl	8013900 <USBD_CtlError>
        break;
 80137ac:	bf00      	nop
}
 80137ae:	bf00      	nop
 80137b0:	3708      	adds	r7, #8
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b082      	sub	sp, #8
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
 80137be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137c6:	3b01      	subs	r3, #1
 80137c8:	2b02      	cmp	r3, #2
 80137ca:	d81e      	bhi.n	801380a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	88db      	ldrh	r3, [r3, #6]
 80137d0:	2b02      	cmp	r3, #2
 80137d2:	d004      	beq.n	80137de <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80137d4:	6839      	ldr	r1, [r7, #0]
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f000 f892 	bl	8013900 <USBD_CtlError>
        break;
 80137dc:	e01a      	b.n	8013814 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2201      	movs	r2, #1
 80137e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d005      	beq.n	80137fa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	68db      	ldr	r3, [r3, #12]
 80137f2:	f043 0202 	orr.w	r2, r3, #2
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	330c      	adds	r3, #12
 80137fe:	2202      	movs	r2, #2
 8013800:	4619      	mov	r1, r3
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f000 f8e7 	bl	80139d6 <USBD_CtlSendData>
      break;
 8013808:	e004      	b.n	8013814 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801380a:	6839      	ldr	r1, [r7, #0]
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f000 f877 	bl	8013900 <USBD_CtlError>
      break;
 8013812:	bf00      	nop
  }
}
 8013814:	bf00      	nop
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
 8013824:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	885b      	ldrh	r3, [r3, #2]
 801382a:	2b01      	cmp	r3, #1
 801382c:	d106      	bne.n	801383c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2201      	movs	r2, #1
 8013832:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f000 f92b 	bl	8013a92 <USBD_CtlSendStatus>
  }
}
 801383c:	bf00      	nop
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013854:	3b01      	subs	r3, #1
 8013856:	2b02      	cmp	r3, #2
 8013858:	d80b      	bhi.n	8013872 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	885b      	ldrh	r3, [r3, #2]
 801385e:	2b01      	cmp	r3, #1
 8013860:	d10c      	bne.n	801387c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2200      	movs	r2, #0
 8013866:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f000 f911 	bl	8013a92 <USBD_CtlSendStatus>
      }
      break;
 8013870:	e004      	b.n	801387c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8013872:	6839      	ldr	r1, [r7, #0]
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f000 f843 	bl	8013900 <USBD_CtlError>
      break;
 801387a:	e000      	b.n	801387e <USBD_ClrFeature+0x3a>
      break;
 801387c:	bf00      	nop
  }
}
 801387e:	bf00      	nop
 8013880:	3708      	adds	r7, #8
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}

08013886 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013886:	b480      	push	{r7}
 8013888:	b083      	sub	sp, #12
 801388a:	af00      	add	r7, sp, #0
 801388c:	6078      	str	r0, [r7, #4]
 801388e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	781a      	ldrb	r2, [r3, #0]
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	785a      	ldrb	r2, [r3, #1]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	3302      	adds	r3, #2
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	b29a      	uxth	r2, r3
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	3303      	adds	r3, #3
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	021b      	lsls	r3, r3, #8
 80138b2:	b29b      	uxth	r3, r3
 80138b4:	4413      	add	r3, r2
 80138b6:	b29a      	uxth	r2, r3
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	3304      	adds	r3, #4
 80138c0:	781b      	ldrb	r3, [r3, #0]
 80138c2:	b29a      	uxth	r2, r3
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	3305      	adds	r3, #5
 80138c8:	781b      	ldrb	r3, [r3, #0]
 80138ca:	b29b      	uxth	r3, r3
 80138cc:	021b      	lsls	r3, r3, #8
 80138ce:	b29b      	uxth	r3, r3
 80138d0:	4413      	add	r3, r2
 80138d2:	b29a      	uxth	r2, r3
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	3306      	adds	r3, #6
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	b29a      	uxth	r2, r3
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	3307      	adds	r3, #7
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	021b      	lsls	r3, r3, #8
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	4413      	add	r3, r2
 80138ee:	b29a      	uxth	r2, r3
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	80da      	strh	r2, [r3, #6]

}
 80138f4:	bf00      	nop
 80138f6:	370c      	adds	r7, #12
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr

08013900 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801390a:	2180      	movs	r1, #128	; 0x80
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f003 fa03 	bl	8016d18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8013912:	2100      	movs	r1, #0
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f003 f9ff 	bl	8016d18 <USBD_LL_StallEP>
}
 801391a:	bf00      	nop
 801391c:	3708      	adds	r7, #8
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}

08013922 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013922:	b580      	push	{r7, lr}
 8013924:	b086      	sub	sp, #24
 8013926:	af00      	add	r7, sp, #0
 8013928:	60f8      	str	r0, [r7, #12]
 801392a:	60b9      	str	r1, [r7, #8]
 801392c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801392e:	2300      	movs	r3, #0
 8013930:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d032      	beq.n	801399e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8013938:	68f8      	ldr	r0, [r7, #12]
 801393a:	f000 f834 	bl	80139a6 <USBD_GetLen>
 801393e:	4603      	mov	r3, r0
 8013940:	3301      	adds	r3, #1
 8013942:	b29b      	uxth	r3, r3
 8013944:	005b      	lsls	r3, r3, #1
 8013946:	b29a      	uxth	r2, r3
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801394c:	7dfb      	ldrb	r3, [r7, #23]
 801394e:	1c5a      	adds	r2, r3, #1
 8013950:	75fa      	strb	r2, [r7, #23]
 8013952:	461a      	mov	r2, r3
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	4413      	add	r3, r2
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	7812      	ldrb	r2, [r2, #0]
 801395c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801395e:	7dfb      	ldrb	r3, [r7, #23]
 8013960:	1c5a      	adds	r2, r3, #1
 8013962:	75fa      	strb	r2, [r7, #23]
 8013964:	461a      	mov	r2, r3
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	4413      	add	r3, r2
 801396a:	2203      	movs	r2, #3
 801396c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801396e:	e012      	b.n	8013996 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	1c5a      	adds	r2, r3, #1
 8013974:	60fa      	str	r2, [r7, #12]
 8013976:	7dfa      	ldrb	r2, [r7, #23]
 8013978:	1c51      	adds	r1, r2, #1
 801397a:	75f9      	strb	r1, [r7, #23]
 801397c:	4611      	mov	r1, r2
 801397e:	68ba      	ldr	r2, [r7, #8]
 8013980:	440a      	add	r2, r1
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8013986:	7dfb      	ldrb	r3, [r7, #23]
 8013988:	1c5a      	adds	r2, r3, #1
 801398a:	75fa      	strb	r2, [r7, #23]
 801398c:	461a      	mov	r2, r3
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	4413      	add	r3, r2
 8013992:	2200      	movs	r2, #0
 8013994:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d1e8      	bne.n	8013970 <USBD_GetString+0x4e>
    }
  }
}
 801399e:	bf00      	nop
 80139a0:	3718      	adds	r7, #24
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80139a6:	b480      	push	{r7}
 80139a8:	b085      	sub	sp, #20
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80139ae:	2300      	movs	r3, #0
 80139b0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80139b2:	e005      	b.n	80139c0 <USBD_GetLen+0x1a>
  {
    len++;
 80139b4:	7bfb      	ldrb	r3, [r7, #15]
 80139b6:	3301      	adds	r3, #1
 80139b8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	3301      	adds	r3, #1
 80139be:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d1f5      	bne.n	80139b4 <USBD_GetLen+0xe>
  }

  return len;
 80139c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3714      	adds	r7, #20
 80139ce:	46bd      	mov	sp, r7
 80139d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d4:	4770      	bx	lr

080139d6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80139d6:	b580      	push	{r7, lr}
 80139d8:	b084      	sub	sp, #16
 80139da:	af00      	add	r7, sp, #0
 80139dc:	60f8      	str	r0, [r7, #12]
 80139de:	60b9      	str	r1, [r7, #8]
 80139e0:	4613      	mov	r3, r2
 80139e2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2202      	movs	r2, #2
 80139e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80139ec:	88fa      	ldrh	r2, [r7, #6]
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80139f2:	88fa      	ldrh	r2, [r7, #6]
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80139f8:	88fb      	ldrh	r3, [r7, #6]
 80139fa:	68ba      	ldr	r2, [r7, #8]
 80139fc:	2100      	movs	r1, #0
 80139fe:	68f8      	ldr	r0, [r7, #12]
 8013a00:	f003 fa14 	bl	8016e2c <USBD_LL_Transmit>

  return USBD_OK;
 8013a04:	2300      	movs	r3, #0
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3710      	adds	r7, #16
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}

08013a0e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8013a0e:	b580      	push	{r7, lr}
 8013a10:	b084      	sub	sp, #16
 8013a12:	af00      	add	r7, sp, #0
 8013a14:	60f8      	str	r0, [r7, #12]
 8013a16:	60b9      	str	r1, [r7, #8]
 8013a18:	4613      	mov	r3, r2
 8013a1a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013a1c:	88fb      	ldrh	r3, [r7, #6]
 8013a1e:	68ba      	ldr	r2, [r7, #8]
 8013a20:	2100      	movs	r1, #0
 8013a22:	68f8      	ldr	r0, [r7, #12]
 8013a24:	f003 fa02 	bl	8016e2c <USBD_LL_Transmit>

  return USBD_OK;
 8013a28:	2300      	movs	r3, #0
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3710      	adds	r7, #16
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}

08013a32 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8013a32:	b580      	push	{r7, lr}
 8013a34:	b084      	sub	sp, #16
 8013a36:	af00      	add	r7, sp, #0
 8013a38:	60f8      	str	r0, [r7, #12]
 8013a3a:	60b9      	str	r1, [r7, #8]
 8013a3c:	4613      	mov	r3, r2
 8013a3e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2203      	movs	r2, #3
 8013a44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8013a48:	88fa      	ldrh	r2, [r7, #6]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8013a50:	88fa      	ldrh	r2, [r7, #6]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013a58:	88fb      	ldrh	r3, [r7, #6]
 8013a5a:	68ba      	ldr	r2, [r7, #8]
 8013a5c:	2100      	movs	r1, #0
 8013a5e:	68f8      	ldr	r0, [r7, #12]
 8013a60:	f003 fa07 	bl	8016e72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013a64:	2300      	movs	r3, #0
}
 8013a66:	4618      	mov	r0, r3
 8013a68:	3710      	adds	r7, #16
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}

08013a6e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8013a6e:	b580      	push	{r7, lr}
 8013a70:	b084      	sub	sp, #16
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	60f8      	str	r0, [r7, #12]
 8013a76:	60b9      	str	r1, [r7, #8]
 8013a78:	4613      	mov	r3, r2
 8013a7a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013a7c:	88fb      	ldrh	r3, [r7, #6]
 8013a7e:	68ba      	ldr	r2, [r7, #8]
 8013a80:	2100      	movs	r1, #0
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	f003 f9f5 	bl	8016e72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013a88:	2300      	movs	r3, #0
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3710      	adds	r7, #16
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}

08013a92 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013a92:	b580      	push	{r7, lr}
 8013a94:	b082      	sub	sp, #8
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2204      	movs	r2, #4
 8013a9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	2100      	movs	r1, #0
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f003 f9bf 	bl	8016e2c <USBD_LL_Transmit>

  return USBD_OK;
 8013aae:	2300      	movs	r3, #0
}
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	3708      	adds	r7, #8
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}

08013ab8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2205      	movs	r2, #5
 8013ac4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013ac8:	2300      	movs	r3, #0
 8013aca:	2200      	movs	r2, #0
 8013acc:	2100      	movs	r1, #0
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f003 f9cf 	bl	8016e72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ad4:	2300      	movs	r3, #0
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3708      	adds	r7, #8
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
	...

08013ae0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013ae0:	b480      	push	{r7}
 8013ae2:	b085      	sub	sp, #20
 8013ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013ae6:	f3ef 8305 	mrs	r3, IPSR
 8013aea:	60bb      	str	r3, [r7, #8]
  return(result);
 8013aec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d10f      	bne.n	8013b12 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013af2:	f3ef 8310 	mrs	r3, PRIMASK
 8013af6:	607b      	str	r3, [r7, #4]
  return(result);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d109      	bne.n	8013b12 <osKernelInitialize+0x32>
 8013afe:	4b11      	ldr	r3, [pc, #68]	; (8013b44 <osKernelInitialize+0x64>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	2b02      	cmp	r3, #2
 8013b04:	d109      	bne.n	8013b1a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013b06:	f3ef 8311 	mrs	r3, BASEPRI
 8013b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d003      	beq.n	8013b1a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8013b12:	f06f 0305 	mvn.w	r3, #5
 8013b16:	60fb      	str	r3, [r7, #12]
 8013b18:	e00c      	b.n	8013b34 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013b1a:	4b0a      	ldr	r3, [pc, #40]	; (8013b44 <osKernelInitialize+0x64>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d105      	bne.n	8013b2e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8013b22:	4b08      	ldr	r3, [pc, #32]	; (8013b44 <osKernelInitialize+0x64>)
 8013b24:	2201      	movs	r2, #1
 8013b26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	60fb      	str	r3, [r7, #12]
 8013b2c:	e002      	b.n	8013b34 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8013b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013b34:	68fb      	ldr	r3, [r7, #12]
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	3714      	adds	r7, #20
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b40:	4770      	bx	lr
 8013b42:	bf00      	nop
 8013b44:	200026ec 	.word	0x200026ec

08013b48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b4e:	f3ef 8305 	mrs	r3, IPSR
 8013b52:	60bb      	str	r3, [r7, #8]
  return(result);
 8013b54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d10f      	bne.n	8013b7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8013b5e:	607b      	str	r3, [r7, #4]
  return(result);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d109      	bne.n	8013b7a <osKernelStart+0x32>
 8013b66:	4b11      	ldr	r3, [pc, #68]	; (8013bac <osKernelStart+0x64>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	2b02      	cmp	r3, #2
 8013b6c:	d109      	bne.n	8013b82 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8013b72:	603b      	str	r3, [r7, #0]
  return(result);
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d003      	beq.n	8013b82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8013b7a:	f06f 0305 	mvn.w	r3, #5
 8013b7e:	60fb      	str	r3, [r7, #12]
 8013b80:	e00e      	b.n	8013ba0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8013b82:	4b0a      	ldr	r3, [pc, #40]	; (8013bac <osKernelStart+0x64>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2b01      	cmp	r3, #1
 8013b88:	d107      	bne.n	8013b9a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8013b8a:	4b08      	ldr	r3, [pc, #32]	; (8013bac <osKernelStart+0x64>)
 8013b8c:	2202      	movs	r2, #2
 8013b8e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8013b90:	f001 fb16 	bl	80151c0 <vTaskStartScheduler>
      stat = osOK;
 8013b94:	2300      	movs	r3, #0
 8013b96:	60fb      	str	r3, [r7, #12]
 8013b98:	e002      	b.n	8013ba0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8013b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013ba0:	68fb      	ldr	r3, [r7, #12]
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3710      	adds	r7, #16
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}
 8013baa:	bf00      	nop
 8013bac:	200026ec 	.word	0x200026ec

08013bb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b092      	sub	sp, #72	; 0x48
 8013bb4:	af04      	add	r7, sp, #16
 8013bb6:	60f8      	str	r0, [r7, #12]
 8013bb8:	60b9      	str	r1, [r7, #8]
 8013bba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013bc0:	f3ef 8305 	mrs	r3, IPSR
 8013bc4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8013bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	f040 8094 	bne.w	8013cf6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bce:	f3ef 8310 	mrs	r3, PRIMASK
 8013bd2:	623b      	str	r3, [r7, #32]
  return(result);
 8013bd4:	6a3b      	ldr	r3, [r7, #32]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	f040 808d 	bne.w	8013cf6 <osThreadNew+0x146>
 8013bdc:	4b48      	ldr	r3, [pc, #288]	; (8013d00 <osThreadNew+0x150>)
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	2b02      	cmp	r3, #2
 8013be2:	d106      	bne.n	8013bf2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013be4:	f3ef 8311 	mrs	r3, BASEPRI
 8013be8:	61fb      	str	r3, [r7, #28]
  return(result);
 8013bea:	69fb      	ldr	r3, [r7, #28]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	f040 8082 	bne.w	8013cf6 <osThreadNew+0x146>
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d07e      	beq.n	8013cf6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8013bf8:	2380      	movs	r3, #128	; 0x80
 8013bfa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8013bfc:	2318      	movs	r3, #24
 8013bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8013c00:	2300      	movs	r3, #0
 8013c02:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8013c04:	f107 031b 	add.w	r3, r7, #27
 8013c08:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8013c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c0e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d045      	beq.n	8013ca2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d002      	beq.n	8013c24 <osThreadNew+0x74>
        name = attr->name;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	699b      	ldr	r3, [r3, #24]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d002      	beq.n	8013c32 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	699b      	ldr	r3, [r3, #24]
 8013c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d008      	beq.n	8013c4a <osThreadNew+0x9a>
 8013c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c3a:	2b38      	cmp	r3, #56	; 0x38
 8013c3c:	d805      	bhi.n	8013c4a <osThreadNew+0x9a>
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	685b      	ldr	r3, [r3, #4]
 8013c42:	f003 0301 	and.w	r3, r3, #1
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d001      	beq.n	8013c4e <osThreadNew+0x9e>
        return (NULL);
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	e054      	b.n	8013cf8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	695b      	ldr	r3, [r3, #20]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d003      	beq.n	8013c5e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	695b      	ldr	r3, [r3, #20]
 8013c5a:	089b      	lsrs	r3, r3, #2
 8013c5c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	689b      	ldr	r3, [r3, #8]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d00e      	beq.n	8013c84 <osThreadNew+0xd4>
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	68db      	ldr	r3, [r3, #12]
 8013c6a:	2b5b      	cmp	r3, #91	; 0x5b
 8013c6c:	d90a      	bls.n	8013c84 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d006      	beq.n	8013c84 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	695b      	ldr	r3, [r3, #20]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d002      	beq.n	8013c84 <osThreadNew+0xd4>
        mem = 1;
 8013c7e:	2301      	movs	r3, #1
 8013c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8013c82:	e010      	b.n	8013ca6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	689b      	ldr	r3, [r3, #8]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d10c      	bne.n	8013ca6 <osThreadNew+0xf6>
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d108      	bne.n	8013ca6 <osThreadNew+0xf6>
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	691b      	ldr	r3, [r3, #16]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d104      	bne.n	8013ca6 <osThreadNew+0xf6>
          mem = 0;
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ca0:	e001      	b.n	8013ca6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8013ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca8:	2b01      	cmp	r3, #1
 8013caa:	d110      	bne.n	8013cce <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013cb4:	9202      	str	r2, [sp, #8]
 8013cb6:	9301      	str	r3, [sp, #4]
 8013cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cba:	9300      	str	r3, [sp, #0]
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013cc2:	68f8      	ldr	r0, [r7, #12]
 8013cc4:	f001 f8b0 	bl	8014e28 <xTaskCreateStatic>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	617b      	str	r3, [r7, #20]
 8013ccc:	e013      	b.n	8013cf6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8013cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d110      	bne.n	8013cf6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	f107 0314 	add.w	r3, r7, #20
 8013cdc:	9301      	str	r3, [sp, #4]
 8013cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce0:	9300      	str	r3, [sp, #0]
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013ce6:	68f8      	ldr	r0, [r7, #12]
 8013ce8:	f001 f8fa 	bl	8014ee0 <xTaskCreate>
 8013cec:	4603      	mov	r3, r0
 8013cee:	2b01      	cmp	r3, #1
 8013cf0:	d001      	beq.n	8013cf6 <osThreadNew+0x146>
          hTask = NULL;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013cf6:	697b      	ldr	r3, [r7, #20]
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3738      	adds	r7, #56	; 0x38
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}
 8013d00:	200026ec 	.word	0x200026ec

08013d04 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b086      	sub	sp, #24
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013d0c:	f3ef 8305 	mrs	r3, IPSR
 8013d10:	613b      	str	r3, [r7, #16]
  return(result);
 8013d12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d10f      	bne.n	8013d38 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d18:	f3ef 8310 	mrs	r3, PRIMASK
 8013d1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d109      	bne.n	8013d38 <osDelay+0x34>
 8013d24:	4b0d      	ldr	r3, [pc, #52]	; (8013d5c <osDelay+0x58>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2b02      	cmp	r3, #2
 8013d2a:	d109      	bne.n	8013d40 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013d2c:	f3ef 8311 	mrs	r3, BASEPRI
 8013d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d003      	beq.n	8013d40 <osDelay+0x3c>
    stat = osErrorISR;
 8013d38:	f06f 0305 	mvn.w	r3, #5
 8013d3c:	617b      	str	r3, [r7, #20]
 8013d3e:	e007      	b.n	8013d50 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8013d40:	2300      	movs	r3, #0
 8013d42:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d002      	beq.n	8013d50 <osDelay+0x4c>
      vTaskDelay(ticks);
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	f001 fa04 	bl	8015158 <vTaskDelay>
    }
  }

  return (stat);
 8013d50:	697b      	ldr	r3, [r7, #20]
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3718      	adds	r7, #24
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	200026ec 	.word	0x200026ec

08013d60 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b08c      	sub	sp, #48	; 0x30
 8013d64:	af02      	add	r7, sp, #8
 8013d66:	60f8      	str	r0, [r7, #12]
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013d70:	f3ef 8305 	mrs	r3, IPSR
 8013d74:	61bb      	str	r3, [r7, #24]
  return(result);
 8013d76:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d16f      	bne.n	8013e5c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8013d80:	617b      	str	r3, [r7, #20]
  return(result);
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d169      	bne.n	8013e5c <osMessageQueueNew+0xfc>
 8013d88:	4b37      	ldr	r3, [pc, #220]	; (8013e68 <osMessageQueueNew+0x108>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	2b02      	cmp	r3, #2
 8013d8e:	d105      	bne.n	8013d9c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013d90:	f3ef 8311 	mrs	r3, BASEPRI
 8013d94:	613b      	str	r3, [r7, #16]
  return(result);
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d15f      	bne.n	8013e5c <osMessageQueueNew+0xfc>
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d05c      	beq.n	8013e5c <osMessageQueueNew+0xfc>
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d059      	beq.n	8013e5c <osMessageQueueNew+0xfc>
    mem = -1;
 8013da8:	f04f 33ff 	mov.w	r3, #4294967295
 8013dac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d029      	beq.n	8013e08 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	689b      	ldr	r3, [r3, #8]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d012      	beq.n	8013de2 <osMessageQueueNew+0x82>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	68db      	ldr	r3, [r3, #12]
 8013dc0:	2b4f      	cmp	r3, #79	; 0x4f
 8013dc2:	d90e      	bls.n	8013de2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d00a      	beq.n	8013de2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	695a      	ldr	r2, [r3, #20]
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	68b9      	ldr	r1, [r7, #8]
 8013dd4:	fb01 f303 	mul.w	r3, r1, r3
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d302      	bcc.n	8013de2 <osMessageQueueNew+0x82>
        mem = 1;
 8013ddc:	2301      	movs	r3, #1
 8013dde:	623b      	str	r3, [r7, #32]
 8013de0:	e014      	b.n	8013e0c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	689b      	ldr	r3, [r3, #8]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d110      	bne.n	8013e0c <osMessageQueueNew+0xac>
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	68db      	ldr	r3, [r3, #12]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d10c      	bne.n	8013e0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d108      	bne.n	8013e0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	695b      	ldr	r3, [r3, #20]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d104      	bne.n	8013e0c <osMessageQueueNew+0xac>
          mem = 0;
 8013e02:	2300      	movs	r3, #0
 8013e04:	623b      	str	r3, [r7, #32]
 8013e06:	e001      	b.n	8013e0c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013e08:	2300      	movs	r3, #0
 8013e0a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013e0c:	6a3b      	ldr	r3, [r7, #32]
 8013e0e:	2b01      	cmp	r3, #1
 8013e10:	d10b      	bne.n	8013e2a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	691a      	ldr	r2, [r3, #16]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	689b      	ldr	r3, [r3, #8]
 8013e1a:	2100      	movs	r1, #0
 8013e1c:	9100      	str	r1, [sp, #0]
 8013e1e:	68b9      	ldr	r1, [r7, #8]
 8013e20:	68f8      	ldr	r0, [r7, #12]
 8013e22:	f000 fa8b 	bl	801433c <xQueueGenericCreateStatic>
 8013e26:	6278      	str	r0, [r7, #36]	; 0x24
 8013e28:	e008      	b.n	8013e3c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8013e2a:	6a3b      	ldr	r3, [r7, #32]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d105      	bne.n	8013e3c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8013e30:	2200      	movs	r2, #0
 8013e32:	68b9      	ldr	r1, [r7, #8]
 8013e34:	68f8      	ldr	r0, [r7, #12]
 8013e36:	f000 faf8 	bl	801442a <xQueueGenericCreate>
 8013e3a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d00c      	beq.n	8013e5c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d003      	beq.n	8013e50 <osMessageQueueNew+0xf0>
        name = attr->name;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	61fb      	str	r3, [r7, #28]
 8013e4e:	e001      	b.n	8013e54 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8013e50:	2300      	movs	r3, #0
 8013e52:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8013e54:	69f9      	ldr	r1, [r7, #28]
 8013e56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e58:	f000 ff88 	bl	8014d6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3728      	adds	r7, #40	; 0x28
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
 8013e66:	bf00      	nop
 8013e68:	200026ec 	.word	0x200026ec

08013e6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b08a      	sub	sp, #40	; 0x28
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	60b9      	str	r1, [r7, #8]
 8013e76:	603b      	str	r3, [r7, #0]
 8013e78:	4613      	mov	r3, r2
 8013e7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013e80:	2300      	movs	r3, #0
 8013e82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013e84:	f3ef 8305 	mrs	r3, IPSR
 8013e88:	61fb      	str	r3, [r7, #28]
  return(result);
 8013e8a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d10f      	bne.n	8013eb0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e90:	f3ef 8310 	mrs	r3, PRIMASK
 8013e94:	61bb      	str	r3, [r7, #24]
  return(result);
 8013e96:	69bb      	ldr	r3, [r7, #24]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d109      	bne.n	8013eb0 <osMessageQueuePut+0x44>
 8013e9c:	4b2b      	ldr	r3, [pc, #172]	; (8013f4c <osMessageQueuePut+0xe0>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	2b02      	cmp	r3, #2
 8013ea2:	d12e      	bne.n	8013f02 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8013ea8:	617b      	str	r3, [r7, #20]
  return(result);
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d028      	beq.n	8013f02 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013eb0:	6a3b      	ldr	r3, [r7, #32]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d005      	beq.n	8013ec2 <osMessageQueuePut+0x56>
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d002      	beq.n	8013ec2 <osMessageQueuePut+0x56>
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d003      	beq.n	8013eca <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8013ec2:	f06f 0303 	mvn.w	r3, #3
 8013ec6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013ec8:	e039      	b.n	8013f3e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013ece:	f107 0210 	add.w	r2, r7, #16
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	68b9      	ldr	r1, [r7, #8]
 8013ed6:	6a38      	ldr	r0, [r7, #32]
 8013ed8:	f000 fc06 	bl	80146e8 <xQueueGenericSendFromISR>
 8013edc:	4603      	mov	r3, r0
 8013ede:	2b01      	cmp	r3, #1
 8013ee0:	d003      	beq.n	8013eea <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8013ee2:	f06f 0302 	mvn.w	r3, #2
 8013ee6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013ee8:	e029      	b.n	8013f3e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d026      	beq.n	8013f3e <osMessageQueuePut+0xd2>
 8013ef0:	4b17      	ldr	r3, [pc, #92]	; (8013f50 <osMessageQueuePut+0xe4>)
 8013ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ef6:	601a      	str	r2, [r3, #0]
 8013ef8:	f3bf 8f4f 	dsb	sy
 8013efc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f00:	e01d      	b.n	8013f3e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013f02:	6a3b      	ldr	r3, [r7, #32]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d002      	beq.n	8013f0e <osMessageQueuePut+0xa2>
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d103      	bne.n	8013f16 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8013f0e:	f06f 0303 	mvn.w	r3, #3
 8013f12:	627b      	str	r3, [r7, #36]	; 0x24
 8013f14:	e014      	b.n	8013f40 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013f16:	2300      	movs	r3, #0
 8013f18:	683a      	ldr	r2, [r7, #0]
 8013f1a:	68b9      	ldr	r1, [r7, #8]
 8013f1c:	6a38      	ldr	r0, [r7, #32]
 8013f1e:	f000 fae5 	bl	80144ec <xQueueGenericSend>
 8013f22:	4603      	mov	r3, r0
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d00b      	beq.n	8013f40 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d003      	beq.n	8013f36 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8013f2e:	f06f 0301 	mvn.w	r3, #1
 8013f32:	627b      	str	r3, [r7, #36]	; 0x24
 8013f34:	e004      	b.n	8013f40 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013f36:	f06f 0302 	mvn.w	r3, #2
 8013f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8013f3c:	e000      	b.n	8013f40 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3728      	adds	r7, #40	; 0x28
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}
 8013f4a:	bf00      	nop
 8013f4c:	200026ec 	.word	0x200026ec
 8013f50:	e000ed04 	.word	0xe000ed04

08013f54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b08a      	sub	sp, #40	; 0x28
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	60b9      	str	r1, [r7, #8]
 8013f5e:	607a      	str	r2, [r7, #4]
 8013f60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013f66:	2300      	movs	r3, #0
 8013f68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013f6a:	f3ef 8305 	mrs	r3, IPSR
 8013f6e:	61fb      	str	r3, [r7, #28]
  return(result);
 8013f70:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d10f      	bne.n	8013f96 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f76:	f3ef 8310 	mrs	r3, PRIMASK
 8013f7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8013f7c:	69bb      	ldr	r3, [r7, #24]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d109      	bne.n	8013f96 <osMessageQueueGet+0x42>
 8013f82:	4b2b      	ldr	r3, [pc, #172]	; (8014030 <osMessageQueueGet+0xdc>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	2b02      	cmp	r3, #2
 8013f88:	d12e      	bne.n	8013fe8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8013f8e:	617b      	str	r3, [r7, #20]
  return(result);
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d028      	beq.n	8013fe8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f96:	6a3b      	ldr	r3, [r7, #32]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d005      	beq.n	8013fa8 <osMessageQueueGet+0x54>
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d002      	beq.n	8013fa8 <osMessageQueueGet+0x54>
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d003      	beq.n	8013fb0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8013fa8:	f06f 0303 	mvn.w	r3, #3
 8013fac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013fae:	e038      	b.n	8014022 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013fb4:	f107 0310 	add.w	r3, r7, #16
 8013fb8:	461a      	mov	r2, r3
 8013fba:	68b9      	ldr	r1, [r7, #8]
 8013fbc:	6a38      	ldr	r0, [r7, #32]
 8013fbe:	f000 fd0b 	bl	80149d8 <xQueueReceiveFromISR>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	2b01      	cmp	r3, #1
 8013fc6:	d003      	beq.n	8013fd0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8013fc8:	f06f 0302 	mvn.w	r3, #2
 8013fcc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013fce:	e028      	b.n	8014022 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d025      	beq.n	8014022 <osMessageQueueGet+0xce>
 8013fd6:	4b17      	ldr	r3, [pc, #92]	; (8014034 <osMessageQueueGet+0xe0>)
 8013fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fdc:	601a      	str	r2, [r3, #0]
 8013fde:	f3bf 8f4f 	dsb	sy
 8013fe2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013fe6:	e01c      	b.n	8014022 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013fe8:	6a3b      	ldr	r3, [r7, #32]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d002      	beq.n	8013ff4 <osMessageQueueGet+0xa0>
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d103      	bne.n	8013ffc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8013ff4:	f06f 0303 	mvn.w	r3, #3
 8013ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8013ffa:	e013      	b.n	8014024 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013ffc:	683a      	ldr	r2, [r7, #0]
 8013ffe:	68b9      	ldr	r1, [r7, #8]
 8014000:	6a38      	ldr	r0, [r7, #32]
 8014002:	f000 fc09 	bl	8014818 <xQueueReceive>
 8014006:	4603      	mov	r3, r0
 8014008:	2b01      	cmp	r3, #1
 801400a:	d00b      	beq.n	8014024 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d003      	beq.n	801401a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8014012:	f06f 0301 	mvn.w	r3, #1
 8014016:	627b      	str	r3, [r7, #36]	; 0x24
 8014018:	e004      	b.n	8014024 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801401a:	f06f 0302 	mvn.w	r3, #2
 801401e:	627b      	str	r3, [r7, #36]	; 0x24
 8014020:	e000      	b.n	8014024 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014022:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8014024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014026:	4618      	mov	r0, r3
 8014028:	3728      	adds	r7, #40	; 0x28
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	200026ec 	.word	0x200026ec
 8014034:	e000ed04 	.word	0xe000ed04

08014038 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8014038:	b580      	push	{r7, lr}
 801403a:	b088      	sub	sp, #32
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8014044:	69bb      	ldr	r3, [r7, #24]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d102      	bne.n	8014050 <osMessageQueueGetCount+0x18>
    count = 0U;
 801404a:	2300      	movs	r3, #0
 801404c:	61fb      	str	r3, [r7, #28]
 801404e:	e01e      	b.n	801408e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014050:	f3ef 8305 	mrs	r3, IPSR
 8014054:	617b      	str	r3, [r7, #20]
  return(result);
 8014056:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8014058:	2b00      	cmp	r3, #0
 801405a:	d10f      	bne.n	801407c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801405c:	f3ef 8310 	mrs	r3, PRIMASK
 8014060:	613b      	str	r3, [r7, #16]
  return(result);
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d109      	bne.n	801407c <osMessageQueueGetCount+0x44>
 8014068:	4b0b      	ldr	r3, [pc, #44]	; (8014098 <osMessageQueueGetCount+0x60>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	2b02      	cmp	r3, #2
 801406e:	d10a      	bne.n	8014086 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014070:	f3ef 8311 	mrs	r3, BASEPRI
 8014074:	60fb      	str	r3, [r7, #12]
  return(result);
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d004      	beq.n	8014086 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 801407c:	69b8      	ldr	r0, [r7, #24]
 801407e:	f000 fd49 	bl	8014b14 <uxQueueMessagesWaitingFromISR>
 8014082:	61f8      	str	r0, [r7, #28]
 8014084:	e003      	b.n	801408e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8014086:	69b8      	ldr	r0, [r7, #24]
 8014088:	f000 fd26 	bl	8014ad8 <uxQueueMessagesWaiting>
 801408c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 801408e:	69fb      	ldr	r3, [r7, #28]
}
 8014090:	4618      	mov	r0, r3
 8014092:	3720      	adds	r7, #32
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}
 8014098:	200026ec 	.word	0x200026ec

0801409c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801409c:	b480      	push	{r7}
 801409e:	b085      	sub	sp, #20
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	60b9      	str	r1, [r7, #8]
 80140a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	4a07      	ldr	r2, [pc, #28]	; (80140c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80140ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	4a06      	ldr	r2, [pc, #24]	; (80140cc <vApplicationGetIdleTaskMemory+0x30>)
 80140b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2280      	movs	r2, #128	; 0x80
 80140b8:	601a      	str	r2, [r3, #0]
}
 80140ba:	bf00      	nop
 80140bc:	3714      	adds	r7, #20
 80140be:	46bd      	mov	sp, r7
 80140c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c4:	4770      	bx	lr
 80140c6:	bf00      	nop
 80140c8:	200026f0 	.word	0x200026f0
 80140cc:	2000274c 	.word	0x2000274c

080140d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80140d0:	b480      	push	{r7}
 80140d2:	b085      	sub	sp, #20
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	4a07      	ldr	r2, [pc, #28]	; (80140fc <vApplicationGetTimerTaskMemory+0x2c>)
 80140e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	4a06      	ldr	r2, [pc, #24]	; (8014100 <vApplicationGetTimerTaskMemory+0x30>)
 80140e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80140ee:	601a      	str	r2, [r3, #0]
}
 80140f0:	bf00      	nop
 80140f2:	3714      	adds	r7, #20
 80140f4:	46bd      	mov	sp, r7
 80140f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fa:	4770      	bx	lr
 80140fc:	2000294c 	.word	0x2000294c
 8014100:	200029a8 	.word	0x200029a8

08014104 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014104:	b480      	push	{r7}
 8014106:	b083      	sub	sp, #12
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f103 0208 	add.w	r2, r3, #8
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f04f 32ff 	mov.w	r2, #4294967295
 801411c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f103 0208 	add.w	r2, r3, #8
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f103 0208 	add.w	r2, r3, #8
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2200      	movs	r2, #0
 8014136:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014138:	bf00      	nop
 801413a:	370c      	adds	r7, #12
 801413c:	46bd      	mov	sp, r7
 801413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014142:	4770      	bx	lr

08014144 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014144:	b480      	push	{r7}
 8014146:	b083      	sub	sp, #12
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2200      	movs	r2, #0
 8014150:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014152:	bf00      	nop
 8014154:	370c      	adds	r7, #12
 8014156:	46bd      	mov	sp, r7
 8014158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415c:	4770      	bx	lr

0801415e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801415e:	b480      	push	{r7}
 8014160:	b085      	sub	sp, #20
 8014162:	af00      	add	r7, sp, #0
 8014164:	6078      	str	r0, [r7, #4]
 8014166:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	685b      	ldr	r3, [r3, #4]
 801416c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	68fa      	ldr	r2, [r7, #12]
 8014172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	689a      	ldr	r2, [r3, #8]
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	689b      	ldr	r3, [r3, #8]
 8014180:	683a      	ldr	r2, [r7, #0]
 8014182:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	683a      	ldr	r2, [r7, #0]
 8014188:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	1c5a      	adds	r2, r3, #1
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	601a      	str	r2, [r3, #0]
}
 801419a:	bf00      	nop
 801419c:	3714      	adds	r7, #20
 801419e:	46bd      	mov	sp, r7
 80141a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a4:	4770      	bx	lr

080141a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80141a6:	b480      	push	{r7}
 80141a8:	b085      	sub	sp, #20
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	6078      	str	r0, [r7, #4]
 80141ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141bc:	d103      	bne.n	80141c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	691b      	ldr	r3, [r3, #16]
 80141c2:	60fb      	str	r3, [r7, #12]
 80141c4:	e00c      	b.n	80141e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	3308      	adds	r3, #8
 80141ca:	60fb      	str	r3, [r7, #12]
 80141cc:	e002      	b.n	80141d4 <vListInsert+0x2e>
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	685b      	ldr	r3, [r3, #4]
 80141d2:	60fb      	str	r3, [r7, #12]
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	685b      	ldr	r3, [r3, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	68ba      	ldr	r2, [r7, #8]
 80141dc:	429a      	cmp	r2, r3
 80141de:	d2f6      	bcs.n	80141ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	685a      	ldr	r2, [r3, #4]
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	683a      	ldr	r2, [r7, #0]
 80141ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	683a      	ldr	r2, [r7, #0]
 80141fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	687a      	ldr	r2, [r7, #4]
 8014200:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	1c5a      	adds	r2, r3, #1
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	601a      	str	r2, [r3, #0]
}
 801420c:	bf00      	nop
 801420e:	3714      	adds	r7, #20
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr

08014218 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014218:	b480      	push	{r7}
 801421a:	b085      	sub	sp, #20
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	691b      	ldr	r3, [r3, #16]
 8014224:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	687a      	ldr	r2, [r7, #4]
 801422c:	6892      	ldr	r2, [r2, #8]
 801422e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	689b      	ldr	r3, [r3, #8]
 8014234:	687a      	ldr	r2, [r7, #4]
 8014236:	6852      	ldr	r2, [r2, #4]
 8014238:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	687a      	ldr	r2, [r7, #4]
 8014240:	429a      	cmp	r2, r3
 8014242:	d103      	bne.n	801424c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	689a      	ldr	r2, [r3, #8]
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	2200      	movs	r2, #0
 8014250:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	1e5a      	subs	r2, r3, #1
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	681b      	ldr	r3, [r3, #0]
}
 8014260:	4618      	mov	r0, r3
 8014262:	3714      	adds	r7, #20
 8014264:	46bd      	mov	sp, r7
 8014266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426a:	4770      	bx	lr

0801426c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d10a      	bne.n	8014296 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014284:	f383 8811 	msr	BASEPRI, r3
 8014288:	f3bf 8f6f 	isb	sy
 801428c:	f3bf 8f4f 	dsb	sy
 8014290:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014292:	bf00      	nop
 8014294:	e7fe      	b.n	8014294 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014296:	f002 f905 	bl	80164a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142a2:	68f9      	ldr	r1, [r7, #12]
 80142a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80142a6:	fb01 f303 	mul.w	r3, r1, r3
 80142aa:	441a      	add	r2, r3
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	2200      	movs	r2, #0
 80142b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	681a      	ldr	r2, [r3, #0]
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	681a      	ldr	r2, [r3, #0]
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142c6:	3b01      	subs	r3, #1
 80142c8:	68f9      	ldr	r1, [r7, #12]
 80142ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80142cc:	fb01 f303 	mul.w	r3, r1, r3
 80142d0:	441a      	add	r2, r3
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	22ff      	movs	r2, #255	; 0xff
 80142da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	22ff      	movs	r2, #255	; 0xff
 80142e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d114      	bne.n	8014316 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	691b      	ldr	r3, [r3, #16]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d01a      	beq.n	801432a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	3310      	adds	r3, #16
 80142f8:	4618      	mov	r0, r3
 80142fa:	f001 f9ef 	bl	80156dc <xTaskRemoveFromEventList>
 80142fe:	4603      	mov	r3, r0
 8014300:	2b00      	cmp	r3, #0
 8014302:	d012      	beq.n	801432a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014304:	4b0c      	ldr	r3, [pc, #48]	; (8014338 <xQueueGenericReset+0xcc>)
 8014306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801430a:	601a      	str	r2, [r3, #0]
 801430c:	f3bf 8f4f 	dsb	sy
 8014310:	f3bf 8f6f 	isb	sy
 8014314:	e009      	b.n	801432a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	3310      	adds	r3, #16
 801431a:	4618      	mov	r0, r3
 801431c:	f7ff fef2 	bl	8014104 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	3324      	adds	r3, #36	; 0x24
 8014324:	4618      	mov	r0, r3
 8014326:	f7ff feed 	bl	8014104 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801432a:	f002 f8eb 	bl	8016504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801432e:	2301      	movs	r3, #1
}
 8014330:	4618      	mov	r0, r3
 8014332:	3710      	adds	r7, #16
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}
 8014338:	e000ed04 	.word	0xe000ed04

0801433c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801433c:	b580      	push	{r7, lr}
 801433e:	b08e      	sub	sp, #56	; 0x38
 8014340:	af02      	add	r7, sp, #8
 8014342:	60f8      	str	r0, [r7, #12]
 8014344:	60b9      	str	r1, [r7, #8]
 8014346:	607a      	str	r2, [r7, #4]
 8014348:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d10a      	bne.n	8014366 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014354:	f383 8811 	msr	BASEPRI, r3
 8014358:	f3bf 8f6f 	isb	sy
 801435c:	f3bf 8f4f 	dsb	sy
 8014360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014362:	bf00      	nop
 8014364:	e7fe      	b.n	8014364 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10a      	bne.n	8014382 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014370:	f383 8811 	msr	BASEPRI, r3
 8014374:	f3bf 8f6f 	isb	sy
 8014378:	f3bf 8f4f 	dsb	sy
 801437c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801437e:	bf00      	nop
 8014380:	e7fe      	b.n	8014380 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d002      	beq.n	801438e <xQueueGenericCreateStatic+0x52>
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d001      	beq.n	8014392 <xQueueGenericCreateStatic+0x56>
 801438e:	2301      	movs	r3, #1
 8014390:	e000      	b.n	8014394 <xQueueGenericCreateStatic+0x58>
 8014392:	2300      	movs	r3, #0
 8014394:	2b00      	cmp	r3, #0
 8014396:	d10a      	bne.n	80143ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801439c:	f383 8811 	msr	BASEPRI, r3
 80143a0:	f3bf 8f6f 	isb	sy
 80143a4:	f3bf 8f4f 	dsb	sy
 80143a8:	623b      	str	r3, [r7, #32]
}
 80143aa:	bf00      	nop
 80143ac:	e7fe      	b.n	80143ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d102      	bne.n	80143ba <xQueueGenericCreateStatic+0x7e>
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d101      	bne.n	80143be <xQueueGenericCreateStatic+0x82>
 80143ba:	2301      	movs	r3, #1
 80143bc:	e000      	b.n	80143c0 <xQueueGenericCreateStatic+0x84>
 80143be:	2300      	movs	r3, #0
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d10a      	bne.n	80143da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80143c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c8:	f383 8811 	msr	BASEPRI, r3
 80143cc:	f3bf 8f6f 	isb	sy
 80143d0:	f3bf 8f4f 	dsb	sy
 80143d4:	61fb      	str	r3, [r7, #28]
}
 80143d6:	bf00      	nop
 80143d8:	e7fe      	b.n	80143d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80143da:	2350      	movs	r3, #80	; 0x50
 80143dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	2b50      	cmp	r3, #80	; 0x50
 80143e2:	d00a      	beq.n	80143fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80143e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e8:	f383 8811 	msr	BASEPRI, r3
 80143ec:	f3bf 8f6f 	isb	sy
 80143f0:	f3bf 8f4f 	dsb	sy
 80143f4:	61bb      	str	r3, [r7, #24]
}
 80143f6:	bf00      	nop
 80143f8:	e7fe      	b.n	80143f8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80143fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014400:	2b00      	cmp	r3, #0
 8014402:	d00d      	beq.n	8014420 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014406:	2201      	movs	r2, #1
 8014408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801440c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014412:	9300      	str	r3, [sp, #0]
 8014414:	4613      	mov	r3, r2
 8014416:	687a      	ldr	r2, [r7, #4]
 8014418:	68b9      	ldr	r1, [r7, #8]
 801441a:	68f8      	ldr	r0, [r7, #12]
 801441c:	f000 f843 	bl	80144a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8014420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014422:	4618      	mov	r0, r3
 8014424:	3730      	adds	r7, #48	; 0x30
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}

0801442a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801442a:	b580      	push	{r7, lr}
 801442c:	b08a      	sub	sp, #40	; 0x28
 801442e:	af02      	add	r7, sp, #8
 8014430:	60f8      	str	r0, [r7, #12]
 8014432:	60b9      	str	r1, [r7, #8]
 8014434:	4613      	mov	r3, r2
 8014436:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d10a      	bne.n	8014454 <xQueueGenericCreate+0x2a>
	__asm volatile
 801443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014442:	f383 8811 	msr	BASEPRI, r3
 8014446:	f3bf 8f6f 	isb	sy
 801444a:	f3bf 8f4f 	dsb	sy
 801444e:	613b      	str	r3, [r7, #16]
}
 8014450:	bf00      	nop
 8014452:	e7fe      	b.n	8014452 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d102      	bne.n	8014460 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801445a:	2300      	movs	r3, #0
 801445c:	61fb      	str	r3, [r7, #28]
 801445e:	e004      	b.n	801446a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	68ba      	ldr	r2, [r7, #8]
 8014464:	fb02 f303 	mul.w	r3, r2, r3
 8014468:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801446a:	69fb      	ldr	r3, [r7, #28]
 801446c:	3350      	adds	r3, #80	; 0x50
 801446e:	4618      	mov	r0, r3
 8014470:	f002 f93a 	bl	80166e8 <pvPortMalloc>
 8014474:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014476:	69bb      	ldr	r3, [r7, #24]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d00f      	beq.n	801449c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	3350      	adds	r3, #80	; 0x50
 8014480:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014482:	69bb      	ldr	r3, [r7, #24]
 8014484:	2200      	movs	r2, #0
 8014486:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801448a:	79fa      	ldrb	r2, [r7, #7]
 801448c:	69bb      	ldr	r3, [r7, #24]
 801448e:	9300      	str	r3, [sp, #0]
 8014490:	4613      	mov	r3, r2
 8014492:	697a      	ldr	r2, [r7, #20]
 8014494:	68b9      	ldr	r1, [r7, #8]
 8014496:	68f8      	ldr	r0, [r7, #12]
 8014498:	f000 f805 	bl	80144a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801449c:	69bb      	ldr	r3, [r7, #24]
	}
 801449e:	4618      	mov	r0, r3
 80144a0:	3720      	adds	r7, #32
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}

080144a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80144a6:	b580      	push	{r7, lr}
 80144a8:	b084      	sub	sp, #16
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	60f8      	str	r0, [r7, #12]
 80144ae:	60b9      	str	r1, [r7, #8]
 80144b0:	607a      	str	r2, [r7, #4]
 80144b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80144b4:	68bb      	ldr	r3, [r7, #8]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d103      	bne.n	80144c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	69ba      	ldr	r2, [r7, #24]
 80144be:	601a      	str	r2, [r3, #0]
 80144c0:	e002      	b.n	80144c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80144c2:	69bb      	ldr	r3, [r7, #24]
 80144c4:	687a      	ldr	r2, [r7, #4]
 80144c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80144c8:	69bb      	ldr	r3, [r7, #24]
 80144ca:	68fa      	ldr	r2, [r7, #12]
 80144cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80144ce:	69bb      	ldr	r3, [r7, #24]
 80144d0:	68ba      	ldr	r2, [r7, #8]
 80144d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80144d4:	2101      	movs	r1, #1
 80144d6:	69b8      	ldr	r0, [r7, #24]
 80144d8:	f7ff fec8 	bl	801426c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80144dc:	69bb      	ldr	r3, [r7, #24]
 80144de:	78fa      	ldrb	r2, [r7, #3]
 80144e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80144e4:	bf00      	nop
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b08e      	sub	sp, #56	; 0x38
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	60f8      	str	r0, [r7, #12]
 80144f4:	60b9      	str	r1, [r7, #8]
 80144f6:	607a      	str	r2, [r7, #4]
 80144f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80144fa:	2300      	movs	r3, #0
 80144fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014504:	2b00      	cmp	r3, #0
 8014506:	d10a      	bne.n	801451e <xQueueGenericSend+0x32>
	__asm volatile
 8014508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801450c:	f383 8811 	msr	BASEPRI, r3
 8014510:	f3bf 8f6f 	isb	sy
 8014514:	f3bf 8f4f 	dsb	sy
 8014518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801451a:	bf00      	nop
 801451c:	e7fe      	b.n	801451c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d103      	bne.n	801452c <xQueueGenericSend+0x40>
 8014524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014528:	2b00      	cmp	r3, #0
 801452a:	d101      	bne.n	8014530 <xQueueGenericSend+0x44>
 801452c:	2301      	movs	r3, #1
 801452e:	e000      	b.n	8014532 <xQueueGenericSend+0x46>
 8014530:	2300      	movs	r3, #0
 8014532:	2b00      	cmp	r3, #0
 8014534:	d10a      	bne.n	801454c <xQueueGenericSend+0x60>
	__asm volatile
 8014536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801453a:	f383 8811 	msr	BASEPRI, r3
 801453e:	f3bf 8f6f 	isb	sy
 8014542:	f3bf 8f4f 	dsb	sy
 8014546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014548:	bf00      	nop
 801454a:	e7fe      	b.n	801454a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	2b02      	cmp	r3, #2
 8014550:	d103      	bne.n	801455a <xQueueGenericSend+0x6e>
 8014552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014556:	2b01      	cmp	r3, #1
 8014558:	d101      	bne.n	801455e <xQueueGenericSend+0x72>
 801455a:	2301      	movs	r3, #1
 801455c:	e000      	b.n	8014560 <xQueueGenericSend+0x74>
 801455e:	2300      	movs	r3, #0
 8014560:	2b00      	cmp	r3, #0
 8014562:	d10a      	bne.n	801457a <xQueueGenericSend+0x8e>
	__asm volatile
 8014564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014568:	f383 8811 	msr	BASEPRI, r3
 801456c:	f3bf 8f6f 	isb	sy
 8014570:	f3bf 8f4f 	dsb	sy
 8014574:	623b      	str	r3, [r7, #32]
}
 8014576:	bf00      	nop
 8014578:	e7fe      	b.n	8014578 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801457a:	f001 fa73 	bl	8015a64 <xTaskGetSchedulerState>
 801457e:	4603      	mov	r3, r0
 8014580:	2b00      	cmp	r3, #0
 8014582:	d102      	bne.n	801458a <xQueueGenericSend+0x9e>
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d101      	bne.n	801458e <xQueueGenericSend+0xa2>
 801458a:	2301      	movs	r3, #1
 801458c:	e000      	b.n	8014590 <xQueueGenericSend+0xa4>
 801458e:	2300      	movs	r3, #0
 8014590:	2b00      	cmp	r3, #0
 8014592:	d10a      	bne.n	80145aa <xQueueGenericSend+0xbe>
	__asm volatile
 8014594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014598:	f383 8811 	msr	BASEPRI, r3
 801459c:	f3bf 8f6f 	isb	sy
 80145a0:	f3bf 8f4f 	dsb	sy
 80145a4:	61fb      	str	r3, [r7, #28]
}
 80145a6:	bf00      	nop
 80145a8:	e7fe      	b.n	80145a8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80145aa:	f001 ff7b 	bl	80164a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80145ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80145b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145b6:	429a      	cmp	r2, r3
 80145b8:	d302      	bcc.n	80145c0 <xQueueGenericSend+0xd4>
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	2b02      	cmp	r3, #2
 80145be:	d129      	bne.n	8014614 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80145c0:	683a      	ldr	r2, [r7, #0]
 80145c2:	68b9      	ldr	r1, [r7, #8]
 80145c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80145c6:	f000 fac1 	bl	8014b4c <prvCopyDataToQueue>
 80145ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80145cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d010      	beq.n	80145f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80145d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d6:	3324      	adds	r3, #36	; 0x24
 80145d8:	4618      	mov	r0, r3
 80145da:	f001 f87f 	bl	80156dc <xTaskRemoveFromEventList>
 80145de:	4603      	mov	r3, r0
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d013      	beq.n	801460c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80145e4:	4b3f      	ldr	r3, [pc, #252]	; (80146e4 <xQueueGenericSend+0x1f8>)
 80145e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145ea:	601a      	str	r2, [r3, #0]
 80145ec:	f3bf 8f4f 	dsb	sy
 80145f0:	f3bf 8f6f 	isb	sy
 80145f4:	e00a      	b.n	801460c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80145f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d007      	beq.n	801460c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80145fc:	4b39      	ldr	r3, [pc, #228]	; (80146e4 <xQueueGenericSend+0x1f8>)
 80145fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014602:	601a      	str	r2, [r3, #0]
 8014604:	f3bf 8f4f 	dsb	sy
 8014608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801460c:	f001 ff7a 	bl	8016504 <vPortExitCritical>
				return pdPASS;
 8014610:	2301      	movs	r3, #1
 8014612:	e063      	b.n	80146dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d103      	bne.n	8014622 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801461a:	f001 ff73 	bl	8016504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801461e:	2300      	movs	r3, #0
 8014620:	e05c      	b.n	80146dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014624:	2b00      	cmp	r3, #0
 8014626:	d106      	bne.n	8014636 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014628:	f107 0314 	add.w	r3, r7, #20
 801462c:	4618      	mov	r0, r3
 801462e:	f001 f8b9 	bl	80157a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014632:	2301      	movs	r3, #1
 8014634:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014636:	f001 ff65 	bl	8016504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801463a:	f000 fe27 	bl	801528c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801463e:	f001 ff31 	bl	80164a4 <vPortEnterCritical>
 8014642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014648:	b25b      	sxtb	r3, r3
 801464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801464e:	d103      	bne.n	8014658 <xQueueGenericSend+0x16c>
 8014650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014652:	2200      	movs	r2, #0
 8014654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801465e:	b25b      	sxtb	r3, r3
 8014660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014664:	d103      	bne.n	801466e <xQueueGenericSend+0x182>
 8014666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014668:	2200      	movs	r2, #0
 801466a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801466e:	f001 ff49 	bl	8016504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014672:	1d3a      	adds	r2, r7, #4
 8014674:	f107 0314 	add.w	r3, r7, #20
 8014678:	4611      	mov	r1, r2
 801467a:	4618      	mov	r0, r3
 801467c:	f001 f8a8 	bl	80157d0 <xTaskCheckForTimeOut>
 8014680:	4603      	mov	r3, r0
 8014682:	2b00      	cmp	r3, #0
 8014684:	d124      	bne.n	80146d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014688:	f000 fb58 	bl	8014d3c <prvIsQueueFull>
 801468c:	4603      	mov	r3, r0
 801468e:	2b00      	cmp	r3, #0
 8014690:	d018      	beq.n	80146c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014694:	3310      	adds	r3, #16
 8014696:	687a      	ldr	r2, [r7, #4]
 8014698:	4611      	mov	r1, r2
 801469a:	4618      	mov	r0, r3
 801469c:	f000 ffce 	bl	801563c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80146a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146a2:	f000 fae3 	bl	8014c6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80146a6:	f000 fdff 	bl	80152a8 <xTaskResumeAll>
 80146aa:	4603      	mov	r3, r0
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	f47f af7c 	bne.w	80145aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80146b2:	4b0c      	ldr	r3, [pc, #48]	; (80146e4 <xQueueGenericSend+0x1f8>)
 80146b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146b8:	601a      	str	r2, [r3, #0]
 80146ba:	f3bf 8f4f 	dsb	sy
 80146be:	f3bf 8f6f 	isb	sy
 80146c2:	e772      	b.n	80145aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80146c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146c6:	f000 fad1 	bl	8014c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80146ca:	f000 fded 	bl	80152a8 <xTaskResumeAll>
 80146ce:	e76c      	b.n	80145aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80146d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146d2:	f000 facb 	bl	8014c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80146d6:	f000 fde7 	bl	80152a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80146da:	2300      	movs	r3, #0
		}
	}
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3738      	adds	r7, #56	; 0x38
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}
 80146e4:	e000ed04 	.word	0xe000ed04

080146e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b08e      	sub	sp, #56	; 0x38
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	60f8      	str	r0, [r7, #12]
 80146f0:	60b9      	str	r1, [r7, #8]
 80146f2:	607a      	str	r2, [r7, #4]
 80146f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80146fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d10a      	bne.n	8014716 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014704:	f383 8811 	msr	BASEPRI, r3
 8014708:	f3bf 8f6f 	isb	sy
 801470c:	f3bf 8f4f 	dsb	sy
 8014710:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014712:	bf00      	nop
 8014714:	e7fe      	b.n	8014714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d103      	bne.n	8014724 <xQueueGenericSendFromISR+0x3c>
 801471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014720:	2b00      	cmp	r3, #0
 8014722:	d101      	bne.n	8014728 <xQueueGenericSendFromISR+0x40>
 8014724:	2301      	movs	r3, #1
 8014726:	e000      	b.n	801472a <xQueueGenericSendFromISR+0x42>
 8014728:	2300      	movs	r3, #0
 801472a:	2b00      	cmp	r3, #0
 801472c:	d10a      	bne.n	8014744 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014732:	f383 8811 	msr	BASEPRI, r3
 8014736:	f3bf 8f6f 	isb	sy
 801473a:	f3bf 8f4f 	dsb	sy
 801473e:	623b      	str	r3, [r7, #32]
}
 8014740:	bf00      	nop
 8014742:	e7fe      	b.n	8014742 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014744:	683b      	ldr	r3, [r7, #0]
 8014746:	2b02      	cmp	r3, #2
 8014748:	d103      	bne.n	8014752 <xQueueGenericSendFromISR+0x6a>
 801474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801474c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801474e:	2b01      	cmp	r3, #1
 8014750:	d101      	bne.n	8014756 <xQueueGenericSendFromISR+0x6e>
 8014752:	2301      	movs	r3, #1
 8014754:	e000      	b.n	8014758 <xQueueGenericSendFromISR+0x70>
 8014756:	2300      	movs	r3, #0
 8014758:	2b00      	cmp	r3, #0
 801475a:	d10a      	bne.n	8014772 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014760:	f383 8811 	msr	BASEPRI, r3
 8014764:	f3bf 8f6f 	isb	sy
 8014768:	f3bf 8f4f 	dsb	sy
 801476c:	61fb      	str	r3, [r7, #28]
}
 801476e:	bf00      	nop
 8014770:	e7fe      	b.n	8014770 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014772:	f001 ff79 	bl	8016668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014776:	f3ef 8211 	mrs	r2, BASEPRI
 801477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801477e:	f383 8811 	msr	BASEPRI, r3
 8014782:	f3bf 8f6f 	isb	sy
 8014786:	f3bf 8f4f 	dsb	sy
 801478a:	61ba      	str	r2, [r7, #24]
 801478c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801478e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014790:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801479a:	429a      	cmp	r2, r3
 801479c:	d302      	bcc.n	80147a4 <xQueueGenericSendFromISR+0xbc>
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	2b02      	cmp	r3, #2
 80147a2:	d12c      	bne.n	80147fe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80147a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80147aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80147ae:	683a      	ldr	r2, [r7, #0]
 80147b0:	68b9      	ldr	r1, [r7, #8]
 80147b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80147b4:	f000 f9ca 	bl	8014b4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80147b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80147bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147c0:	d112      	bne.n	80147e8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80147c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d016      	beq.n	80147f8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80147ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147cc:	3324      	adds	r3, #36	; 0x24
 80147ce:	4618      	mov	r0, r3
 80147d0:	f000 ff84 	bl	80156dc <xTaskRemoveFromEventList>
 80147d4:	4603      	mov	r3, r0
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d00e      	beq.n	80147f8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d00b      	beq.n	80147f8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2201      	movs	r2, #1
 80147e4:	601a      	str	r2, [r3, #0]
 80147e6:	e007      	b.n	80147f8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80147e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80147ec:	3301      	adds	r3, #1
 80147ee:	b2db      	uxtb	r3, r3
 80147f0:	b25a      	sxtb	r2, r3
 80147f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80147f8:	2301      	movs	r3, #1
 80147fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80147fc:	e001      	b.n	8014802 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80147fe:	2300      	movs	r3, #0
 8014800:	637b      	str	r3, [r7, #52]	; 0x34
 8014802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014804:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801480c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014810:	4618      	mov	r0, r3
 8014812:	3738      	adds	r7, #56	; 0x38
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b08c      	sub	sp, #48	; 0x30
 801481c:	af00      	add	r7, sp, #0
 801481e:	60f8      	str	r0, [r7, #12]
 8014820:	60b9      	str	r1, [r7, #8]
 8014822:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014824:	2300      	movs	r3, #0
 8014826:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801482e:	2b00      	cmp	r3, #0
 8014830:	d10a      	bne.n	8014848 <xQueueReceive+0x30>
	__asm volatile
 8014832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014836:	f383 8811 	msr	BASEPRI, r3
 801483a:	f3bf 8f6f 	isb	sy
 801483e:	f3bf 8f4f 	dsb	sy
 8014842:	623b      	str	r3, [r7, #32]
}
 8014844:	bf00      	nop
 8014846:	e7fe      	b.n	8014846 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d103      	bne.n	8014856 <xQueueReceive+0x3e>
 801484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014852:	2b00      	cmp	r3, #0
 8014854:	d101      	bne.n	801485a <xQueueReceive+0x42>
 8014856:	2301      	movs	r3, #1
 8014858:	e000      	b.n	801485c <xQueueReceive+0x44>
 801485a:	2300      	movs	r3, #0
 801485c:	2b00      	cmp	r3, #0
 801485e:	d10a      	bne.n	8014876 <xQueueReceive+0x5e>
	__asm volatile
 8014860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014864:	f383 8811 	msr	BASEPRI, r3
 8014868:	f3bf 8f6f 	isb	sy
 801486c:	f3bf 8f4f 	dsb	sy
 8014870:	61fb      	str	r3, [r7, #28]
}
 8014872:	bf00      	nop
 8014874:	e7fe      	b.n	8014874 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014876:	f001 f8f5 	bl	8015a64 <xTaskGetSchedulerState>
 801487a:	4603      	mov	r3, r0
 801487c:	2b00      	cmp	r3, #0
 801487e:	d102      	bne.n	8014886 <xQueueReceive+0x6e>
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d101      	bne.n	801488a <xQueueReceive+0x72>
 8014886:	2301      	movs	r3, #1
 8014888:	e000      	b.n	801488c <xQueueReceive+0x74>
 801488a:	2300      	movs	r3, #0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d10a      	bne.n	80148a6 <xQueueReceive+0x8e>
	__asm volatile
 8014890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014894:	f383 8811 	msr	BASEPRI, r3
 8014898:	f3bf 8f6f 	isb	sy
 801489c:	f3bf 8f4f 	dsb	sy
 80148a0:	61bb      	str	r3, [r7, #24]
}
 80148a2:	bf00      	nop
 80148a4:	e7fe      	b.n	80148a4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80148a6:	f001 fdfd 	bl	80164a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80148aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80148b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d01f      	beq.n	80148f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80148b6:	68b9      	ldr	r1, [r7, #8]
 80148b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148ba:	f000 f9b1 	bl	8014c20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80148be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c0:	1e5a      	subs	r2, r3, #1
 80148c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80148c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c8:	691b      	ldr	r3, [r3, #16]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d00f      	beq.n	80148ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80148ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d0:	3310      	adds	r3, #16
 80148d2:	4618      	mov	r0, r3
 80148d4:	f000 ff02 	bl	80156dc <xTaskRemoveFromEventList>
 80148d8:	4603      	mov	r3, r0
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d007      	beq.n	80148ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80148de:	4b3d      	ldr	r3, [pc, #244]	; (80149d4 <xQueueReceive+0x1bc>)
 80148e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148e4:	601a      	str	r2, [r3, #0]
 80148e6:	f3bf 8f4f 	dsb	sy
 80148ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80148ee:	f001 fe09 	bl	8016504 <vPortExitCritical>
				return pdPASS;
 80148f2:	2301      	movs	r3, #1
 80148f4:	e069      	b.n	80149ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d103      	bne.n	8014904 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80148fc:	f001 fe02 	bl	8016504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014900:	2300      	movs	r3, #0
 8014902:	e062      	b.n	80149ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014906:	2b00      	cmp	r3, #0
 8014908:	d106      	bne.n	8014918 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801490a:	f107 0310 	add.w	r3, r7, #16
 801490e:	4618      	mov	r0, r3
 8014910:	f000 ff48 	bl	80157a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014914:	2301      	movs	r3, #1
 8014916:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014918:	f001 fdf4 	bl	8016504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801491c:	f000 fcb6 	bl	801528c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014920:	f001 fdc0 	bl	80164a4 <vPortEnterCritical>
 8014924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801492a:	b25b      	sxtb	r3, r3
 801492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014930:	d103      	bne.n	801493a <xQueueReceive+0x122>
 8014932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014934:	2200      	movs	r2, #0
 8014936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014940:	b25b      	sxtb	r3, r3
 8014942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014946:	d103      	bne.n	8014950 <xQueueReceive+0x138>
 8014948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801494a:	2200      	movs	r2, #0
 801494c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014950:	f001 fdd8 	bl	8016504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014954:	1d3a      	adds	r2, r7, #4
 8014956:	f107 0310 	add.w	r3, r7, #16
 801495a:	4611      	mov	r1, r2
 801495c:	4618      	mov	r0, r3
 801495e:	f000 ff37 	bl	80157d0 <xTaskCheckForTimeOut>
 8014962:	4603      	mov	r3, r0
 8014964:	2b00      	cmp	r3, #0
 8014966:	d123      	bne.n	80149b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801496a:	f000 f9d1 	bl	8014d10 <prvIsQueueEmpty>
 801496e:	4603      	mov	r3, r0
 8014970:	2b00      	cmp	r3, #0
 8014972:	d017      	beq.n	80149a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014976:	3324      	adds	r3, #36	; 0x24
 8014978:	687a      	ldr	r2, [r7, #4]
 801497a:	4611      	mov	r1, r2
 801497c:	4618      	mov	r0, r3
 801497e:	f000 fe5d 	bl	801563c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014984:	f000 f972 	bl	8014c6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014988:	f000 fc8e 	bl	80152a8 <xTaskResumeAll>
 801498c:	4603      	mov	r3, r0
 801498e:	2b00      	cmp	r3, #0
 8014990:	d189      	bne.n	80148a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014992:	4b10      	ldr	r3, [pc, #64]	; (80149d4 <xQueueReceive+0x1bc>)
 8014994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014998:	601a      	str	r2, [r3, #0]
 801499a:	f3bf 8f4f 	dsb	sy
 801499e:	f3bf 8f6f 	isb	sy
 80149a2:	e780      	b.n	80148a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80149a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149a6:	f000 f961 	bl	8014c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80149aa:	f000 fc7d 	bl	80152a8 <xTaskResumeAll>
 80149ae:	e77a      	b.n	80148a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80149b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149b2:	f000 f95b 	bl	8014c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80149b6:	f000 fc77 	bl	80152a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80149ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149bc:	f000 f9a8 	bl	8014d10 <prvIsQueueEmpty>
 80149c0:	4603      	mov	r3, r0
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	f43f af6f 	beq.w	80148a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80149c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	3730      	adds	r7, #48	; 0x30
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}
 80149d2:	bf00      	nop
 80149d4:	e000ed04 	.word	0xe000ed04

080149d8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b08e      	sub	sp, #56	; 0x38
 80149dc:	af00      	add	r7, sp, #0
 80149de:	60f8      	str	r0, [r7, #12]
 80149e0:	60b9      	str	r1, [r7, #8]
 80149e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80149e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d10a      	bne.n	8014a04 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80149ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149f2:	f383 8811 	msr	BASEPRI, r3
 80149f6:	f3bf 8f6f 	isb	sy
 80149fa:	f3bf 8f4f 	dsb	sy
 80149fe:	623b      	str	r3, [r7, #32]
}
 8014a00:	bf00      	nop
 8014a02:	e7fe      	b.n	8014a02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d103      	bne.n	8014a12 <xQueueReceiveFromISR+0x3a>
 8014a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d101      	bne.n	8014a16 <xQueueReceiveFromISR+0x3e>
 8014a12:	2301      	movs	r3, #1
 8014a14:	e000      	b.n	8014a18 <xQueueReceiveFromISR+0x40>
 8014a16:	2300      	movs	r3, #0
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d10a      	bne.n	8014a32 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a20:	f383 8811 	msr	BASEPRI, r3
 8014a24:	f3bf 8f6f 	isb	sy
 8014a28:	f3bf 8f4f 	dsb	sy
 8014a2c:	61fb      	str	r3, [r7, #28]
}
 8014a2e:	bf00      	nop
 8014a30:	e7fe      	b.n	8014a30 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014a32:	f001 fe19 	bl	8016668 <vPortValidateInterruptPriority>
	__asm volatile
 8014a36:	f3ef 8211 	mrs	r2, BASEPRI
 8014a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a3e:	f383 8811 	msr	BASEPRI, r3
 8014a42:	f3bf 8f6f 	isb	sy
 8014a46:	f3bf 8f4f 	dsb	sy
 8014a4a:	61ba      	str	r2, [r7, #24]
 8014a4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014a4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d02f      	beq.n	8014abe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014a68:	68b9      	ldr	r1, [r7, #8]
 8014a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a6c:	f000 f8d8 	bl	8014c20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a72:	1e5a      	subs	r2, r3, #1
 8014a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a80:	d112      	bne.n	8014aa8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a84:	691b      	ldr	r3, [r3, #16]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d016      	beq.n	8014ab8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8c:	3310      	adds	r3, #16
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f000 fe24 	bl	80156dc <xTaskRemoveFromEventList>
 8014a94:	4603      	mov	r3, r0
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d00e      	beq.n	8014ab8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d00b      	beq.n	8014ab8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	601a      	str	r2, [r3, #0]
 8014aa6:	e007      	b.n	8014ab8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014aac:	3301      	adds	r3, #1
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	b25a      	sxtb	r2, r3
 8014ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014ab8:	2301      	movs	r3, #1
 8014aba:	637b      	str	r3, [r7, #52]	; 0x34
 8014abc:	e001      	b.n	8014ac2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8014ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ac4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014ac6:	693b      	ldr	r3, [r7, #16]
 8014ac8:	f383 8811 	msr	BASEPRI, r3
}
 8014acc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3738      	adds	r7, #56	; 0x38
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b084      	sub	sp, #16
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d10a      	bne.n	8014afc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8014ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aea:	f383 8811 	msr	BASEPRI, r3
 8014aee:	f3bf 8f6f 	isb	sy
 8014af2:	f3bf 8f4f 	dsb	sy
 8014af6:	60bb      	str	r3, [r7, #8]
}
 8014af8:	bf00      	nop
 8014afa:	e7fe      	b.n	8014afa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8014afc:	f001 fcd2 	bl	80164a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b04:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8014b06:	f001 fcfd 	bl	8016504 <vPortExitCritical>

	return uxReturn;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3710      	adds	r7, #16
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}

08014b14 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8014b14:	b480      	push	{r7}
 8014b16:	b085      	sub	sp, #20
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d10a      	bne.n	8014b38 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8014b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b26:	f383 8811 	msr	BASEPRI, r3
 8014b2a:	f3bf 8f6f 	isb	sy
 8014b2e:	f3bf 8f4f 	dsb	sy
 8014b32:	60bb      	str	r3, [r7, #8]
}
 8014b34:	bf00      	nop
 8014b36:	e7fe      	b.n	8014b36 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b3c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014b40:	4618      	mov	r0, r3
 8014b42:	3714      	adds	r7, #20
 8014b44:	46bd      	mov	sp, r7
 8014b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4a:	4770      	bx	lr

08014b4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b086      	sub	sp, #24
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	60f8      	str	r0, [r7, #12]
 8014b54:	60b9      	str	r1, [r7, #8]
 8014b56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d10d      	bne.n	8014b86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d14d      	bne.n	8014c0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	685b      	ldr	r3, [r3, #4]
 8014b76:	4618      	mov	r0, r3
 8014b78:	f000 ff92 	bl	8015aa0 <xTaskPriorityDisinherit>
 8014b7c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2200      	movs	r2, #0
 8014b82:	605a      	str	r2, [r3, #4]
 8014b84:	e043      	b.n	8014c0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d119      	bne.n	8014bc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	6898      	ldr	r0, [r3, #8]
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b94:	461a      	mov	r2, r3
 8014b96:	68b9      	ldr	r1, [r7, #8]
 8014b98:	f002 fa1c 	bl	8016fd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	689a      	ldr	r2, [r3, #8]
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ba4:	441a      	add	r2, r3
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	689a      	ldr	r2, [r3, #8]
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	685b      	ldr	r3, [r3, #4]
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d32b      	bcc.n	8014c0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	681a      	ldr	r2, [r3, #0]
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	609a      	str	r2, [r3, #8]
 8014bbe:	e026      	b.n	8014c0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	68d8      	ldr	r0, [r3, #12]
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bc8:	461a      	mov	r2, r3
 8014bca:	68b9      	ldr	r1, [r7, #8]
 8014bcc:	f002 fa02 	bl	8016fd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	68da      	ldr	r2, [r3, #12]
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bd8:	425b      	negs	r3, r3
 8014bda:	441a      	add	r2, r3
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	68da      	ldr	r2, [r3, #12]
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d207      	bcs.n	8014bfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	685a      	ldr	r2, [r3, #4]
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bf4:	425b      	negs	r3, r3
 8014bf6:	441a      	add	r2, r3
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2b02      	cmp	r3, #2
 8014c00:	d105      	bne.n	8014c0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c02:	693b      	ldr	r3, [r7, #16]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d002      	beq.n	8014c0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014c08:	693b      	ldr	r3, [r7, #16]
 8014c0a:	3b01      	subs	r3, #1
 8014c0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	1c5a      	adds	r2, r3, #1
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014c16:	697b      	ldr	r3, [r7, #20]
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3718      	adds	r7, #24
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}

08014c20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b082      	sub	sp, #8
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
 8014c28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d018      	beq.n	8014c64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	68da      	ldr	r2, [r3, #12]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c3a:	441a      	add	r2, r3
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	68da      	ldr	r2, [r3, #12]
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	685b      	ldr	r3, [r3, #4]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d303      	bcc.n	8014c54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681a      	ldr	r2, [r3, #0]
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	68d9      	ldr	r1, [r3, #12]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c5c:	461a      	mov	r2, r3
 8014c5e:	6838      	ldr	r0, [r7, #0]
 8014c60:	f002 f9b8 	bl	8016fd4 <memcpy>
	}
}
 8014c64:	bf00      	nop
 8014c66:	3708      	adds	r7, #8
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}

08014c6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b084      	sub	sp, #16
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014c74:	f001 fc16 	bl	80164a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014c7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014c80:	e011      	b.n	8014ca6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d012      	beq.n	8014cb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	3324      	adds	r3, #36	; 0x24
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f000 fd24 	bl	80156dc <xTaskRemoveFromEventList>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d001      	beq.n	8014c9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014c9a:	f000 fdfb 	bl	8015894 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014c9e:	7bfb      	ldrb	r3, [r7, #15]
 8014ca0:	3b01      	subs	r3, #1
 8014ca2:	b2db      	uxtb	r3, r3
 8014ca4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	dce9      	bgt.n	8014c82 <prvUnlockQueue+0x16>
 8014cae:	e000      	b.n	8014cb2 <prvUnlockQueue+0x46>
					break;
 8014cb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	22ff      	movs	r2, #255	; 0xff
 8014cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014cba:	f001 fc23 	bl	8016504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014cbe:	f001 fbf1 	bl	80164a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014cc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014cca:	e011      	b.n	8014cf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	691b      	ldr	r3, [r3, #16]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d012      	beq.n	8014cfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	3310      	adds	r3, #16
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f000 fcff 	bl	80156dc <xTaskRemoveFromEventList>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d001      	beq.n	8014ce8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014ce4:	f000 fdd6 	bl	8015894 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014ce8:	7bbb      	ldrb	r3, [r7, #14]
 8014cea:	3b01      	subs	r3, #1
 8014cec:	b2db      	uxtb	r3, r3
 8014cee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	dce9      	bgt.n	8014ccc <prvUnlockQueue+0x60>
 8014cf8:	e000      	b.n	8014cfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014cfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	22ff      	movs	r2, #255	; 0xff
 8014d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014d04:	f001 fbfe 	bl	8016504 <vPortExitCritical>
}
 8014d08:	bf00      	nop
 8014d0a:	3710      	adds	r7, #16
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b084      	sub	sp, #16
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014d18:	f001 fbc4 	bl	80164a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d102      	bne.n	8014d2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014d24:	2301      	movs	r3, #1
 8014d26:	60fb      	str	r3, [r7, #12]
 8014d28:	e001      	b.n	8014d2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014d2e:	f001 fbe9 	bl	8016504 <vPortExitCritical>

	return xReturn;
 8014d32:	68fb      	ldr	r3, [r7, #12]
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	3710      	adds	r7, #16
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}

08014d3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b084      	sub	sp, #16
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014d44:	f001 fbae 	bl	80164a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d102      	bne.n	8014d5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014d54:	2301      	movs	r3, #1
 8014d56:	60fb      	str	r3, [r7, #12]
 8014d58:	e001      	b.n	8014d5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014d5e:	f001 fbd1 	bl	8016504 <vPortExitCritical>

	return xReturn;
 8014d62:	68fb      	ldr	r3, [r7, #12]
}
 8014d64:	4618      	mov	r0, r3
 8014d66:	3710      	adds	r7, #16
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}

08014d6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014d6c:	b480      	push	{r7}
 8014d6e:	b085      	sub	sp, #20
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014d76:	2300      	movs	r3, #0
 8014d78:	60fb      	str	r3, [r7, #12]
 8014d7a:	e014      	b.n	8014da6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014d7c:	4a0f      	ldr	r2, [pc, #60]	; (8014dbc <vQueueAddToRegistry+0x50>)
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d10b      	bne.n	8014da0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014d88:	490c      	ldr	r1, [pc, #48]	; (8014dbc <vQueueAddToRegistry+0x50>)
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	683a      	ldr	r2, [r7, #0]
 8014d8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014d92:	4a0a      	ldr	r2, [pc, #40]	; (8014dbc <vQueueAddToRegistry+0x50>)
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	00db      	lsls	r3, r3, #3
 8014d98:	4413      	add	r3, r2
 8014d9a:	687a      	ldr	r2, [r7, #4]
 8014d9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014d9e:	e006      	b.n	8014dae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	3301      	adds	r3, #1
 8014da4:	60fb      	str	r3, [r7, #12]
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	2b07      	cmp	r3, #7
 8014daa:	d9e7      	bls.n	8014d7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014dac:	bf00      	nop
 8014dae:	bf00      	nop
 8014db0:	3714      	adds	r7, #20
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr
 8014dba:	bf00      	nop
 8014dbc:	20002da8 	.word	0x20002da8

08014dc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b086      	sub	sp, #24
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	60f8      	str	r0, [r7, #12]
 8014dc8:	60b9      	str	r1, [r7, #8]
 8014dca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014dd0:	f001 fb68 	bl	80164a4 <vPortEnterCritical>
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014dda:	b25b      	sxtb	r3, r3
 8014ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014de0:	d103      	bne.n	8014dea <vQueueWaitForMessageRestricted+0x2a>
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	2200      	movs	r2, #0
 8014de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014df0:	b25b      	sxtb	r3, r3
 8014df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014df6:	d103      	bne.n	8014e00 <vQueueWaitForMessageRestricted+0x40>
 8014df8:	697b      	ldr	r3, [r7, #20]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014e00:	f001 fb80 	bl	8016504 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d106      	bne.n	8014e1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	3324      	adds	r3, #36	; 0x24
 8014e10:	687a      	ldr	r2, [r7, #4]
 8014e12:	68b9      	ldr	r1, [r7, #8]
 8014e14:	4618      	mov	r0, r3
 8014e16:	f000 fc35 	bl	8015684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014e1a:	6978      	ldr	r0, [r7, #20]
 8014e1c:	f7ff ff26 	bl	8014c6c <prvUnlockQueue>
	}
 8014e20:	bf00      	nop
 8014e22:	3718      	adds	r7, #24
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b08e      	sub	sp, #56	; 0x38
 8014e2c:	af04      	add	r7, sp, #16
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	60b9      	str	r1, [r7, #8]
 8014e32:	607a      	str	r2, [r7, #4]
 8014e34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d10a      	bne.n	8014e52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e40:	f383 8811 	msr	BASEPRI, r3
 8014e44:	f3bf 8f6f 	isb	sy
 8014e48:	f3bf 8f4f 	dsb	sy
 8014e4c:	623b      	str	r3, [r7, #32]
}
 8014e4e:	bf00      	nop
 8014e50:	e7fe      	b.n	8014e50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d10a      	bne.n	8014e6e <xTaskCreateStatic+0x46>
	__asm volatile
 8014e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e5c:	f383 8811 	msr	BASEPRI, r3
 8014e60:	f3bf 8f6f 	isb	sy
 8014e64:	f3bf 8f4f 	dsb	sy
 8014e68:	61fb      	str	r3, [r7, #28]
}
 8014e6a:	bf00      	nop
 8014e6c:	e7fe      	b.n	8014e6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014e6e:	235c      	movs	r3, #92	; 0x5c
 8014e70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	2b5c      	cmp	r3, #92	; 0x5c
 8014e76:	d00a      	beq.n	8014e8e <xTaskCreateStatic+0x66>
	__asm volatile
 8014e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e7c:	f383 8811 	msr	BASEPRI, r3
 8014e80:	f3bf 8f6f 	isb	sy
 8014e84:	f3bf 8f4f 	dsb	sy
 8014e88:	61bb      	str	r3, [r7, #24]
}
 8014e8a:	bf00      	nop
 8014e8c:	e7fe      	b.n	8014e8c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d01e      	beq.n	8014ed2 <xTaskCreateStatic+0xaa>
 8014e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d01b      	beq.n	8014ed2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ea2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea6:	2202      	movs	r2, #2
 8014ea8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014eac:	2300      	movs	r3, #0
 8014eae:	9303      	str	r3, [sp, #12]
 8014eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb2:	9302      	str	r3, [sp, #8]
 8014eb4:	f107 0314 	add.w	r3, r7, #20
 8014eb8:	9301      	str	r3, [sp, #4]
 8014eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ebc:	9300      	str	r3, [sp, #0]
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	687a      	ldr	r2, [r7, #4]
 8014ec2:	68b9      	ldr	r1, [r7, #8]
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f000 f850 	bl	8014f6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014eca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ecc:	f000 f8d4 	bl	8015078 <prvAddNewTaskToReadyList>
 8014ed0:	e001      	b.n	8014ed6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014ed6:	697b      	ldr	r3, [r7, #20]
	}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3728      	adds	r7, #40	; 0x28
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}

08014ee0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b08c      	sub	sp, #48	; 0x30
 8014ee4:	af04      	add	r7, sp, #16
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	60b9      	str	r1, [r7, #8]
 8014eea:	603b      	str	r3, [r7, #0]
 8014eec:	4613      	mov	r3, r2
 8014eee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ef0:	88fb      	ldrh	r3, [r7, #6]
 8014ef2:	009b      	lsls	r3, r3, #2
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f001 fbf7 	bl	80166e8 <pvPortMalloc>
 8014efa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d00e      	beq.n	8014f20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8014f02:	205c      	movs	r0, #92	; 0x5c
 8014f04:	f001 fbf0 	bl	80166e8 <pvPortMalloc>
 8014f08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014f0a:	69fb      	ldr	r3, [r7, #28]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d003      	beq.n	8014f18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014f10:	69fb      	ldr	r3, [r7, #28]
 8014f12:	697a      	ldr	r2, [r7, #20]
 8014f14:	631a      	str	r2, [r3, #48]	; 0x30
 8014f16:	e005      	b.n	8014f24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014f18:	6978      	ldr	r0, [r7, #20]
 8014f1a:	f001 fc2b 	bl	8016774 <vPortFree>
 8014f1e:	e001      	b.n	8014f24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014f20:	2300      	movs	r3, #0
 8014f22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014f24:	69fb      	ldr	r3, [r7, #28]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d017      	beq.n	8014f5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014f2a:	69fb      	ldr	r3, [r7, #28]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014f32:	88fa      	ldrh	r2, [r7, #6]
 8014f34:	2300      	movs	r3, #0
 8014f36:	9303      	str	r3, [sp, #12]
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	9302      	str	r3, [sp, #8]
 8014f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f3e:	9301      	str	r3, [sp, #4]
 8014f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	68b9      	ldr	r1, [r7, #8]
 8014f48:	68f8      	ldr	r0, [r7, #12]
 8014f4a:	f000 f80e 	bl	8014f6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014f4e:	69f8      	ldr	r0, [r7, #28]
 8014f50:	f000 f892 	bl	8015078 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014f54:	2301      	movs	r3, #1
 8014f56:	61bb      	str	r3, [r7, #24]
 8014f58:	e002      	b.n	8014f60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014f60:	69bb      	ldr	r3, [r7, #24]
	}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3720      	adds	r7, #32
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}

08014f6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014f6a:	b580      	push	{r7, lr}
 8014f6c:	b088      	sub	sp, #32
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	60f8      	str	r0, [r7, #12]
 8014f72:	60b9      	str	r1, [r7, #8]
 8014f74:	607a      	str	r2, [r7, #4]
 8014f76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	009b      	lsls	r3, r3, #2
 8014f80:	461a      	mov	r2, r3
 8014f82:	21a5      	movs	r1, #165	; 0xa5
 8014f84:	f002 f834 	bl	8016ff0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8014f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014f92:	3b01      	subs	r3, #1
 8014f94:	009b      	lsls	r3, r3, #2
 8014f96:	4413      	add	r3, r2
 8014f98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8014f9a:	69bb      	ldr	r3, [r7, #24]
 8014f9c:	f023 0307 	bic.w	r3, r3, #7
 8014fa0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014fa2:	69bb      	ldr	r3, [r7, #24]
 8014fa4:	f003 0307 	and.w	r3, r3, #7
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d00a      	beq.n	8014fc2 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb0:	f383 8811 	msr	BASEPRI, r3
 8014fb4:	f3bf 8f6f 	isb	sy
 8014fb8:	f3bf 8f4f 	dsb	sy
 8014fbc:	617b      	str	r3, [r7, #20]
}
 8014fbe:	bf00      	nop
 8014fc0:	e7fe      	b.n	8014fc0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	61fb      	str	r3, [r7, #28]
 8014fc6:	e012      	b.n	8014fee <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014fc8:	68ba      	ldr	r2, [r7, #8]
 8014fca:	69fb      	ldr	r3, [r7, #28]
 8014fcc:	4413      	add	r3, r2
 8014fce:	7819      	ldrb	r1, [r3, #0]
 8014fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fd2:	69fb      	ldr	r3, [r7, #28]
 8014fd4:	4413      	add	r3, r2
 8014fd6:	3334      	adds	r3, #52	; 0x34
 8014fd8:	460a      	mov	r2, r1
 8014fda:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8014fdc:	68ba      	ldr	r2, [r7, #8]
 8014fde:	69fb      	ldr	r3, [r7, #28]
 8014fe0:	4413      	add	r3, r2
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d006      	beq.n	8014ff6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014fe8:	69fb      	ldr	r3, [r7, #28]
 8014fea:	3301      	adds	r3, #1
 8014fec:	61fb      	str	r3, [r7, #28]
 8014fee:	69fb      	ldr	r3, [r7, #28]
 8014ff0:	2b0f      	cmp	r3, #15
 8014ff2:	d9e9      	bls.n	8014fc8 <prvInitialiseNewTask+0x5e>
 8014ff4:	e000      	b.n	8014ff8 <prvInitialiseNewTask+0x8e>
		{
			break;
 8014ff6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015002:	2b37      	cmp	r3, #55	; 0x37
 8015004:	d901      	bls.n	801500a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015006:	2337      	movs	r3, #55	; 0x37
 8015008:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801500c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801500e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015014:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8015016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015018:	2200      	movs	r2, #0
 801501a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501e:	3304      	adds	r3, #4
 8015020:	4618      	mov	r0, r3
 8015022:	f7ff f88f 	bl	8014144 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015028:	3318      	adds	r3, #24
 801502a:	4618      	mov	r0, r3
 801502c:	f7ff f88a 	bl	8014144 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015034:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015038:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015044:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015048:	2200      	movs	r2, #0
 801504a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801504e:	2200      	movs	r2, #0
 8015050:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015054:	683a      	ldr	r2, [r7, #0]
 8015056:	68f9      	ldr	r1, [r7, #12]
 8015058:	69b8      	ldr	r0, [r7, #24]
 801505a:	f001 f8f5 	bl	8016248 <pxPortInitialiseStack>
 801505e:	4602      	mov	r2, r0
 8015060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015062:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8015064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015066:	2b00      	cmp	r3, #0
 8015068:	d002      	beq.n	8015070 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801506c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801506e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015070:	bf00      	nop
 8015072:	3720      	adds	r7, #32
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b082      	sub	sp, #8
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015080:	f001 fa10 	bl	80164a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015084:	4b2d      	ldr	r3, [pc, #180]	; (801513c <prvAddNewTaskToReadyList+0xc4>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	3301      	adds	r3, #1
 801508a:	4a2c      	ldr	r2, [pc, #176]	; (801513c <prvAddNewTaskToReadyList+0xc4>)
 801508c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801508e:	4b2c      	ldr	r3, [pc, #176]	; (8015140 <prvAddNewTaskToReadyList+0xc8>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d109      	bne.n	80150aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015096:	4a2a      	ldr	r2, [pc, #168]	; (8015140 <prvAddNewTaskToReadyList+0xc8>)
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801509c:	4b27      	ldr	r3, [pc, #156]	; (801513c <prvAddNewTaskToReadyList+0xc4>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	d110      	bne.n	80150c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80150a4:	f000 fc1a 	bl	80158dc <prvInitialiseTaskLists>
 80150a8:	e00d      	b.n	80150c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80150aa:	4b26      	ldr	r3, [pc, #152]	; (8015144 <prvAddNewTaskToReadyList+0xcc>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d109      	bne.n	80150c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80150b2:	4b23      	ldr	r3, [pc, #140]	; (8015140 <prvAddNewTaskToReadyList+0xc8>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150bc:	429a      	cmp	r2, r3
 80150be:	d802      	bhi.n	80150c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80150c0:	4a1f      	ldr	r2, [pc, #124]	; (8015140 <prvAddNewTaskToReadyList+0xc8>)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80150c6:	4b20      	ldr	r3, [pc, #128]	; (8015148 <prvAddNewTaskToReadyList+0xd0>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	3301      	adds	r3, #1
 80150cc:	4a1e      	ldr	r2, [pc, #120]	; (8015148 <prvAddNewTaskToReadyList+0xd0>)
 80150ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80150d0:	4b1d      	ldr	r3, [pc, #116]	; (8015148 <prvAddNewTaskToReadyList+0xd0>)
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150dc:	4b1b      	ldr	r3, [pc, #108]	; (801514c <prvAddNewTaskToReadyList+0xd4>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	429a      	cmp	r2, r3
 80150e2:	d903      	bls.n	80150ec <prvAddNewTaskToReadyList+0x74>
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150e8:	4a18      	ldr	r2, [pc, #96]	; (801514c <prvAddNewTaskToReadyList+0xd4>)
 80150ea:	6013      	str	r3, [r2, #0]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150f0:	4613      	mov	r3, r2
 80150f2:	009b      	lsls	r3, r3, #2
 80150f4:	4413      	add	r3, r2
 80150f6:	009b      	lsls	r3, r3, #2
 80150f8:	4a15      	ldr	r2, [pc, #84]	; (8015150 <prvAddNewTaskToReadyList+0xd8>)
 80150fa:	441a      	add	r2, r3
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	3304      	adds	r3, #4
 8015100:	4619      	mov	r1, r3
 8015102:	4610      	mov	r0, r2
 8015104:	f7ff f82b 	bl	801415e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015108:	f001 f9fc 	bl	8016504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801510c:	4b0d      	ldr	r3, [pc, #52]	; (8015144 <prvAddNewTaskToReadyList+0xcc>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d00e      	beq.n	8015132 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015114:	4b0a      	ldr	r3, [pc, #40]	; (8015140 <prvAddNewTaskToReadyList+0xc8>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801511e:	429a      	cmp	r2, r3
 8015120:	d207      	bcs.n	8015132 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015122:	4b0c      	ldr	r3, [pc, #48]	; (8015154 <prvAddNewTaskToReadyList+0xdc>)
 8015124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015128:	601a      	str	r2, [r3, #0]
 801512a:	f3bf 8f4f 	dsb	sy
 801512e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015132:	bf00      	nop
 8015134:	3708      	adds	r7, #8
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}
 801513a:	bf00      	nop
 801513c:	200032bc 	.word	0x200032bc
 8015140:	20002de8 	.word	0x20002de8
 8015144:	200032c8 	.word	0x200032c8
 8015148:	200032d8 	.word	0x200032d8
 801514c:	200032c4 	.word	0x200032c4
 8015150:	20002dec 	.word	0x20002dec
 8015154:	e000ed04 	.word	0xe000ed04

08015158 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015158:	b580      	push	{r7, lr}
 801515a:	b084      	sub	sp, #16
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015160:	2300      	movs	r3, #0
 8015162:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d017      	beq.n	801519a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801516a:	4b13      	ldr	r3, [pc, #76]	; (80151b8 <vTaskDelay+0x60>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d00a      	beq.n	8015188 <vTaskDelay+0x30>
	__asm volatile
 8015172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015176:	f383 8811 	msr	BASEPRI, r3
 801517a:	f3bf 8f6f 	isb	sy
 801517e:	f3bf 8f4f 	dsb	sy
 8015182:	60bb      	str	r3, [r7, #8]
}
 8015184:	bf00      	nop
 8015186:	e7fe      	b.n	8015186 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015188:	f000 f880 	bl	801528c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801518c:	2100      	movs	r1, #0
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f000 fcf4 	bl	8015b7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015194:	f000 f888 	bl	80152a8 <xTaskResumeAll>
 8015198:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d107      	bne.n	80151b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80151a0:	4b06      	ldr	r3, [pc, #24]	; (80151bc <vTaskDelay+0x64>)
 80151a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151a6:	601a      	str	r2, [r3, #0]
 80151a8:	f3bf 8f4f 	dsb	sy
 80151ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80151b0:	bf00      	nop
 80151b2:	3710      	adds	r7, #16
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}
 80151b8:	200032e4 	.word	0x200032e4
 80151bc:	e000ed04 	.word	0xe000ed04

080151c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b08a      	sub	sp, #40	; 0x28
 80151c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80151c6:	2300      	movs	r3, #0
 80151c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80151ca:	2300      	movs	r3, #0
 80151cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80151ce:	463a      	mov	r2, r7
 80151d0:	1d39      	adds	r1, r7, #4
 80151d2:	f107 0308 	add.w	r3, r7, #8
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7fe ff60 	bl	801409c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80151dc:	6839      	ldr	r1, [r7, #0]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	68ba      	ldr	r2, [r7, #8]
 80151e2:	9202      	str	r2, [sp, #8]
 80151e4:	9301      	str	r3, [sp, #4]
 80151e6:	2300      	movs	r3, #0
 80151e8:	9300      	str	r3, [sp, #0]
 80151ea:	2300      	movs	r3, #0
 80151ec:	460a      	mov	r2, r1
 80151ee:	4921      	ldr	r1, [pc, #132]	; (8015274 <vTaskStartScheduler+0xb4>)
 80151f0:	4821      	ldr	r0, [pc, #132]	; (8015278 <vTaskStartScheduler+0xb8>)
 80151f2:	f7ff fe19 	bl	8014e28 <xTaskCreateStatic>
 80151f6:	4603      	mov	r3, r0
 80151f8:	4a20      	ldr	r2, [pc, #128]	; (801527c <vTaskStartScheduler+0xbc>)
 80151fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80151fc:	4b1f      	ldr	r3, [pc, #124]	; (801527c <vTaskStartScheduler+0xbc>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d002      	beq.n	801520a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015204:	2301      	movs	r3, #1
 8015206:	617b      	str	r3, [r7, #20]
 8015208:	e001      	b.n	801520e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801520a:	2300      	movs	r3, #0
 801520c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801520e:	697b      	ldr	r3, [r7, #20]
 8015210:	2b01      	cmp	r3, #1
 8015212:	d102      	bne.n	801521a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015214:	f000 fd06 	bl	8015c24 <xTimerCreateTimerTask>
 8015218:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801521a:	697b      	ldr	r3, [r7, #20]
 801521c:	2b01      	cmp	r3, #1
 801521e:	d116      	bne.n	801524e <vTaskStartScheduler+0x8e>
	__asm volatile
 8015220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015224:	f383 8811 	msr	BASEPRI, r3
 8015228:	f3bf 8f6f 	isb	sy
 801522c:	f3bf 8f4f 	dsb	sy
 8015230:	613b      	str	r3, [r7, #16]
}
 8015232:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015234:	4b12      	ldr	r3, [pc, #72]	; (8015280 <vTaskStartScheduler+0xc0>)
 8015236:	f04f 32ff 	mov.w	r2, #4294967295
 801523a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801523c:	4b11      	ldr	r3, [pc, #68]	; (8015284 <vTaskStartScheduler+0xc4>)
 801523e:	2201      	movs	r2, #1
 8015240:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8015242:	4b11      	ldr	r3, [pc, #68]	; (8015288 <vTaskStartScheduler+0xc8>)
 8015244:	2200      	movs	r2, #0
 8015246:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015248:	f001 f88a 	bl	8016360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801524c:	e00e      	b.n	801526c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801524e:	697b      	ldr	r3, [r7, #20]
 8015250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015254:	d10a      	bne.n	801526c <vTaskStartScheduler+0xac>
	__asm volatile
 8015256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801525a:	f383 8811 	msr	BASEPRI, r3
 801525e:	f3bf 8f6f 	isb	sy
 8015262:	f3bf 8f4f 	dsb	sy
 8015266:	60fb      	str	r3, [r7, #12]
}
 8015268:	bf00      	nop
 801526a:	e7fe      	b.n	801526a <vTaskStartScheduler+0xaa>
}
 801526c:	bf00      	nop
 801526e:	3718      	adds	r7, #24
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	08017b24 	.word	0x08017b24
 8015278:	080158ad 	.word	0x080158ad
 801527c:	200032e0 	.word	0x200032e0
 8015280:	200032dc 	.word	0x200032dc
 8015284:	200032c8 	.word	0x200032c8
 8015288:	200032c0 	.word	0x200032c0

0801528c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801528c:	b480      	push	{r7}
 801528e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015290:	4b04      	ldr	r3, [pc, #16]	; (80152a4 <vTaskSuspendAll+0x18>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	3301      	adds	r3, #1
 8015296:	4a03      	ldr	r2, [pc, #12]	; (80152a4 <vTaskSuspendAll+0x18>)
 8015298:	6013      	str	r3, [r2, #0]
}
 801529a:	bf00      	nop
 801529c:	46bd      	mov	sp, r7
 801529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a2:	4770      	bx	lr
 80152a4:	200032e4 	.word	0x200032e4

080152a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b084      	sub	sp, #16
 80152ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80152ae:	2300      	movs	r3, #0
 80152b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80152b2:	2300      	movs	r3, #0
 80152b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80152b6:	4b42      	ldr	r3, [pc, #264]	; (80153c0 <xTaskResumeAll+0x118>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d10a      	bne.n	80152d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80152be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c2:	f383 8811 	msr	BASEPRI, r3
 80152c6:	f3bf 8f6f 	isb	sy
 80152ca:	f3bf 8f4f 	dsb	sy
 80152ce:	603b      	str	r3, [r7, #0]
}
 80152d0:	bf00      	nop
 80152d2:	e7fe      	b.n	80152d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80152d4:	f001 f8e6 	bl	80164a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80152d8:	4b39      	ldr	r3, [pc, #228]	; (80153c0 <xTaskResumeAll+0x118>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	3b01      	subs	r3, #1
 80152de:	4a38      	ldr	r2, [pc, #224]	; (80153c0 <xTaskResumeAll+0x118>)
 80152e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80152e2:	4b37      	ldr	r3, [pc, #220]	; (80153c0 <xTaskResumeAll+0x118>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d162      	bne.n	80153b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80152ea:	4b36      	ldr	r3, [pc, #216]	; (80153c4 <xTaskResumeAll+0x11c>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d05e      	beq.n	80153b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80152f2:	e02f      	b.n	8015354 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80152f4:	4b34      	ldr	r3, [pc, #208]	; (80153c8 <xTaskResumeAll+0x120>)
 80152f6:	68db      	ldr	r3, [r3, #12]
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	3318      	adds	r3, #24
 8015300:	4618      	mov	r0, r3
 8015302:	f7fe ff89 	bl	8014218 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	3304      	adds	r3, #4
 801530a:	4618      	mov	r0, r3
 801530c:	f7fe ff84 	bl	8014218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015314:	4b2d      	ldr	r3, [pc, #180]	; (80153cc <xTaskResumeAll+0x124>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	429a      	cmp	r2, r3
 801531a:	d903      	bls.n	8015324 <xTaskResumeAll+0x7c>
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015320:	4a2a      	ldr	r2, [pc, #168]	; (80153cc <xTaskResumeAll+0x124>)
 8015322:	6013      	str	r3, [r2, #0]
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015328:	4613      	mov	r3, r2
 801532a:	009b      	lsls	r3, r3, #2
 801532c:	4413      	add	r3, r2
 801532e:	009b      	lsls	r3, r3, #2
 8015330:	4a27      	ldr	r2, [pc, #156]	; (80153d0 <xTaskResumeAll+0x128>)
 8015332:	441a      	add	r2, r3
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	3304      	adds	r3, #4
 8015338:	4619      	mov	r1, r3
 801533a:	4610      	mov	r0, r2
 801533c:	f7fe ff0f 	bl	801415e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015344:	4b23      	ldr	r3, [pc, #140]	; (80153d4 <xTaskResumeAll+0x12c>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801534a:	429a      	cmp	r2, r3
 801534c:	d302      	bcc.n	8015354 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801534e:	4b22      	ldr	r3, [pc, #136]	; (80153d8 <xTaskResumeAll+0x130>)
 8015350:	2201      	movs	r2, #1
 8015352:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015354:	4b1c      	ldr	r3, [pc, #112]	; (80153c8 <xTaskResumeAll+0x120>)
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d1cb      	bne.n	80152f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d001      	beq.n	8015366 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015362:	f000 fb59 	bl	8015a18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015366:	4b1d      	ldr	r3, [pc, #116]	; (80153dc <xTaskResumeAll+0x134>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d010      	beq.n	8015394 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015372:	f000 f847 	bl	8015404 <xTaskIncrementTick>
 8015376:	4603      	mov	r3, r0
 8015378:	2b00      	cmp	r3, #0
 801537a:	d002      	beq.n	8015382 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801537c:	4b16      	ldr	r3, [pc, #88]	; (80153d8 <xTaskResumeAll+0x130>)
 801537e:	2201      	movs	r2, #1
 8015380:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	3b01      	subs	r3, #1
 8015386:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d1f1      	bne.n	8015372 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 801538e:	4b13      	ldr	r3, [pc, #76]	; (80153dc <xTaskResumeAll+0x134>)
 8015390:	2200      	movs	r2, #0
 8015392:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015394:	4b10      	ldr	r3, [pc, #64]	; (80153d8 <xTaskResumeAll+0x130>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d009      	beq.n	80153b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801539c:	2301      	movs	r3, #1
 801539e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80153a0:	4b0f      	ldr	r3, [pc, #60]	; (80153e0 <xTaskResumeAll+0x138>)
 80153a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153a6:	601a      	str	r2, [r3, #0]
 80153a8:	f3bf 8f4f 	dsb	sy
 80153ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80153b0:	f001 f8a8 	bl	8016504 <vPortExitCritical>

	return xAlreadyYielded;
 80153b4:	68bb      	ldr	r3, [r7, #8]
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3710      	adds	r7, #16
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	200032e4 	.word	0x200032e4
 80153c4:	200032bc 	.word	0x200032bc
 80153c8:	2000327c 	.word	0x2000327c
 80153cc:	200032c4 	.word	0x200032c4
 80153d0:	20002dec 	.word	0x20002dec
 80153d4:	20002de8 	.word	0x20002de8
 80153d8:	200032d0 	.word	0x200032d0
 80153dc:	200032cc 	.word	0x200032cc
 80153e0:	e000ed04 	.word	0xe000ed04

080153e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80153e4:	b480      	push	{r7}
 80153e6:	b083      	sub	sp, #12
 80153e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80153ea:	4b05      	ldr	r3, [pc, #20]	; (8015400 <xTaskGetTickCount+0x1c>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80153f0:	687b      	ldr	r3, [r7, #4]
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	370c      	adds	r7, #12
 80153f6:	46bd      	mov	sp, r7
 80153f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fc:	4770      	bx	lr
 80153fe:	bf00      	nop
 8015400:	200032c0 	.word	0x200032c0

08015404 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b086      	sub	sp, #24
 8015408:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801540a:	2300      	movs	r3, #0
 801540c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801540e:	4b51      	ldr	r3, [pc, #324]	; (8015554 <xTaskIncrementTick+0x150>)
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	f040 808e 	bne.w	8015534 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015418:	4b4f      	ldr	r3, [pc, #316]	; (8015558 <xTaskIncrementTick+0x154>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	3301      	adds	r3, #1
 801541e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015420:	4a4d      	ldr	r2, [pc, #308]	; (8015558 <xTaskIncrementTick+0x154>)
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d120      	bne.n	801546e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801542c:	4b4b      	ldr	r3, [pc, #300]	; (801555c <xTaskIncrementTick+0x158>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d00a      	beq.n	801544c <xTaskIncrementTick+0x48>
	__asm volatile
 8015436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801543a:	f383 8811 	msr	BASEPRI, r3
 801543e:	f3bf 8f6f 	isb	sy
 8015442:	f3bf 8f4f 	dsb	sy
 8015446:	603b      	str	r3, [r7, #0]
}
 8015448:	bf00      	nop
 801544a:	e7fe      	b.n	801544a <xTaskIncrementTick+0x46>
 801544c:	4b43      	ldr	r3, [pc, #268]	; (801555c <xTaskIncrementTick+0x158>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	60fb      	str	r3, [r7, #12]
 8015452:	4b43      	ldr	r3, [pc, #268]	; (8015560 <xTaskIncrementTick+0x15c>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	4a41      	ldr	r2, [pc, #260]	; (801555c <xTaskIncrementTick+0x158>)
 8015458:	6013      	str	r3, [r2, #0]
 801545a:	4a41      	ldr	r2, [pc, #260]	; (8015560 <xTaskIncrementTick+0x15c>)
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	6013      	str	r3, [r2, #0]
 8015460:	4b40      	ldr	r3, [pc, #256]	; (8015564 <xTaskIncrementTick+0x160>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	3301      	adds	r3, #1
 8015466:	4a3f      	ldr	r2, [pc, #252]	; (8015564 <xTaskIncrementTick+0x160>)
 8015468:	6013      	str	r3, [r2, #0]
 801546a:	f000 fad5 	bl	8015a18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801546e:	4b3e      	ldr	r3, [pc, #248]	; (8015568 <xTaskIncrementTick+0x164>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	693a      	ldr	r2, [r7, #16]
 8015474:	429a      	cmp	r2, r3
 8015476:	d34e      	bcc.n	8015516 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015478:	4b38      	ldr	r3, [pc, #224]	; (801555c <xTaskIncrementTick+0x158>)
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d101      	bne.n	8015486 <xTaskIncrementTick+0x82>
 8015482:	2301      	movs	r3, #1
 8015484:	e000      	b.n	8015488 <xTaskIncrementTick+0x84>
 8015486:	2300      	movs	r3, #0
 8015488:	2b00      	cmp	r3, #0
 801548a:	d004      	beq.n	8015496 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801548c:	4b36      	ldr	r3, [pc, #216]	; (8015568 <xTaskIncrementTick+0x164>)
 801548e:	f04f 32ff 	mov.w	r2, #4294967295
 8015492:	601a      	str	r2, [r3, #0]
					break;
 8015494:	e03f      	b.n	8015516 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015496:	4b31      	ldr	r3, [pc, #196]	; (801555c <xTaskIncrementTick+0x158>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	68db      	ldr	r3, [r3, #12]
 801549c:	68db      	ldr	r3, [r3, #12]
 801549e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	685b      	ldr	r3, [r3, #4]
 80154a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80154a6:	693a      	ldr	r2, [r7, #16]
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	429a      	cmp	r2, r3
 80154ac:	d203      	bcs.n	80154b6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80154ae:	4a2e      	ldr	r2, [pc, #184]	; (8015568 <xTaskIncrementTick+0x164>)
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	6013      	str	r3, [r2, #0]
						break;
 80154b4:	e02f      	b.n	8015516 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80154b6:	68bb      	ldr	r3, [r7, #8]
 80154b8:	3304      	adds	r3, #4
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7fe feac 	bl	8014218 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d004      	beq.n	80154d2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	3318      	adds	r3, #24
 80154cc:	4618      	mov	r0, r3
 80154ce:	f7fe fea3 	bl	8014218 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154d6:	4b25      	ldr	r3, [pc, #148]	; (801556c <xTaskIncrementTick+0x168>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	429a      	cmp	r2, r3
 80154dc:	d903      	bls.n	80154e6 <xTaskIncrementTick+0xe2>
 80154de:	68bb      	ldr	r3, [r7, #8]
 80154e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154e2:	4a22      	ldr	r2, [pc, #136]	; (801556c <xTaskIncrementTick+0x168>)
 80154e4:	6013      	str	r3, [r2, #0]
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ea:	4613      	mov	r3, r2
 80154ec:	009b      	lsls	r3, r3, #2
 80154ee:	4413      	add	r3, r2
 80154f0:	009b      	lsls	r3, r3, #2
 80154f2:	4a1f      	ldr	r2, [pc, #124]	; (8015570 <xTaskIncrementTick+0x16c>)
 80154f4:	441a      	add	r2, r3
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	3304      	adds	r3, #4
 80154fa:	4619      	mov	r1, r3
 80154fc:	4610      	mov	r0, r2
 80154fe:	f7fe fe2e 	bl	801415e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015506:	4b1b      	ldr	r3, [pc, #108]	; (8015574 <xTaskIncrementTick+0x170>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801550c:	429a      	cmp	r2, r3
 801550e:	d3b3      	bcc.n	8015478 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015510:	2301      	movs	r3, #1
 8015512:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015514:	e7b0      	b.n	8015478 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015516:	4b17      	ldr	r3, [pc, #92]	; (8015574 <xTaskIncrementTick+0x170>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801551c:	4914      	ldr	r1, [pc, #80]	; (8015570 <xTaskIncrementTick+0x16c>)
 801551e:	4613      	mov	r3, r2
 8015520:	009b      	lsls	r3, r3, #2
 8015522:	4413      	add	r3, r2
 8015524:	009b      	lsls	r3, r3, #2
 8015526:	440b      	add	r3, r1
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	2b01      	cmp	r3, #1
 801552c:	d907      	bls.n	801553e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801552e:	2301      	movs	r3, #1
 8015530:	617b      	str	r3, [r7, #20]
 8015532:	e004      	b.n	801553e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015534:	4b10      	ldr	r3, [pc, #64]	; (8015578 <xTaskIncrementTick+0x174>)
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	3301      	adds	r3, #1
 801553a:	4a0f      	ldr	r2, [pc, #60]	; (8015578 <xTaskIncrementTick+0x174>)
 801553c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801553e:	4b0f      	ldr	r3, [pc, #60]	; (801557c <xTaskIncrementTick+0x178>)
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d001      	beq.n	801554a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8015546:	2301      	movs	r3, #1
 8015548:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801554a:	697b      	ldr	r3, [r7, #20]
}
 801554c:	4618      	mov	r0, r3
 801554e:	3718      	adds	r7, #24
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}
 8015554:	200032e4 	.word	0x200032e4
 8015558:	200032c0 	.word	0x200032c0
 801555c:	20003274 	.word	0x20003274
 8015560:	20003278 	.word	0x20003278
 8015564:	200032d4 	.word	0x200032d4
 8015568:	200032dc 	.word	0x200032dc
 801556c:	200032c4 	.word	0x200032c4
 8015570:	20002dec 	.word	0x20002dec
 8015574:	20002de8 	.word	0x20002de8
 8015578:	200032cc 	.word	0x200032cc
 801557c:	200032d0 	.word	0x200032d0

08015580 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015580:	b480      	push	{r7}
 8015582:	b085      	sub	sp, #20
 8015584:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015586:	4b28      	ldr	r3, [pc, #160]	; (8015628 <vTaskSwitchContext+0xa8>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d003      	beq.n	8015596 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801558e:	4b27      	ldr	r3, [pc, #156]	; (801562c <vTaskSwitchContext+0xac>)
 8015590:	2201      	movs	r2, #1
 8015592:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015594:	e041      	b.n	801561a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8015596:	4b25      	ldr	r3, [pc, #148]	; (801562c <vTaskSwitchContext+0xac>)
 8015598:	2200      	movs	r2, #0
 801559a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801559c:	4b24      	ldr	r3, [pc, #144]	; (8015630 <vTaskSwitchContext+0xb0>)
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	60fb      	str	r3, [r7, #12]
 80155a2:	e010      	b.n	80155c6 <vTaskSwitchContext+0x46>
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d10a      	bne.n	80155c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80155aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ae:	f383 8811 	msr	BASEPRI, r3
 80155b2:	f3bf 8f6f 	isb	sy
 80155b6:	f3bf 8f4f 	dsb	sy
 80155ba:	607b      	str	r3, [r7, #4]
}
 80155bc:	bf00      	nop
 80155be:	e7fe      	b.n	80155be <vTaskSwitchContext+0x3e>
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	3b01      	subs	r3, #1
 80155c4:	60fb      	str	r3, [r7, #12]
 80155c6:	491b      	ldr	r1, [pc, #108]	; (8015634 <vTaskSwitchContext+0xb4>)
 80155c8:	68fa      	ldr	r2, [r7, #12]
 80155ca:	4613      	mov	r3, r2
 80155cc:	009b      	lsls	r3, r3, #2
 80155ce:	4413      	add	r3, r2
 80155d0:	009b      	lsls	r3, r3, #2
 80155d2:	440b      	add	r3, r1
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d0e4      	beq.n	80155a4 <vTaskSwitchContext+0x24>
 80155da:	68fa      	ldr	r2, [r7, #12]
 80155dc:	4613      	mov	r3, r2
 80155de:	009b      	lsls	r3, r3, #2
 80155e0:	4413      	add	r3, r2
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	4a13      	ldr	r2, [pc, #76]	; (8015634 <vTaskSwitchContext+0xb4>)
 80155e6:	4413      	add	r3, r2
 80155e8:	60bb      	str	r3, [r7, #8]
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	685b      	ldr	r3, [r3, #4]
 80155ee:	685a      	ldr	r2, [r3, #4]
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	605a      	str	r2, [r3, #4]
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	685a      	ldr	r2, [r3, #4]
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	3308      	adds	r3, #8
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d104      	bne.n	801560a <vTaskSwitchContext+0x8a>
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	685b      	ldr	r3, [r3, #4]
 8015604:	685a      	ldr	r2, [r3, #4]
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	605a      	str	r2, [r3, #4]
 801560a:	68bb      	ldr	r3, [r7, #8]
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	68db      	ldr	r3, [r3, #12]
 8015610:	4a09      	ldr	r2, [pc, #36]	; (8015638 <vTaskSwitchContext+0xb8>)
 8015612:	6013      	str	r3, [r2, #0]
 8015614:	4a06      	ldr	r2, [pc, #24]	; (8015630 <vTaskSwitchContext+0xb0>)
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	6013      	str	r3, [r2, #0]
}
 801561a:	bf00      	nop
 801561c:	3714      	adds	r7, #20
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr
 8015626:	bf00      	nop
 8015628:	200032e4 	.word	0x200032e4
 801562c:	200032d0 	.word	0x200032d0
 8015630:	200032c4 	.word	0x200032c4
 8015634:	20002dec 	.word	0x20002dec
 8015638:	20002de8 	.word	0x20002de8

0801563c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b084      	sub	sp, #16
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
 8015644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d10a      	bne.n	8015662 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015650:	f383 8811 	msr	BASEPRI, r3
 8015654:	f3bf 8f6f 	isb	sy
 8015658:	f3bf 8f4f 	dsb	sy
 801565c:	60fb      	str	r3, [r7, #12]
}
 801565e:	bf00      	nop
 8015660:	e7fe      	b.n	8015660 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015662:	4b07      	ldr	r3, [pc, #28]	; (8015680 <vTaskPlaceOnEventList+0x44>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	3318      	adds	r3, #24
 8015668:	4619      	mov	r1, r3
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f7fe fd9b 	bl	80141a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015670:	2101      	movs	r1, #1
 8015672:	6838      	ldr	r0, [r7, #0]
 8015674:	f000 fa82 	bl	8015b7c <prvAddCurrentTaskToDelayedList>
}
 8015678:	bf00      	nop
 801567a:	3710      	adds	r7, #16
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}
 8015680:	20002de8 	.word	0x20002de8

08015684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015684:	b580      	push	{r7, lr}
 8015686:	b086      	sub	sp, #24
 8015688:	af00      	add	r7, sp, #0
 801568a:	60f8      	str	r0, [r7, #12]
 801568c:	60b9      	str	r1, [r7, #8]
 801568e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d10a      	bne.n	80156ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8015696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801569a:	f383 8811 	msr	BASEPRI, r3
 801569e:	f3bf 8f6f 	isb	sy
 80156a2:	f3bf 8f4f 	dsb	sy
 80156a6:	617b      	str	r3, [r7, #20]
}
 80156a8:	bf00      	nop
 80156aa:	e7fe      	b.n	80156aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80156ac:	4b0a      	ldr	r3, [pc, #40]	; (80156d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	3318      	adds	r3, #24
 80156b2:	4619      	mov	r1, r3
 80156b4:	68f8      	ldr	r0, [r7, #12]
 80156b6:	f7fe fd52 	bl	801415e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d002      	beq.n	80156c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80156c0:	f04f 33ff 	mov.w	r3, #4294967295
 80156c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80156c6:	6879      	ldr	r1, [r7, #4]
 80156c8:	68b8      	ldr	r0, [r7, #8]
 80156ca:	f000 fa57 	bl	8015b7c <prvAddCurrentTaskToDelayedList>
	}
 80156ce:	bf00      	nop
 80156d0:	3718      	adds	r7, #24
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}
 80156d6:	bf00      	nop
 80156d8:	20002de8 	.word	0x20002de8

080156dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b086      	sub	sp, #24
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	68db      	ldr	r3, [r3, #12]
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80156ec:	693b      	ldr	r3, [r7, #16]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d10a      	bne.n	8015708 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80156f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f6:	f383 8811 	msr	BASEPRI, r3
 80156fa:	f3bf 8f6f 	isb	sy
 80156fe:	f3bf 8f4f 	dsb	sy
 8015702:	60fb      	str	r3, [r7, #12]
}
 8015704:	bf00      	nop
 8015706:	e7fe      	b.n	8015706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	3318      	adds	r3, #24
 801570c:	4618      	mov	r0, r3
 801570e:	f7fe fd83 	bl	8014218 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015712:	4b1e      	ldr	r3, [pc, #120]	; (801578c <xTaskRemoveFromEventList+0xb0>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d11d      	bne.n	8015756 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801571a:	693b      	ldr	r3, [r7, #16]
 801571c:	3304      	adds	r3, #4
 801571e:	4618      	mov	r0, r3
 8015720:	f7fe fd7a 	bl	8014218 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015724:	693b      	ldr	r3, [r7, #16]
 8015726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015728:	4b19      	ldr	r3, [pc, #100]	; (8015790 <xTaskRemoveFromEventList+0xb4>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	429a      	cmp	r2, r3
 801572e:	d903      	bls.n	8015738 <xTaskRemoveFromEventList+0x5c>
 8015730:	693b      	ldr	r3, [r7, #16]
 8015732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015734:	4a16      	ldr	r2, [pc, #88]	; (8015790 <xTaskRemoveFromEventList+0xb4>)
 8015736:	6013      	str	r3, [r2, #0]
 8015738:	693b      	ldr	r3, [r7, #16]
 801573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801573c:	4613      	mov	r3, r2
 801573e:	009b      	lsls	r3, r3, #2
 8015740:	4413      	add	r3, r2
 8015742:	009b      	lsls	r3, r3, #2
 8015744:	4a13      	ldr	r2, [pc, #76]	; (8015794 <xTaskRemoveFromEventList+0xb8>)
 8015746:	441a      	add	r2, r3
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	3304      	adds	r3, #4
 801574c:	4619      	mov	r1, r3
 801574e:	4610      	mov	r0, r2
 8015750:	f7fe fd05 	bl	801415e <vListInsertEnd>
 8015754:	e005      	b.n	8015762 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015756:	693b      	ldr	r3, [r7, #16]
 8015758:	3318      	adds	r3, #24
 801575a:	4619      	mov	r1, r3
 801575c:	480e      	ldr	r0, [pc, #56]	; (8015798 <xTaskRemoveFromEventList+0xbc>)
 801575e:	f7fe fcfe 	bl	801415e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015766:	4b0d      	ldr	r3, [pc, #52]	; (801579c <xTaskRemoveFromEventList+0xc0>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801576c:	429a      	cmp	r2, r3
 801576e:	d905      	bls.n	801577c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015770:	2301      	movs	r3, #1
 8015772:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015774:	4b0a      	ldr	r3, [pc, #40]	; (80157a0 <xTaskRemoveFromEventList+0xc4>)
 8015776:	2201      	movs	r2, #1
 8015778:	601a      	str	r2, [r3, #0]
 801577a:	e001      	b.n	8015780 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801577c:	2300      	movs	r3, #0
 801577e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8015780:	697b      	ldr	r3, [r7, #20]
}
 8015782:	4618      	mov	r0, r3
 8015784:	3718      	adds	r7, #24
 8015786:	46bd      	mov	sp, r7
 8015788:	bd80      	pop	{r7, pc}
 801578a:	bf00      	nop
 801578c:	200032e4 	.word	0x200032e4
 8015790:	200032c4 	.word	0x200032c4
 8015794:	20002dec 	.word	0x20002dec
 8015798:	2000327c 	.word	0x2000327c
 801579c:	20002de8 	.word	0x20002de8
 80157a0:	200032d0 	.word	0x200032d0

080157a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80157a4:	b480      	push	{r7}
 80157a6:	b083      	sub	sp, #12
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80157ac:	4b06      	ldr	r3, [pc, #24]	; (80157c8 <vTaskInternalSetTimeOutState+0x24>)
 80157ae:	681a      	ldr	r2, [r3, #0]
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80157b4:	4b05      	ldr	r3, [pc, #20]	; (80157cc <vTaskInternalSetTimeOutState+0x28>)
 80157b6:	681a      	ldr	r2, [r3, #0]
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	605a      	str	r2, [r3, #4]
}
 80157bc:	bf00      	nop
 80157be:	370c      	adds	r7, #12
 80157c0:	46bd      	mov	sp, r7
 80157c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c6:	4770      	bx	lr
 80157c8:	200032d4 	.word	0x200032d4
 80157cc:	200032c0 	.word	0x200032c0

080157d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b088      	sub	sp, #32
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d10a      	bne.n	80157f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80157e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157e4:	f383 8811 	msr	BASEPRI, r3
 80157e8:	f3bf 8f6f 	isb	sy
 80157ec:	f3bf 8f4f 	dsb	sy
 80157f0:	613b      	str	r3, [r7, #16]
}
 80157f2:	bf00      	nop
 80157f4:	e7fe      	b.n	80157f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d10a      	bne.n	8015812 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80157fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015800:	f383 8811 	msr	BASEPRI, r3
 8015804:	f3bf 8f6f 	isb	sy
 8015808:	f3bf 8f4f 	dsb	sy
 801580c:	60fb      	str	r3, [r7, #12]
}
 801580e:	bf00      	nop
 8015810:	e7fe      	b.n	8015810 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015812:	f000 fe47 	bl	80164a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015816:	4b1d      	ldr	r3, [pc, #116]	; (801588c <xTaskCheckForTimeOut+0xbc>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	69ba      	ldr	r2, [r7, #24]
 8015822:	1ad3      	subs	r3, r2, r3
 8015824:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015826:	683b      	ldr	r3, [r7, #0]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801582e:	d102      	bne.n	8015836 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015830:	2300      	movs	r3, #0
 8015832:	61fb      	str	r3, [r7, #28]
 8015834:	e023      	b.n	801587e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	681a      	ldr	r2, [r3, #0]
 801583a:	4b15      	ldr	r3, [pc, #84]	; (8015890 <xTaskCheckForTimeOut+0xc0>)
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	429a      	cmp	r2, r3
 8015840:	d007      	beq.n	8015852 <xTaskCheckForTimeOut+0x82>
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	685b      	ldr	r3, [r3, #4]
 8015846:	69ba      	ldr	r2, [r7, #24]
 8015848:	429a      	cmp	r2, r3
 801584a:	d302      	bcc.n	8015852 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801584c:	2301      	movs	r3, #1
 801584e:	61fb      	str	r3, [r7, #28]
 8015850:	e015      	b.n	801587e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	697a      	ldr	r2, [r7, #20]
 8015858:	429a      	cmp	r2, r3
 801585a:	d20b      	bcs.n	8015874 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	681a      	ldr	r2, [r3, #0]
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	1ad2      	subs	r2, r2, r3
 8015864:	683b      	ldr	r3, [r7, #0]
 8015866:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f7ff ff9b 	bl	80157a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801586e:	2300      	movs	r3, #0
 8015870:	61fb      	str	r3, [r7, #28]
 8015872:	e004      	b.n	801587e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	2200      	movs	r2, #0
 8015878:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801587a:	2301      	movs	r3, #1
 801587c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801587e:	f000 fe41 	bl	8016504 <vPortExitCritical>

	return xReturn;
 8015882:	69fb      	ldr	r3, [r7, #28]
}
 8015884:	4618      	mov	r0, r3
 8015886:	3720      	adds	r7, #32
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}
 801588c:	200032c0 	.word	0x200032c0
 8015890:	200032d4 	.word	0x200032d4

08015894 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015894:	b480      	push	{r7}
 8015896:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015898:	4b03      	ldr	r3, [pc, #12]	; (80158a8 <vTaskMissedYield+0x14>)
 801589a:	2201      	movs	r2, #1
 801589c:	601a      	str	r2, [r3, #0]
}
 801589e:	bf00      	nop
 80158a0:	46bd      	mov	sp, r7
 80158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a6:	4770      	bx	lr
 80158a8:	200032d0 	.word	0x200032d0

080158ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b082      	sub	sp, #8
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80158b4:	f000 f852 	bl	801595c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80158b8:	4b06      	ldr	r3, [pc, #24]	; (80158d4 <prvIdleTask+0x28>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	2b01      	cmp	r3, #1
 80158be:	d9f9      	bls.n	80158b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80158c0:	4b05      	ldr	r3, [pc, #20]	; (80158d8 <prvIdleTask+0x2c>)
 80158c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158c6:	601a      	str	r2, [r3, #0]
 80158c8:	f3bf 8f4f 	dsb	sy
 80158cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80158d0:	e7f0      	b.n	80158b4 <prvIdleTask+0x8>
 80158d2:	bf00      	nop
 80158d4:	20002dec 	.word	0x20002dec
 80158d8:	e000ed04 	.word	0xe000ed04

080158dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b082      	sub	sp, #8
 80158e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80158e2:	2300      	movs	r3, #0
 80158e4:	607b      	str	r3, [r7, #4]
 80158e6:	e00c      	b.n	8015902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	4613      	mov	r3, r2
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	4413      	add	r3, r2
 80158f0:	009b      	lsls	r3, r3, #2
 80158f2:	4a12      	ldr	r2, [pc, #72]	; (801593c <prvInitialiseTaskLists+0x60>)
 80158f4:	4413      	add	r3, r2
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fe fc04 	bl	8014104 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	3301      	adds	r3, #1
 8015900:	607b      	str	r3, [r7, #4]
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	2b37      	cmp	r3, #55	; 0x37
 8015906:	d9ef      	bls.n	80158e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015908:	480d      	ldr	r0, [pc, #52]	; (8015940 <prvInitialiseTaskLists+0x64>)
 801590a:	f7fe fbfb 	bl	8014104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801590e:	480d      	ldr	r0, [pc, #52]	; (8015944 <prvInitialiseTaskLists+0x68>)
 8015910:	f7fe fbf8 	bl	8014104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015914:	480c      	ldr	r0, [pc, #48]	; (8015948 <prvInitialiseTaskLists+0x6c>)
 8015916:	f7fe fbf5 	bl	8014104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801591a:	480c      	ldr	r0, [pc, #48]	; (801594c <prvInitialiseTaskLists+0x70>)
 801591c:	f7fe fbf2 	bl	8014104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015920:	480b      	ldr	r0, [pc, #44]	; (8015950 <prvInitialiseTaskLists+0x74>)
 8015922:	f7fe fbef 	bl	8014104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015926:	4b0b      	ldr	r3, [pc, #44]	; (8015954 <prvInitialiseTaskLists+0x78>)
 8015928:	4a05      	ldr	r2, [pc, #20]	; (8015940 <prvInitialiseTaskLists+0x64>)
 801592a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801592c:	4b0a      	ldr	r3, [pc, #40]	; (8015958 <prvInitialiseTaskLists+0x7c>)
 801592e:	4a05      	ldr	r2, [pc, #20]	; (8015944 <prvInitialiseTaskLists+0x68>)
 8015930:	601a      	str	r2, [r3, #0]
}
 8015932:	bf00      	nop
 8015934:	3708      	adds	r7, #8
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}
 801593a:	bf00      	nop
 801593c:	20002dec 	.word	0x20002dec
 8015940:	2000324c 	.word	0x2000324c
 8015944:	20003260 	.word	0x20003260
 8015948:	2000327c 	.word	0x2000327c
 801594c:	20003290 	.word	0x20003290
 8015950:	200032a8 	.word	0x200032a8
 8015954:	20003274 	.word	0x20003274
 8015958:	20003278 	.word	0x20003278

0801595c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b082      	sub	sp, #8
 8015960:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015962:	e019      	b.n	8015998 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015964:	f000 fd9e 	bl	80164a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8015968:	4b10      	ldr	r3, [pc, #64]	; (80159ac <prvCheckTasksWaitingTermination+0x50>)
 801596a:	68db      	ldr	r3, [r3, #12]
 801596c:	68db      	ldr	r3, [r3, #12]
 801596e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	3304      	adds	r3, #4
 8015974:	4618      	mov	r0, r3
 8015976:	f7fe fc4f 	bl	8014218 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801597a:	4b0d      	ldr	r3, [pc, #52]	; (80159b0 <prvCheckTasksWaitingTermination+0x54>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	3b01      	subs	r3, #1
 8015980:	4a0b      	ldr	r2, [pc, #44]	; (80159b0 <prvCheckTasksWaitingTermination+0x54>)
 8015982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015984:	4b0b      	ldr	r3, [pc, #44]	; (80159b4 <prvCheckTasksWaitingTermination+0x58>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	3b01      	subs	r3, #1
 801598a:	4a0a      	ldr	r2, [pc, #40]	; (80159b4 <prvCheckTasksWaitingTermination+0x58>)
 801598c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801598e:	f000 fdb9 	bl	8016504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f000 f810 	bl	80159b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015998:	4b06      	ldr	r3, [pc, #24]	; (80159b4 <prvCheckTasksWaitingTermination+0x58>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d1e1      	bne.n	8015964 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80159a0:	bf00      	nop
 80159a2:	bf00      	nop
 80159a4:	3708      	adds	r7, #8
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}
 80159aa:	bf00      	nop
 80159ac:	20003290 	.word	0x20003290
 80159b0:	200032bc 	.word	0x200032bc
 80159b4:	200032a4 	.word	0x200032a4

080159b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b084      	sub	sp, #16
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d108      	bne.n	80159dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159ce:	4618      	mov	r0, r3
 80159d0:	f000 fed0 	bl	8016774 <vPortFree>
				vPortFree( pxTCB );
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f000 fecd 	bl	8016774 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80159da:	e018      	b.n	8015a0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80159e2:	2b01      	cmp	r3, #1
 80159e4:	d103      	bne.n	80159ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f000 fec4 	bl	8016774 <vPortFree>
	}
 80159ec:	e00f      	b.n	8015a0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80159f4:	2b02      	cmp	r3, #2
 80159f6:	d00a      	beq.n	8015a0e <prvDeleteTCB+0x56>
	__asm volatile
 80159f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159fc:	f383 8811 	msr	BASEPRI, r3
 8015a00:	f3bf 8f6f 	isb	sy
 8015a04:	f3bf 8f4f 	dsb	sy
 8015a08:	60fb      	str	r3, [r7, #12]
}
 8015a0a:	bf00      	nop
 8015a0c:	e7fe      	b.n	8015a0c <prvDeleteTCB+0x54>
	}
 8015a0e:	bf00      	nop
 8015a10:	3710      	adds	r7, #16
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
	...

08015a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015a18:	b480      	push	{r7}
 8015a1a:	b083      	sub	sp, #12
 8015a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a1e:	4b0f      	ldr	r3, [pc, #60]	; (8015a5c <prvResetNextTaskUnblockTime+0x44>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d101      	bne.n	8015a2c <prvResetNextTaskUnblockTime+0x14>
 8015a28:	2301      	movs	r3, #1
 8015a2a:	e000      	b.n	8015a2e <prvResetNextTaskUnblockTime+0x16>
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d004      	beq.n	8015a3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015a32:	4b0b      	ldr	r3, [pc, #44]	; (8015a60 <prvResetNextTaskUnblockTime+0x48>)
 8015a34:	f04f 32ff 	mov.w	r2, #4294967295
 8015a38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015a3a:	e008      	b.n	8015a4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015a3c:	4b07      	ldr	r3, [pc, #28]	; (8015a5c <prvResetNextTaskUnblockTime+0x44>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	68db      	ldr	r3, [r3, #12]
 8015a42:	68db      	ldr	r3, [r3, #12]
 8015a44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	685b      	ldr	r3, [r3, #4]
 8015a4a:	4a05      	ldr	r2, [pc, #20]	; (8015a60 <prvResetNextTaskUnblockTime+0x48>)
 8015a4c:	6013      	str	r3, [r2, #0]
}
 8015a4e:	bf00      	nop
 8015a50:	370c      	adds	r7, #12
 8015a52:	46bd      	mov	sp, r7
 8015a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a58:	4770      	bx	lr
 8015a5a:	bf00      	nop
 8015a5c:	20003274 	.word	0x20003274
 8015a60:	200032dc 	.word	0x200032dc

08015a64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015a64:	b480      	push	{r7}
 8015a66:	b083      	sub	sp, #12
 8015a68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015a6a:	4b0b      	ldr	r3, [pc, #44]	; (8015a98 <xTaskGetSchedulerState+0x34>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d102      	bne.n	8015a78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015a72:	2301      	movs	r3, #1
 8015a74:	607b      	str	r3, [r7, #4]
 8015a76:	e008      	b.n	8015a8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a78:	4b08      	ldr	r3, [pc, #32]	; (8015a9c <xTaskGetSchedulerState+0x38>)
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d102      	bne.n	8015a86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015a80:	2302      	movs	r3, #2
 8015a82:	607b      	str	r3, [r7, #4]
 8015a84:	e001      	b.n	8015a8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015a86:	2300      	movs	r3, #0
 8015a88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015a8a:	687b      	ldr	r3, [r7, #4]
	}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	370c      	adds	r7, #12
 8015a90:	46bd      	mov	sp, r7
 8015a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a96:	4770      	bx	lr
 8015a98:	200032c8 	.word	0x200032c8
 8015a9c:	200032e4 	.word	0x200032e4

08015aa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015aac:	2300      	movs	r3, #0
 8015aae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d056      	beq.n	8015b64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015ab6:	4b2e      	ldr	r3, [pc, #184]	; (8015b70 <xTaskPriorityDisinherit+0xd0>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	693a      	ldr	r2, [r7, #16]
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d00a      	beq.n	8015ad6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ac4:	f383 8811 	msr	BASEPRI, r3
 8015ac8:	f3bf 8f6f 	isb	sy
 8015acc:	f3bf 8f4f 	dsb	sy
 8015ad0:	60fb      	str	r3, [r7, #12]
}
 8015ad2:	bf00      	nop
 8015ad4:	e7fe      	b.n	8015ad4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015ad6:	693b      	ldr	r3, [r7, #16]
 8015ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d10a      	bne.n	8015af4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ae2:	f383 8811 	msr	BASEPRI, r3
 8015ae6:	f3bf 8f6f 	isb	sy
 8015aea:	f3bf 8f4f 	dsb	sy
 8015aee:	60bb      	str	r3, [r7, #8]
}
 8015af0:	bf00      	nop
 8015af2:	e7fe      	b.n	8015af2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015af4:	693b      	ldr	r3, [r7, #16]
 8015af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015af8:	1e5a      	subs	r2, r3, #1
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015afe:	693b      	ldr	r3, [r7, #16]
 8015b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d02c      	beq.n	8015b64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d128      	bne.n	8015b64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b12:	693b      	ldr	r3, [r7, #16]
 8015b14:	3304      	adds	r3, #4
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7fe fb7e 	bl	8014218 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015b1c:	693b      	ldr	r3, [r7, #16]
 8015b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015b20:	693b      	ldr	r3, [r7, #16]
 8015b22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b24:	693b      	ldr	r3, [r7, #16]
 8015b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b34:	4b0f      	ldr	r3, [pc, #60]	; (8015b74 <xTaskPriorityDisinherit+0xd4>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	d903      	bls.n	8015b44 <xTaskPriorityDisinherit+0xa4>
 8015b3c:	693b      	ldr	r3, [r7, #16]
 8015b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b40:	4a0c      	ldr	r2, [pc, #48]	; (8015b74 <xTaskPriorityDisinherit+0xd4>)
 8015b42:	6013      	str	r3, [r2, #0]
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b48:	4613      	mov	r3, r2
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	4413      	add	r3, r2
 8015b4e:	009b      	lsls	r3, r3, #2
 8015b50:	4a09      	ldr	r2, [pc, #36]	; (8015b78 <xTaskPriorityDisinherit+0xd8>)
 8015b52:	441a      	add	r2, r3
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	3304      	adds	r3, #4
 8015b58:	4619      	mov	r1, r3
 8015b5a:	4610      	mov	r0, r2
 8015b5c:	f7fe faff 	bl	801415e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015b60:	2301      	movs	r3, #1
 8015b62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015b64:	697b      	ldr	r3, [r7, #20]
	}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3718      	adds	r7, #24
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}
 8015b6e:	bf00      	nop
 8015b70:	20002de8 	.word	0x20002de8
 8015b74:	200032c4 	.word	0x200032c4
 8015b78:	20002dec 	.word	0x20002dec

08015b7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b084      	sub	sp, #16
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
 8015b84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015b86:	4b21      	ldr	r3, [pc, #132]	; (8015c0c <prvAddCurrentTaskToDelayedList+0x90>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b8c:	4b20      	ldr	r3, [pc, #128]	; (8015c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	3304      	adds	r3, #4
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7fe fb40 	bl	8014218 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b9e:	d10a      	bne.n	8015bb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d007      	beq.n	8015bb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015ba6:	4b1a      	ldr	r3, [pc, #104]	; (8015c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	3304      	adds	r3, #4
 8015bac:	4619      	mov	r1, r3
 8015bae:	4819      	ldr	r0, [pc, #100]	; (8015c14 <prvAddCurrentTaskToDelayedList+0x98>)
 8015bb0:	f7fe fad5 	bl	801415e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015bb4:	e026      	b.n	8015c04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015bb6:	68fa      	ldr	r2, [r7, #12]
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	4413      	add	r3, r2
 8015bbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015bbe:	4b14      	ldr	r3, [pc, #80]	; (8015c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	68ba      	ldr	r2, [r7, #8]
 8015bc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015bc6:	68ba      	ldr	r2, [r7, #8]
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d209      	bcs.n	8015be2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015bce:	4b12      	ldr	r3, [pc, #72]	; (8015c18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	4b0f      	ldr	r3, [pc, #60]	; (8015c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	3304      	adds	r3, #4
 8015bd8:	4619      	mov	r1, r3
 8015bda:	4610      	mov	r0, r2
 8015bdc:	f7fe fae3 	bl	80141a6 <vListInsert>
}
 8015be0:	e010      	b.n	8015c04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015be2:	4b0e      	ldr	r3, [pc, #56]	; (8015c1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8015be4:	681a      	ldr	r2, [r3, #0]
 8015be6:	4b0a      	ldr	r3, [pc, #40]	; (8015c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	3304      	adds	r3, #4
 8015bec:	4619      	mov	r1, r3
 8015bee:	4610      	mov	r0, r2
 8015bf0:	f7fe fad9 	bl	80141a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015bf4:	4b0a      	ldr	r3, [pc, #40]	; (8015c20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	68ba      	ldr	r2, [r7, #8]
 8015bfa:	429a      	cmp	r2, r3
 8015bfc:	d202      	bcs.n	8015c04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015bfe:	4a08      	ldr	r2, [pc, #32]	; (8015c20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015c00:	68bb      	ldr	r3, [r7, #8]
 8015c02:	6013      	str	r3, [r2, #0]
}
 8015c04:	bf00      	nop
 8015c06:	3710      	adds	r7, #16
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	200032c0 	.word	0x200032c0
 8015c10:	20002de8 	.word	0x20002de8
 8015c14:	200032a8 	.word	0x200032a8
 8015c18:	20003278 	.word	0x20003278
 8015c1c:	20003274 	.word	0x20003274
 8015c20:	200032dc 	.word	0x200032dc

08015c24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b08a      	sub	sp, #40	; 0x28
 8015c28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015c2e:	f000 facb 	bl	80161c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015c32:	4b1c      	ldr	r3, [pc, #112]	; (8015ca4 <xTimerCreateTimerTask+0x80>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d021      	beq.n	8015c7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015c3e:	2300      	movs	r3, #0
 8015c40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015c42:	1d3a      	adds	r2, r7, #4
 8015c44:	f107 0108 	add.w	r1, r7, #8
 8015c48:	f107 030c 	add.w	r3, r7, #12
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7fe fa3f 	bl	80140d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015c52:	6879      	ldr	r1, [r7, #4]
 8015c54:	68bb      	ldr	r3, [r7, #8]
 8015c56:	68fa      	ldr	r2, [r7, #12]
 8015c58:	9202      	str	r2, [sp, #8]
 8015c5a:	9301      	str	r3, [sp, #4]
 8015c5c:	2302      	movs	r3, #2
 8015c5e:	9300      	str	r3, [sp, #0]
 8015c60:	2300      	movs	r3, #0
 8015c62:	460a      	mov	r2, r1
 8015c64:	4910      	ldr	r1, [pc, #64]	; (8015ca8 <xTimerCreateTimerTask+0x84>)
 8015c66:	4811      	ldr	r0, [pc, #68]	; (8015cac <xTimerCreateTimerTask+0x88>)
 8015c68:	f7ff f8de 	bl	8014e28 <xTaskCreateStatic>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	4a10      	ldr	r2, [pc, #64]	; (8015cb0 <xTimerCreateTimerTask+0x8c>)
 8015c70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015c72:	4b0f      	ldr	r3, [pc, #60]	; (8015cb0 <xTimerCreateTimerTask+0x8c>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d001      	beq.n	8015c7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d10a      	bne.n	8015c9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c88:	f383 8811 	msr	BASEPRI, r3
 8015c8c:	f3bf 8f6f 	isb	sy
 8015c90:	f3bf 8f4f 	dsb	sy
 8015c94:	613b      	str	r3, [r7, #16]
}
 8015c96:	bf00      	nop
 8015c98:	e7fe      	b.n	8015c98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015c9a:	697b      	ldr	r3, [r7, #20]
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	3718      	adds	r7, #24
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}
 8015ca4:	20003318 	.word	0x20003318
 8015ca8:	08017b2c 	.word	0x08017b2c
 8015cac:	08015dd1 	.word	0x08015dd1
 8015cb0:	2000331c 	.word	0x2000331c

08015cb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b08a      	sub	sp, #40	; 0x28
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	60f8      	str	r0, [r7, #12]
 8015cbc:	60b9      	str	r1, [r7, #8]
 8015cbe:	607a      	str	r2, [r7, #4]
 8015cc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d10a      	bne.n	8015ce2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cd0:	f383 8811 	msr	BASEPRI, r3
 8015cd4:	f3bf 8f6f 	isb	sy
 8015cd8:	f3bf 8f4f 	dsb	sy
 8015cdc:	623b      	str	r3, [r7, #32]
}
 8015cde:	bf00      	nop
 8015ce0:	e7fe      	b.n	8015ce0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015ce2:	4b1a      	ldr	r3, [pc, #104]	; (8015d4c <xTimerGenericCommand+0x98>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d02a      	beq.n	8015d40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015cea:	68bb      	ldr	r3, [r7, #8]
 8015cec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	2b05      	cmp	r3, #5
 8015cfa:	dc18      	bgt.n	8015d2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015cfc:	f7ff feb2 	bl	8015a64 <xTaskGetSchedulerState>
 8015d00:	4603      	mov	r3, r0
 8015d02:	2b02      	cmp	r3, #2
 8015d04:	d109      	bne.n	8015d1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015d06:	4b11      	ldr	r3, [pc, #68]	; (8015d4c <xTimerGenericCommand+0x98>)
 8015d08:	6818      	ldr	r0, [r3, #0]
 8015d0a:	f107 0110 	add.w	r1, r7, #16
 8015d0e:	2300      	movs	r3, #0
 8015d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d12:	f7fe fbeb 	bl	80144ec <xQueueGenericSend>
 8015d16:	6278      	str	r0, [r7, #36]	; 0x24
 8015d18:	e012      	b.n	8015d40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015d1a:	4b0c      	ldr	r3, [pc, #48]	; (8015d4c <xTimerGenericCommand+0x98>)
 8015d1c:	6818      	ldr	r0, [r3, #0]
 8015d1e:	f107 0110 	add.w	r1, r7, #16
 8015d22:	2300      	movs	r3, #0
 8015d24:	2200      	movs	r2, #0
 8015d26:	f7fe fbe1 	bl	80144ec <xQueueGenericSend>
 8015d2a:	6278      	str	r0, [r7, #36]	; 0x24
 8015d2c:	e008      	b.n	8015d40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015d2e:	4b07      	ldr	r3, [pc, #28]	; (8015d4c <xTimerGenericCommand+0x98>)
 8015d30:	6818      	ldr	r0, [r3, #0]
 8015d32:	f107 0110 	add.w	r1, r7, #16
 8015d36:	2300      	movs	r3, #0
 8015d38:	683a      	ldr	r2, [r7, #0]
 8015d3a:	f7fe fcd5 	bl	80146e8 <xQueueGenericSendFromISR>
 8015d3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015d42:	4618      	mov	r0, r3
 8015d44:	3728      	adds	r7, #40	; 0x28
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	bf00      	nop
 8015d4c:	20003318 	.word	0x20003318

08015d50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b088      	sub	sp, #32
 8015d54:	af02      	add	r7, sp, #8
 8015d56:	6078      	str	r0, [r7, #4]
 8015d58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015d5a:	4b1c      	ldr	r3, [pc, #112]	; (8015dcc <prvProcessExpiredTimer+0x7c>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	68db      	ldr	r3, [r3, #12]
 8015d60:	68db      	ldr	r3, [r3, #12]
 8015d62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015d64:	697b      	ldr	r3, [r7, #20]
 8015d66:	3304      	adds	r3, #4
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7fe fa55 	bl	8014218 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8015d6e:	697b      	ldr	r3, [r7, #20]
 8015d70:	69db      	ldr	r3, [r3, #28]
 8015d72:	2b01      	cmp	r3, #1
 8015d74:	d122      	bne.n	8015dbc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015d76:	697b      	ldr	r3, [r7, #20]
 8015d78:	699a      	ldr	r2, [r3, #24]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	18d1      	adds	r1, r2, r3
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	683a      	ldr	r2, [r7, #0]
 8015d82:	6978      	ldr	r0, [r7, #20]
 8015d84:	f000 f8c8 	bl	8015f18 <prvInsertTimerInActiveList>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d016      	beq.n	8015dbc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015d8e:	2300      	movs	r3, #0
 8015d90:	9300      	str	r3, [sp, #0]
 8015d92:	2300      	movs	r3, #0
 8015d94:	687a      	ldr	r2, [r7, #4]
 8015d96:	2100      	movs	r1, #0
 8015d98:	6978      	ldr	r0, [r7, #20]
 8015d9a:	f7ff ff8b 	bl	8015cb4 <xTimerGenericCommand>
 8015d9e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015da0:	693b      	ldr	r3, [r7, #16]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d10a      	bne.n	8015dbc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8015da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015daa:	f383 8811 	msr	BASEPRI, r3
 8015dae:	f3bf 8f6f 	isb	sy
 8015db2:	f3bf 8f4f 	dsb	sy
 8015db6:	60fb      	str	r3, [r7, #12]
}
 8015db8:	bf00      	nop
 8015dba:	e7fe      	b.n	8015dba <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015dbc:	697b      	ldr	r3, [r7, #20]
 8015dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dc0:	6978      	ldr	r0, [r7, #20]
 8015dc2:	4798      	blx	r3
}
 8015dc4:	bf00      	nop
 8015dc6:	3718      	adds	r7, #24
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	20003310 	.word	0x20003310

08015dd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b084      	sub	sp, #16
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015dd8:	f107 0308 	add.w	r3, r7, #8
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f000 f857 	bl	8015e90 <prvGetNextExpireTime>
 8015de2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	4619      	mov	r1, r3
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f000 f803 	bl	8015df4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015dee:	f000 f8d5 	bl	8015f9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015df2:	e7f1      	b.n	8015dd8 <prvTimerTask+0x8>

08015df4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b084      	sub	sp, #16
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
 8015dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015dfe:	f7ff fa45 	bl	801528c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015e02:	f107 0308 	add.w	r3, r7, #8
 8015e06:	4618      	mov	r0, r3
 8015e08:	f000 f866 	bl	8015ed8 <prvSampleTimeNow>
 8015e0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015e0e:	68bb      	ldr	r3, [r7, #8]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d130      	bne.n	8015e76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d10a      	bne.n	8015e30 <prvProcessTimerOrBlockTask+0x3c>
 8015e1a:	687a      	ldr	r2, [r7, #4]
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d806      	bhi.n	8015e30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015e22:	f7ff fa41 	bl	80152a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015e26:	68f9      	ldr	r1, [r7, #12]
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f7ff ff91 	bl	8015d50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015e2e:	e024      	b.n	8015e7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d008      	beq.n	8015e48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015e36:	4b13      	ldr	r3, [pc, #76]	; (8015e84 <prvProcessTimerOrBlockTask+0x90>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	bf0c      	ite	eq
 8015e40:	2301      	moveq	r3, #1
 8015e42:	2300      	movne	r3, #0
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015e48:	4b0f      	ldr	r3, [pc, #60]	; (8015e88 <prvProcessTimerOrBlockTask+0x94>)
 8015e4a:	6818      	ldr	r0, [r3, #0]
 8015e4c:	687a      	ldr	r2, [r7, #4]
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	1ad3      	subs	r3, r2, r3
 8015e52:	683a      	ldr	r2, [r7, #0]
 8015e54:	4619      	mov	r1, r3
 8015e56:	f7fe ffb3 	bl	8014dc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015e5a:	f7ff fa25 	bl	80152a8 <xTaskResumeAll>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d10a      	bne.n	8015e7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015e64:	4b09      	ldr	r3, [pc, #36]	; (8015e8c <prvProcessTimerOrBlockTask+0x98>)
 8015e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e6a:	601a      	str	r2, [r3, #0]
 8015e6c:	f3bf 8f4f 	dsb	sy
 8015e70:	f3bf 8f6f 	isb	sy
}
 8015e74:	e001      	b.n	8015e7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015e76:	f7ff fa17 	bl	80152a8 <xTaskResumeAll>
}
 8015e7a:	bf00      	nop
 8015e7c:	3710      	adds	r7, #16
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	20003314 	.word	0x20003314
 8015e88:	20003318 	.word	0x20003318
 8015e8c:	e000ed04 	.word	0xe000ed04

08015e90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015e90:	b480      	push	{r7}
 8015e92:	b085      	sub	sp, #20
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015e98:	4b0e      	ldr	r3, [pc, #56]	; (8015ed4 <prvGetNextExpireTime+0x44>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	bf0c      	ite	eq
 8015ea2:	2301      	moveq	r3, #1
 8015ea4:	2300      	movne	r3, #0
 8015ea6:	b2db      	uxtb	r3, r3
 8015ea8:	461a      	mov	r2, r3
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d105      	bne.n	8015ec2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015eb6:	4b07      	ldr	r3, [pc, #28]	; (8015ed4 <prvGetNextExpireTime+0x44>)
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	68db      	ldr	r3, [r3, #12]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	60fb      	str	r3, [r7, #12]
 8015ec0:	e001      	b.n	8015ec6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3714      	adds	r7, #20
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed2:	4770      	bx	lr
 8015ed4:	20003310 	.word	0x20003310

08015ed8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b084      	sub	sp, #16
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015ee0:	f7ff fa80 	bl	80153e4 <xTaskGetTickCount>
 8015ee4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015ee6:	4b0b      	ldr	r3, [pc, #44]	; (8015f14 <prvSampleTimeNow+0x3c>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	68fa      	ldr	r2, [r7, #12]
 8015eec:	429a      	cmp	r2, r3
 8015eee:	d205      	bcs.n	8015efc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015ef0:	f000 f908 	bl	8016104 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	2201      	movs	r2, #1
 8015ef8:	601a      	str	r2, [r3, #0]
 8015efa:	e002      	b.n	8015f02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2200      	movs	r2, #0
 8015f00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015f02:	4a04      	ldr	r2, [pc, #16]	; (8015f14 <prvSampleTimeNow+0x3c>)
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015f08:	68fb      	ldr	r3, [r7, #12]
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	3710      	adds	r7, #16
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}
 8015f12:	bf00      	nop
 8015f14:	20003320 	.word	0x20003320

08015f18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b086      	sub	sp, #24
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	60f8      	str	r0, [r7, #12]
 8015f20:	60b9      	str	r1, [r7, #8]
 8015f22:	607a      	str	r2, [r7, #4]
 8015f24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015f26:	2300      	movs	r3, #0
 8015f28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	68ba      	ldr	r2, [r7, #8]
 8015f2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	68fa      	ldr	r2, [r7, #12]
 8015f34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015f36:	68ba      	ldr	r2, [r7, #8]
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d812      	bhi.n	8015f64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f3e:	687a      	ldr	r2, [r7, #4]
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	1ad2      	subs	r2, r2, r3
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	699b      	ldr	r3, [r3, #24]
 8015f48:	429a      	cmp	r2, r3
 8015f4a:	d302      	bcc.n	8015f52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	617b      	str	r3, [r7, #20]
 8015f50:	e01b      	b.n	8015f8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015f52:	4b10      	ldr	r3, [pc, #64]	; (8015f94 <prvInsertTimerInActiveList+0x7c>)
 8015f54:	681a      	ldr	r2, [r3, #0]
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	3304      	adds	r3, #4
 8015f5a:	4619      	mov	r1, r3
 8015f5c:	4610      	mov	r0, r2
 8015f5e:	f7fe f922 	bl	80141a6 <vListInsert>
 8015f62:	e012      	b.n	8015f8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015f64:	687a      	ldr	r2, [r7, #4]
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d206      	bcs.n	8015f7a <prvInsertTimerInActiveList+0x62>
 8015f6c:	68ba      	ldr	r2, [r7, #8]
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d302      	bcc.n	8015f7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015f74:	2301      	movs	r3, #1
 8015f76:	617b      	str	r3, [r7, #20]
 8015f78:	e007      	b.n	8015f8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015f7a:	4b07      	ldr	r3, [pc, #28]	; (8015f98 <prvInsertTimerInActiveList+0x80>)
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	3304      	adds	r3, #4
 8015f82:	4619      	mov	r1, r3
 8015f84:	4610      	mov	r0, r2
 8015f86:	f7fe f90e 	bl	80141a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015f8a:	697b      	ldr	r3, [r7, #20]
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3718      	adds	r7, #24
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}
 8015f94:	20003314 	.word	0x20003314
 8015f98:	20003310 	.word	0x20003310

08015f9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b08e      	sub	sp, #56	; 0x38
 8015fa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015fa2:	e09d      	b.n	80160e0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	da18      	bge.n	8015fdc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015faa:	1d3b      	adds	r3, r7, #4
 8015fac:	3304      	adds	r3, #4
 8015fae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d10a      	bne.n	8015fcc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fba:	f383 8811 	msr	BASEPRI, r3
 8015fbe:	f3bf 8f6f 	isb	sy
 8015fc2:	f3bf 8f4f 	dsb	sy
 8015fc6:	61fb      	str	r3, [r7, #28]
}
 8015fc8:	bf00      	nop
 8015fca:	e7fe      	b.n	8015fca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fd2:	6850      	ldr	r0, [r2, #4]
 8015fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fd6:	6892      	ldr	r2, [r2, #8]
 8015fd8:	4611      	mov	r1, r2
 8015fda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	db7d      	blt.n	80160de <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe8:	695b      	ldr	r3, [r3, #20]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d004      	beq.n	8015ff8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ff0:	3304      	adds	r3, #4
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7fe f910 	bl	8014218 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015ff8:	463b      	mov	r3, r7
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7ff ff6c 	bl	8015ed8 <prvSampleTimeNow>
 8016000:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	2b09      	cmp	r3, #9
 8016006:	d86b      	bhi.n	80160e0 <prvProcessReceivedCommands+0x144>
 8016008:	a201      	add	r2, pc, #4	; (adr r2, 8016010 <prvProcessReceivedCommands+0x74>)
 801600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801600e:	bf00      	nop
 8016010:	08016039 	.word	0x08016039
 8016014:	08016039 	.word	0x08016039
 8016018:	08016039 	.word	0x08016039
 801601c:	080160e1 	.word	0x080160e1
 8016020:	08016095 	.word	0x08016095
 8016024:	080160cd 	.word	0x080160cd
 8016028:	08016039 	.word	0x08016039
 801602c:	08016039 	.word	0x08016039
 8016030:	080160e1 	.word	0x080160e1
 8016034:	08016095 	.word	0x08016095
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016038:	68ba      	ldr	r2, [r7, #8]
 801603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801603c:	699b      	ldr	r3, [r3, #24]
 801603e:	18d1      	adds	r1, r2, r3
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016046:	f7ff ff67 	bl	8015f18 <prvInsertTimerInActiveList>
 801604a:	4603      	mov	r3, r0
 801604c:	2b00      	cmp	r3, #0
 801604e:	d047      	beq.n	80160e0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016056:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8016058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801605a:	69db      	ldr	r3, [r3, #28]
 801605c:	2b01      	cmp	r3, #1
 801605e:	d13f      	bne.n	80160e0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016060:	68ba      	ldr	r2, [r7, #8]
 8016062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016064:	699b      	ldr	r3, [r3, #24]
 8016066:	441a      	add	r2, r3
 8016068:	2300      	movs	r3, #0
 801606a:	9300      	str	r3, [sp, #0]
 801606c:	2300      	movs	r3, #0
 801606e:	2100      	movs	r1, #0
 8016070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016072:	f7ff fe1f 	bl	8015cb4 <xTimerGenericCommand>
 8016076:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016078:	6a3b      	ldr	r3, [r7, #32]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d130      	bne.n	80160e0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 801607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016082:	f383 8811 	msr	BASEPRI, r3
 8016086:	f3bf 8f6f 	isb	sy
 801608a:	f3bf 8f4f 	dsb	sy
 801608e:	61bb      	str	r3, [r7, #24]
}
 8016090:	bf00      	nop
 8016092:	e7fe      	b.n	8016092 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016094:	68ba      	ldr	r2, [r7, #8]
 8016096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016098:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801609c:	699b      	ldr	r3, [r3, #24]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d10a      	bne.n	80160b8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80160a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a6:	f383 8811 	msr	BASEPRI, r3
 80160aa:	f3bf 8f6f 	isb	sy
 80160ae:	f3bf 8f4f 	dsb	sy
 80160b2:	617b      	str	r3, [r7, #20]
}
 80160b4:	bf00      	nop
 80160b6:	e7fe      	b.n	80160b6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80160b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ba:	699a      	ldr	r2, [r3, #24]
 80160bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160be:	18d1      	adds	r1, r2, r3
 80160c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160c6:	f7ff ff27 	bl	8015f18 <prvInsertTimerInActiveList>
					break;
 80160ca:	e009      	b.n	80160e0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80160cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d104      	bne.n	80160e0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80160d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160d8:	f000 fb4c 	bl	8016774 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80160dc:	e000      	b.n	80160e0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80160de:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80160e0:	4b07      	ldr	r3, [pc, #28]	; (8016100 <prvProcessReceivedCommands+0x164>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	1d39      	adds	r1, r7, #4
 80160e6:	2200      	movs	r2, #0
 80160e8:	4618      	mov	r0, r3
 80160ea:	f7fe fb95 	bl	8014818 <xQueueReceive>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	f47f af57 	bne.w	8015fa4 <prvProcessReceivedCommands+0x8>
	}
}
 80160f6:	bf00      	nop
 80160f8:	bf00      	nop
 80160fa:	3730      	adds	r7, #48	; 0x30
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}
 8016100:	20003318 	.word	0x20003318

08016104 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b088      	sub	sp, #32
 8016108:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801610a:	e045      	b.n	8016198 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801610c:	4b2c      	ldr	r3, [pc, #176]	; (80161c0 <prvSwitchTimerLists+0xbc>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	68db      	ldr	r3, [r3, #12]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016116:	4b2a      	ldr	r3, [pc, #168]	; (80161c0 <prvSwitchTimerLists+0xbc>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	68db      	ldr	r3, [r3, #12]
 801611c:	68db      	ldr	r3, [r3, #12]
 801611e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	3304      	adds	r3, #4
 8016124:	4618      	mov	r0, r3
 8016126:	f7fe f877 	bl	8014218 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801612e:	68f8      	ldr	r0, [r7, #12]
 8016130:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	69db      	ldr	r3, [r3, #28]
 8016136:	2b01      	cmp	r3, #1
 8016138:	d12e      	bne.n	8016198 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	699b      	ldr	r3, [r3, #24]
 801613e:	693a      	ldr	r2, [r7, #16]
 8016140:	4413      	add	r3, r2
 8016142:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016144:	68ba      	ldr	r2, [r7, #8]
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	429a      	cmp	r2, r3
 801614a:	d90e      	bls.n	801616a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	68ba      	ldr	r2, [r7, #8]
 8016150:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	68fa      	ldr	r2, [r7, #12]
 8016156:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016158:	4b19      	ldr	r3, [pc, #100]	; (80161c0 <prvSwitchTimerLists+0xbc>)
 801615a:	681a      	ldr	r2, [r3, #0]
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	3304      	adds	r3, #4
 8016160:	4619      	mov	r1, r3
 8016162:	4610      	mov	r0, r2
 8016164:	f7fe f81f 	bl	80141a6 <vListInsert>
 8016168:	e016      	b.n	8016198 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801616a:	2300      	movs	r3, #0
 801616c:	9300      	str	r3, [sp, #0]
 801616e:	2300      	movs	r3, #0
 8016170:	693a      	ldr	r2, [r7, #16]
 8016172:	2100      	movs	r1, #0
 8016174:	68f8      	ldr	r0, [r7, #12]
 8016176:	f7ff fd9d 	bl	8015cb4 <xTimerGenericCommand>
 801617a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d10a      	bne.n	8016198 <prvSwitchTimerLists+0x94>
	__asm volatile
 8016182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016186:	f383 8811 	msr	BASEPRI, r3
 801618a:	f3bf 8f6f 	isb	sy
 801618e:	f3bf 8f4f 	dsb	sy
 8016192:	603b      	str	r3, [r7, #0]
}
 8016194:	bf00      	nop
 8016196:	e7fe      	b.n	8016196 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016198:	4b09      	ldr	r3, [pc, #36]	; (80161c0 <prvSwitchTimerLists+0xbc>)
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d1b4      	bne.n	801610c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80161a2:	4b07      	ldr	r3, [pc, #28]	; (80161c0 <prvSwitchTimerLists+0xbc>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80161a8:	4b06      	ldr	r3, [pc, #24]	; (80161c4 <prvSwitchTimerLists+0xc0>)
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	4a04      	ldr	r2, [pc, #16]	; (80161c0 <prvSwitchTimerLists+0xbc>)
 80161ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80161b0:	4a04      	ldr	r2, [pc, #16]	; (80161c4 <prvSwitchTimerLists+0xc0>)
 80161b2:	697b      	ldr	r3, [r7, #20]
 80161b4:	6013      	str	r3, [r2, #0]
}
 80161b6:	bf00      	nop
 80161b8:	3718      	adds	r7, #24
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
 80161be:	bf00      	nop
 80161c0:	20003310 	.word	0x20003310
 80161c4:	20003314 	.word	0x20003314

080161c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b082      	sub	sp, #8
 80161cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80161ce:	f000 f969 	bl	80164a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80161d2:	4b15      	ldr	r3, [pc, #84]	; (8016228 <prvCheckForValidListAndQueue+0x60>)
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d120      	bne.n	801621c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80161da:	4814      	ldr	r0, [pc, #80]	; (801622c <prvCheckForValidListAndQueue+0x64>)
 80161dc:	f7fd ff92 	bl	8014104 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80161e0:	4813      	ldr	r0, [pc, #76]	; (8016230 <prvCheckForValidListAndQueue+0x68>)
 80161e2:	f7fd ff8f 	bl	8014104 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80161e6:	4b13      	ldr	r3, [pc, #76]	; (8016234 <prvCheckForValidListAndQueue+0x6c>)
 80161e8:	4a10      	ldr	r2, [pc, #64]	; (801622c <prvCheckForValidListAndQueue+0x64>)
 80161ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80161ec:	4b12      	ldr	r3, [pc, #72]	; (8016238 <prvCheckForValidListAndQueue+0x70>)
 80161ee:	4a10      	ldr	r2, [pc, #64]	; (8016230 <prvCheckForValidListAndQueue+0x68>)
 80161f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80161f2:	2300      	movs	r3, #0
 80161f4:	9300      	str	r3, [sp, #0]
 80161f6:	4b11      	ldr	r3, [pc, #68]	; (801623c <prvCheckForValidListAndQueue+0x74>)
 80161f8:	4a11      	ldr	r2, [pc, #68]	; (8016240 <prvCheckForValidListAndQueue+0x78>)
 80161fa:	2110      	movs	r1, #16
 80161fc:	200a      	movs	r0, #10
 80161fe:	f7fe f89d 	bl	801433c <xQueueGenericCreateStatic>
 8016202:	4603      	mov	r3, r0
 8016204:	4a08      	ldr	r2, [pc, #32]	; (8016228 <prvCheckForValidListAndQueue+0x60>)
 8016206:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016208:	4b07      	ldr	r3, [pc, #28]	; (8016228 <prvCheckForValidListAndQueue+0x60>)
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d005      	beq.n	801621c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016210:	4b05      	ldr	r3, [pc, #20]	; (8016228 <prvCheckForValidListAndQueue+0x60>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	490b      	ldr	r1, [pc, #44]	; (8016244 <prvCheckForValidListAndQueue+0x7c>)
 8016216:	4618      	mov	r0, r3
 8016218:	f7fe fda8 	bl	8014d6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801621c:	f000 f972 	bl	8016504 <vPortExitCritical>
}
 8016220:	bf00      	nop
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}
 8016226:	bf00      	nop
 8016228:	20003318 	.word	0x20003318
 801622c:	200032e8 	.word	0x200032e8
 8016230:	200032fc 	.word	0x200032fc
 8016234:	20003310 	.word	0x20003310
 8016238:	20003314 	.word	0x20003314
 801623c:	200033c4 	.word	0x200033c4
 8016240:	20003324 	.word	0x20003324
 8016244:	08017b34 	.word	0x08017b34

08016248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016248:	b480      	push	{r7}
 801624a:	b085      	sub	sp, #20
 801624c:	af00      	add	r7, sp, #0
 801624e:	60f8      	str	r0, [r7, #12]
 8016250:	60b9      	str	r1, [r7, #8]
 8016252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	3b04      	subs	r3, #4
 8016258:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	3b04      	subs	r3, #4
 8016266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016268:	68bb      	ldr	r3, [r7, #8]
 801626a:	f023 0201 	bic.w	r2, r3, #1
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	3b04      	subs	r3, #4
 8016276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016278:	4a0c      	ldr	r2, [pc, #48]	; (80162ac <pxPortInitialiseStack+0x64>)
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	3b14      	subs	r3, #20
 8016282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	3b04      	subs	r3, #4
 801628e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	f06f 0202 	mvn.w	r2, #2
 8016296:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	3b20      	subs	r3, #32
 801629c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801629e:	68fb      	ldr	r3, [r7, #12]
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3714      	adds	r7, #20
 80162a4:	46bd      	mov	sp, r7
 80162a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162aa:	4770      	bx	lr
 80162ac:	080162b1 	.word	0x080162b1

080162b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80162b0:	b480      	push	{r7}
 80162b2:	b085      	sub	sp, #20
 80162b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80162b6:	2300      	movs	r3, #0
 80162b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80162ba:	4b12      	ldr	r3, [pc, #72]	; (8016304 <prvTaskExitError+0x54>)
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162c2:	d00a      	beq.n	80162da <prvTaskExitError+0x2a>
	__asm volatile
 80162c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162c8:	f383 8811 	msr	BASEPRI, r3
 80162cc:	f3bf 8f6f 	isb	sy
 80162d0:	f3bf 8f4f 	dsb	sy
 80162d4:	60fb      	str	r3, [r7, #12]
}
 80162d6:	bf00      	nop
 80162d8:	e7fe      	b.n	80162d8 <prvTaskExitError+0x28>
	__asm volatile
 80162da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162de:	f383 8811 	msr	BASEPRI, r3
 80162e2:	f3bf 8f6f 	isb	sy
 80162e6:	f3bf 8f4f 	dsb	sy
 80162ea:	60bb      	str	r3, [r7, #8]
}
 80162ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80162ee:	bf00      	nop
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d0fc      	beq.n	80162f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80162f6:	bf00      	nop
 80162f8:	bf00      	nop
 80162fa:	3714      	adds	r7, #20
 80162fc:	46bd      	mov	sp, r7
 80162fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016302:	4770      	bx	lr
 8016304:	2000012c 	.word	0x2000012c
	...

08016310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016310:	4b07      	ldr	r3, [pc, #28]	; (8016330 <pxCurrentTCBConst2>)
 8016312:	6819      	ldr	r1, [r3, #0]
 8016314:	6808      	ldr	r0, [r1, #0]
 8016316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801631a:	f380 8809 	msr	PSP, r0
 801631e:	f3bf 8f6f 	isb	sy
 8016322:	f04f 0000 	mov.w	r0, #0
 8016326:	f380 8811 	msr	BASEPRI, r0
 801632a:	4770      	bx	lr
 801632c:	f3af 8000 	nop.w

08016330 <pxCurrentTCBConst2>:
 8016330:	20002de8 	.word	0x20002de8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016334:	bf00      	nop
 8016336:	bf00      	nop

08016338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016338:	4808      	ldr	r0, [pc, #32]	; (801635c <prvPortStartFirstTask+0x24>)
 801633a:	6800      	ldr	r0, [r0, #0]
 801633c:	6800      	ldr	r0, [r0, #0]
 801633e:	f380 8808 	msr	MSP, r0
 8016342:	f04f 0000 	mov.w	r0, #0
 8016346:	f380 8814 	msr	CONTROL, r0
 801634a:	b662      	cpsie	i
 801634c:	b661      	cpsie	f
 801634e:	f3bf 8f4f 	dsb	sy
 8016352:	f3bf 8f6f 	isb	sy
 8016356:	df00      	svc	0
 8016358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801635a:	bf00      	nop
 801635c:	e000ed08 	.word	0xe000ed08

08016360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b086      	sub	sp, #24
 8016364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016366:	4b46      	ldr	r3, [pc, #280]	; (8016480 <xPortStartScheduler+0x120>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	4a46      	ldr	r2, [pc, #280]	; (8016484 <xPortStartScheduler+0x124>)
 801636c:	4293      	cmp	r3, r2
 801636e:	d10a      	bne.n	8016386 <xPortStartScheduler+0x26>
	__asm volatile
 8016370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016374:	f383 8811 	msr	BASEPRI, r3
 8016378:	f3bf 8f6f 	isb	sy
 801637c:	f3bf 8f4f 	dsb	sy
 8016380:	613b      	str	r3, [r7, #16]
}
 8016382:	bf00      	nop
 8016384:	e7fe      	b.n	8016384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016386:	4b3e      	ldr	r3, [pc, #248]	; (8016480 <xPortStartScheduler+0x120>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	4a3f      	ldr	r2, [pc, #252]	; (8016488 <xPortStartScheduler+0x128>)
 801638c:	4293      	cmp	r3, r2
 801638e:	d10a      	bne.n	80163a6 <xPortStartScheduler+0x46>
	__asm volatile
 8016390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016394:	f383 8811 	msr	BASEPRI, r3
 8016398:	f3bf 8f6f 	isb	sy
 801639c:	f3bf 8f4f 	dsb	sy
 80163a0:	60fb      	str	r3, [r7, #12]
}
 80163a2:	bf00      	nop
 80163a4:	e7fe      	b.n	80163a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80163a6:	4b39      	ldr	r3, [pc, #228]	; (801648c <xPortStartScheduler+0x12c>)
 80163a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80163aa:	697b      	ldr	r3, [r7, #20]
 80163ac:	781b      	ldrb	r3, [r3, #0]
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80163b2:	697b      	ldr	r3, [r7, #20]
 80163b4:	22ff      	movs	r2, #255	; 0xff
 80163b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80163b8:	697b      	ldr	r3, [r7, #20]
 80163ba:	781b      	ldrb	r3, [r3, #0]
 80163bc:	b2db      	uxtb	r3, r3
 80163be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80163c0:	78fb      	ldrb	r3, [r7, #3]
 80163c2:	b2db      	uxtb	r3, r3
 80163c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80163c8:	b2da      	uxtb	r2, r3
 80163ca:	4b31      	ldr	r3, [pc, #196]	; (8016490 <xPortStartScheduler+0x130>)
 80163cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80163ce:	4b31      	ldr	r3, [pc, #196]	; (8016494 <xPortStartScheduler+0x134>)
 80163d0:	2207      	movs	r2, #7
 80163d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80163d4:	e009      	b.n	80163ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80163d6:	4b2f      	ldr	r3, [pc, #188]	; (8016494 <xPortStartScheduler+0x134>)
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	3b01      	subs	r3, #1
 80163dc:	4a2d      	ldr	r2, [pc, #180]	; (8016494 <xPortStartScheduler+0x134>)
 80163de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80163e0:	78fb      	ldrb	r3, [r7, #3]
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	005b      	lsls	r3, r3, #1
 80163e6:	b2db      	uxtb	r3, r3
 80163e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80163ea:	78fb      	ldrb	r3, [r7, #3]
 80163ec:	b2db      	uxtb	r3, r3
 80163ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80163f2:	2b80      	cmp	r3, #128	; 0x80
 80163f4:	d0ef      	beq.n	80163d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80163f6:	4b27      	ldr	r3, [pc, #156]	; (8016494 <xPortStartScheduler+0x134>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	f1c3 0307 	rsb	r3, r3, #7
 80163fe:	2b04      	cmp	r3, #4
 8016400:	d00a      	beq.n	8016418 <xPortStartScheduler+0xb8>
	__asm volatile
 8016402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016406:	f383 8811 	msr	BASEPRI, r3
 801640a:	f3bf 8f6f 	isb	sy
 801640e:	f3bf 8f4f 	dsb	sy
 8016412:	60bb      	str	r3, [r7, #8]
}
 8016414:	bf00      	nop
 8016416:	e7fe      	b.n	8016416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016418:	4b1e      	ldr	r3, [pc, #120]	; (8016494 <xPortStartScheduler+0x134>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	021b      	lsls	r3, r3, #8
 801641e:	4a1d      	ldr	r2, [pc, #116]	; (8016494 <xPortStartScheduler+0x134>)
 8016420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016422:	4b1c      	ldr	r3, [pc, #112]	; (8016494 <xPortStartScheduler+0x134>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801642a:	4a1a      	ldr	r2, [pc, #104]	; (8016494 <xPortStartScheduler+0x134>)
 801642c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	b2da      	uxtb	r2, r3
 8016432:	697b      	ldr	r3, [r7, #20]
 8016434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016436:	4b18      	ldr	r3, [pc, #96]	; (8016498 <xPortStartScheduler+0x138>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	4a17      	ldr	r2, [pc, #92]	; (8016498 <xPortStartScheduler+0x138>)
 801643c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016442:	4b15      	ldr	r3, [pc, #84]	; (8016498 <xPortStartScheduler+0x138>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	4a14      	ldr	r2, [pc, #80]	; (8016498 <xPortStartScheduler+0x138>)
 8016448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801644c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801644e:	f000 f8dd 	bl	801660c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016452:	4b12      	ldr	r3, [pc, #72]	; (801649c <xPortStartScheduler+0x13c>)
 8016454:	2200      	movs	r2, #0
 8016456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016458:	f000 f8fc 	bl	8016654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801645c:	4b10      	ldr	r3, [pc, #64]	; (80164a0 <xPortStartScheduler+0x140>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	4a0f      	ldr	r2, [pc, #60]	; (80164a0 <xPortStartScheduler+0x140>)
 8016462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016468:	f7ff ff66 	bl	8016338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801646c:	f7ff f888 	bl	8015580 <vTaskSwitchContext>
	prvTaskExitError();
 8016470:	f7ff ff1e 	bl	80162b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016474:	2300      	movs	r3, #0
}
 8016476:	4618      	mov	r0, r3
 8016478:	3718      	adds	r7, #24
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}
 801647e:	bf00      	nop
 8016480:	e000ed00 	.word	0xe000ed00
 8016484:	410fc271 	.word	0x410fc271
 8016488:	410fc270 	.word	0x410fc270
 801648c:	e000e400 	.word	0xe000e400
 8016490:	20003414 	.word	0x20003414
 8016494:	20003418 	.word	0x20003418
 8016498:	e000ed20 	.word	0xe000ed20
 801649c:	2000012c 	.word	0x2000012c
 80164a0:	e000ef34 	.word	0xe000ef34

080164a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80164a4:	b480      	push	{r7}
 80164a6:	b083      	sub	sp, #12
 80164a8:	af00      	add	r7, sp, #0
	__asm volatile
 80164aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ae:	f383 8811 	msr	BASEPRI, r3
 80164b2:	f3bf 8f6f 	isb	sy
 80164b6:	f3bf 8f4f 	dsb	sy
 80164ba:	607b      	str	r3, [r7, #4]
}
 80164bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80164be:	4b0f      	ldr	r3, [pc, #60]	; (80164fc <vPortEnterCritical+0x58>)
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	3301      	adds	r3, #1
 80164c4:	4a0d      	ldr	r2, [pc, #52]	; (80164fc <vPortEnterCritical+0x58>)
 80164c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80164c8:	4b0c      	ldr	r3, [pc, #48]	; (80164fc <vPortEnterCritical+0x58>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	2b01      	cmp	r3, #1
 80164ce:	d10f      	bne.n	80164f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80164d0:	4b0b      	ldr	r3, [pc, #44]	; (8016500 <vPortEnterCritical+0x5c>)
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	b2db      	uxtb	r3, r3
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d00a      	beq.n	80164f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80164da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164de:	f383 8811 	msr	BASEPRI, r3
 80164e2:	f3bf 8f6f 	isb	sy
 80164e6:	f3bf 8f4f 	dsb	sy
 80164ea:	603b      	str	r3, [r7, #0]
}
 80164ec:	bf00      	nop
 80164ee:	e7fe      	b.n	80164ee <vPortEnterCritical+0x4a>
	}
}
 80164f0:	bf00      	nop
 80164f2:	370c      	adds	r7, #12
 80164f4:	46bd      	mov	sp, r7
 80164f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fa:	4770      	bx	lr
 80164fc:	2000012c 	.word	0x2000012c
 8016500:	e000ed04 	.word	0xe000ed04

08016504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016504:	b480      	push	{r7}
 8016506:	b083      	sub	sp, #12
 8016508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801650a:	4b12      	ldr	r3, [pc, #72]	; (8016554 <vPortExitCritical+0x50>)
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d10a      	bne.n	8016528 <vPortExitCritical+0x24>
	__asm volatile
 8016512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016516:	f383 8811 	msr	BASEPRI, r3
 801651a:	f3bf 8f6f 	isb	sy
 801651e:	f3bf 8f4f 	dsb	sy
 8016522:	607b      	str	r3, [r7, #4]
}
 8016524:	bf00      	nop
 8016526:	e7fe      	b.n	8016526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016528:	4b0a      	ldr	r3, [pc, #40]	; (8016554 <vPortExitCritical+0x50>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	3b01      	subs	r3, #1
 801652e:	4a09      	ldr	r2, [pc, #36]	; (8016554 <vPortExitCritical+0x50>)
 8016530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016532:	4b08      	ldr	r3, [pc, #32]	; (8016554 <vPortExitCritical+0x50>)
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d105      	bne.n	8016546 <vPortExitCritical+0x42>
 801653a:	2300      	movs	r3, #0
 801653c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801653e:	683b      	ldr	r3, [r7, #0]
 8016540:	f383 8811 	msr	BASEPRI, r3
}
 8016544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016546:	bf00      	nop
 8016548:	370c      	adds	r7, #12
 801654a:	46bd      	mov	sp, r7
 801654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016550:	4770      	bx	lr
 8016552:	bf00      	nop
 8016554:	2000012c 	.word	0x2000012c
	...

08016560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016560:	f3ef 8009 	mrs	r0, PSP
 8016564:	f3bf 8f6f 	isb	sy
 8016568:	4b15      	ldr	r3, [pc, #84]	; (80165c0 <pxCurrentTCBConst>)
 801656a:	681a      	ldr	r2, [r3, #0]
 801656c:	f01e 0f10 	tst.w	lr, #16
 8016570:	bf08      	it	eq
 8016572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801657a:	6010      	str	r0, [r2, #0]
 801657c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016584:	f380 8811 	msr	BASEPRI, r0
 8016588:	f3bf 8f4f 	dsb	sy
 801658c:	f3bf 8f6f 	isb	sy
 8016590:	f7fe fff6 	bl	8015580 <vTaskSwitchContext>
 8016594:	f04f 0000 	mov.w	r0, #0
 8016598:	f380 8811 	msr	BASEPRI, r0
 801659c:	bc09      	pop	{r0, r3}
 801659e:	6819      	ldr	r1, [r3, #0]
 80165a0:	6808      	ldr	r0, [r1, #0]
 80165a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a6:	f01e 0f10 	tst.w	lr, #16
 80165aa:	bf08      	it	eq
 80165ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80165b0:	f380 8809 	msr	PSP, r0
 80165b4:	f3bf 8f6f 	isb	sy
 80165b8:	4770      	bx	lr
 80165ba:	bf00      	nop
 80165bc:	f3af 8000 	nop.w

080165c0 <pxCurrentTCBConst>:
 80165c0:	20002de8 	.word	0x20002de8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80165c4:	bf00      	nop
 80165c6:	bf00      	nop

080165c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b082      	sub	sp, #8
 80165cc:	af00      	add	r7, sp, #0
	__asm volatile
 80165ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165d2:	f383 8811 	msr	BASEPRI, r3
 80165d6:	f3bf 8f6f 	isb	sy
 80165da:	f3bf 8f4f 	dsb	sy
 80165de:	607b      	str	r3, [r7, #4]
}
 80165e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80165e2:	f7fe ff0f 	bl	8015404 <xTaskIncrementTick>
 80165e6:	4603      	mov	r3, r0
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d003      	beq.n	80165f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80165ec:	4b06      	ldr	r3, [pc, #24]	; (8016608 <SysTick_Handler+0x40>)
 80165ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165f2:	601a      	str	r2, [r3, #0]
 80165f4:	2300      	movs	r3, #0
 80165f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	f383 8811 	msr	BASEPRI, r3
}
 80165fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016600:	bf00      	nop
 8016602:	3708      	adds	r7, #8
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}
 8016608:	e000ed04 	.word	0xe000ed04

0801660c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801660c:	b480      	push	{r7}
 801660e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016610:	4b0b      	ldr	r3, [pc, #44]	; (8016640 <vPortSetupTimerInterrupt+0x34>)
 8016612:	2200      	movs	r2, #0
 8016614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016616:	4b0b      	ldr	r3, [pc, #44]	; (8016644 <vPortSetupTimerInterrupt+0x38>)
 8016618:	2200      	movs	r2, #0
 801661a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801661c:	4b0a      	ldr	r3, [pc, #40]	; (8016648 <vPortSetupTimerInterrupt+0x3c>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	4a0a      	ldr	r2, [pc, #40]	; (801664c <vPortSetupTimerInterrupt+0x40>)
 8016622:	fba2 2303 	umull	r2, r3, r2, r3
 8016626:	099b      	lsrs	r3, r3, #6
 8016628:	4a09      	ldr	r2, [pc, #36]	; (8016650 <vPortSetupTimerInterrupt+0x44>)
 801662a:	3b01      	subs	r3, #1
 801662c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801662e:	4b04      	ldr	r3, [pc, #16]	; (8016640 <vPortSetupTimerInterrupt+0x34>)
 8016630:	2207      	movs	r2, #7
 8016632:	601a      	str	r2, [r3, #0]
}
 8016634:	bf00      	nop
 8016636:	46bd      	mov	sp, r7
 8016638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663c:	4770      	bx	lr
 801663e:	bf00      	nop
 8016640:	e000e010 	.word	0xe000e010
 8016644:	e000e018 	.word	0xe000e018
 8016648:	20000010 	.word	0x20000010
 801664c:	10624dd3 	.word	0x10624dd3
 8016650:	e000e014 	.word	0xe000e014

08016654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016664 <vPortEnableVFP+0x10>
 8016658:	6801      	ldr	r1, [r0, #0]
 801665a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801665e:	6001      	str	r1, [r0, #0]
 8016660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016662:	bf00      	nop
 8016664:	e000ed88 	.word	0xe000ed88

08016668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016668:	b480      	push	{r7}
 801666a:	b085      	sub	sp, #20
 801666c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801666e:	f3ef 8305 	mrs	r3, IPSR
 8016672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	2b0f      	cmp	r3, #15
 8016678:	d914      	bls.n	80166a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801667a:	4a17      	ldr	r2, [pc, #92]	; (80166d8 <vPortValidateInterruptPriority+0x70>)
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	4413      	add	r3, r2
 8016680:	781b      	ldrb	r3, [r3, #0]
 8016682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016684:	4b15      	ldr	r3, [pc, #84]	; (80166dc <vPortValidateInterruptPriority+0x74>)
 8016686:	781b      	ldrb	r3, [r3, #0]
 8016688:	7afa      	ldrb	r2, [r7, #11]
 801668a:	429a      	cmp	r2, r3
 801668c:	d20a      	bcs.n	80166a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016692:	f383 8811 	msr	BASEPRI, r3
 8016696:	f3bf 8f6f 	isb	sy
 801669a:	f3bf 8f4f 	dsb	sy
 801669e:	607b      	str	r3, [r7, #4]
}
 80166a0:	bf00      	nop
 80166a2:	e7fe      	b.n	80166a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80166a4:	4b0e      	ldr	r3, [pc, #56]	; (80166e0 <vPortValidateInterruptPriority+0x78>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80166ac:	4b0d      	ldr	r3, [pc, #52]	; (80166e4 <vPortValidateInterruptPriority+0x7c>)
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d90a      	bls.n	80166ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80166b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166b8:	f383 8811 	msr	BASEPRI, r3
 80166bc:	f3bf 8f6f 	isb	sy
 80166c0:	f3bf 8f4f 	dsb	sy
 80166c4:	603b      	str	r3, [r7, #0]
}
 80166c6:	bf00      	nop
 80166c8:	e7fe      	b.n	80166c8 <vPortValidateInterruptPriority+0x60>
	}
 80166ca:	bf00      	nop
 80166cc:	3714      	adds	r7, #20
 80166ce:	46bd      	mov	sp, r7
 80166d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d4:	4770      	bx	lr
 80166d6:	bf00      	nop
 80166d8:	e000e3f0 	.word	0xe000e3f0
 80166dc:	20003414 	.word	0x20003414
 80166e0:	e000ed0c 	.word	0xe000ed0c
 80166e4:	20003418 	.word	0x20003418

080166e8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b084      	sub	sp, #16
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80166f0:	2300      	movs	r3, #0
 80166f2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f003 0307 	and.w	r3, r3, #7
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d004      	beq.n	8016708 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f023 0307 	bic.w	r3, r3, #7
 8016704:	3308      	adds	r3, #8
 8016706:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8016708:	f7fe fdc0 	bl	801528c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 801670c:	4b16      	ldr	r3, [pc, #88]	; (8016768 <pvPortMalloc+0x80>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d105      	bne.n	8016720 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8016714:	4b15      	ldr	r3, [pc, #84]	; (801676c <pvPortMalloc+0x84>)
 8016716:	f023 0307 	bic.w	r3, r3, #7
 801671a:	461a      	mov	r2, r3
 801671c:	4b12      	ldr	r3, [pc, #72]	; (8016768 <pvPortMalloc+0x80>)
 801671e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8016720:	4b13      	ldr	r3, [pc, #76]	; (8016770 <pvPortMalloc+0x88>)
 8016722:	681a      	ldr	r2, [r3, #0]
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	4413      	add	r3, r2
 8016728:	f241 72f7 	movw	r2, #6135	; 0x17f7
 801672c:	4293      	cmp	r3, r2
 801672e:	d813      	bhi.n	8016758 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8016730:	4b0f      	ldr	r3, [pc, #60]	; (8016770 <pvPortMalloc+0x88>)
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	441a      	add	r2, r3
 8016738:	4b0d      	ldr	r3, [pc, #52]	; (8016770 <pvPortMalloc+0x88>)
 801673a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 801673c:	429a      	cmp	r2, r3
 801673e:	d90b      	bls.n	8016758 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8016740:	4b09      	ldr	r3, [pc, #36]	; (8016768 <pvPortMalloc+0x80>)
 8016742:	681a      	ldr	r2, [r3, #0]
 8016744:	4b0a      	ldr	r3, [pc, #40]	; (8016770 <pvPortMalloc+0x88>)
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	4413      	add	r3, r2
 801674a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 801674c:	4b08      	ldr	r3, [pc, #32]	; (8016770 <pvPortMalloc+0x88>)
 801674e:	681a      	ldr	r2, [r3, #0]
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	4413      	add	r3, r2
 8016754:	4a06      	ldr	r2, [pc, #24]	; (8016770 <pvPortMalloc+0x88>)
 8016756:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016758:	f7fe fda6 	bl	80152a8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 801675c:	68fb      	ldr	r3, [r7, #12]
}
 801675e:	4618      	mov	r0, r3
 8016760:	3710      	adds	r7, #16
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}
 8016766:	bf00      	nop
 8016768:	20004c20 	.word	0x20004c20
 801676c:	20003424 	.word	0x20003424
 8016770:	20004c1c 	.word	0x20004c1c

08016774 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016774:	b480      	push	{r7}
 8016776:	b085      	sub	sp, #20
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d00a      	beq.n	8016798 <vPortFree+0x24>
	__asm volatile
 8016782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016786:	f383 8811 	msr	BASEPRI, r3
 801678a:	f3bf 8f6f 	isb	sy
 801678e:	f3bf 8f4f 	dsb	sy
 8016792:	60fb      	str	r3, [r7, #12]
}
 8016794:	bf00      	nop
 8016796:	e7fe      	b.n	8016796 <vPortFree+0x22>
}
 8016798:	bf00      	nop
 801679a:	3714      	adds	r7, #20
 801679c:	46bd      	mov	sp, r7
 801679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a2:	4770      	bx	lr

080167a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167a4:	b480      	push	{r7}
 80167a6:	b083      	sub	sp, #12
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	4603      	mov	r3, r0
 80167ac:	6039      	str	r1, [r7, #0]
 80167ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80167b0:	683b      	ldr	r3, [r7, #0]
 80167b2:	2212      	movs	r2, #18
 80167b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80167b6:	4b03      	ldr	r3, [pc, #12]	; (80167c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80167b8:	4618      	mov	r0, r3
 80167ba:	370c      	adds	r7, #12
 80167bc:	46bd      	mov	sp, r7
 80167be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c2:	4770      	bx	lr
 80167c4:	2000014c 	.word	0x2000014c

080167c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167c8:	b480      	push	{r7}
 80167ca:	b083      	sub	sp, #12
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	4603      	mov	r3, r0
 80167d0:	6039      	str	r1, [r7, #0]
 80167d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80167d4:	683b      	ldr	r3, [r7, #0]
 80167d6:	2204      	movs	r2, #4
 80167d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80167da:	4b03      	ldr	r3, [pc, #12]	; (80167e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80167dc:	4618      	mov	r0, r3
 80167de:	370c      	adds	r7, #12
 80167e0:	46bd      	mov	sp, r7
 80167e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e6:	4770      	bx	lr
 80167e8:	20000160 	.word	0x20000160

080167ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b082      	sub	sp, #8
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	4603      	mov	r3, r0
 80167f4:	6039      	str	r1, [r7, #0]
 80167f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80167f8:	79fb      	ldrb	r3, [r7, #7]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d105      	bne.n	801680a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80167fe:	683a      	ldr	r2, [r7, #0]
 8016800:	4907      	ldr	r1, [pc, #28]	; (8016820 <USBD_FS_ProductStrDescriptor+0x34>)
 8016802:	4808      	ldr	r0, [pc, #32]	; (8016824 <USBD_FS_ProductStrDescriptor+0x38>)
 8016804:	f7fd f88d 	bl	8013922 <USBD_GetString>
 8016808:	e004      	b.n	8016814 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801680a:	683a      	ldr	r2, [r7, #0]
 801680c:	4904      	ldr	r1, [pc, #16]	; (8016820 <USBD_FS_ProductStrDescriptor+0x34>)
 801680e:	4805      	ldr	r0, [pc, #20]	; (8016824 <USBD_FS_ProductStrDescriptor+0x38>)
 8016810:	f7fd f887 	bl	8013922 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016814:	4b02      	ldr	r3, [pc, #8]	; (8016820 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016816:	4618      	mov	r0, r3
 8016818:	3708      	adds	r7, #8
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
 801681e:	bf00      	nop
 8016820:	20004c24 	.word	0x20004c24
 8016824:	08017b3c 	.word	0x08017b3c

08016828 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b082      	sub	sp, #8
 801682c:	af00      	add	r7, sp, #0
 801682e:	4603      	mov	r3, r0
 8016830:	6039      	str	r1, [r7, #0]
 8016832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016834:	683a      	ldr	r2, [r7, #0]
 8016836:	4904      	ldr	r1, [pc, #16]	; (8016848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016838:	4804      	ldr	r0, [pc, #16]	; (801684c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801683a:	f7fd f872 	bl	8013922 <USBD_GetString>
  return USBD_StrDesc;
 801683e:	4b02      	ldr	r3, [pc, #8]	; (8016848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016840:	4618      	mov	r0, r3
 8016842:	3708      	adds	r7, #8
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}
 8016848:	20004c24 	.word	0x20004c24
 801684c:	08017b54 	.word	0x08017b54

08016850 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	4603      	mov	r3, r0
 8016858:	6039      	str	r1, [r7, #0]
 801685a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801685c:	683b      	ldr	r3, [r7, #0]
 801685e:	221a      	movs	r2, #26
 8016860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016862:	f000 f843 	bl	80168ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016866:	4b02      	ldr	r3, [pc, #8]	; (8016870 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016868:	4618      	mov	r0, r3
 801686a:	3708      	adds	r7, #8
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}
 8016870:	20000164 	.word	0x20000164

08016874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b082      	sub	sp, #8
 8016878:	af00      	add	r7, sp, #0
 801687a:	4603      	mov	r3, r0
 801687c:	6039      	str	r1, [r7, #0]
 801687e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016880:	79fb      	ldrb	r3, [r7, #7]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d105      	bne.n	8016892 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016886:	683a      	ldr	r2, [r7, #0]
 8016888:	4907      	ldr	r1, [pc, #28]	; (80168a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801688a:	4808      	ldr	r0, [pc, #32]	; (80168ac <USBD_FS_ConfigStrDescriptor+0x38>)
 801688c:	f7fd f849 	bl	8013922 <USBD_GetString>
 8016890:	e004      	b.n	801689c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016892:	683a      	ldr	r2, [r7, #0]
 8016894:	4904      	ldr	r1, [pc, #16]	; (80168a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016896:	4805      	ldr	r0, [pc, #20]	; (80168ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8016898:	f7fd f843 	bl	8013922 <USBD_GetString>
  }
  return USBD_StrDesc;
 801689c:	4b02      	ldr	r3, [pc, #8]	; (80168a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801689e:	4618      	mov	r0, r3
 80168a0:	3708      	adds	r7, #8
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	20004c24 	.word	0x20004c24
 80168ac:	08017b68 	.word	0x08017b68

080168b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	4603      	mov	r3, r0
 80168b8:	6039      	str	r1, [r7, #0]
 80168ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80168bc:	79fb      	ldrb	r3, [r7, #7]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d105      	bne.n	80168ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80168c2:	683a      	ldr	r2, [r7, #0]
 80168c4:	4907      	ldr	r1, [pc, #28]	; (80168e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80168c6:	4808      	ldr	r0, [pc, #32]	; (80168e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80168c8:	f7fd f82b 	bl	8013922 <USBD_GetString>
 80168cc:	e004      	b.n	80168d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80168ce:	683a      	ldr	r2, [r7, #0]
 80168d0:	4904      	ldr	r1, [pc, #16]	; (80168e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80168d2:	4805      	ldr	r0, [pc, #20]	; (80168e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80168d4:	f7fd f825 	bl	8013922 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168d8:	4b02      	ldr	r3, [pc, #8]	; (80168e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80168da:	4618      	mov	r0, r3
 80168dc:	3708      	adds	r7, #8
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}
 80168e2:	bf00      	nop
 80168e4:	20004c24 	.word	0x20004c24
 80168e8:	08017b74 	.word	0x08017b74

080168ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b084      	sub	sp, #16
 80168f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80168f2:	4b0f      	ldr	r3, [pc, #60]	; (8016930 <Get_SerialNum+0x44>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80168f8:	4b0e      	ldr	r3, [pc, #56]	; (8016934 <Get_SerialNum+0x48>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80168fe:	4b0e      	ldr	r3, [pc, #56]	; (8016938 <Get_SerialNum+0x4c>)
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016904:	68fa      	ldr	r2, [r7, #12]
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	4413      	add	r3, r2
 801690a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d009      	beq.n	8016926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016912:	2208      	movs	r2, #8
 8016914:	4909      	ldr	r1, [pc, #36]	; (801693c <Get_SerialNum+0x50>)
 8016916:	68f8      	ldr	r0, [r7, #12]
 8016918:	f000 f814 	bl	8016944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801691c:	2204      	movs	r2, #4
 801691e:	4908      	ldr	r1, [pc, #32]	; (8016940 <Get_SerialNum+0x54>)
 8016920:	68b8      	ldr	r0, [r7, #8]
 8016922:	f000 f80f 	bl	8016944 <IntToUnicode>
  }
}
 8016926:	bf00      	nop
 8016928:	3710      	adds	r7, #16
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}
 801692e:	bf00      	nop
 8016930:	1ffff7ac 	.word	0x1ffff7ac
 8016934:	1ffff7b0 	.word	0x1ffff7b0
 8016938:	1ffff7b4 	.word	0x1ffff7b4
 801693c:	20000166 	.word	0x20000166
 8016940:	20000176 	.word	0x20000176

08016944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016944:	b480      	push	{r7}
 8016946:	b087      	sub	sp, #28
 8016948:	af00      	add	r7, sp, #0
 801694a:	60f8      	str	r0, [r7, #12]
 801694c:	60b9      	str	r1, [r7, #8]
 801694e:	4613      	mov	r3, r2
 8016950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016952:	2300      	movs	r3, #0
 8016954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016956:	2300      	movs	r3, #0
 8016958:	75fb      	strb	r3, [r7, #23]
 801695a:	e027      	b.n	80169ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	0f1b      	lsrs	r3, r3, #28
 8016960:	2b09      	cmp	r3, #9
 8016962:	d80b      	bhi.n	801697c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	0f1b      	lsrs	r3, r3, #28
 8016968:	b2da      	uxtb	r2, r3
 801696a:	7dfb      	ldrb	r3, [r7, #23]
 801696c:	005b      	lsls	r3, r3, #1
 801696e:	4619      	mov	r1, r3
 8016970:	68bb      	ldr	r3, [r7, #8]
 8016972:	440b      	add	r3, r1
 8016974:	3230      	adds	r2, #48	; 0x30
 8016976:	b2d2      	uxtb	r2, r2
 8016978:	701a      	strb	r2, [r3, #0]
 801697a:	e00a      	b.n	8016992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	0f1b      	lsrs	r3, r3, #28
 8016980:	b2da      	uxtb	r2, r3
 8016982:	7dfb      	ldrb	r3, [r7, #23]
 8016984:	005b      	lsls	r3, r3, #1
 8016986:	4619      	mov	r1, r3
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	440b      	add	r3, r1
 801698c:	3237      	adds	r2, #55	; 0x37
 801698e:	b2d2      	uxtb	r2, r2
 8016990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	011b      	lsls	r3, r3, #4
 8016996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016998:	7dfb      	ldrb	r3, [r7, #23]
 801699a:	005b      	lsls	r3, r3, #1
 801699c:	3301      	adds	r3, #1
 801699e:	68ba      	ldr	r2, [r7, #8]
 80169a0:	4413      	add	r3, r2
 80169a2:	2200      	movs	r2, #0
 80169a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80169a6:	7dfb      	ldrb	r3, [r7, #23]
 80169a8:	3301      	adds	r3, #1
 80169aa:	75fb      	strb	r3, [r7, #23]
 80169ac:	7dfa      	ldrb	r2, [r7, #23]
 80169ae:	79fb      	ldrb	r3, [r7, #7]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d3d3      	bcc.n	801695c <IntToUnicode+0x18>
  }
}
 80169b4:	bf00      	nop
 80169b6:	bf00      	nop
 80169b8:	371c      	adds	r7, #28
 80169ba:	46bd      	mov	sp, r7
 80169bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c0:	4770      	bx	lr
	...

080169c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b08a      	sub	sp, #40	; 0x28
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80169cc:	f107 0314 	add.w	r3, r7, #20
 80169d0:	2200      	movs	r2, #0
 80169d2:	601a      	str	r2, [r3, #0]
 80169d4:	605a      	str	r2, [r3, #4]
 80169d6:	609a      	str	r2, [r3, #8]
 80169d8:	60da      	str	r2, [r3, #12]
 80169da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	4a1f      	ldr	r2, [pc, #124]	; (8016a60 <HAL_PCD_MspInit+0x9c>)
 80169e2:	4293      	cmp	r3, r2
 80169e4:	d137      	bne.n	8016a56 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80169e6:	4b1f      	ldr	r3, [pc, #124]	; (8016a64 <HAL_PCD_MspInit+0xa0>)
 80169e8:	695b      	ldr	r3, [r3, #20]
 80169ea:	4a1e      	ldr	r2, [pc, #120]	; (8016a64 <HAL_PCD_MspInit+0xa0>)
 80169ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80169f0:	6153      	str	r3, [r2, #20]
 80169f2:	4b1c      	ldr	r3, [pc, #112]	; (8016a64 <HAL_PCD_MspInit+0xa0>)
 80169f4:	695b      	ldr	r3, [r3, #20]
 80169f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80169fa:	613b      	str	r3, [r7, #16]
 80169fc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80169fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016a04:	2302      	movs	r3, #2
 8016a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a08:	2300      	movs	r3, #0
 8016a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8016a0c:	2303      	movs	r3, #3
 8016a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8016a10:	230e      	movs	r3, #14
 8016a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016a14:	f107 0314 	add.w	r3, r7, #20
 8016a18:	4619      	mov	r1, r3
 8016a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016a1e:	f7f4 f8ad 	bl	800ab7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016a22:	4b10      	ldr	r3, [pc, #64]	; (8016a64 <HAL_PCD_MspInit+0xa0>)
 8016a24:	69db      	ldr	r3, [r3, #28]
 8016a26:	4a0f      	ldr	r2, [pc, #60]	; (8016a64 <HAL_PCD_MspInit+0xa0>)
 8016a28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016a2c:	61d3      	str	r3, [r2, #28]
 8016a2e:	4b0d      	ldr	r3, [pc, #52]	; (8016a64 <HAL_PCD_MspInit+0xa0>)
 8016a30:	69db      	ldr	r3, [r3, #28]
 8016a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016a36:	60fb      	str	r3, [r7, #12]
 8016a38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8016a3a:	4b0b      	ldr	r3, [pc, #44]	; (8016a68 <HAL_PCD_MspInit+0xa4>)
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	4a0a      	ldr	r2, [pc, #40]	; (8016a68 <HAL_PCD_MspInit+0xa4>)
 8016a40:	f043 0320 	orr.w	r3, r3, #32
 8016a44:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8016a46:	2200      	movs	r2, #0
 8016a48:	2105      	movs	r1, #5
 8016a4a:	204b      	movs	r0, #75	; 0x4b
 8016a4c:	f7f3 fdce 	bl	800a5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8016a50:	204b      	movs	r0, #75	; 0x4b
 8016a52:	f7f3 fde7 	bl	800a624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8016a56:	bf00      	nop
 8016a58:	3728      	adds	r7, #40	; 0x28
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	40005c00 	.word	0x40005c00
 8016a64:	40021000 	.word	0x40021000
 8016a68:	40010000 	.word	0x40010000

08016a6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8016a80:	4619      	mov	r1, r3
 8016a82:	4610      	mov	r0, r2
 8016a84:	f7fc f818 	bl	8012ab8 <USBD_LL_SetupStage>
}
 8016a88:	bf00      	nop
 8016a8a:	3708      	adds	r7, #8
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}

08016a90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b082      	sub	sp, #8
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
 8016a98:	460b      	mov	r3, r1
 8016a9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8016aa2:	78fa      	ldrb	r2, [r7, #3]
 8016aa4:	6879      	ldr	r1, [r7, #4]
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	009b      	lsls	r3, r3, #2
 8016aaa:	4413      	add	r3, r2
 8016aac:	00db      	lsls	r3, r3, #3
 8016aae:	440b      	add	r3, r1
 8016ab0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016ab4:	681a      	ldr	r2, [r3, #0]
 8016ab6:	78fb      	ldrb	r3, [r7, #3]
 8016ab8:	4619      	mov	r1, r3
 8016aba:	f7fc f84a 	bl	8012b52 <USBD_LL_DataOutStage>
}
 8016abe:	bf00      	nop
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}

08016ac6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ac6:	b580      	push	{r7, lr}
 8016ac8:	b082      	sub	sp, #8
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	6078      	str	r0, [r7, #4]
 8016ace:	460b      	mov	r3, r1
 8016ad0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8016ad8:	78fa      	ldrb	r2, [r7, #3]
 8016ada:	6879      	ldr	r1, [r7, #4]
 8016adc:	4613      	mov	r3, r2
 8016ade:	009b      	lsls	r3, r3, #2
 8016ae0:	4413      	add	r3, r2
 8016ae2:	00db      	lsls	r3, r3, #3
 8016ae4:	440b      	add	r3, r1
 8016ae6:	333c      	adds	r3, #60	; 0x3c
 8016ae8:	681a      	ldr	r2, [r3, #0]
 8016aea:	78fb      	ldrb	r3, [r7, #3]
 8016aec:	4619      	mov	r1, r3
 8016aee:	f7fc f8a1 	bl	8012c34 <USBD_LL_DataInStage>
}
 8016af2:	bf00      	nop
 8016af4:	3708      	adds	r7, #8
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}

08016afa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016afa:	b580      	push	{r7, lr}
 8016afc:	b082      	sub	sp, #8
 8016afe:	af00      	add	r7, sp, #0
 8016b00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f7fc f9b4 	bl	8012e76 <USBD_LL_SOF>
}
 8016b0e:	bf00      	nop
 8016b10:	3708      	adds	r7, #8
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}

08016b16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b16:	b580      	push	{r7, lr}
 8016b18:	b084      	sub	sp, #16
 8016b1a:	af00      	add	r7, sp, #0
 8016b1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b1e:	2301      	movs	r3, #1
 8016b20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	689b      	ldr	r3, [r3, #8]
 8016b26:	2b02      	cmp	r3, #2
 8016b28:	d001      	beq.n	8016b2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016b2a:	f7ec fe75 	bl	8003818 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8016b34:	7bfa      	ldrb	r2, [r7, #15]
 8016b36:	4611      	mov	r1, r2
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f7fc f961 	bl	8012e00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8016b44:	4618      	mov	r0, r3
 8016b46:	f7fc f91a 	bl	8012d7e <USBD_LL_Reset>
}
 8016b4a:	bf00      	nop
 8016b4c:	3710      	adds	r7, #16
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	bd80      	pop	{r7, pc}
	...

08016b54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b082      	sub	sp, #8
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8016b62:	4618      	mov	r0, r3
 8016b64:	f7fc f95c 	bl	8012e20 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	699b      	ldr	r3, [r3, #24]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d005      	beq.n	8016b7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b70:	4b04      	ldr	r3, [pc, #16]	; (8016b84 <HAL_PCD_SuspendCallback+0x30>)
 8016b72:	691b      	ldr	r3, [r3, #16]
 8016b74:	4a03      	ldr	r2, [pc, #12]	; (8016b84 <HAL_PCD_SuspendCallback+0x30>)
 8016b76:	f043 0306 	orr.w	r3, r3, #6
 8016b7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016b7c:	bf00      	nop
 8016b7e:	3708      	adds	r7, #8
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}
 8016b84:	e000ed00 	.word	0xe000ed00

08016b88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7fc f957 	bl	8012e4a <USBD_LL_Resume>
}
 8016b9c:	bf00      	nop
 8016b9e:	3708      	adds	r7, #8
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b082      	sub	sp, #8
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8016bac:	4a28      	ldr	r2, [pc, #160]	; (8016c50 <USBD_LL_Init+0xac>)
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	4a26      	ldr	r2, [pc, #152]	; (8016c50 <USBD_LL_Init+0xac>)
 8016bb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8016bbc:	4b24      	ldr	r3, [pc, #144]	; (8016c50 <USBD_LL_Init+0xac>)
 8016bbe:	4a25      	ldr	r2, [pc, #148]	; (8016c54 <USBD_LL_Init+0xb0>)
 8016bc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8016bc2:	4b23      	ldr	r3, [pc, #140]	; (8016c50 <USBD_LL_Init+0xac>)
 8016bc4:	2208      	movs	r2, #8
 8016bc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016bc8:	4b21      	ldr	r3, [pc, #132]	; (8016c50 <USBD_LL_Init+0xac>)
 8016bca:	2202      	movs	r2, #2
 8016bcc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016bce:	4b20      	ldr	r3, [pc, #128]	; (8016c50 <USBD_LL_Init+0xac>)
 8016bd0:	2202      	movs	r2, #2
 8016bd2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016bd4:	4b1e      	ldr	r3, [pc, #120]	; (8016c50 <USBD_LL_Init+0xac>)
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016bda:	4b1d      	ldr	r3, [pc, #116]	; (8016c50 <USBD_LL_Init+0xac>)
 8016bdc:	2200      	movs	r2, #0
 8016bde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016be0:	481b      	ldr	r0, [pc, #108]	; (8016c50 <USBD_LL_Init+0xac>)
 8016be2:	f7f5 f934 	bl	800be4e <HAL_PCD_Init>
 8016be6:	4603      	mov	r3, r0
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d001      	beq.n	8016bf0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8016bec:	f7ec fe14 	bl	8003818 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016bf6:	2318      	movs	r3, #24
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	2100      	movs	r1, #0
 8016bfc:	f7f6 fdcf 	bl	800d79e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016c06:	2358      	movs	r3, #88	; 0x58
 8016c08:	2200      	movs	r2, #0
 8016c0a:	2180      	movs	r1, #128	; 0x80
 8016c0c:	f7f6 fdc7 	bl	800d79e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016c16:	23c0      	movs	r3, #192	; 0xc0
 8016c18:	2200      	movs	r2, #0
 8016c1a:	2181      	movs	r1, #129	; 0x81
 8016c1c:	f7f6 fdbf 	bl	800d79e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016c26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	2101      	movs	r1, #1
 8016c2e:	f7f6 fdb6 	bl	800d79e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	2182      	movs	r1, #130	; 0x82
 8016c40:	f7f6 fdad 	bl	800d79e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8016c44:	2300      	movs	r3, #0
}
 8016c46:	4618      	mov	r0, r3
 8016c48:	3708      	adds	r7, #8
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bd80      	pop	{r7, pc}
 8016c4e:	bf00      	nop
 8016c50:	20004e24 	.word	0x20004e24
 8016c54:	40005c00 	.word	0x40005c00

08016c58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b084      	sub	sp, #16
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c60:	2300      	movs	r3, #0
 8016c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c64:	2300      	movs	r3, #0
 8016c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7f5 f9cb 	bl	800c00a <HAL_PCD_Start>
 8016c74:	4603      	mov	r3, r0
 8016c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c78:	7bfb      	ldrb	r3, [r7, #15]
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f000 f954 	bl	8016f28 <USBD_Get_USB_Status>
 8016c80:	4603      	mov	r3, r0
 8016c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c86:	4618      	mov	r0, r3
 8016c88:	3710      	adds	r7, #16
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}

08016c8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016c8e:	b580      	push	{r7, lr}
 8016c90:	b084      	sub	sp, #16
 8016c92:	af00      	add	r7, sp, #0
 8016c94:	6078      	str	r0, [r7, #4]
 8016c96:	4608      	mov	r0, r1
 8016c98:	4611      	mov	r1, r2
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	70fb      	strb	r3, [r7, #3]
 8016ca0:	460b      	mov	r3, r1
 8016ca2:	70bb      	strb	r3, [r7, #2]
 8016ca4:	4613      	mov	r3, r2
 8016ca6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ca8:	2300      	movs	r3, #0
 8016caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cac:	2300      	movs	r3, #0
 8016cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016cb6:	78bb      	ldrb	r3, [r7, #2]
 8016cb8:	883a      	ldrh	r2, [r7, #0]
 8016cba:	78f9      	ldrb	r1, [r7, #3]
 8016cbc:	f7f5 fae7 	bl	800c28e <HAL_PCD_EP_Open>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cc4:	7bfb      	ldrb	r3, [r7, #15]
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f000 f92e 	bl	8016f28 <USBD_Get_USB_Status>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016cd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3710      	adds	r7, #16
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}

08016cda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cda:	b580      	push	{r7, lr}
 8016cdc:	b084      	sub	sp, #16
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	6078      	str	r0, [r7, #4]
 8016ce2:	460b      	mov	r3, r1
 8016ce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cea:	2300      	movs	r3, #0
 8016cec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016cf4:	78fa      	ldrb	r2, [r7, #3]
 8016cf6:	4611      	mov	r1, r2
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f7f5 fb2e 	bl	800c35a <HAL_PCD_EP_Close>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d02:	7bfb      	ldrb	r3, [r7, #15]
 8016d04:	4618      	mov	r0, r3
 8016d06:	f000 f90f 	bl	8016f28 <USBD_Get_USB_Status>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3710      	adds	r7, #16
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b084      	sub	sp, #16
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
 8016d20:	460b      	mov	r3, r1
 8016d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d24:	2300      	movs	r3, #0
 8016d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d28:	2300      	movs	r3, #0
 8016d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d32:	78fa      	ldrb	r2, [r7, #3]
 8016d34:	4611      	mov	r1, r2
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7f5 fbef 	bl	800c51a <HAL_PCD_EP_SetStall>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d40:	7bfb      	ldrb	r3, [r7, #15]
 8016d42:	4618      	mov	r0, r3
 8016d44:	f000 f8f0 	bl	8016f28 <USBD_Get_USB_Status>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3710      	adds	r7, #16
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}

08016d56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d56:	b580      	push	{r7, lr}
 8016d58:	b084      	sub	sp, #16
 8016d5a:	af00      	add	r7, sp, #0
 8016d5c:	6078      	str	r0, [r7, #4]
 8016d5e:	460b      	mov	r3, r1
 8016d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d62:	2300      	movs	r3, #0
 8016d64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d66:	2300      	movs	r3, #0
 8016d68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d70:	78fa      	ldrb	r2, [r7, #3]
 8016d72:	4611      	mov	r1, r2
 8016d74:	4618      	mov	r0, r3
 8016d76:	f7f5 fc22 	bl	800c5be <HAL_PCD_EP_ClrStall>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d7e:	7bfb      	ldrb	r3, [r7, #15]
 8016d80:	4618      	mov	r0, r3
 8016d82:	f000 f8d1 	bl	8016f28 <USBD_Get_USB_Status>
 8016d86:	4603      	mov	r3, r0
 8016d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	3710      	adds	r7, #16
 8016d90:	46bd      	mov	sp, r7
 8016d92:	bd80      	pop	{r7, pc}

08016d94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d94:	b480      	push	{r7}
 8016d96:	b085      	sub	sp, #20
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
 8016d9c:	460b      	mov	r3, r1
 8016d9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016da6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	da0c      	bge.n	8016dca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016db0:	78fb      	ldrb	r3, [r7, #3]
 8016db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016db6:	68f9      	ldr	r1, [r7, #12]
 8016db8:	1c5a      	adds	r2, r3, #1
 8016dba:	4613      	mov	r3, r2
 8016dbc:	009b      	lsls	r3, r3, #2
 8016dbe:	4413      	add	r3, r2
 8016dc0:	00db      	lsls	r3, r3, #3
 8016dc2:	440b      	add	r3, r1
 8016dc4:	3302      	adds	r3, #2
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	e00b      	b.n	8016de2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016dca:	78fb      	ldrb	r3, [r7, #3]
 8016dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016dd0:	68f9      	ldr	r1, [r7, #12]
 8016dd2:	4613      	mov	r3, r2
 8016dd4:	009b      	lsls	r3, r3, #2
 8016dd6:	4413      	add	r3, r2
 8016dd8:	00db      	lsls	r3, r3, #3
 8016dda:	440b      	add	r3, r1
 8016ddc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8016de0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	3714      	adds	r7, #20
 8016de6:	46bd      	mov	sp, r7
 8016de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dec:	4770      	bx	lr

08016dee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016dee:	b580      	push	{r7, lr}
 8016df0:	b084      	sub	sp, #16
 8016df2:	af00      	add	r7, sp, #0
 8016df4:	6078      	str	r0, [r7, #4]
 8016df6:	460b      	mov	r3, r1
 8016df8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dfe:	2300      	movs	r3, #0
 8016e00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016e08:	78fa      	ldrb	r2, [r7, #3]
 8016e0a:	4611      	mov	r1, r2
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7f5 fa19 	bl	800c244 <HAL_PCD_SetAddress>
 8016e12:	4603      	mov	r3, r0
 8016e14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e16:	7bfb      	ldrb	r3, [r7, #15]
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f000 f885 	bl	8016f28 <USBD_Get_USB_Status>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e22:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3710      	adds	r7, #16
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}

08016e2c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b086      	sub	sp, #24
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	60f8      	str	r0, [r7, #12]
 8016e34:	607a      	str	r2, [r7, #4]
 8016e36:	461a      	mov	r2, r3
 8016e38:	460b      	mov	r3, r1
 8016e3a:	72fb      	strb	r3, [r7, #11]
 8016e3c:	4613      	mov	r3, r2
 8016e3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e40:	2300      	movs	r3, #0
 8016e42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e44:	2300      	movs	r3, #0
 8016e46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016e4e:	893b      	ldrh	r3, [r7, #8]
 8016e50:	7af9      	ldrb	r1, [r7, #11]
 8016e52:	687a      	ldr	r2, [r7, #4]
 8016e54:	f7f5 fb1e 	bl	800c494 <HAL_PCD_EP_Transmit>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e5c:	7dfb      	ldrb	r3, [r7, #23]
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f000 f862 	bl	8016f28 <USBD_Get_USB_Status>
 8016e64:	4603      	mov	r3, r0
 8016e66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016e68:	7dbb      	ldrb	r3, [r7, #22]
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	3718      	adds	r7, #24
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}

08016e72 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016e72:	b580      	push	{r7, lr}
 8016e74:	b086      	sub	sp, #24
 8016e76:	af00      	add	r7, sp, #0
 8016e78:	60f8      	str	r0, [r7, #12]
 8016e7a:	607a      	str	r2, [r7, #4]
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	460b      	mov	r3, r1
 8016e80:	72fb      	strb	r3, [r7, #11]
 8016e82:	4613      	mov	r3, r2
 8016e84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e86:	2300      	movs	r3, #0
 8016e88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016e94:	893b      	ldrh	r3, [r7, #8]
 8016e96:	7af9      	ldrb	r1, [r7, #11]
 8016e98:	687a      	ldr	r2, [r7, #4]
 8016e9a:	f7f5 faa6 	bl	800c3ea <HAL_PCD_EP_Receive>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ea2:	7dfb      	ldrb	r3, [r7, #23]
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f000 f83f 	bl	8016f28 <USBD_Get_USB_Status>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016eae:	7dbb      	ldrb	r3, [r7, #22]
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3718      	adds	r7, #24
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
 8016ec0:	460b      	mov	r3, r1
 8016ec2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016eca:	78fa      	ldrb	r2, [r7, #3]
 8016ecc:	4611      	mov	r1, r2
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7f5 fac8 	bl	800c464 <HAL_PCD_EP_GetRxCount>
 8016ed4:	4603      	mov	r3, r0
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3708      	adds	r7, #8
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
	...

08016ee0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016ee0:	b480      	push	{r7}
 8016ee2:	b083      	sub	sp, #12
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016ee8:	4b03      	ldr	r3, [pc, #12]	; (8016ef8 <USBD_static_malloc+0x18>)
}
 8016eea:	4618      	mov	r0, r3
 8016eec:	370c      	adds	r7, #12
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef4:	4770      	bx	lr
 8016ef6:	bf00      	nop
 8016ef8:	20005110 	.word	0x20005110

08016efc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016efc:	b480      	push	{r7}
 8016efe:	b083      	sub	sp, #12
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]

}
 8016f04:	bf00      	nop
 8016f06:	370c      	adds	r7, #12
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0e:	4770      	bx	lr

08016f10 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f10:	b480      	push	{r7}
 8016f12:	b083      	sub	sp, #12
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
 8016f18:	460b      	mov	r3, r1
 8016f1a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8016f1c:	bf00      	nop
 8016f1e:	370c      	adds	r7, #12
 8016f20:	46bd      	mov	sp, r7
 8016f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f26:	4770      	bx	lr

08016f28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016f28:	b480      	push	{r7}
 8016f2a:	b085      	sub	sp, #20
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	4603      	mov	r3, r0
 8016f30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f32:	2300      	movs	r3, #0
 8016f34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016f36:	79fb      	ldrb	r3, [r7, #7]
 8016f38:	2b03      	cmp	r3, #3
 8016f3a:	d817      	bhi.n	8016f6c <USBD_Get_USB_Status+0x44>
 8016f3c:	a201      	add	r2, pc, #4	; (adr r2, 8016f44 <USBD_Get_USB_Status+0x1c>)
 8016f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f42:	bf00      	nop
 8016f44:	08016f55 	.word	0x08016f55
 8016f48:	08016f5b 	.word	0x08016f5b
 8016f4c:	08016f61 	.word	0x08016f61
 8016f50:	08016f67 	.word	0x08016f67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016f54:	2300      	movs	r3, #0
 8016f56:	73fb      	strb	r3, [r7, #15]
    break;
 8016f58:	e00b      	b.n	8016f72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016f5a:	2302      	movs	r3, #2
 8016f5c:	73fb      	strb	r3, [r7, #15]
    break;
 8016f5e:	e008      	b.n	8016f72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016f60:	2301      	movs	r3, #1
 8016f62:	73fb      	strb	r3, [r7, #15]
    break;
 8016f64:	e005      	b.n	8016f72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016f66:	2302      	movs	r3, #2
 8016f68:	73fb      	strb	r3, [r7, #15]
    break;
 8016f6a:	e002      	b.n	8016f72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016f6c:	2302      	movs	r3, #2
 8016f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8016f70:	bf00      	nop
  }
  return usb_status;
 8016f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f74:	4618      	mov	r0, r3
 8016f76:	3714      	adds	r7, #20
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7e:	4770      	bx	lr

08016f80 <__errno>:
 8016f80:	4b01      	ldr	r3, [pc, #4]	; (8016f88 <__errno+0x8>)
 8016f82:	6818      	ldr	r0, [r3, #0]
 8016f84:	4770      	bx	lr
 8016f86:	bf00      	nop
 8016f88:	20000180 	.word	0x20000180

08016f8c <__libc_init_array>:
 8016f8c:	b570      	push	{r4, r5, r6, lr}
 8016f8e:	4d0d      	ldr	r5, [pc, #52]	; (8016fc4 <__libc_init_array+0x38>)
 8016f90:	4c0d      	ldr	r4, [pc, #52]	; (8016fc8 <__libc_init_array+0x3c>)
 8016f92:	1b64      	subs	r4, r4, r5
 8016f94:	10a4      	asrs	r4, r4, #2
 8016f96:	2600      	movs	r6, #0
 8016f98:	42a6      	cmp	r6, r4
 8016f9a:	d109      	bne.n	8016fb0 <__libc_init_array+0x24>
 8016f9c:	4d0b      	ldr	r5, [pc, #44]	; (8016fcc <__libc_init_array+0x40>)
 8016f9e:	4c0c      	ldr	r4, [pc, #48]	; (8016fd0 <__libc_init_array+0x44>)
 8016fa0:	f000 fd2c 	bl	80179fc <_init>
 8016fa4:	1b64      	subs	r4, r4, r5
 8016fa6:	10a4      	asrs	r4, r4, #2
 8016fa8:	2600      	movs	r6, #0
 8016faa:	42a6      	cmp	r6, r4
 8016fac:	d105      	bne.n	8016fba <__libc_init_array+0x2e>
 8016fae:	bd70      	pop	{r4, r5, r6, pc}
 8016fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fb4:	4798      	blx	r3
 8016fb6:	3601      	adds	r6, #1
 8016fb8:	e7ee      	b.n	8016f98 <__libc_init_array+0xc>
 8016fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fbe:	4798      	blx	r3
 8016fc0:	3601      	adds	r6, #1
 8016fc2:	e7f2      	b.n	8016faa <__libc_init_array+0x1e>
 8016fc4:	080181c8 	.word	0x080181c8
 8016fc8:	080181c8 	.word	0x080181c8
 8016fcc:	080181c8 	.word	0x080181c8
 8016fd0:	080181cc 	.word	0x080181cc

08016fd4 <memcpy>:
 8016fd4:	440a      	add	r2, r1
 8016fd6:	4291      	cmp	r1, r2
 8016fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8016fdc:	d100      	bne.n	8016fe0 <memcpy+0xc>
 8016fde:	4770      	bx	lr
 8016fe0:	b510      	push	{r4, lr}
 8016fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016fea:	4291      	cmp	r1, r2
 8016fec:	d1f9      	bne.n	8016fe2 <memcpy+0xe>
 8016fee:	bd10      	pop	{r4, pc}

08016ff0 <memset>:
 8016ff0:	4402      	add	r2, r0
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	4293      	cmp	r3, r2
 8016ff6:	d100      	bne.n	8016ffa <memset+0xa>
 8016ff8:	4770      	bx	lr
 8016ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8016ffe:	e7f9      	b.n	8016ff4 <memset+0x4>

08017000 <_puts_r>:
 8017000:	b570      	push	{r4, r5, r6, lr}
 8017002:	460e      	mov	r6, r1
 8017004:	4605      	mov	r5, r0
 8017006:	b118      	cbz	r0, 8017010 <_puts_r+0x10>
 8017008:	6983      	ldr	r3, [r0, #24]
 801700a:	b90b      	cbnz	r3, 8017010 <_puts_r+0x10>
 801700c:	f000 fa48 	bl	80174a0 <__sinit>
 8017010:	69ab      	ldr	r3, [r5, #24]
 8017012:	68ac      	ldr	r4, [r5, #8]
 8017014:	b913      	cbnz	r3, 801701c <_puts_r+0x1c>
 8017016:	4628      	mov	r0, r5
 8017018:	f000 fa42 	bl	80174a0 <__sinit>
 801701c:	4b2c      	ldr	r3, [pc, #176]	; (80170d0 <_puts_r+0xd0>)
 801701e:	429c      	cmp	r4, r3
 8017020:	d120      	bne.n	8017064 <_puts_r+0x64>
 8017022:	686c      	ldr	r4, [r5, #4]
 8017024:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017026:	07db      	lsls	r3, r3, #31
 8017028:	d405      	bmi.n	8017036 <_puts_r+0x36>
 801702a:	89a3      	ldrh	r3, [r4, #12]
 801702c:	0598      	lsls	r0, r3, #22
 801702e:	d402      	bmi.n	8017036 <_puts_r+0x36>
 8017030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017032:	f000 fad3 	bl	80175dc <__retarget_lock_acquire_recursive>
 8017036:	89a3      	ldrh	r3, [r4, #12]
 8017038:	0719      	lsls	r1, r3, #28
 801703a:	d51d      	bpl.n	8017078 <_puts_r+0x78>
 801703c:	6923      	ldr	r3, [r4, #16]
 801703e:	b1db      	cbz	r3, 8017078 <_puts_r+0x78>
 8017040:	3e01      	subs	r6, #1
 8017042:	68a3      	ldr	r3, [r4, #8]
 8017044:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017048:	3b01      	subs	r3, #1
 801704a:	60a3      	str	r3, [r4, #8]
 801704c:	bb39      	cbnz	r1, 801709e <_puts_r+0x9e>
 801704e:	2b00      	cmp	r3, #0
 8017050:	da38      	bge.n	80170c4 <_puts_r+0xc4>
 8017052:	4622      	mov	r2, r4
 8017054:	210a      	movs	r1, #10
 8017056:	4628      	mov	r0, r5
 8017058:	f000 f848 	bl	80170ec <__swbuf_r>
 801705c:	3001      	adds	r0, #1
 801705e:	d011      	beq.n	8017084 <_puts_r+0x84>
 8017060:	250a      	movs	r5, #10
 8017062:	e011      	b.n	8017088 <_puts_r+0x88>
 8017064:	4b1b      	ldr	r3, [pc, #108]	; (80170d4 <_puts_r+0xd4>)
 8017066:	429c      	cmp	r4, r3
 8017068:	d101      	bne.n	801706e <_puts_r+0x6e>
 801706a:	68ac      	ldr	r4, [r5, #8]
 801706c:	e7da      	b.n	8017024 <_puts_r+0x24>
 801706e:	4b1a      	ldr	r3, [pc, #104]	; (80170d8 <_puts_r+0xd8>)
 8017070:	429c      	cmp	r4, r3
 8017072:	bf08      	it	eq
 8017074:	68ec      	ldreq	r4, [r5, #12]
 8017076:	e7d5      	b.n	8017024 <_puts_r+0x24>
 8017078:	4621      	mov	r1, r4
 801707a:	4628      	mov	r0, r5
 801707c:	f000 f888 	bl	8017190 <__swsetup_r>
 8017080:	2800      	cmp	r0, #0
 8017082:	d0dd      	beq.n	8017040 <_puts_r+0x40>
 8017084:	f04f 35ff 	mov.w	r5, #4294967295
 8017088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801708a:	07da      	lsls	r2, r3, #31
 801708c:	d405      	bmi.n	801709a <_puts_r+0x9a>
 801708e:	89a3      	ldrh	r3, [r4, #12]
 8017090:	059b      	lsls	r3, r3, #22
 8017092:	d402      	bmi.n	801709a <_puts_r+0x9a>
 8017094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017096:	f000 faa2 	bl	80175de <__retarget_lock_release_recursive>
 801709a:	4628      	mov	r0, r5
 801709c:	bd70      	pop	{r4, r5, r6, pc}
 801709e:	2b00      	cmp	r3, #0
 80170a0:	da04      	bge.n	80170ac <_puts_r+0xac>
 80170a2:	69a2      	ldr	r2, [r4, #24]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	dc06      	bgt.n	80170b6 <_puts_r+0xb6>
 80170a8:	290a      	cmp	r1, #10
 80170aa:	d004      	beq.n	80170b6 <_puts_r+0xb6>
 80170ac:	6823      	ldr	r3, [r4, #0]
 80170ae:	1c5a      	adds	r2, r3, #1
 80170b0:	6022      	str	r2, [r4, #0]
 80170b2:	7019      	strb	r1, [r3, #0]
 80170b4:	e7c5      	b.n	8017042 <_puts_r+0x42>
 80170b6:	4622      	mov	r2, r4
 80170b8:	4628      	mov	r0, r5
 80170ba:	f000 f817 	bl	80170ec <__swbuf_r>
 80170be:	3001      	adds	r0, #1
 80170c0:	d1bf      	bne.n	8017042 <_puts_r+0x42>
 80170c2:	e7df      	b.n	8017084 <_puts_r+0x84>
 80170c4:	6823      	ldr	r3, [r4, #0]
 80170c6:	250a      	movs	r5, #10
 80170c8:	1c5a      	adds	r2, r3, #1
 80170ca:	6022      	str	r2, [r4, #0]
 80170cc:	701d      	strb	r5, [r3, #0]
 80170ce:	e7db      	b.n	8017088 <_puts_r+0x88>
 80170d0:	08018188 	.word	0x08018188
 80170d4:	080181a8 	.word	0x080181a8
 80170d8:	08018168 	.word	0x08018168

080170dc <puts>:
 80170dc:	4b02      	ldr	r3, [pc, #8]	; (80170e8 <puts+0xc>)
 80170de:	4601      	mov	r1, r0
 80170e0:	6818      	ldr	r0, [r3, #0]
 80170e2:	f7ff bf8d 	b.w	8017000 <_puts_r>
 80170e6:	bf00      	nop
 80170e8:	20000180 	.word	0x20000180

080170ec <__swbuf_r>:
 80170ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ee:	460e      	mov	r6, r1
 80170f0:	4614      	mov	r4, r2
 80170f2:	4605      	mov	r5, r0
 80170f4:	b118      	cbz	r0, 80170fe <__swbuf_r+0x12>
 80170f6:	6983      	ldr	r3, [r0, #24]
 80170f8:	b90b      	cbnz	r3, 80170fe <__swbuf_r+0x12>
 80170fa:	f000 f9d1 	bl	80174a0 <__sinit>
 80170fe:	4b21      	ldr	r3, [pc, #132]	; (8017184 <__swbuf_r+0x98>)
 8017100:	429c      	cmp	r4, r3
 8017102:	d12b      	bne.n	801715c <__swbuf_r+0x70>
 8017104:	686c      	ldr	r4, [r5, #4]
 8017106:	69a3      	ldr	r3, [r4, #24]
 8017108:	60a3      	str	r3, [r4, #8]
 801710a:	89a3      	ldrh	r3, [r4, #12]
 801710c:	071a      	lsls	r2, r3, #28
 801710e:	d52f      	bpl.n	8017170 <__swbuf_r+0x84>
 8017110:	6923      	ldr	r3, [r4, #16]
 8017112:	b36b      	cbz	r3, 8017170 <__swbuf_r+0x84>
 8017114:	6923      	ldr	r3, [r4, #16]
 8017116:	6820      	ldr	r0, [r4, #0]
 8017118:	1ac0      	subs	r0, r0, r3
 801711a:	6963      	ldr	r3, [r4, #20]
 801711c:	b2f6      	uxtb	r6, r6
 801711e:	4283      	cmp	r3, r0
 8017120:	4637      	mov	r7, r6
 8017122:	dc04      	bgt.n	801712e <__swbuf_r+0x42>
 8017124:	4621      	mov	r1, r4
 8017126:	4628      	mov	r0, r5
 8017128:	f000 f926 	bl	8017378 <_fflush_r>
 801712c:	bb30      	cbnz	r0, 801717c <__swbuf_r+0x90>
 801712e:	68a3      	ldr	r3, [r4, #8]
 8017130:	3b01      	subs	r3, #1
 8017132:	60a3      	str	r3, [r4, #8]
 8017134:	6823      	ldr	r3, [r4, #0]
 8017136:	1c5a      	adds	r2, r3, #1
 8017138:	6022      	str	r2, [r4, #0]
 801713a:	701e      	strb	r6, [r3, #0]
 801713c:	6963      	ldr	r3, [r4, #20]
 801713e:	3001      	adds	r0, #1
 8017140:	4283      	cmp	r3, r0
 8017142:	d004      	beq.n	801714e <__swbuf_r+0x62>
 8017144:	89a3      	ldrh	r3, [r4, #12]
 8017146:	07db      	lsls	r3, r3, #31
 8017148:	d506      	bpl.n	8017158 <__swbuf_r+0x6c>
 801714a:	2e0a      	cmp	r6, #10
 801714c:	d104      	bne.n	8017158 <__swbuf_r+0x6c>
 801714e:	4621      	mov	r1, r4
 8017150:	4628      	mov	r0, r5
 8017152:	f000 f911 	bl	8017378 <_fflush_r>
 8017156:	b988      	cbnz	r0, 801717c <__swbuf_r+0x90>
 8017158:	4638      	mov	r0, r7
 801715a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801715c:	4b0a      	ldr	r3, [pc, #40]	; (8017188 <__swbuf_r+0x9c>)
 801715e:	429c      	cmp	r4, r3
 8017160:	d101      	bne.n	8017166 <__swbuf_r+0x7a>
 8017162:	68ac      	ldr	r4, [r5, #8]
 8017164:	e7cf      	b.n	8017106 <__swbuf_r+0x1a>
 8017166:	4b09      	ldr	r3, [pc, #36]	; (801718c <__swbuf_r+0xa0>)
 8017168:	429c      	cmp	r4, r3
 801716a:	bf08      	it	eq
 801716c:	68ec      	ldreq	r4, [r5, #12]
 801716e:	e7ca      	b.n	8017106 <__swbuf_r+0x1a>
 8017170:	4621      	mov	r1, r4
 8017172:	4628      	mov	r0, r5
 8017174:	f000 f80c 	bl	8017190 <__swsetup_r>
 8017178:	2800      	cmp	r0, #0
 801717a:	d0cb      	beq.n	8017114 <__swbuf_r+0x28>
 801717c:	f04f 37ff 	mov.w	r7, #4294967295
 8017180:	e7ea      	b.n	8017158 <__swbuf_r+0x6c>
 8017182:	bf00      	nop
 8017184:	08018188 	.word	0x08018188
 8017188:	080181a8 	.word	0x080181a8
 801718c:	08018168 	.word	0x08018168

08017190 <__swsetup_r>:
 8017190:	4b32      	ldr	r3, [pc, #200]	; (801725c <__swsetup_r+0xcc>)
 8017192:	b570      	push	{r4, r5, r6, lr}
 8017194:	681d      	ldr	r5, [r3, #0]
 8017196:	4606      	mov	r6, r0
 8017198:	460c      	mov	r4, r1
 801719a:	b125      	cbz	r5, 80171a6 <__swsetup_r+0x16>
 801719c:	69ab      	ldr	r3, [r5, #24]
 801719e:	b913      	cbnz	r3, 80171a6 <__swsetup_r+0x16>
 80171a0:	4628      	mov	r0, r5
 80171a2:	f000 f97d 	bl	80174a0 <__sinit>
 80171a6:	4b2e      	ldr	r3, [pc, #184]	; (8017260 <__swsetup_r+0xd0>)
 80171a8:	429c      	cmp	r4, r3
 80171aa:	d10f      	bne.n	80171cc <__swsetup_r+0x3c>
 80171ac:	686c      	ldr	r4, [r5, #4]
 80171ae:	89a3      	ldrh	r3, [r4, #12]
 80171b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80171b4:	0719      	lsls	r1, r3, #28
 80171b6:	d42c      	bmi.n	8017212 <__swsetup_r+0x82>
 80171b8:	06dd      	lsls	r5, r3, #27
 80171ba:	d411      	bmi.n	80171e0 <__swsetup_r+0x50>
 80171bc:	2309      	movs	r3, #9
 80171be:	6033      	str	r3, [r6, #0]
 80171c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80171c4:	81a3      	strh	r3, [r4, #12]
 80171c6:	f04f 30ff 	mov.w	r0, #4294967295
 80171ca:	e03e      	b.n	801724a <__swsetup_r+0xba>
 80171cc:	4b25      	ldr	r3, [pc, #148]	; (8017264 <__swsetup_r+0xd4>)
 80171ce:	429c      	cmp	r4, r3
 80171d0:	d101      	bne.n	80171d6 <__swsetup_r+0x46>
 80171d2:	68ac      	ldr	r4, [r5, #8]
 80171d4:	e7eb      	b.n	80171ae <__swsetup_r+0x1e>
 80171d6:	4b24      	ldr	r3, [pc, #144]	; (8017268 <__swsetup_r+0xd8>)
 80171d8:	429c      	cmp	r4, r3
 80171da:	bf08      	it	eq
 80171dc:	68ec      	ldreq	r4, [r5, #12]
 80171de:	e7e6      	b.n	80171ae <__swsetup_r+0x1e>
 80171e0:	0758      	lsls	r0, r3, #29
 80171e2:	d512      	bpl.n	801720a <__swsetup_r+0x7a>
 80171e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171e6:	b141      	cbz	r1, 80171fa <__swsetup_r+0x6a>
 80171e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171ec:	4299      	cmp	r1, r3
 80171ee:	d002      	beq.n	80171f6 <__swsetup_r+0x66>
 80171f0:	4630      	mov	r0, r6
 80171f2:	f000 fa5b 	bl	80176ac <_free_r>
 80171f6:	2300      	movs	r3, #0
 80171f8:	6363      	str	r3, [r4, #52]	; 0x34
 80171fa:	89a3      	ldrh	r3, [r4, #12]
 80171fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017200:	81a3      	strh	r3, [r4, #12]
 8017202:	2300      	movs	r3, #0
 8017204:	6063      	str	r3, [r4, #4]
 8017206:	6923      	ldr	r3, [r4, #16]
 8017208:	6023      	str	r3, [r4, #0]
 801720a:	89a3      	ldrh	r3, [r4, #12]
 801720c:	f043 0308 	orr.w	r3, r3, #8
 8017210:	81a3      	strh	r3, [r4, #12]
 8017212:	6923      	ldr	r3, [r4, #16]
 8017214:	b94b      	cbnz	r3, 801722a <__swsetup_r+0x9a>
 8017216:	89a3      	ldrh	r3, [r4, #12]
 8017218:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801721c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017220:	d003      	beq.n	801722a <__swsetup_r+0x9a>
 8017222:	4621      	mov	r1, r4
 8017224:	4630      	mov	r0, r6
 8017226:	f000 fa01 	bl	801762c <__smakebuf_r>
 801722a:	89a0      	ldrh	r0, [r4, #12]
 801722c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017230:	f010 0301 	ands.w	r3, r0, #1
 8017234:	d00a      	beq.n	801724c <__swsetup_r+0xbc>
 8017236:	2300      	movs	r3, #0
 8017238:	60a3      	str	r3, [r4, #8]
 801723a:	6963      	ldr	r3, [r4, #20]
 801723c:	425b      	negs	r3, r3
 801723e:	61a3      	str	r3, [r4, #24]
 8017240:	6923      	ldr	r3, [r4, #16]
 8017242:	b943      	cbnz	r3, 8017256 <__swsetup_r+0xc6>
 8017244:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017248:	d1ba      	bne.n	80171c0 <__swsetup_r+0x30>
 801724a:	bd70      	pop	{r4, r5, r6, pc}
 801724c:	0781      	lsls	r1, r0, #30
 801724e:	bf58      	it	pl
 8017250:	6963      	ldrpl	r3, [r4, #20]
 8017252:	60a3      	str	r3, [r4, #8]
 8017254:	e7f4      	b.n	8017240 <__swsetup_r+0xb0>
 8017256:	2000      	movs	r0, #0
 8017258:	e7f7      	b.n	801724a <__swsetup_r+0xba>
 801725a:	bf00      	nop
 801725c:	20000180 	.word	0x20000180
 8017260:	08018188 	.word	0x08018188
 8017264:	080181a8 	.word	0x080181a8
 8017268:	08018168 	.word	0x08018168

0801726c <__sflush_r>:
 801726c:	898a      	ldrh	r2, [r1, #12]
 801726e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017272:	4605      	mov	r5, r0
 8017274:	0710      	lsls	r0, r2, #28
 8017276:	460c      	mov	r4, r1
 8017278:	d458      	bmi.n	801732c <__sflush_r+0xc0>
 801727a:	684b      	ldr	r3, [r1, #4]
 801727c:	2b00      	cmp	r3, #0
 801727e:	dc05      	bgt.n	801728c <__sflush_r+0x20>
 8017280:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017282:	2b00      	cmp	r3, #0
 8017284:	dc02      	bgt.n	801728c <__sflush_r+0x20>
 8017286:	2000      	movs	r0, #0
 8017288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801728c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801728e:	2e00      	cmp	r6, #0
 8017290:	d0f9      	beq.n	8017286 <__sflush_r+0x1a>
 8017292:	2300      	movs	r3, #0
 8017294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017298:	682f      	ldr	r7, [r5, #0]
 801729a:	602b      	str	r3, [r5, #0]
 801729c:	d032      	beq.n	8017304 <__sflush_r+0x98>
 801729e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80172a0:	89a3      	ldrh	r3, [r4, #12]
 80172a2:	075a      	lsls	r2, r3, #29
 80172a4:	d505      	bpl.n	80172b2 <__sflush_r+0x46>
 80172a6:	6863      	ldr	r3, [r4, #4]
 80172a8:	1ac0      	subs	r0, r0, r3
 80172aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172ac:	b10b      	cbz	r3, 80172b2 <__sflush_r+0x46>
 80172ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80172b0:	1ac0      	subs	r0, r0, r3
 80172b2:	2300      	movs	r3, #0
 80172b4:	4602      	mov	r2, r0
 80172b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172b8:	6a21      	ldr	r1, [r4, #32]
 80172ba:	4628      	mov	r0, r5
 80172bc:	47b0      	blx	r6
 80172be:	1c43      	adds	r3, r0, #1
 80172c0:	89a3      	ldrh	r3, [r4, #12]
 80172c2:	d106      	bne.n	80172d2 <__sflush_r+0x66>
 80172c4:	6829      	ldr	r1, [r5, #0]
 80172c6:	291d      	cmp	r1, #29
 80172c8:	d82c      	bhi.n	8017324 <__sflush_r+0xb8>
 80172ca:	4a2a      	ldr	r2, [pc, #168]	; (8017374 <__sflush_r+0x108>)
 80172cc:	40ca      	lsrs	r2, r1
 80172ce:	07d6      	lsls	r6, r2, #31
 80172d0:	d528      	bpl.n	8017324 <__sflush_r+0xb8>
 80172d2:	2200      	movs	r2, #0
 80172d4:	6062      	str	r2, [r4, #4]
 80172d6:	04d9      	lsls	r1, r3, #19
 80172d8:	6922      	ldr	r2, [r4, #16]
 80172da:	6022      	str	r2, [r4, #0]
 80172dc:	d504      	bpl.n	80172e8 <__sflush_r+0x7c>
 80172de:	1c42      	adds	r2, r0, #1
 80172e0:	d101      	bne.n	80172e6 <__sflush_r+0x7a>
 80172e2:	682b      	ldr	r3, [r5, #0]
 80172e4:	b903      	cbnz	r3, 80172e8 <__sflush_r+0x7c>
 80172e6:	6560      	str	r0, [r4, #84]	; 0x54
 80172e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172ea:	602f      	str	r7, [r5, #0]
 80172ec:	2900      	cmp	r1, #0
 80172ee:	d0ca      	beq.n	8017286 <__sflush_r+0x1a>
 80172f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172f4:	4299      	cmp	r1, r3
 80172f6:	d002      	beq.n	80172fe <__sflush_r+0x92>
 80172f8:	4628      	mov	r0, r5
 80172fa:	f000 f9d7 	bl	80176ac <_free_r>
 80172fe:	2000      	movs	r0, #0
 8017300:	6360      	str	r0, [r4, #52]	; 0x34
 8017302:	e7c1      	b.n	8017288 <__sflush_r+0x1c>
 8017304:	6a21      	ldr	r1, [r4, #32]
 8017306:	2301      	movs	r3, #1
 8017308:	4628      	mov	r0, r5
 801730a:	47b0      	blx	r6
 801730c:	1c41      	adds	r1, r0, #1
 801730e:	d1c7      	bne.n	80172a0 <__sflush_r+0x34>
 8017310:	682b      	ldr	r3, [r5, #0]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d0c4      	beq.n	80172a0 <__sflush_r+0x34>
 8017316:	2b1d      	cmp	r3, #29
 8017318:	d001      	beq.n	801731e <__sflush_r+0xb2>
 801731a:	2b16      	cmp	r3, #22
 801731c:	d101      	bne.n	8017322 <__sflush_r+0xb6>
 801731e:	602f      	str	r7, [r5, #0]
 8017320:	e7b1      	b.n	8017286 <__sflush_r+0x1a>
 8017322:	89a3      	ldrh	r3, [r4, #12]
 8017324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017328:	81a3      	strh	r3, [r4, #12]
 801732a:	e7ad      	b.n	8017288 <__sflush_r+0x1c>
 801732c:	690f      	ldr	r7, [r1, #16]
 801732e:	2f00      	cmp	r7, #0
 8017330:	d0a9      	beq.n	8017286 <__sflush_r+0x1a>
 8017332:	0793      	lsls	r3, r2, #30
 8017334:	680e      	ldr	r6, [r1, #0]
 8017336:	bf08      	it	eq
 8017338:	694b      	ldreq	r3, [r1, #20]
 801733a:	600f      	str	r7, [r1, #0]
 801733c:	bf18      	it	ne
 801733e:	2300      	movne	r3, #0
 8017340:	eba6 0807 	sub.w	r8, r6, r7
 8017344:	608b      	str	r3, [r1, #8]
 8017346:	f1b8 0f00 	cmp.w	r8, #0
 801734a:	dd9c      	ble.n	8017286 <__sflush_r+0x1a>
 801734c:	6a21      	ldr	r1, [r4, #32]
 801734e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017350:	4643      	mov	r3, r8
 8017352:	463a      	mov	r2, r7
 8017354:	4628      	mov	r0, r5
 8017356:	47b0      	blx	r6
 8017358:	2800      	cmp	r0, #0
 801735a:	dc06      	bgt.n	801736a <__sflush_r+0xfe>
 801735c:	89a3      	ldrh	r3, [r4, #12]
 801735e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017362:	81a3      	strh	r3, [r4, #12]
 8017364:	f04f 30ff 	mov.w	r0, #4294967295
 8017368:	e78e      	b.n	8017288 <__sflush_r+0x1c>
 801736a:	4407      	add	r7, r0
 801736c:	eba8 0800 	sub.w	r8, r8, r0
 8017370:	e7e9      	b.n	8017346 <__sflush_r+0xda>
 8017372:	bf00      	nop
 8017374:	20400001 	.word	0x20400001

08017378 <_fflush_r>:
 8017378:	b538      	push	{r3, r4, r5, lr}
 801737a:	690b      	ldr	r3, [r1, #16]
 801737c:	4605      	mov	r5, r0
 801737e:	460c      	mov	r4, r1
 8017380:	b913      	cbnz	r3, 8017388 <_fflush_r+0x10>
 8017382:	2500      	movs	r5, #0
 8017384:	4628      	mov	r0, r5
 8017386:	bd38      	pop	{r3, r4, r5, pc}
 8017388:	b118      	cbz	r0, 8017392 <_fflush_r+0x1a>
 801738a:	6983      	ldr	r3, [r0, #24]
 801738c:	b90b      	cbnz	r3, 8017392 <_fflush_r+0x1a>
 801738e:	f000 f887 	bl	80174a0 <__sinit>
 8017392:	4b14      	ldr	r3, [pc, #80]	; (80173e4 <_fflush_r+0x6c>)
 8017394:	429c      	cmp	r4, r3
 8017396:	d11b      	bne.n	80173d0 <_fflush_r+0x58>
 8017398:	686c      	ldr	r4, [r5, #4]
 801739a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d0ef      	beq.n	8017382 <_fflush_r+0xa>
 80173a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80173a4:	07d0      	lsls	r0, r2, #31
 80173a6:	d404      	bmi.n	80173b2 <_fflush_r+0x3a>
 80173a8:	0599      	lsls	r1, r3, #22
 80173aa:	d402      	bmi.n	80173b2 <_fflush_r+0x3a>
 80173ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173ae:	f000 f915 	bl	80175dc <__retarget_lock_acquire_recursive>
 80173b2:	4628      	mov	r0, r5
 80173b4:	4621      	mov	r1, r4
 80173b6:	f7ff ff59 	bl	801726c <__sflush_r>
 80173ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173bc:	07da      	lsls	r2, r3, #31
 80173be:	4605      	mov	r5, r0
 80173c0:	d4e0      	bmi.n	8017384 <_fflush_r+0xc>
 80173c2:	89a3      	ldrh	r3, [r4, #12]
 80173c4:	059b      	lsls	r3, r3, #22
 80173c6:	d4dd      	bmi.n	8017384 <_fflush_r+0xc>
 80173c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173ca:	f000 f908 	bl	80175de <__retarget_lock_release_recursive>
 80173ce:	e7d9      	b.n	8017384 <_fflush_r+0xc>
 80173d0:	4b05      	ldr	r3, [pc, #20]	; (80173e8 <_fflush_r+0x70>)
 80173d2:	429c      	cmp	r4, r3
 80173d4:	d101      	bne.n	80173da <_fflush_r+0x62>
 80173d6:	68ac      	ldr	r4, [r5, #8]
 80173d8:	e7df      	b.n	801739a <_fflush_r+0x22>
 80173da:	4b04      	ldr	r3, [pc, #16]	; (80173ec <_fflush_r+0x74>)
 80173dc:	429c      	cmp	r4, r3
 80173de:	bf08      	it	eq
 80173e0:	68ec      	ldreq	r4, [r5, #12]
 80173e2:	e7da      	b.n	801739a <_fflush_r+0x22>
 80173e4:	08018188 	.word	0x08018188
 80173e8:	080181a8 	.word	0x080181a8
 80173ec:	08018168 	.word	0x08018168

080173f0 <std>:
 80173f0:	2300      	movs	r3, #0
 80173f2:	b510      	push	{r4, lr}
 80173f4:	4604      	mov	r4, r0
 80173f6:	e9c0 3300 	strd	r3, r3, [r0]
 80173fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80173fe:	6083      	str	r3, [r0, #8]
 8017400:	8181      	strh	r1, [r0, #12]
 8017402:	6643      	str	r3, [r0, #100]	; 0x64
 8017404:	81c2      	strh	r2, [r0, #14]
 8017406:	6183      	str	r3, [r0, #24]
 8017408:	4619      	mov	r1, r3
 801740a:	2208      	movs	r2, #8
 801740c:	305c      	adds	r0, #92	; 0x5c
 801740e:	f7ff fdef 	bl	8016ff0 <memset>
 8017412:	4b05      	ldr	r3, [pc, #20]	; (8017428 <std+0x38>)
 8017414:	6263      	str	r3, [r4, #36]	; 0x24
 8017416:	4b05      	ldr	r3, [pc, #20]	; (801742c <std+0x3c>)
 8017418:	62a3      	str	r3, [r4, #40]	; 0x28
 801741a:	4b05      	ldr	r3, [pc, #20]	; (8017430 <std+0x40>)
 801741c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801741e:	4b05      	ldr	r3, [pc, #20]	; (8017434 <std+0x44>)
 8017420:	6224      	str	r4, [r4, #32]
 8017422:	6323      	str	r3, [r4, #48]	; 0x30
 8017424:	bd10      	pop	{r4, pc}
 8017426:	bf00      	nop
 8017428:	0801788d 	.word	0x0801788d
 801742c:	080178af 	.word	0x080178af
 8017430:	080178e7 	.word	0x080178e7
 8017434:	0801790b 	.word	0x0801790b

08017438 <_cleanup_r>:
 8017438:	4901      	ldr	r1, [pc, #4]	; (8017440 <_cleanup_r+0x8>)
 801743a:	f000 b8af 	b.w	801759c <_fwalk_reent>
 801743e:	bf00      	nop
 8017440:	08017379 	.word	0x08017379

08017444 <__sfmoreglue>:
 8017444:	b570      	push	{r4, r5, r6, lr}
 8017446:	2268      	movs	r2, #104	; 0x68
 8017448:	1e4d      	subs	r5, r1, #1
 801744a:	4355      	muls	r5, r2
 801744c:	460e      	mov	r6, r1
 801744e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017452:	f000 f997 	bl	8017784 <_malloc_r>
 8017456:	4604      	mov	r4, r0
 8017458:	b140      	cbz	r0, 801746c <__sfmoreglue+0x28>
 801745a:	2100      	movs	r1, #0
 801745c:	e9c0 1600 	strd	r1, r6, [r0]
 8017460:	300c      	adds	r0, #12
 8017462:	60a0      	str	r0, [r4, #8]
 8017464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017468:	f7ff fdc2 	bl	8016ff0 <memset>
 801746c:	4620      	mov	r0, r4
 801746e:	bd70      	pop	{r4, r5, r6, pc}

08017470 <__sfp_lock_acquire>:
 8017470:	4801      	ldr	r0, [pc, #4]	; (8017478 <__sfp_lock_acquire+0x8>)
 8017472:	f000 b8b3 	b.w	80175dc <__retarget_lock_acquire_recursive>
 8017476:	bf00      	nop
 8017478:	20005331 	.word	0x20005331

0801747c <__sfp_lock_release>:
 801747c:	4801      	ldr	r0, [pc, #4]	; (8017484 <__sfp_lock_release+0x8>)
 801747e:	f000 b8ae 	b.w	80175de <__retarget_lock_release_recursive>
 8017482:	bf00      	nop
 8017484:	20005331 	.word	0x20005331

08017488 <__sinit_lock_acquire>:
 8017488:	4801      	ldr	r0, [pc, #4]	; (8017490 <__sinit_lock_acquire+0x8>)
 801748a:	f000 b8a7 	b.w	80175dc <__retarget_lock_acquire_recursive>
 801748e:	bf00      	nop
 8017490:	20005332 	.word	0x20005332

08017494 <__sinit_lock_release>:
 8017494:	4801      	ldr	r0, [pc, #4]	; (801749c <__sinit_lock_release+0x8>)
 8017496:	f000 b8a2 	b.w	80175de <__retarget_lock_release_recursive>
 801749a:	bf00      	nop
 801749c:	20005332 	.word	0x20005332

080174a0 <__sinit>:
 80174a0:	b510      	push	{r4, lr}
 80174a2:	4604      	mov	r4, r0
 80174a4:	f7ff fff0 	bl	8017488 <__sinit_lock_acquire>
 80174a8:	69a3      	ldr	r3, [r4, #24]
 80174aa:	b11b      	cbz	r3, 80174b4 <__sinit+0x14>
 80174ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174b0:	f7ff bff0 	b.w	8017494 <__sinit_lock_release>
 80174b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80174b8:	6523      	str	r3, [r4, #80]	; 0x50
 80174ba:	4b13      	ldr	r3, [pc, #76]	; (8017508 <__sinit+0x68>)
 80174bc:	4a13      	ldr	r2, [pc, #76]	; (801750c <__sinit+0x6c>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80174c2:	42a3      	cmp	r3, r4
 80174c4:	bf04      	itt	eq
 80174c6:	2301      	moveq	r3, #1
 80174c8:	61a3      	streq	r3, [r4, #24]
 80174ca:	4620      	mov	r0, r4
 80174cc:	f000 f820 	bl	8017510 <__sfp>
 80174d0:	6060      	str	r0, [r4, #4]
 80174d2:	4620      	mov	r0, r4
 80174d4:	f000 f81c 	bl	8017510 <__sfp>
 80174d8:	60a0      	str	r0, [r4, #8]
 80174da:	4620      	mov	r0, r4
 80174dc:	f000 f818 	bl	8017510 <__sfp>
 80174e0:	2200      	movs	r2, #0
 80174e2:	60e0      	str	r0, [r4, #12]
 80174e4:	2104      	movs	r1, #4
 80174e6:	6860      	ldr	r0, [r4, #4]
 80174e8:	f7ff ff82 	bl	80173f0 <std>
 80174ec:	68a0      	ldr	r0, [r4, #8]
 80174ee:	2201      	movs	r2, #1
 80174f0:	2109      	movs	r1, #9
 80174f2:	f7ff ff7d 	bl	80173f0 <std>
 80174f6:	68e0      	ldr	r0, [r4, #12]
 80174f8:	2202      	movs	r2, #2
 80174fa:	2112      	movs	r1, #18
 80174fc:	f7ff ff78 	bl	80173f0 <std>
 8017500:	2301      	movs	r3, #1
 8017502:	61a3      	str	r3, [r4, #24]
 8017504:	e7d2      	b.n	80174ac <__sinit+0xc>
 8017506:	bf00      	nop
 8017508:	08018164 	.word	0x08018164
 801750c:	08017439 	.word	0x08017439

08017510 <__sfp>:
 8017510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017512:	4607      	mov	r7, r0
 8017514:	f7ff ffac 	bl	8017470 <__sfp_lock_acquire>
 8017518:	4b1e      	ldr	r3, [pc, #120]	; (8017594 <__sfp+0x84>)
 801751a:	681e      	ldr	r6, [r3, #0]
 801751c:	69b3      	ldr	r3, [r6, #24]
 801751e:	b913      	cbnz	r3, 8017526 <__sfp+0x16>
 8017520:	4630      	mov	r0, r6
 8017522:	f7ff ffbd 	bl	80174a0 <__sinit>
 8017526:	3648      	adds	r6, #72	; 0x48
 8017528:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801752c:	3b01      	subs	r3, #1
 801752e:	d503      	bpl.n	8017538 <__sfp+0x28>
 8017530:	6833      	ldr	r3, [r6, #0]
 8017532:	b30b      	cbz	r3, 8017578 <__sfp+0x68>
 8017534:	6836      	ldr	r6, [r6, #0]
 8017536:	e7f7      	b.n	8017528 <__sfp+0x18>
 8017538:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801753c:	b9d5      	cbnz	r5, 8017574 <__sfp+0x64>
 801753e:	4b16      	ldr	r3, [pc, #88]	; (8017598 <__sfp+0x88>)
 8017540:	60e3      	str	r3, [r4, #12]
 8017542:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017546:	6665      	str	r5, [r4, #100]	; 0x64
 8017548:	f000 f847 	bl	80175da <__retarget_lock_init_recursive>
 801754c:	f7ff ff96 	bl	801747c <__sfp_lock_release>
 8017550:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017554:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017558:	6025      	str	r5, [r4, #0]
 801755a:	61a5      	str	r5, [r4, #24]
 801755c:	2208      	movs	r2, #8
 801755e:	4629      	mov	r1, r5
 8017560:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017564:	f7ff fd44 	bl	8016ff0 <memset>
 8017568:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801756c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017570:	4620      	mov	r0, r4
 8017572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017574:	3468      	adds	r4, #104	; 0x68
 8017576:	e7d9      	b.n	801752c <__sfp+0x1c>
 8017578:	2104      	movs	r1, #4
 801757a:	4638      	mov	r0, r7
 801757c:	f7ff ff62 	bl	8017444 <__sfmoreglue>
 8017580:	4604      	mov	r4, r0
 8017582:	6030      	str	r0, [r6, #0]
 8017584:	2800      	cmp	r0, #0
 8017586:	d1d5      	bne.n	8017534 <__sfp+0x24>
 8017588:	f7ff ff78 	bl	801747c <__sfp_lock_release>
 801758c:	230c      	movs	r3, #12
 801758e:	603b      	str	r3, [r7, #0]
 8017590:	e7ee      	b.n	8017570 <__sfp+0x60>
 8017592:	bf00      	nop
 8017594:	08018164 	.word	0x08018164
 8017598:	ffff0001 	.word	0xffff0001

0801759c <_fwalk_reent>:
 801759c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175a0:	4606      	mov	r6, r0
 80175a2:	4688      	mov	r8, r1
 80175a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80175a8:	2700      	movs	r7, #0
 80175aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80175ae:	f1b9 0901 	subs.w	r9, r9, #1
 80175b2:	d505      	bpl.n	80175c0 <_fwalk_reent+0x24>
 80175b4:	6824      	ldr	r4, [r4, #0]
 80175b6:	2c00      	cmp	r4, #0
 80175b8:	d1f7      	bne.n	80175aa <_fwalk_reent+0xe>
 80175ba:	4638      	mov	r0, r7
 80175bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175c0:	89ab      	ldrh	r3, [r5, #12]
 80175c2:	2b01      	cmp	r3, #1
 80175c4:	d907      	bls.n	80175d6 <_fwalk_reent+0x3a>
 80175c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80175ca:	3301      	adds	r3, #1
 80175cc:	d003      	beq.n	80175d6 <_fwalk_reent+0x3a>
 80175ce:	4629      	mov	r1, r5
 80175d0:	4630      	mov	r0, r6
 80175d2:	47c0      	blx	r8
 80175d4:	4307      	orrs	r7, r0
 80175d6:	3568      	adds	r5, #104	; 0x68
 80175d8:	e7e9      	b.n	80175ae <_fwalk_reent+0x12>

080175da <__retarget_lock_init_recursive>:
 80175da:	4770      	bx	lr

080175dc <__retarget_lock_acquire_recursive>:
 80175dc:	4770      	bx	lr

080175de <__retarget_lock_release_recursive>:
 80175de:	4770      	bx	lr

080175e0 <__swhatbuf_r>:
 80175e0:	b570      	push	{r4, r5, r6, lr}
 80175e2:	460e      	mov	r6, r1
 80175e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175e8:	2900      	cmp	r1, #0
 80175ea:	b096      	sub	sp, #88	; 0x58
 80175ec:	4614      	mov	r4, r2
 80175ee:	461d      	mov	r5, r3
 80175f0:	da08      	bge.n	8017604 <__swhatbuf_r+0x24>
 80175f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80175f6:	2200      	movs	r2, #0
 80175f8:	602a      	str	r2, [r5, #0]
 80175fa:	061a      	lsls	r2, r3, #24
 80175fc:	d410      	bmi.n	8017620 <__swhatbuf_r+0x40>
 80175fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017602:	e00e      	b.n	8017622 <__swhatbuf_r+0x42>
 8017604:	466a      	mov	r2, sp
 8017606:	f000 f9a7 	bl	8017958 <_fstat_r>
 801760a:	2800      	cmp	r0, #0
 801760c:	dbf1      	blt.n	80175f2 <__swhatbuf_r+0x12>
 801760e:	9a01      	ldr	r2, [sp, #4]
 8017610:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017614:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017618:	425a      	negs	r2, r3
 801761a:	415a      	adcs	r2, r3
 801761c:	602a      	str	r2, [r5, #0]
 801761e:	e7ee      	b.n	80175fe <__swhatbuf_r+0x1e>
 8017620:	2340      	movs	r3, #64	; 0x40
 8017622:	2000      	movs	r0, #0
 8017624:	6023      	str	r3, [r4, #0]
 8017626:	b016      	add	sp, #88	; 0x58
 8017628:	bd70      	pop	{r4, r5, r6, pc}
	...

0801762c <__smakebuf_r>:
 801762c:	898b      	ldrh	r3, [r1, #12]
 801762e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017630:	079d      	lsls	r5, r3, #30
 8017632:	4606      	mov	r6, r0
 8017634:	460c      	mov	r4, r1
 8017636:	d507      	bpl.n	8017648 <__smakebuf_r+0x1c>
 8017638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801763c:	6023      	str	r3, [r4, #0]
 801763e:	6123      	str	r3, [r4, #16]
 8017640:	2301      	movs	r3, #1
 8017642:	6163      	str	r3, [r4, #20]
 8017644:	b002      	add	sp, #8
 8017646:	bd70      	pop	{r4, r5, r6, pc}
 8017648:	ab01      	add	r3, sp, #4
 801764a:	466a      	mov	r2, sp
 801764c:	f7ff ffc8 	bl	80175e0 <__swhatbuf_r>
 8017650:	9900      	ldr	r1, [sp, #0]
 8017652:	4605      	mov	r5, r0
 8017654:	4630      	mov	r0, r6
 8017656:	f000 f895 	bl	8017784 <_malloc_r>
 801765a:	b948      	cbnz	r0, 8017670 <__smakebuf_r+0x44>
 801765c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017660:	059a      	lsls	r2, r3, #22
 8017662:	d4ef      	bmi.n	8017644 <__smakebuf_r+0x18>
 8017664:	f023 0303 	bic.w	r3, r3, #3
 8017668:	f043 0302 	orr.w	r3, r3, #2
 801766c:	81a3      	strh	r3, [r4, #12]
 801766e:	e7e3      	b.n	8017638 <__smakebuf_r+0xc>
 8017670:	4b0d      	ldr	r3, [pc, #52]	; (80176a8 <__smakebuf_r+0x7c>)
 8017672:	62b3      	str	r3, [r6, #40]	; 0x28
 8017674:	89a3      	ldrh	r3, [r4, #12]
 8017676:	6020      	str	r0, [r4, #0]
 8017678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801767c:	81a3      	strh	r3, [r4, #12]
 801767e:	9b00      	ldr	r3, [sp, #0]
 8017680:	6163      	str	r3, [r4, #20]
 8017682:	9b01      	ldr	r3, [sp, #4]
 8017684:	6120      	str	r0, [r4, #16]
 8017686:	b15b      	cbz	r3, 80176a0 <__smakebuf_r+0x74>
 8017688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801768c:	4630      	mov	r0, r6
 801768e:	f000 f975 	bl	801797c <_isatty_r>
 8017692:	b128      	cbz	r0, 80176a0 <__smakebuf_r+0x74>
 8017694:	89a3      	ldrh	r3, [r4, #12]
 8017696:	f023 0303 	bic.w	r3, r3, #3
 801769a:	f043 0301 	orr.w	r3, r3, #1
 801769e:	81a3      	strh	r3, [r4, #12]
 80176a0:	89a0      	ldrh	r0, [r4, #12]
 80176a2:	4305      	orrs	r5, r0
 80176a4:	81a5      	strh	r5, [r4, #12]
 80176a6:	e7cd      	b.n	8017644 <__smakebuf_r+0x18>
 80176a8:	08017439 	.word	0x08017439

080176ac <_free_r>:
 80176ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176ae:	2900      	cmp	r1, #0
 80176b0:	d044      	beq.n	801773c <_free_r+0x90>
 80176b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80176b6:	9001      	str	r0, [sp, #4]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	f1a1 0404 	sub.w	r4, r1, #4
 80176be:	bfb8      	it	lt
 80176c0:	18e4      	addlt	r4, r4, r3
 80176c2:	f000 f97d 	bl	80179c0 <__malloc_lock>
 80176c6:	4a1e      	ldr	r2, [pc, #120]	; (8017740 <_free_r+0x94>)
 80176c8:	9801      	ldr	r0, [sp, #4]
 80176ca:	6813      	ldr	r3, [r2, #0]
 80176cc:	b933      	cbnz	r3, 80176dc <_free_r+0x30>
 80176ce:	6063      	str	r3, [r4, #4]
 80176d0:	6014      	str	r4, [r2, #0]
 80176d2:	b003      	add	sp, #12
 80176d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80176d8:	f000 b978 	b.w	80179cc <__malloc_unlock>
 80176dc:	42a3      	cmp	r3, r4
 80176de:	d908      	bls.n	80176f2 <_free_r+0x46>
 80176e0:	6825      	ldr	r5, [r4, #0]
 80176e2:	1961      	adds	r1, r4, r5
 80176e4:	428b      	cmp	r3, r1
 80176e6:	bf01      	itttt	eq
 80176e8:	6819      	ldreq	r1, [r3, #0]
 80176ea:	685b      	ldreq	r3, [r3, #4]
 80176ec:	1949      	addeq	r1, r1, r5
 80176ee:	6021      	streq	r1, [r4, #0]
 80176f0:	e7ed      	b.n	80176ce <_free_r+0x22>
 80176f2:	461a      	mov	r2, r3
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	b10b      	cbz	r3, 80176fc <_free_r+0x50>
 80176f8:	42a3      	cmp	r3, r4
 80176fa:	d9fa      	bls.n	80176f2 <_free_r+0x46>
 80176fc:	6811      	ldr	r1, [r2, #0]
 80176fe:	1855      	adds	r5, r2, r1
 8017700:	42a5      	cmp	r5, r4
 8017702:	d10b      	bne.n	801771c <_free_r+0x70>
 8017704:	6824      	ldr	r4, [r4, #0]
 8017706:	4421      	add	r1, r4
 8017708:	1854      	adds	r4, r2, r1
 801770a:	42a3      	cmp	r3, r4
 801770c:	6011      	str	r1, [r2, #0]
 801770e:	d1e0      	bne.n	80176d2 <_free_r+0x26>
 8017710:	681c      	ldr	r4, [r3, #0]
 8017712:	685b      	ldr	r3, [r3, #4]
 8017714:	6053      	str	r3, [r2, #4]
 8017716:	4421      	add	r1, r4
 8017718:	6011      	str	r1, [r2, #0]
 801771a:	e7da      	b.n	80176d2 <_free_r+0x26>
 801771c:	d902      	bls.n	8017724 <_free_r+0x78>
 801771e:	230c      	movs	r3, #12
 8017720:	6003      	str	r3, [r0, #0]
 8017722:	e7d6      	b.n	80176d2 <_free_r+0x26>
 8017724:	6825      	ldr	r5, [r4, #0]
 8017726:	1961      	adds	r1, r4, r5
 8017728:	428b      	cmp	r3, r1
 801772a:	bf04      	itt	eq
 801772c:	6819      	ldreq	r1, [r3, #0]
 801772e:	685b      	ldreq	r3, [r3, #4]
 8017730:	6063      	str	r3, [r4, #4]
 8017732:	bf04      	itt	eq
 8017734:	1949      	addeq	r1, r1, r5
 8017736:	6021      	streq	r1, [r4, #0]
 8017738:	6054      	str	r4, [r2, #4]
 801773a:	e7ca      	b.n	80176d2 <_free_r+0x26>
 801773c:	b003      	add	sp, #12
 801773e:	bd30      	pop	{r4, r5, pc}
 8017740:	20005334 	.word	0x20005334

08017744 <sbrk_aligned>:
 8017744:	b570      	push	{r4, r5, r6, lr}
 8017746:	4e0e      	ldr	r6, [pc, #56]	; (8017780 <sbrk_aligned+0x3c>)
 8017748:	460c      	mov	r4, r1
 801774a:	6831      	ldr	r1, [r6, #0]
 801774c:	4605      	mov	r5, r0
 801774e:	b911      	cbnz	r1, 8017756 <sbrk_aligned+0x12>
 8017750:	f000 f88c 	bl	801786c <_sbrk_r>
 8017754:	6030      	str	r0, [r6, #0]
 8017756:	4621      	mov	r1, r4
 8017758:	4628      	mov	r0, r5
 801775a:	f000 f887 	bl	801786c <_sbrk_r>
 801775e:	1c43      	adds	r3, r0, #1
 8017760:	d00a      	beq.n	8017778 <sbrk_aligned+0x34>
 8017762:	1cc4      	adds	r4, r0, #3
 8017764:	f024 0403 	bic.w	r4, r4, #3
 8017768:	42a0      	cmp	r0, r4
 801776a:	d007      	beq.n	801777c <sbrk_aligned+0x38>
 801776c:	1a21      	subs	r1, r4, r0
 801776e:	4628      	mov	r0, r5
 8017770:	f000 f87c 	bl	801786c <_sbrk_r>
 8017774:	3001      	adds	r0, #1
 8017776:	d101      	bne.n	801777c <sbrk_aligned+0x38>
 8017778:	f04f 34ff 	mov.w	r4, #4294967295
 801777c:	4620      	mov	r0, r4
 801777e:	bd70      	pop	{r4, r5, r6, pc}
 8017780:	20005338 	.word	0x20005338

08017784 <_malloc_r>:
 8017784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017788:	1ccd      	adds	r5, r1, #3
 801778a:	f025 0503 	bic.w	r5, r5, #3
 801778e:	3508      	adds	r5, #8
 8017790:	2d0c      	cmp	r5, #12
 8017792:	bf38      	it	cc
 8017794:	250c      	movcc	r5, #12
 8017796:	2d00      	cmp	r5, #0
 8017798:	4607      	mov	r7, r0
 801779a:	db01      	blt.n	80177a0 <_malloc_r+0x1c>
 801779c:	42a9      	cmp	r1, r5
 801779e:	d905      	bls.n	80177ac <_malloc_r+0x28>
 80177a0:	230c      	movs	r3, #12
 80177a2:	603b      	str	r3, [r7, #0]
 80177a4:	2600      	movs	r6, #0
 80177a6:	4630      	mov	r0, r6
 80177a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177ac:	4e2e      	ldr	r6, [pc, #184]	; (8017868 <_malloc_r+0xe4>)
 80177ae:	f000 f907 	bl	80179c0 <__malloc_lock>
 80177b2:	6833      	ldr	r3, [r6, #0]
 80177b4:	461c      	mov	r4, r3
 80177b6:	bb34      	cbnz	r4, 8017806 <_malloc_r+0x82>
 80177b8:	4629      	mov	r1, r5
 80177ba:	4638      	mov	r0, r7
 80177bc:	f7ff ffc2 	bl	8017744 <sbrk_aligned>
 80177c0:	1c43      	adds	r3, r0, #1
 80177c2:	4604      	mov	r4, r0
 80177c4:	d14d      	bne.n	8017862 <_malloc_r+0xde>
 80177c6:	6834      	ldr	r4, [r6, #0]
 80177c8:	4626      	mov	r6, r4
 80177ca:	2e00      	cmp	r6, #0
 80177cc:	d140      	bne.n	8017850 <_malloc_r+0xcc>
 80177ce:	6823      	ldr	r3, [r4, #0]
 80177d0:	4631      	mov	r1, r6
 80177d2:	4638      	mov	r0, r7
 80177d4:	eb04 0803 	add.w	r8, r4, r3
 80177d8:	f000 f848 	bl	801786c <_sbrk_r>
 80177dc:	4580      	cmp	r8, r0
 80177de:	d13a      	bne.n	8017856 <_malloc_r+0xd2>
 80177e0:	6821      	ldr	r1, [r4, #0]
 80177e2:	3503      	adds	r5, #3
 80177e4:	1a6d      	subs	r5, r5, r1
 80177e6:	f025 0503 	bic.w	r5, r5, #3
 80177ea:	3508      	adds	r5, #8
 80177ec:	2d0c      	cmp	r5, #12
 80177ee:	bf38      	it	cc
 80177f0:	250c      	movcc	r5, #12
 80177f2:	4629      	mov	r1, r5
 80177f4:	4638      	mov	r0, r7
 80177f6:	f7ff ffa5 	bl	8017744 <sbrk_aligned>
 80177fa:	3001      	adds	r0, #1
 80177fc:	d02b      	beq.n	8017856 <_malloc_r+0xd2>
 80177fe:	6823      	ldr	r3, [r4, #0]
 8017800:	442b      	add	r3, r5
 8017802:	6023      	str	r3, [r4, #0]
 8017804:	e00e      	b.n	8017824 <_malloc_r+0xa0>
 8017806:	6822      	ldr	r2, [r4, #0]
 8017808:	1b52      	subs	r2, r2, r5
 801780a:	d41e      	bmi.n	801784a <_malloc_r+0xc6>
 801780c:	2a0b      	cmp	r2, #11
 801780e:	d916      	bls.n	801783e <_malloc_r+0xba>
 8017810:	1961      	adds	r1, r4, r5
 8017812:	42a3      	cmp	r3, r4
 8017814:	6025      	str	r5, [r4, #0]
 8017816:	bf18      	it	ne
 8017818:	6059      	strne	r1, [r3, #4]
 801781a:	6863      	ldr	r3, [r4, #4]
 801781c:	bf08      	it	eq
 801781e:	6031      	streq	r1, [r6, #0]
 8017820:	5162      	str	r2, [r4, r5]
 8017822:	604b      	str	r3, [r1, #4]
 8017824:	4638      	mov	r0, r7
 8017826:	f104 060b 	add.w	r6, r4, #11
 801782a:	f000 f8cf 	bl	80179cc <__malloc_unlock>
 801782e:	f026 0607 	bic.w	r6, r6, #7
 8017832:	1d23      	adds	r3, r4, #4
 8017834:	1af2      	subs	r2, r6, r3
 8017836:	d0b6      	beq.n	80177a6 <_malloc_r+0x22>
 8017838:	1b9b      	subs	r3, r3, r6
 801783a:	50a3      	str	r3, [r4, r2]
 801783c:	e7b3      	b.n	80177a6 <_malloc_r+0x22>
 801783e:	6862      	ldr	r2, [r4, #4]
 8017840:	42a3      	cmp	r3, r4
 8017842:	bf0c      	ite	eq
 8017844:	6032      	streq	r2, [r6, #0]
 8017846:	605a      	strne	r2, [r3, #4]
 8017848:	e7ec      	b.n	8017824 <_malloc_r+0xa0>
 801784a:	4623      	mov	r3, r4
 801784c:	6864      	ldr	r4, [r4, #4]
 801784e:	e7b2      	b.n	80177b6 <_malloc_r+0x32>
 8017850:	4634      	mov	r4, r6
 8017852:	6876      	ldr	r6, [r6, #4]
 8017854:	e7b9      	b.n	80177ca <_malloc_r+0x46>
 8017856:	230c      	movs	r3, #12
 8017858:	603b      	str	r3, [r7, #0]
 801785a:	4638      	mov	r0, r7
 801785c:	f000 f8b6 	bl	80179cc <__malloc_unlock>
 8017860:	e7a1      	b.n	80177a6 <_malloc_r+0x22>
 8017862:	6025      	str	r5, [r4, #0]
 8017864:	e7de      	b.n	8017824 <_malloc_r+0xa0>
 8017866:	bf00      	nop
 8017868:	20005334 	.word	0x20005334

0801786c <_sbrk_r>:
 801786c:	b538      	push	{r3, r4, r5, lr}
 801786e:	4d06      	ldr	r5, [pc, #24]	; (8017888 <_sbrk_r+0x1c>)
 8017870:	2300      	movs	r3, #0
 8017872:	4604      	mov	r4, r0
 8017874:	4608      	mov	r0, r1
 8017876:	602b      	str	r3, [r5, #0]
 8017878:	f7ef f880 	bl	800697c <_sbrk>
 801787c:	1c43      	adds	r3, r0, #1
 801787e:	d102      	bne.n	8017886 <_sbrk_r+0x1a>
 8017880:	682b      	ldr	r3, [r5, #0]
 8017882:	b103      	cbz	r3, 8017886 <_sbrk_r+0x1a>
 8017884:	6023      	str	r3, [r4, #0]
 8017886:	bd38      	pop	{r3, r4, r5, pc}
 8017888:	2000533c 	.word	0x2000533c

0801788c <__sread>:
 801788c:	b510      	push	{r4, lr}
 801788e:	460c      	mov	r4, r1
 8017890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017894:	f000 f8a0 	bl	80179d8 <_read_r>
 8017898:	2800      	cmp	r0, #0
 801789a:	bfab      	itete	ge
 801789c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801789e:	89a3      	ldrhlt	r3, [r4, #12]
 80178a0:	181b      	addge	r3, r3, r0
 80178a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80178a6:	bfac      	ite	ge
 80178a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80178aa:	81a3      	strhlt	r3, [r4, #12]
 80178ac:	bd10      	pop	{r4, pc}

080178ae <__swrite>:
 80178ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178b2:	461f      	mov	r7, r3
 80178b4:	898b      	ldrh	r3, [r1, #12]
 80178b6:	05db      	lsls	r3, r3, #23
 80178b8:	4605      	mov	r5, r0
 80178ba:	460c      	mov	r4, r1
 80178bc:	4616      	mov	r6, r2
 80178be:	d505      	bpl.n	80178cc <__swrite+0x1e>
 80178c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178c4:	2302      	movs	r3, #2
 80178c6:	2200      	movs	r2, #0
 80178c8:	f000 f868 	bl	801799c <_lseek_r>
 80178cc:	89a3      	ldrh	r3, [r4, #12]
 80178ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80178d6:	81a3      	strh	r3, [r4, #12]
 80178d8:	4632      	mov	r2, r6
 80178da:	463b      	mov	r3, r7
 80178dc:	4628      	mov	r0, r5
 80178de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178e2:	f000 b817 	b.w	8017914 <_write_r>

080178e6 <__sseek>:
 80178e6:	b510      	push	{r4, lr}
 80178e8:	460c      	mov	r4, r1
 80178ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178ee:	f000 f855 	bl	801799c <_lseek_r>
 80178f2:	1c43      	adds	r3, r0, #1
 80178f4:	89a3      	ldrh	r3, [r4, #12]
 80178f6:	bf15      	itete	ne
 80178f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80178fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80178fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017902:	81a3      	strheq	r3, [r4, #12]
 8017904:	bf18      	it	ne
 8017906:	81a3      	strhne	r3, [r4, #12]
 8017908:	bd10      	pop	{r4, pc}

0801790a <__sclose>:
 801790a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801790e:	f000 b813 	b.w	8017938 <_close_r>
	...

08017914 <_write_r>:
 8017914:	b538      	push	{r3, r4, r5, lr}
 8017916:	4d07      	ldr	r5, [pc, #28]	; (8017934 <_write_r+0x20>)
 8017918:	4604      	mov	r4, r0
 801791a:	4608      	mov	r0, r1
 801791c:	4611      	mov	r1, r2
 801791e:	2200      	movs	r2, #0
 8017920:	602a      	str	r2, [r5, #0]
 8017922:	461a      	mov	r2, r3
 8017924:	f7eb f90a 	bl	8002b3c <_write>
 8017928:	1c43      	adds	r3, r0, #1
 801792a:	d102      	bne.n	8017932 <_write_r+0x1e>
 801792c:	682b      	ldr	r3, [r5, #0]
 801792e:	b103      	cbz	r3, 8017932 <_write_r+0x1e>
 8017930:	6023      	str	r3, [r4, #0]
 8017932:	bd38      	pop	{r3, r4, r5, pc}
 8017934:	2000533c 	.word	0x2000533c

08017938 <_close_r>:
 8017938:	b538      	push	{r3, r4, r5, lr}
 801793a:	4d06      	ldr	r5, [pc, #24]	; (8017954 <_close_r+0x1c>)
 801793c:	2300      	movs	r3, #0
 801793e:	4604      	mov	r4, r0
 8017940:	4608      	mov	r0, r1
 8017942:	602b      	str	r3, [r5, #0]
 8017944:	f7ee ffe5 	bl	8006912 <_close>
 8017948:	1c43      	adds	r3, r0, #1
 801794a:	d102      	bne.n	8017952 <_close_r+0x1a>
 801794c:	682b      	ldr	r3, [r5, #0]
 801794e:	b103      	cbz	r3, 8017952 <_close_r+0x1a>
 8017950:	6023      	str	r3, [r4, #0]
 8017952:	bd38      	pop	{r3, r4, r5, pc}
 8017954:	2000533c 	.word	0x2000533c

08017958 <_fstat_r>:
 8017958:	b538      	push	{r3, r4, r5, lr}
 801795a:	4d07      	ldr	r5, [pc, #28]	; (8017978 <_fstat_r+0x20>)
 801795c:	2300      	movs	r3, #0
 801795e:	4604      	mov	r4, r0
 8017960:	4608      	mov	r0, r1
 8017962:	4611      	mov	r1, r2
 8017964:	602b      	str	r3, [r5, #0]
 8017966:	f7ee ffe0 	bl	800692a <_fstat>
 801796a:	1c43      	adds	r3, r0, #1
 801796c:	d102      	bne.n	8017974 <_fstat_r+0x1c>
 801796e:	682b      	ldr	r3, [r5, #0]
 8017970:	b103      	cbz	r3, 8017974 <_fstat_r+0x1c>
 8017972:	6023      	str	r3, [r4, #0]
 8017974:	bd38      	pop	{r3, r4, r5, pc}
 8017976:	bf00      	nop
 8017978:	2000533c 	.word	0x2000533c

0801797c <_isatty_r>:
 801797c:	b538      	push	{r3, r4, r5, lr}
 801797e:	4d06      	ldr	r5, [pc, #24]	; (8017998 <_isatty_r+0x1c>)
 8017980:	2300      	movs	r3, #0
 8017982:	4604      	mov	r4, r0
 8017984:	4608      	mov	r0, r1
 8017986:	602b      	str	r3, [r5, #0]
 8017988:	f7ee ffdf 	bl	800694a <_isatty>
 801798c:	1c43      	adds	r3, r0, #1
 801798e:	d102      	bne.n	8017996 <_isatty_r+0x1a>
 8017990:	682b      	ldr	r3, [r5, #0]
 8017992:	b103      	cbz	r3, 8017996 <_isatty_r+0x1a>
 8017994:	6023      	str	r3, [r4, #0]
 8017996:	bd38      	pop	{r3, r4, r5, pc}
 8017998:	2000533c 	.word	0x2000533c

0801799c <_lseek_r>:
 801799c:	b538      	push	{r3, r4, r5, lr}
 801799e:	4d07      	ldr	r5, [pc, #28]	; (80179bc <_lseek_r+0x20>)
 80179a0:	4604      	mov	r4, r0
 80179a2:	4608      	mov	r0, r1
 80179a4:	4611      	mov	r1, r2
 80179a6:	2200      	movs	r2, #0
 80179a8:	602a      	str	r2, [r5, #0]
 80179aa:	461a      	mov	r2, r3
 80179ac:	f7ee ffd8 	bl	8006960 <_lseek>
 80179b0:	1c43      	adds	r3, r0, #1
 80179b2:	d102      	bne.n	80179ba <_lseek_r+0x1e>
 80179b4:	682b      	ldr	r3, [r5, #0]
 80179b6:	b103      	cbz	r3, 80179ba <_lseek_r+0x1e>
 80179b8:	6023      	str	r3, [r4, #0]
 80179ba:	bd38      	pop	{r3, r4, r5, pc}
 80179bc:	2000533c 	.word	0x2000533c

080179c0 <__malloc_lock>:
 80179c0:	4801      	ldr	r0, [pc, #4]	; (80179c8 <__malloc_lock+0x8>)
 80179c2:	f7ff be0b 	b.w	80175dc <__retarget_lock_acquire_recursive>
 80179c6:	bf00      	nop
 80179c8:	20005330 	.word	0x20005330

080179cc <__malloc_unlock>:
 80179cc:	4801      	ldr	r0, [pc, #4]	; (80179d4 <__malloc_unlock+0x8>)
 80179ce:	f7ff be06 	b.w	80175de <__retarget_lock_release_recursive>
 80179d2:	bf00      	nop
 80179d4:	20005330 	.word	0x20005330

080179d8 <_read_r>:
 80179d8:	b538      	push	{r3, r4, r5, lr}
 80179da:	4d07      	ldr	r5, [pc, #28]	; (80179f8 <_read_r+0x20>)
 80179dc:	4604      	mov	r4, r0
 80179de:	4608      	mov	r0, r1
 80179e0:	4611      	mov	r1, r2
 80179e2:	2200      	movs	r2, #0
 80179e4:	602a      	str	r2, [r5, #0]
 80179e6:	461a      	mov	r2, r3
 80179e8:	f7ee ff76 	bl	80068d8 <_read>
 80179ec:	1c43      	adds	r3, r0, #1
 80179ee:	d102      	bne.n	80179f6 <_read_r+0x1e>
 80179f0:	682b      	ldr	r3, [r5, #0]
 80179f2:	b103      	cbz	r3, 80179f6 <_read_r+0x1e>
 80179f4:	6023      	str	r3, [r4, #0]
 80179f6:	bd38      	pop	{r3, r4, r5, pc}
 80179f8:	2000533c 	.word	0x2000533c

080179fc <_init>:
 80179fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179fe:	bf00      	nop
 8017a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a02:	bc08      	pop	{r3}
 8017a04:	469e      	mov	lr, r3
 8017a06:	4770      	bx	lr

08017a08 <_fini>:
 8017a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a0a:	bf00      	nop
 8017a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a0e:	bc08      	pop	{r3}
 8017a10:	469e      	mov	lr, r3
 8017a12:	4770      	bx	lr
